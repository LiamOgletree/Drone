
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800bf88  0800bf88  0000cf88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c840  0800c840  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c840  0800c840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c848  0800c848  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c848  0800c848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c84c  0800c84c  0000d84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c850  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001272c  200001e8  0800ca38  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012914  0800ca38  0000e914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a4a  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048aa  00000000  00000000  0002ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00033510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012ff  00000000  00000000  00034db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d54  00000000  00000000  000360af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f42e  00000000  00000000  0005ce03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e02f6  00000000  00000000  0007c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c527  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  0015c56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00163d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf70 	.word	0x0800bf70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800bf70 	.word	0x0800bf70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <compute_compensations>:
/*      HELPER FUNCTIONS      */
/******************************/

static void compute_compensations(BMP388_COMP * const bmp388_comp,
                                  uint8_t const * const DATA)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    bmp388_comp->T1 =  (float)((DATA[2] << 8) | DATA[1]) * 256.f;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	3201      	adds	r2, #1
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80010cc <compute_compensations+0x1f4>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edc3 7a00 	vstr	s15, [r3]
    bmp388_comp->T2 =  (float)((DATA[4] << 8) | DATA[3]) / 1073741824.f;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	3203      	adds	r2, #3
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f20:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80010d0 <compute_compensations+0x1f8>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a01 	vstr	s15, [r3, #4]
    bmp388_comp->T3 =  (float)(DATA[5]) / 281474976710656.f;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3305      	adds	r3, #5
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f3c:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80010d4 <compute_compensations+0x1fc>
 8000f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edc3 7a02 	vstr	s15, [r3, #8]
    bmp388_comp->P1 = ((float)((DATA[7] << 8) | DATA[6]) - 16384.f) / 1048576.f;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	3206      	adds	r2, #6
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80010d8 <compute_compensations+0x200>
 8000f66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f6a:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80010dc <compute_compensations+0x204>
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edc3 7a03 	vstr	s15, [r3, #12]
    bmp388_comp->P2 = ((float)((DATA[9] << 8) | DATA[8]) - 16384.f) / 536870912.f;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3309      	adds	r3, #9
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	3208      	adds	r2, #8
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80010d8 <compute_compensations+0x200>
 8000f94:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f98:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80010e0 <compute_compensations+0x208>
 8000f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a04 	vstr	s15, [r3, #16]
    bmp388_comp->P3 =  (float)(DATA[10]) / 4294967296.f;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	330a      	adds	r3, #10
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb4:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80010e4 <compute_compensations+0x20c>
 8000fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edc3 7a05 	vstr	s15, [r3, #20]
    bmp388_comp->P4 =  (float)(DATA[11]) / 137438953472.f;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	330b      	adds	r3, #11
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80010e8 <compute_compensations+0x210>
 8000fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a06 	vstr	s15, [r3, #24]
    bmp388_comp->P5 =  (float)((DATA[13] << 8) | DATA[12]) * 8.f;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	330d      	adds	r3, #13
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	320c      	adds	r2, #12
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edc3 7a07 	vstr	s15, [r3, #28]
    bmp388_comp->P6 =  (float)((DATA[15] << 8) | DATA[14]) / 64.f;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	330f      	adds	r3, #15
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	320e      	adds	r2, #14
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	4313      	orrs	r3, r2
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80010ec <compute_compensations+0x214>
 8001020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edc3 7a08 	vstr	s15, [r3, #32]
    bmp388_comp->P7 =  (float)(DATA[16]) / 256.f;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3310      	adds	r3, #16
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001038:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80010cc <compute_compensations+0x1f4>
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bmp388_comp->P8 =  (float)(DATA[17]) / 32768.f;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3311      	adds	r3, #17
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001054:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80010f0 <compute_compensations+0x218>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    bmp388_comp->P9 =  (float)((DATA[19] << 8) | DATA[18]) / 281474976710656.f;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3313      	adds	r3, #19
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	3212      	adds	r2, #18
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	4313      	orrs	r3, r2
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80010d4 <compute_compensations+0x1fc>
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    bmp388_comp->P10 = (float)(DATA[20]) / 281474976710656.f;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3314      	adds	r3, #20
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001096:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010d4 <compute_compensations+0x1fc>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    bmp388_comp->P11 = (float)(DATA[21]) / 36893488147419103232.f;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3315      	adds	r3, #21
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80010f4 <compute_compensations+0x21c>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	43800000 	.word	0x43800000
 80010d0:	4e800000 	.word	0x4e800000
 80010d4:	57800000 	.word	0x57800000
 80010d8:	46800000 	.word	0x46800000
 80010dc:	49800000 	.word	0x49800000
 80010e0:	4e000000 	.word	0x4e000000
 80010e4:	4f800000 	.word	0x4f800000
 80010e8:	52000000 	.word	0x52000000
 80010ec:	42800000 	.word	0x42800000
 80010f0:	47000000 	.word	0x47000000
 80010f4:	60000000 	.word	0x60000000

080010f8 <compensate_temperature>:

static void compensate_temperature(BMP388 * const bmp388,
                                   BMP388_COMP const * const bmp388_comp,
                                   float const uncomp_temp)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
    float const partial_data1 = uncomp_temp - bmp388_comp->T1;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	edc7 7a05 	vstr	s15, [r7, #20]
    bmp388->temperature = \
        (partial_data1 * bmp388_comp->T2) + \
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	ed93 7a01 	vldr	s14, [r3, #4]
 800111e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001122:	ee27 7a27 	vmul.f32	s14, s14, s15
        (partial_data1 * partial_data1) * bmp388_comp->T3;
 8001126:	edd7 7a05 	vldr	s15, [r7, #20]
 800112a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	edd3 7a02 	vldr	s15, [r3, #8]
 8001134:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (partial_data1 * bmp388_comp->T2) + \
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
    bmp388->temperature = \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edc3 7a01 	vstr	s15, [r3, #4]
    // Set volatile temperature variable for compensate_pressure function.
    global_temperature = bmp388->temperature;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <compensate_temperature+0x60>)
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000204 	.word	0x20000204

0800115c <compensate_pressure>:

static void compensate_pressure(BMP388 * const bmp388,
                                BMP388_COMP const * const bmp388_comp,
                                float const uncomp_pres)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	ed87 0a01 	vstr	s0, [r7, #4]
    float const temperature = global_temperature;
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <compensate_pressure+0x138>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61fb      	str	r3, [r7, #28]
    float const partial_out1 = \
        (bmp388_comp->P5) + \
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	ed93 7a07 	vldr	s14, [r3, #28]
        (bmp388_comp->P6 * temperature) + \
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	edd3 6a08 	vldr	s13, [r3, #32]
 800117c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001180:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P5) + \
 8001184:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P7 * temperature * temperature) + \
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800118e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001192:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001196:	edd7 7a07 	vldr	s15, [r7, #28]
 800119a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P6 * temperature) + \
 800119e:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P8 * temperature * temperature * temperature);
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80011a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out1 = \
 80011c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c4:	edc7 7a06 	vstr	s15, [r7, #24]
    float const partial_out2 = uncomp_pres * \
        (bmp388_comp->P1 + \
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	ed93 7a03 	vldr	s14, [r3, #12]
        (bmp388_comp->P2 * temperature) + \
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80011d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P1 + \
 80011dc:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P2 * temperature) + \
 80011f6:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P4 * temperature * temperature * temperature));
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001200:	edd7 7a07 	vldr	s15, [r7, #28]
 8001204:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001208:	edd7 7a07 	vldr	s15, [r7, #28]
 800120c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001210:	edd7 7a07 	vldr	s15, [r7, #28]
 8001214:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 8001218:	ee77 7a27 	vadd.f32	s15, s14, s15
    float const partial_out2 = uncomp_pres * \
 800121c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	edc7 7a05 	vstr	s15, [r7, #20]
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8001228:	edd7 7a01 	vldr	s15, [r7, #4]
 800122c:	ee27 7aa7 	vmul.f32	s14, s15, s15
        (bmp388_comp->P9 + bmp388_comp->P10 * temperature) + \
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001244:	ee76 7aa7 	vadd.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8001248:	ee27 7a27 	vmul.f32	s14, s14, s15
        (uncomp_pres * uncomp_pres * uncomp_pres * bmp388_comp->P11);
 800124c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001250:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001254:	edd7 7a01 	vldr	s15, [r7, #4]
 8001258:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	edc7 7a04 	vstr	s15, [r7, #16]
    bmp388->pressure = partial_out1 + partial_out2 + partial_out3;
 800126e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001272:	edd7 7a05 	vldr	s15, [r7, #20]
 8001276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127a:	edd7 7a04 	vldr	s15, [r7, #16]
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001288:	bf00      	nop
 800128a:	3724      	adds	r7, #36	@ 0x24
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	20000204 	.word	0x20000204

08001298 <transmit_receive>:
static BMP388_STATUS transmit_receive(uint8_t const * const TX,
                                      uint8_t const NUM_TX,
                                      uint8_t * const RX,
                                      uint8_t const NUM_RX,
                                      SPI_HandleTypeDef * const hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	72fb      	strb	r3, [r7, #11]
 80012a8:	4613      	mov	r3, r2
 80012aa:	72bb      	strb	r3, [r7, #10]
    BMP388_STATUS status = BMP388_SUCCESS;
 80012ac:	2300      	movs	r3, #0
 80012ae:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80012b0:	f007 fb32 	bl	8008918 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ba:	4814      	ldr	r0, [pc, #80]	@ (800130c <transmit_receive+0x74>)
 80012bc:	f001 ffc8 	bl	8003250 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi,
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <transmit_receive+0x78>)
 80012c6:	68f9      	ldr	r1, [r7, #12]
 80012c8:	6a38      	ldr	r0, [r7, #32]
 80012ca:	f002 fe7e 	bl	8003fca <HAL_SPI_Transmit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <transmit_receive+0x42>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = BMP388_SPI_TX_FAILURE;
 80012d4:	2302      	movs	r3, #2
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e00b      	b.n	80012f2 <transmit_receive+0x5a>
    } else {
        if(HAL_SPI_Receive(hspi,
 80012da:	7abb      	ldrb	r3, [r7, #10]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <transmit_receive+0x78>)
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	6a38      	ldr	r0, [r7, #32]
 80012e4:	f002 ffb4 	bl	8004250 <HAL_SPI_Receive>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <transmit_receive+0x5a>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = BMP388_SPI_RX_FAILURE;
 80012ee:	2303      	movs	r3, #3
 80012f0:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <transmit_receive+0x74>)
 80012fa:	f001 ffa9 	bl	8003250 <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 80012fe:	f007 fb3d 	bl	800897c <vPortExitCritical>

    return status;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40020400 	.word	0x40020400
 8001310:	00186a00 	.word	0x00186a00

08001314 <BMP388_Setup>:
/*       CORE FUNCTIONS       */
/******************************/

BMP388_STATUS BMP388_Setup(BMP388_COMP * const bmp388_comp,
                           SPI_HandleTypeDef * const hspi)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af02      	add	r7, sp, #8
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    // If expected CHIP ID is not received, return failure.
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t RX[22] = {0};
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	821a      	strh	r2, [r3, #16]

    BMP388_STATUS status;

    status = transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8001338:	f107 020c 	add.w	r2, r7, #12
 800133c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2316      	movs	r3, #22
 8001346:	2101      	movs	r1, #1
 8001348:	f7ff ffa6 	bl	8001298 <transmit_receive>
 800134c:	4603      	mov	r3, r0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              RX,  sizeof(RX)  / sizeof(RX[0]), hspi);
    if(status != BMP388_SUCCESS) {
 8001352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <BMP388_Setup+0x4c>
        return status;
 800135a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800135e:	e028      	b.n	80013b2 <BMP388_Setup+0x9e>
    }

    if(RX[1] != 0x50) {
 8001360:	7b7b      	ldrb	r3, [r7, #13]
 8001362:	2b50      	cmp	r3, #80	@ 0x50
 8001364:	d001      	beq.n	800136a <BMP388_Setup+0x56>
        return BMP388_WHOAMI_FAILURE;
 8001366:	2304      	movs	r3, #4
 8001368:	e023      	b.n	80013b2 <BMP388_Setup+0x9e>
    }

    // Otherwise, configure the sensor and receive calibration values.
    uint8_t const TX2[] = {
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <BMP388_Setup+0xa8>)
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	4611      	mov	r1, r2
 8001374:	8019      	strh	r1, [r3, #0]
 8001376:	3302      	adds	r3, #2
 8001378:	0c12      	lsrs	r2, r2, #16
 800137a:	701a      	strb	r2, [r3, #0]
        WRITE | REG_PWR_CTRL,
        WRITE | ENABLE_PRESSURE | ENABLE_TEMPERATURE | NORMAL_MODE,
        READ  | REG_CALIBRATION
    };

    status = transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 800137c:	f107 020c 	add.w	r2, r7, #12
 8001380:	f107 0008 	add.w	r0, r7, #8
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2316      	movs	r3, #22
 800138a:	2103      	movs	r1, #3
 800138c:	f7ff ff84 	bl	8001298 <transmit_receive>
 8001390:	4603      	mov	r3, r0
 8001392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              RX,  sizeof(RX)  / sizeof(RX[0]), hspi);
    if(status != BMP388_SUCCESS) {
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <BMP388_Setup+0x90>
        return status;
 800139e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a2:	e006      	b.n	80013b2 <BMP388_Setup+0x9e>
    }

    compute_compensations(bmp388_comp, RX);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fd94 	bl	8000ed8 <compute_compensations>

    return BMP388_SUCCESS;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3728      	adds	r7, #40	@ 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800bf88 	.word	0x0800bf88

080013c0 <BMP388_ReadTemp>:

BMP388_STATUS BMP388_ReadTemp(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_TEMPERATURE };
 80013d0:	2387      	movs	r3, #135	@ 0x87
 80013d2:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80013d8:	f107 0214 	add.w	r2, r7, #20
 80013dc:	f107 0018 	add.w	r0, r7, #24
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2304      	movs	r3, #4
 80013e6:	2101      	movs	r1, #1
 80013e8:	f7ff ff56 	bl	8001298 <transmit_receive>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <BMP388_ReadTemp+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e01f      	b.n	8001436 <BMP388_ReadTemp+0x76>
    }

    float const uncomp_temp = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	4313      	orrs	r3, r2
 8001400:	7d7a      	ldrb	r2, [r7, #21]
 8001402:	4313      	orrs	r3, r2
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <BMP388_ReadTemp+0x68>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10a      	bne.n	8001430 <BMP388_ReadTemp+0x70>
    case BMP388_COMPENSATED:
        compensate_temperature(bmp388, bmp388_comp, uncomp_temp);
 800141a:	ed97 0a07 	vldr	s0, [r7, #28]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fe69 	bl	80010f8 <compensate_temperature>
        break;
 8001426:	e005      	b.n	8001434 <BMP388_ReadTemp+0x74>
    case BMP388_RAW:
        bmp388->temperature = uncomp_temp;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	605a      	str	r2, [r3, #4]
        break;
 800142e:	e001      	b.n	8001434 <BMP388_ReadTemp+0x74>
    default:
        return BMP388_FAILURE;
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <BMP388_ReadTemp+0x76>
    }

    return BMP388_SUCCESS;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <BMP388_ReadPres>:

BMP388_STATUS BMP388_ReadPres(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af02      	add	r7, sp, #8
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_PRESSURE };
 800144e:	2384      	movs	r3, #132	@ 0x84
 8001450:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 8001456:	f107 0214 	add.w	r2, r7, #20
 800145a:	f107 0018 	add.w	r0, r7, #24
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2304      	movs	r3, #4
 8001464:	2101      	movs	r1, #1
 8001466:	f7ff ff17 	bl	8001298 <transmit_receive>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <BMP388_ReadPres+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 8001470:	2301      	movs	r3, #1
 8001472:	e01f      	b.n	80014b4 <BMP388_ReadPres+0x76>
    }

    float const uncomp_pres = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	041a      	lsls	r2, r3, #16
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	4313      	orrs	r3, r2
 800147e:	7d7a      	ldrb	r2, [r7, #21]
 8001480:	4313      	orrs	r3, r2
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <BMP388_ReadPres+0x68>
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10a      	bne.n	80014ae <BMP388_ReadPres+0x70>
    case BMP388_COMPENSATED:
        compensate_pressure(bmp388, bmp388_comp, uncomp_pres);
 8001498:	ed97 0a07 	vldr	s0, [r7, #28]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff fe5c 	bl	800115c <compensate_pressure>
        break;
 80014a4:	e005      	b.n	80014b2 <BMP388_ReadPres+0x74>
    case BMP388_RAW:
        bmp388->pressure = uncomp_pres;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	605a      	str	r2, [r3, #4]
        break;
 80014ac:	e001      	b.n	80014b2 <BMP388_ReadPres+0x74>
    default:
        return BMP388_FAILURE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <BMP388_ReadPres+0x76>
    }

    return BMP388_SUCCESS;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <transmit_receive>:
static LIS2MDL_STATUS transmit_receive(uint8_t const * const TX,
                                       uint8_t const NUM_TX,
                                       uint8_t * const RX,
                                       uint8_t const NUM_RX,
                                       SPI_HandleTypeDef * const hspi)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	460b      	mov	r3, r1
 80014ca:	72fb      	strb	r3, [r7, #11]
 80014cc:	4613      	mov	r3, r2
 80014ce:	72bb      	strb	r3, [r7, #10]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80014d4:	f007 fa20 	bl	8008918 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <transmit_receive+0x70>)
 80014de:	f001 feb7 	bl	8003250 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi,
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <transmit_receive+0x74>)
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	6a38      	ldr	r0, [r7, #32]
 80014ec:	f002 fd6d 	bl	8003fca <HAL_SPI_Transmit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <transmit_receive+0x40>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LIS2MDL_FAILURE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
 80014fa:	e00b      	b.n	8001514 <transmit_receive+0x58>
    } else {
        if(HAL_SPI_Receive(hspi,
 80014fc:	7abb      	ldrb	r3, [r7, #10]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <transmit_receive+0x74>)
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	6a38      	ldr	r0, [r7, #32]
 8001506:	f002 fea3 	bl	8004250 <HAL_SPI_Receive>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <transmit_receive+0x58>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = LIS2MDL_FAILURE;
 8001510:	2301      	movs	r3, #1
 8001512:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2110      	movs	r1, #16
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <transmit_receive+0x70>)
 800151a:	f001 fe99 	bl	8003250 <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 800151e:	f007 fa2d 	bl	800897c <vPortExitCritical>

    return status;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020400 	.word	0x40020400
 8001530:	00186a00 	.word	0x00186a00

08001534 <transmit>:

static LIS2MDL_STATUS transmit(uint8_t const * const TX,
                               uint8_t const NUM_TX,
                               SPI_HandleTypeDef * const hspi)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	460b      	mov	r3, r1
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	72fb      	strb	r3, [r7, #11]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 8001542:	2300      	movs	r3, #0
 8001544:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001546:	f007 f9e7 	bl	8008918 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2110      	movs	r1, #16
 800154e:	480d      	ldr	r0, [pc, #52]	@ (8001584 <transmit+0x50>)
 8001550:	f001 fe7e 	bl	8003250 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi,
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <transmit+0x54>)
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f002 fd34 	bl	8003fca <HAL_SPI_Transmit>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <transmit+0x38>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LIS2MDL_FAILURE;
 8001568:	2301      	movs	r3, #1
 800156a:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2110      	movs	r1, #16
 8001570:	4804      	ldr	r0, [pc, #16]	@ (8001584 <transmit+0x50>)
 8001572:	f001 fe6d 	bl	8003250 <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8001576:	f007 fa01 	bl	800897c <vPortExitCritical>

    return status;
 800157a:	7dfb      	ldrb	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40020400 	.word	0x40020400
 8001588:	00186a00 	.word	0x00186a00

0800158c <LIS2MDL_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LIS2MDL_STATUS LIS2MDL_Setup(SPI_HandleTypeDef * const hspi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
    // Configure LIS2MDL sensor.
    uint8_t const TX1[] = {
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <LIS2MDL_Setup+0x5c>)
 8001596:	617b      	str	r3, [r7, #20]
        WRITE | ENABLE_SENSOR,
        WRITE | ENABLE_OFFSET,
        WRITE | SET_SPI_4WIRE
    };

    if(transmit(TX1, sizeof(TX1) / sizeof(TX1[0]), hspi)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	2104      	movs	r1, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffc7 	bl	8001534 <transmit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <LIS2MDL_Setup+0x24>
                != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e016      	b.n	80015de <LIS2MDL_Setup+0x52>
    }

    // If expected WHO_AM_I value is not received, return failure.
    uint8_t const TX2[] = { READ | REG_WHO_AM_I };
 80015b0:	23cf      	movs	r3, #207	@ 0xcf
 80015b2:	743b      	strb	r3, [r7, #16]
    uint8_t RX[1];

    if(transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 80015b4:	f107 020c 	add.w	r2, r7, #12
 80015b8:	f107 0010 	add.w	r0, r7, #16
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	2101      	movs	r1, #1
 80015c4:	f7ff ff7a 	bl	80014bc <transmit_receive>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <LIS2MDL_Setup+0x46>
                        RX,  sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e005      	b.n	80015de <LIS2MDL_Setup+0x52>
    }

    if(RX[0] != 0x40) return LIS2MDL_FAILURE;
 80015d2:	7b3b      	ldrb	r3, [r7, #12]
 80015d4:	2b40      	cmp	r3, #64	@ 0x40
 80015d6:	d001      	beq.n	80015dc <LIS2MDL_Setup+0x50>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <LIS2MDL_Setup+0x52>

    return LIS2MDL_SUCCESS;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	04028060 	.word	0x04028060

080015ec <LIS2MDL_Read>:

LIS2MDL_STATUS LIS2MDL_Read(LIS2MDL * const lis2mdl,
                            SPI_HandleTypeDef * const hspi)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
    uint8_t const TX[] = { READ | REG_OUTPUTS };
 80015f6:	23e8      	movs	r3, #232	@ 0xe8
 80015f8:	753b      	strb	r3, [r7, #20]
    uint8_t RX[6] = {0};
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	2300      	movs	r3, #0
 8001600:	823b      	strh	r3, [r7, #16]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	f107 0014 	add.w	r0, r7, #20
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2306      	movs	r3, #6
 8001610:	2101      	movs	r1, #1
 8001612:	f7ff ff53 	bl	80014bc <transmit_receive>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <LIS2MDL_Read+0x34>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 800161c:	2301      	movs	r3, #1
 800161e:	e034      	b.n	800168a <LIS2MDL_Read+0x9e>
    }

    lis2mdl->X = (int16_t)(((uint16_t)RX[1] << 8) | RX[0]);
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21a      	sxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	801a      	strh	r2, [r3, #0]
    lis2mdl->Y = (int16_t)(((uint16_t)RX[3] << 8) | RX[2]);
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	805a      	strh	r2, [r3, #2]
    lis2mdl->Z = (int16_t)(((uint16_t)RX[5] << 8) | RX[4]);
 8001644:	7c7b      	ldrb	r3, [r7, #17]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7c3b      	ldrb	r3, [r7, #16]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	809a      	strh	r2, [r3, #4]
    lis2mdl->heading = atan2f((float)lis2mdl->Y, (float)lis2mdl->X);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	ee07 3a10 	vmov	s14, r3
 800166e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001672:	eef0 0a47 	vmov.f32	s1, s14
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	f00a fafb 	bl	800bc74 <atan2f>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]

    return LIS2MDL_SUCCESS;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <transmit_receive>:
static LSM6DSO32_STATUS transmit_receive(uint8_t const * const TX,
                                         uint8_t const NUM_TX,
                                         uint8_t * const RX,
                                         uint8_t const NUM_RX,
                                         SPI_HandleTypeDef * const hspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	461a      	mov	r2, r3
 80016a0:	460b      	mov	r3, r1
 80016a2:	72fb      	strb	r3, [r7, #11]
 80016a4:	4613      	mov	r3, r2
 80016a6:	72bb      	strb	r3, [r7, #10]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 80016a8:	2300      	movs	r3, #0
 80016aa:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80016ac:	f007 f934 	bl	8008918 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b6:	4814      	ldr	r0, [pc, #80]	@ (8001708 <transmit_receive+0x74>)
 80016b8:	f001 fdca 	bl	8003250 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi,
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <transmit_receive+0x78>)
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	6a38      	ldr	r0, [r7, #32]
 80016c6:	f002 fc80 	bl	8003fca <HAL_SPI_Transmit>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <transmit_receive+0x42>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LSM6DSO32_FAILURE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	75fb      	strb	r3, [r7, #23]
 80016d4:	e00b      	b.n	80016ee <transmit_receive+0x5a>
    } else {
        if(HAL_SPI_Receive(hspi,
 80016d6:	7abb      	ldrb	r3, [r7, #10]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <transmit_receive+0x78>)
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6a38      	ldr	r0, [r7, #32]
 80016e0:	f002 fdb6 	bl	8004250 <HAL_SPI_Receive>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <transmit_receive+0x5a>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = LSM6DSO32_FAILURE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <transmit_receive+0x74>)
 80016f6:	f001 fdab 	bl	8003250 <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 80016fa:	f007 f93f 	bl	800897c <vPortExitCritical>

    return status;
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40020000 	.word	0x40020000
 800170c:	00186a00 	.word	0x00186a00

08001710 <transmit>:

static LSM6DSO32_STATUS transmit(uint8_t const * const TX,
                                 uint8_t const NUM_TX,
                                 SPI_HandleTypeDef * const hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	460b      	mov	r3, r1
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	72fb      	strb	r3, [r7, #11]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001722:	f007 f8f9 	bl	8008918 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172c:	480d      	ldr	r0, [pc, #52]	@ (8001764 <transmit+0x54>)
 800172e:	f001 fd8f 	bl	8003250 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi,
 8001732:	7afb      	ldrb	r3, [r7, #11]
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <transmit+0x58>)
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f002 fc45 	bl	8003fca <HAL_SPI_Transmit>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <transmit+0x3a>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LSM6DSO32_FAILURE;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <transmit+0x54>)
 8001752:	f001 fd7d 	bl	8003250 <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8001756:	f007 f911 	bl	800897c <vPortExitCritical>

    return status;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40020000 	.word	0x40020000
 8001768:	00186a00 	.word	0x00186a00

0800176c <LSM6DSO32_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LSM6DSO32_STATUS LSM6DSO32_Setup(SPI_HandleTypeDef * const hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	6078      	str	r0, [r7, #4]
    // If expected WHO_AM_I value is not read, return failure
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 8001774:	238f      	movs	r3, #143	@ 0x8f
 8001776:	753b      	strb	r3, [r7, #20]
    uint8_t RX[1] = {0};
 8001778:	2300      	movs	r3, #0
 800177a:	743b      	strb	r3, [r7, #16]

    if(transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 800177c:	f107 0210 	add.w	r2, r7, #16
 8001780:	f107 0014 	add.w	r0, r7, #20
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	2101      	movs	r1, #1
 800178c:	f7ff ff82 	bl	8001694 <transmit_receive>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <LSM6DSO32_Setup+0x2e>
                        RX,  sizeof(RX)  / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 8001796:	2301      	movs	r3, #1
 8001798:	e018      	b.n	80017cc <LSM6DSO32_Setup+0x60>
    }

    if(RX[0] != 0x6C) return LSM6DSO32_FAILURE;
 800179a:	7c3b      	ldrb	r3, [r7, #16]
 800179c:	2b6c      	cmp	r3, #108	@ 0x6c
 800179e:	d001      	beq.n	80017a4 <LSM6DSO32_Setup+0x38>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e013      	b.n	80017cc <LSM6DSO32_Setup+0x60>

    // Otherwise, configure the sensor
    uint8_t const TX2[] = {
 80017a4:	4a0b      	ldr	r2, [pc, #44]	@ (80017d4 <LSM6DSO32_Setup+0x68>)
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ae:	e883 0003 	stmia.w	r3, {r0, r1}
        WRITE | SET_REG_CTRL5_DEFAULT,                         // REG CTRL 5 C
        WRITE | SET_REG_CTRL6_DEFAULT,                         // REG CTRL 6 C
        WRITE | ENABLE_GYROSCOPE_HPFILTER                      // REG CTRL 7 G
    };

    if(transmit(TX2, sizeof(TX2) / sizeof(TX2[0]), hspi)
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	2108      	movs	r1, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffa8 	bl	8001710 <transmit>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <LSM6DSO32_Setup+0x5e>
                != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <LSM6DSO32_Setup+0x60>
    }

    return LSM6DSO32_SUCCESS;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	0800bf8c 	.word	0x0800bf8c

080017d8 <LSM6DSO32_ReadGyro>:

LSM6DSO32_STATUS LSM6DSO32_ReadGyro(LSM6DSO32 * const lsm6dso32_gyro,
                                    SPI_HandleTypeDef * const hspi,
                                    LSM6DSO32_DATA_TYPE const data_type)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	4613      	mov	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
    const uint8_t TX[] = { READ  | REG_GYROSCOPE };
 80017e6:	23a2      	movs	r3, #162	@ 0xa2
 80017e8:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	2300      	movs	r3, #0
 80017f0:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80017f2:	f107 0210 	add.w	r2, r7, #16
 80017f6:	f107 0018 	add.w	r0, r7, #24
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2306      	movs	r3, #6
 8001800:	2101      	movs	r1, #1
 8001802:	f7ff ff47 	bl	8001694 <transmit_receive>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <LSM6DSO32_ReadGyro+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 800180c:	2301      	movs	r3, #1
 800180e:	e04b      	b.n	80018a8 <LSM6DSO32_ReadGyro+0xd0>
    }

    float sensitivity;
    switch(data_type) {
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <LSM6DSO32_ReadGyro+0x44>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d004      	beq.n	8001824 <LSM6DSO32_ReadGyro+0x4c>
 800181a:	e006      	b.n	800182a <LSM6DSO32_ReadGyro+0x52>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 800181c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001820:	61fb      	str	r3, [r7, #28]
        break;
 8001822:	e004      	b.n	800182e <LSM6DSO32_ReadGyro+0x56>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 4.375f;
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <LSM6DSO32_ReadGyro+0xd8>)
 8001826:	61fb      	str	r3, [r7, #28]
        break;
 8001828:	e001      	b.n	800182e <LSM6DSO32_ReadGyro+0x56>
    default:
        return LSM6DSO32_FAILURE;
 800182a:	2301      	movs	r3, #1
 800182c:	e03c      	b.n	80018a8 <LSM6DSO32_ReadGyro+0xd0>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 800182e:	7c7b      	ldrb	r3, [r7, #17]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	7c3a      	ldrb	r2, [r7, #16]
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->X = (float)temporary * sensitivity;
 800183c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001848:	edd7 7a07 	vldr	s15, [r7, #28]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	edc3 7a01 	vstr	s15, [r3, #4]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 8001856:	7cfb      	ldrb	r3, [r7, #19]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	7cba      	ldrb	r2, [r7, #18]
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Y = (float)temporary * sensitivity;
 8001864:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001870:	edd7 7a07 	vldr	s15, [r7, #28]
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 800187e:	7d7b      	ldrb	r3, [r7, #21]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	7d3a      	ldrb	r2, [r7, #20]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Z = (float)temporary * sensitivity;
 800188c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001898:	edd7 7a07 	vldr	s15, [r7, #28]
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	408c0000 	.word	0x408c0000

080018b4 <LSM6DSO32_ReadAccel>:

LSM6DSO32_STATUS LSM6DSO32_ReadAccel(LSM6DSO32 * const lsm6dso32_accel,
                                     SPI_HandleTypeDef * const hspi,
                                     LSM6DSO32_DATA_TYPE const data_type)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	4613      	mov	r3, r2
 80018c0:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ  | REG_ACCELEROMETER };
 80018c2:	23a8      	movs	r3, #168	@ 0xa8
 80018c4:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	2300      	movs	r3, #0
 80018cc:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80018ce:	f107 0210 	add.w	r2, r7, #16
 80018d2:	f107 0018 	add.w	r0, r7, #24
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2306      	movs	r3, #6
 80018dc:	2101      	movs	r1, #1
 80018de:	f7ff fed9 	bl	8001694 <transmit_receive>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <LSM6DSO32_ReadAccel+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e04b      	b.n	8001984 <LSM6DSO32_ReadAccel+0xd0>
    }

    float sensitivity;
    switch(data_type) {
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <LSM6DSO32_ReadAccel+0x44>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d004      	beq.n	8001900 <LSM6DSO32_ReadAccel+0x4c>
 80018f6:	e006      	b.n	8001906 <LSM6DSO32_ReadAccel+0x52>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 80018f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018fc:	61fb      	str	r3, [r7, #28]
        break;
 80018fe:	e004      	b.n	800190a <LSM6DSO32_ReadAccel+0x56>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 0.122f;
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <LSM6DSO32_ReadAccel+0xd8>)
 8001902:	61fb      	str	r3, [r7, #28]
        break;
 8001904:	e001      	b.n	800190a <LSM6DSO32_ReadAccel+0x56>
    default:
        return LSM6DSO32_FAILURE;
 8001906:	2301      	movs	r3, #1
 8001908:	e03c      	b.n	8001984 <LSM6DSO32_ReadAccel+0xd0>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 800190a:	7c7b      	ldrb	r3, [r7, #17]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	7c3a      	ldrb	r2, [r7, #16]
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->X = (float)temporary * sensitivity;
 8001918:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001924:	edd7 7a07 	vldr	s15, [r7, #28]
 8001928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	edc3 7a01 	vstr	s15, [r3, #4]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 8001932:	7cfb      	ldrb	r3, [r7, #19]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b29b      	uxth	r3, r3
 8001938:	7cba      	ldrb	r2, [r7, #18]
 800193a:	4413      	add	r3, r2
 800193c:	b29b      	uxth	r3, r3
 800193e:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Y = (float)temporary * sensitivity;
 8001940:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001944:	ee07 3a90 	vmov	s15, r3
 8001948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 800195a:	7d7b      	ldrb	r3, [r7, #21]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b29b      	uxth	r3, r3
 8001960:	7d3a      	ldrb	r2, [r7, #20]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Z = (float)temporary * sensitivity;
 8001968:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	edd7 7a07 	vldr	s15, [r7, #28]
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	3df9db23 	.word	0x3df9db23

08001990 <LSM6DSO32_CalibrateOffset>:

LSM6DSO32_STATUS LSM6DSO32_CalibrateOffset(LSM6DSO32 * const lsm6dso32,
                                           LSM6DSO32_OFFSET * const offset,
                                           SPI_HandleTypeDef * const hspi,
                                           LSM6DSO32_DATA_TYPE const data_type)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	70fb      	strb	r3, [r7, #3]
    LSM6DSO32_STATUS (*readSensor)(LSM6DSO32 * const,
                                   SPI_HandleTypeDef * const,
                                   LSM6DSO32_DATA_TYPE const);

    if(lsm6dso32->sensor == LSM6DSO32_GYROSCOPE) {
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <LSM6DSO32_CalibrateOffset+0x1c>
        readSensor = LSM6DSO32_ReadGyro;
 80019a6:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <LSM6DSO32_CalibrateOffset+0xbc>)
 80019a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019aa:	e001      	b.n	80019b0 <LSM6DSO32_CalibrateOffset+0x20>
    } else {
        readSensor = LSM6DSO32_ReadAccel;
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <LSM6DSO32_CalibrateOffset+0xc0>)
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    float X, Y, Z;
    for(int i = 0; i < 100; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e027      	b.n	8001a06 <LSM6DSO32_CalibrateOffset+0x76>
        if(readSensor(lsm6dso32, hspi, data_type) != LSM6DSO32_SUCCESS) {
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	4798      	blx	r3
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <LSM6DSO32_CalibrateOffset+0x3a>
            return LSM6DSO32_FAILURE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e03c      	b.n	8001a44 <LSM6DSO32_CalibrateOffset+0xb4>
        }

        X += lsm6dso32->X;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	ed97 7a08 	vldr	s14, [r7, #32]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a08 	vstr	s15, [r7, #32]
        Y += lsm6dso32->Y;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a02 	vldr	s15, [r3, #8]
 80019e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	edc7 7a07 	vstr	s15, [r7, #28]
        Z += lsm6dso32->Z;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80019f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fc:	edc7 7a06 	vstr	s15, [r7, #24]
    for(int i = 0; i < 100; i++) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b63      	cmp	r3, #99	@ 0x63
 8001a0a:	ddd4      	ble.n	80019b6 <LSM6DSO32_CalibrateOffset+0x26>
    }

    offset->X = X / 100.f;
 8001a0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a10:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001a54 <LSM6DSO32_CalibrateOffset+0xc4>
 8001a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
    offset->Y = Y / 100.f;
 8001a1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a22:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001a54 <LSM6DSO32_CalibrateOffset+0xc4>
 8001a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	edc3 7a01 	vstr	s15, [r3, #4]
    offset->Z = Z / 100.f;
 8001a30:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a34:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001a54 <LSM6DSO32_CalibrateOffset+0xc4>
 8001a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	edc3 7a02 	vstr	s15, [r3, #8]

    return LSM6DSO32_SUCCESS;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3728      	adds	r7, #40	@ 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	080017d9 	.word	0x080017d9
 8001a50:	080018b5 	.word	0x080018b5
 8001a54:	42c80000 	.word	0x42c80000

08001a58 <LSM6DSO32_UseOffset>:

LSM6DSO32_STATUS LSM6DSO32_UseOffset(LSM6DSO32 * const lsm6dso32,
                                     LSM6DSO32_OFFSET * const offset)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    lsm6dso32->X -= offset->X;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edc3 7a01 	vstr	s15, [r3, #4]
    lsm6dso32->Y -= offset->Y;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	edc3 7a02 	vstr	s15, [r3, #8]
    lsm6dso32->Z -= offset->Z;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab8:	f001 f8ee 	bl	8002c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001abc:	f000 f870 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac0:	f000 f93c 	bl	8001d3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ac4:	f000 f910 	bl	8001ce8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001ac8:	f000 f8d8 	bl	8001c7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  RingBuffer_ctor(&uart_rb, 64, rb_buf);
 8001acc:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <main+0x9c>)
 8001ace:	2140      	movs	r1, #64	@ 0x40
 8001ad0:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <main+0xa0>)
 8001ad2:	f000 f9db 	bl	8001e8c <RingBuffer_ctor>
  HAL_Delay(100);
 8001ad6:	2064      	movs	r0, #100	@ 0x64
 8001ad8:	f001 f920 	bl	8002d1c <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001adc:	f003 feb4 	bl	8005848 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSemaphore */
  uartSemaphoreHandle = osSemaphoreNew(64, 0, &uartSemaphore_attributes);
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <main+0xa4>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2040      	movs	r0, #64	@ 0x40
 8001ae6:	f003 ffa6 	bl	8005a36 <osSemaphoreNew>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <main+0xa8>)
 8001aee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001af0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b60 <main+0xac>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	481b      	ldr	r0, [pc, #108]	@ (8001b64 <main+0xb0>)
 8001af6:	f003 fef1 	bl	80058dc <osThreadNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <main+0xb4>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* creation of TaskUART */
  TaskUARTHandle = osThreadNew(StartTaskUART, (void*) sensor_args, &TaskUART_attributes);
 8001b00:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <main+0xb8>)
 8001b02:	4a1b      	ldr	r2, [pc, #108]	@ (8001b70 <main+0xbc>)
 8001b04:	4619      	mov	r1, r3
 8001b06:	481b      	ldr	r0, [pc, #108]	@ (8001b74 <main+0xc0>)
 8001b08:	f003 fee8 	bl	80058dc <osThreadNew>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001b78 <main+0xc4>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* creation of TaskBMP388 */
  TaskBMP388Handle = osThreadNew(StartTaskBMP388, (void*) sensor_args, &TaskBMP388_attributes);
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <main+0xb8>)
 8001b14:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <main+0xc8>)
 8001b16:	4619      	mov	r1, r3
 8001b18:	4819      	ldr	r0, [pc, #100]	@ (8001b80 <main+0xcc>)
 8001b1a:	f003 fedf 	bl	80058dc <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <main+0xd0>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* creation of TaskLIS2MDL */
  TaskLIS2MDLHandle = osThreadNew(StartTaskLIS2MDL, (void*) sensor_args, &TaskLIS2MDL_attributes);
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <main+0xb8>)
 8001b26:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <main+0xd4>)
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4818      	ldr	r0, [pc, #96]	@ (8001b8c <main+0xd8>)
 8001b2c:	f003 fed6 	bl	80058dc <osThreadNew>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a17      	ldr	r2, [pc, #92]	@ (8001b90 <main+0xdc>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* creation of TaskLSM6DSO32 */
  TaskLSM6DSO32Handle = osThreadNew(StartTaskLSM6DSO32, (void*) sensor_args, &TaskLSM6DSO32_attributes);
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <main+0xb8>)
 8001b38:	4a16      	ldr	r2, [pc, #88]	@ (8001b94 <main+0xe0>)
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4816      	ldr	r0, [pc, #88]	@ (8001b98 <main+0xe4>)
 8001b3e:	f003 fecd 	bl	80058dc <osThreadNew>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a15      	ldr	r2, [pc, #84]	@ (8001b9c <main+0xe8>)
 8001b46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b48:	f003 fea2 	bl	8005890 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <main+0x98>
 8001b50:	200002d4 	.word	0x200002d4
 8001b54:	200002c0 	.word	0x200002c0
 8001b58:	0800c3d0 	.word	0x0800c3d0
 8001b5c:	200002bc 	.word	0x200002bc
 8001b60:	0800c31c 	.word	0x0800c31c
 8001b64:	08001e4d 	.word	0x08001e4d
 8001b68:	200002a8 	.word	0x200002a8
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	0800c340 	.word	0x0800c340
 8001b74:	08002a3d 	.word	0x08002a3d
 8001b78:	200002ac 	.word	0x200002ac
 8001b7c:	0800c364 	.word	0x0800c364
 8001b80:	08002611 	.word	0x08002611
 8001b84:	200002b0 	.word	0x200002b0
 8001b88:	0800c388 	.word	0x0800c388
 8001b8c:	08002761 	.word	0x08002761
 8001b90:	200002b4 	.word	0x200002b4
 8001b94:	0800c3ac 	.word	0x0800c3ac
 8001b98:	08002985 	.word	0x08002985
 8001b9c:	200002b8 	.word	0x200002b8

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	@ 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	2234      	movs	r2, #52	@ 0x34
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 ff41 	bl	8009a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <SystemClock_Config+0xd4>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <SystemClock_Config+0xd4>)
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <SystemClock_Config+0xd4>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <SystemClock_Config+0xd8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bec:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <SystemClock_Config+0xd8>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <SystemClock_Config+0xd8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c04:	2301      	movs	r3, #1
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c08:	2310      	movs	r3, #16
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c14:	2310      	movs	r3, #16
 8001c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c26:	2302      	movs	r3, #2
 8001c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fea4 	bl	800397c <HAL_RCC_OscConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c3a:	f000 f921 	bl	8001e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	230f      	movs	r3, #15
 8001c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 fb12 	bl	8003284 <HAL_RCC_ClockConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c66:	f000 f90b 	bl	8001e80 <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3750      	adds	r7, #80	@ 0x50
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b17      	ldr	r3, [pc, #92]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <MX_SPI1_Init+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <MX_SPI1_Init+0x64>)
 8001cce:	f002 f8f3 	bl	8003eb8 <HAL_SPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd8:	f000 f8d2 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000208 	.word	0x20000208
 8001ce4:	40013000 	.word	0x40013000

08001ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <MX_USART2_UART_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	@ (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f003 f942 	bl	8004fa8 <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f000 f8a9 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000260 	.word	0x20000260
 8001d38:	40004400 	.word	0x40004400

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a38      	ldr	r2, [pc, #224]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b32      	ldr	r3, [pc, #200]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a31      	ldr	r2, [pc, #196]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <MX_GPIO_Init+0x100>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001dc8:	481d      	ldr	r0, [pc, #116]	@ (8001e40 <MX_GPIO_Init+0x104>)
 8001dca:	f001 fa41 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd4:	481b      	ldr	r0, [pc, #108]	@ (8001e44 <MX_GPIO_Init+0x108>)
 8001dd6:	f001 fa3b 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4815      	ldr	r0, [pc, #84]	@ (8001e48 <MX_GPIO_Init+0x10c>)
 8001df2:	f001 f899 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001df6:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <MX_GPIO_Init+0x104>)
 8001e10:	f001 f88a 	bl	8002f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_GPIO_Init+0x108>)
 8001e2e:	f001 f87b 	bl	8002f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020800 	.word	0x40020800

08001e4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;) {
    osDelay(1);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f003 fdd3 	bl	8005a00 <osDelay>
 8001e5a:	e7fb      	b.n	8001e54 <StartDefaultTask+0x8>

08001e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e6e:	f000 ff35 	bl	8002cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40001000 	.word	0x40001000

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <Error_Handler+0x8>

08001e8c <RingBuffer_ctor>:
#include <ringbufferUART.h>

RB_STATUS RingBuffer_ctor(RingBuffer * const rb,
                          uint32_t const capacity,
                          RingBuffer_t * const buffer)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
    // If capacity is 0 or buffer is a nullptr, return failure.
    if(!capacity || !buffer) {
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <RingBuffer_ctor+0x18>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <RingBuffer_ctor+0x1c>
        return RB_FAILURE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e00f      	b.n	8001ec8 <RingBuffer_ctor+0x3c>
    }
    // Else, initialize values and return success.
    rb->capacity = capacity;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	601a      	str	r2, [r3, #0]
    rb->buffer   = buffer;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	611a      	str	r2, [r3, #16]
    rb->size     = (uint32_t)0;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
    rb->head     = (uint32_t)0;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    rb->tail     = (uint32_t)0;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]

    return RB_SUCCESS;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <RingBuffer_enqueue>:

RB_STATUS RingBuffer_enqueue(RingBuffer * const rb,
                             RingBuffer_t const item)
{
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	b4b0      	push	{r4, r5, r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	f107 001c 	add.w	r0, r7, #28
 8001ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Add item to head end of RingBuffer. Overwrite old data if necessary.
    rb->buffer[rb->head] = item;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6919      	ldr	r1, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	461d      	mov	r5, r3
 8001efa:	f107 041c 	add.w	r4, r7, #28
 8001efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	602b      	str	r3, [r5, #0]
    // If head is at the end of memory, wrap around to 0.
    if(++rb->head == rb->capacity) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d102      	bne.n	8001f22 <RingBuffer_enqueue+0x4e>
        rb->head = 0;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    }
    // Increment size if not already at capacity.
    if(rb->size < rb->capacity) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d205      	bcs.n	8001f3a <RingBuffer_enqueue+0x66>
        rb->size++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	e00d      	b.n	8001f56 <RingBuffer_enqueue+0x82>
    } else {
        // Otherwise, increment tail so that we're still reading oldest data.
        if(++rb->tail == rb->capacity) {
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d102      	bne.n	8001f56 <RingBuffer_enqueue+0x82>
            rb->tail = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
        }
    }
    // Return success to calling function.
    return RB_SUCCESS;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bcb0      	pop	{r4, r5, r7}
 8001f60:	b004      	add	sp, #16
 8001f62:	4770      	bx	lr

08001f64 <RingBuffer_dequeue>:

RB_STATUS RingBuffer_dequeue(RingBuffer * const rb,
                             RingBuffer_t * const item)
{
 8001f64:	b4b0      	push	{r4, r5, r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    // If RingBuffer is empty, return failure.
    if(!rb->size) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <RingBuffer_dequeue+0x16>
        return RB_FAILURE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e023      	b.n	8001fc2 <RingBuffer_dequeue+0x5e>
    } else {
        // Otherwise, take item from tail end of RingBuffer.
        *item = rb->buffer[rb->tail];
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	6023      	str	r3, [r4, #0]
        // If tail is at the end of memory, wrap around to 0.
        if(++rb->tail == rb->capacity) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d102      	bne.n	8001fb6 <RingBuffer_dequeue+0x52>
          rb->tail = 0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
        }
        // Decrement the size of the buffer.
        rb->size--;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	1e5a      	subs	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	605a      	str	r2, [r3, #4]
    }
    // Return success to calling function.
    return RB_SUCCESS;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bcb0      	pop	{r4, r5, r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_MspInit+0x54>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_MspInit+0x54>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <HAL_MspInit+0x54>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_MspInit+0x54>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <HAL_MspInit+0x54>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_MspInit+0x54>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	210f      	movs	r1, #15
 800200e:	f06f 0001 	mvn.w	r0, #1
 8002012:	f000 ff5f 	bl	8002ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_SPI_MspInit+0x84>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12b      	bne.n	800209e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 8002050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002054:	6453      	str	r3, [r2, #68]	@ 0x44
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <HAL_SPI_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800207e:	23e0      	movs	r3, #224	@ 0xe0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208e:	2305      	movs	r3, #5
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <HAL_SPI_MspInit+0x8c>)
 800209a:	f000 ff45 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800209e:	bf00      	nop
 80020a0:	3728      	adds	r7, #40	@ 0x28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40013000 	.word	0x40013000
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_UART_MspInit+0x84>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12b      	bne.n	800212e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <HAL_UART_MspInit+0x88>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_UART_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800210e:	230c      	movs	r3, #12
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211e:	2307      	movs	r3, #7
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	@ (8002140 <HAL_UART_MspInit+0x8c>)
 800212a:	f000 fefd 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	40023800 	.word	0x40023800
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08e      	sub	sp, #56	@ 0x38
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_InitTick+0xe4>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215c:	4a32      	ldr	r2, [pc, #200]	@ (8002228 <HAL_InitTick+0xe4>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6413      	str	r3, [r2, #64]	@ 0x40
 8002164:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_InitTick+0xe4>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002170:	f107 0210 	add.w	r2, r7, #16
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f001 f99c 	bl	80034b8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800218a:	f001 f96d 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800218e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002190:	e004      	b.n	800219c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002192:	f001 f969 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8002196:	4603      	mov	r3, r0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219e:	4a23      	ldr	r2, [pc, #140]	@ (800222c <HAL_InitTick+0xe8>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	3b01      	subs	r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021aa:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_InitTick+0xec>)
 80021ac:	4a21      	ldr	r2, [pc, #132]	@ (8002234 <HAL_InitTick+0xf0>)
 80021ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002230 <HAL_InitTick+0xec>)
 80021b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_InitTick+0xec>)
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021be:	4b1c      	ldr	r3, [pc, #112]	@ (8002230 <HAL_InitTick+0xec>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_InitTick+0xec>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_InitTick+0xec>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021d0:	4817      	ldr	r0, [pc, #92]	@ (8002230 <HAL_InitTick+0xec>)
 80021d2:	f002 fc47 	bl	8004a64 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d11b      	bne.n	800221c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021e4:	4812      	ldr	r0, [pc, #72]	@ (8002230 <HAL_InitTick+0xec>)
 80021e6:	f002 fc97 	bl	8004b18 <HAL_TIM_Base_Start_IT>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d111      	bne.n	800221c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021f8:	2036      	movs	r0, #54	@ 0x36
 80021fa:	f000 fe87 	bl	8002f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d808      	bhi.n	8002216 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	2036      	movs	r0, #54	@ 0x36
 800220a:	f000 fe63 	bl	8002ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <HAL_InitTick+0xf4>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e002      	b.n	800221c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800221c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002220:	4618      	mov	r0, r3
 8002222:	3738      	adds	r7, #56	@ 0x38
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	431bde83 	.word	0x431bde83
 8002230:	200007d4 	.word	0x200007d4
 8002234:	40001000 	.word	0x40001000
 8002238:	20000014 	.word	0x20000014

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <TIM6_DAC_IRQHandler+0x10>)
 800227a:	f002 fcbd 	bl	8004bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200007d4 	.word	0x200007d4

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a2:	f007 fc71 	bl	8009b88 <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
  return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ca:	bf00      	nop
 80022cc:	e7fd      	b.n	80022ca <_exit+0x12>

080022ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e00a      	b.n	80022f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e0:	f3af 8000 	nop.w
 80022e4:	4601      	mov	r1, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	b2ca      	uxtb	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	3301      	adds	r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	dbf0      	blt.n	80022e0 <_read+0x12>
  }

  return len;
 80022fe:	687b      	ldr	r3, [r7, #4]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e009      	b.n	800232e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbf1      	blt.n	800231a <_write+0x12>
  }
  return len;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <_close>:

int _close(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002368:	605a      	str	r2, [r3, #4]
  return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <_isatty>:

int _isatty(int file)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	@ (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	@ (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f007 fbd6 	bl	8009b88 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20020000 	.word	0x20020000
 8002408:	00000400 	.word	0x00000400
 800240c:	2000081c 	.word	0x2000081c
 8002410:	20012918 	.word	0x20012918

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b08d      	sub	sp, #52	@ 0x34
 800243c:	af02      	add	r7, sp, #8
 800243e:	463c      	mov	r4, r7
 8002440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
 8002454:	2303      	movs	r3, #3
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245a:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 800245c:	68bc      	ldr	r4, [r7, #8]
 800245e:	466a      	mov	r2, sp
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002468:	e882 0003 	stmia.w	r2, {r0, r1}
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff fd2e 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 fbb5 	bl	8005bec <osSemaphoreRelease>
}
 8002482:	bf00      	nop
 8002484:	372c      	adds	r7, #44	@ 0x2c
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}

0800248a <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               BMP388 const bmp388)
{
 800248a:	b590      	push	{r4, r7, lr}
 800248c:	b08d      	sub	sp, #52	@ 0x34
 800248e:	af02      	add	r7, sp, #8
 8002490:	463c      	mov	r4, r7
 8002492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_BMP388,
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]
 80024a6:	f107 0318 	add.w	r3, r7, #24
 80024aa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80024ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024b2:	e883 0003 	stmia.w	r3, {r0, r1}
                              .bmp388 = bmp388};
    RingBuffer_enqueue(args.uart_rb, tmp);
 80024b6:	68bc      	ldr	r4, [r7, #8]
 80024b8:	466a      	mov	r2, sp
 80024ba:	f107 0320 	add.w	r3, r7, #32
 80024be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff fd01 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fb88 	bl	8005bec <osSemaphoreRelease>
}
 80024dc:	bf00      	nop
 80024de:	372c      	adds	r7, #44	@ 0x2c
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <StartTaskTemperature>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTaskTemperature(void *argument)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b08b      	sub	sp, #44	@ 0x2c
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f107 0410 	add.w	r4, r7, #16
 80024f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BMP388 bmp388 = {.sensor = BMP388_TEMPERATURE};
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]

    // Initial temperature read to update global temperature variable
    //  in bmp388.c for pressure compensations.
    if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
                       args.hspi) != BMP388_SUCCESS) {
 8002502:	693b      	ldr	r3, [r7, #16]
    if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
 8002504:	f107 0008 	add.w	r0, r7, #8
 8002508:	2201      	movs	r2, #1
 800250a:	491d      	ldr	r1, [pc, #116]	@ (8002580 <StartTaskTemperature+0x9c>)
 800250c:	f7fe ff58 	bl	80013c0 <BMP388_ReadTemp>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <StartTaskTemperature+0x46>
        report_error(args, "TEMPERATURE READ ERROR");
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <StartTaskTemperature+0xa0>)
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002520:	f7ff ff8a 	bl	8002438 <report_error>
        vTaskSuspend(NULL);
 8002524:	2000      	movs	r0, #0
 8002526:	f004 fead 	bl	8007284 <vTaskSuspend>
    }

    // Let pressure task know it can start, because initial temperature
    //  is received and available for pressure compensation.
    osSemaphoreRelease(bmp388SemaphoreHandle);
 800252a:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <StartTaskTemperature+0xa4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fb5c 	bl	8005bec <osSemaphoreRelease>

    // Update temperature reading once per second.
    for(;;) {
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
                           args.hspi) != BMP388_SUCCESS) {
 8002534:	693b      	ldr	r3, [r7, #16]
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
 8002536:	f107 0008 	add.w	r0, r7, #8
 800253a:	2201      	movs	r2, #1
 800253c:	4910      	ldr	r1, [pc, #64]	@ (8002580 <StartTaskTemperature+0x9c>)
 800253e:	f7fe ff3f 	bl	80013c0 <BMP388_ReadTemp>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <StartTaskTemperature+0x78>
            report_error(args, "TEMPERATURE READ ERROR");
 8002548:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <StartTaskTemperature+0xa0>)
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002552:	f7ff ff71 	bl	8002438 <report_error>
            vTaskSuspend(NULL);
 8002556:	2000      	movs	r0, #0
 8002558:	f004 fe94 	bl	8007284 <vTaskSuspend>
        }

        send_update(args, bmp388);
 800255c:	466a      	mov	r2, sp
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002566:	e882 0003 	stmia.w	r2, {r0, r1}
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002570:	f7ff ff8b 	bl	800248a <send_update>
        osDelay(1000);
 8002574:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002578:	f003 fa42 	bl	8005a00 <osDelay>
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
 800257c:	e7da      	b.n	8002534 <StartTaskTemperature+0x50>
 800257e:	bf00      	nop
 8002580:	20000828 	.word	0x20000828
 8002584:	0800c00c 	.word	0x0800c00c
 8002588:	20000860 	.word	0x20000860

0800258c <StartTaskPressure>:
    }
}

static void StartTaskPressure(void *argument)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b08b      	sub	sp, #44	@ 0x2c
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f107 0410 	add.w	r4, r7, #16
 800259a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BMP388 bmp388 = {.sensor = BMP388_PRESSURE};
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	2301      	movs	r3, #1
 80025ac:	723b      	strb	r3, [r7, #8]

    // Wait for temperature task to run once and provide a value for
    //  compensate_pressure function to work.
    osSemaphoreAcquire(bmp388SemaphoreHandle, osWaitForever);
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <StartTaskPressure+0x78>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 31ff 	mov.w	r1, #4294967295
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 fac6 	bl	8005b48 <osSemaphoreAcquire>
    // Update pressure reading 40 times per second.
    for(;;) {
        if(BMP388_ReadPres(&bmp388,
                           &bmp388_comp,
                           PRESSURE_DATA_TYPE,
                           args.hspi)
 80025bc:	693b      	ldr	r3, [r7, #16]
        if(BMP388_ReadPres(&bmp388,
 80025be:	f107 0008 	add.w	r0, r7, #8
 80025c2:	2201      	movs	r2, #1
 80025c4:	4910      	ldr	r1, [pc, #64]	@ (8002608 <StartTaskPressure+0x7c>)
 80025c6:	f7fe ff3a 	bl	800143e <BMP388_ReadPres>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d009      	beq.n	80025e4 <StartTaskPressure+0x58>
                           != BMP388_SUCCESS) {
            report_error(args, "PRESURE READ ERROR");
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <StartTaskPressure+0x80>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025da:	f7ff ff2d 	bl	8002438 <report_error>
            vTaskSuspend(NULL);
 80025de:	2000      	movs	r0, #0
 80025e0:	f004 fe50 	bl	8007284 <vTaskSuspend>
        }

        send_update(args, bmp388);
 80025e4:	466a      	mov	r2, sp
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80025f2:	f107 0310 	add.w	r3, r7, #16
 80025f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f8:	f7ff ff47 	bl	800248a <send_update>
        osDelay(25);
 80025fc:	2019      	movs	r0, #25
 80025fe:	f003 f9ff 	bl	8005a00 <osDelay>
        if(BMP388_ReadPres(&bmp388,
 8002602:	e7db      	b.n	80025bc <StartTaskPressure+0x30>
 8002604:	20000860 	.word	0x20000860
 8002608:	20000828 	.word	0x20000828
 800260c:	0800c024 	.word	0x0800c024

08002610 <StartTaskBMP388>:
    }
}

void StartTaskBMP388(void *argument)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af02      	add	r7, sp, #8
 8002616:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f107 0408 	add.w	r4, r7, #8
 800261e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(BMP388_Setup(&bmp388_comp, args.hspi) != BMP388_SUCCESS) {
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4619      	mov	r1, r3
 8002628:	4817      	ldr	r0, [pc, #92]	@ (8002688 <StartTaskBMP388+0x78>)
 800262a:	f7fe fe73 	bl	8001314 <BMP388_Setup>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <StartTaskBMP388+0x38>
        report_error(args, "BMP388 SETUP ERROR");
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <StartTaskBMP388+0x7c>)
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263e:	f7ff fefb 	bl	8002438 <report_error>
        vTaskSuspend(NULL);
 8002642:	2000      	movs	r0, #0
 8002644:	f004 fe1e 	bl	8007284 <vTaskSuspend>
    }

    bmp388SemaphoreHandle = osSemaphoreNew(1, 0, &bmp388Semaphore_attributes);
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <StartTaskBMP388+0x80>)
 800264a:	2100      	movs	r1, #0
 800264c:	2001      	movs	r0, #1
 800264e:	f003 f9f2 	bl	8005a36 <osSemaphoreNew>
 8002652:	4603      	mov	r3, r0
 8002654:	4a0f      	ldr	r2, [pc, #60]	@ (8002694 <StartTaskBMP388+0x84>)
 8002656:	6013      	str	r3, [r2, #0]
    TaskTemperatureHandle = osThreadNew(StartTaskTemperature,
 8002658:	4a0f      	ldr	r2, [pc, #60]	@ (8002698 <StartTaskBMP388+0x88>)
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	480f      	ldr	r0, [pc, #60]	@ (800269c <StartTaskBMP388+0x8c>)
 800265e:	f003 f93d 	bl	80058dc <osThreadNew>
 8002662:	4603      	mov	r3, r0
 8002664:	4a0e      	ldr	r2, [pc, #56]	@ (80026a0 <StartTaskBMP388+0x90>)
 8002666:	6013      	str	r3, [r2, #0]
                                        (void*) argument,
                                        &TaskTemp_attributes);
    TaskPressureHandle    = osThreadNew(StartTaskPressure,
 8002668:	4a0e      	ldr	r2, [pc, #56]	@ (80026a4 <StartTaskBMP388+0x94>)
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	480e      	ldr	r0, [pc, #56]	@ (80026a8 <StartTaskBMP388+0x98>)
 800266e:	f003 f935 	bl	80058dc <osThreadNew>
 8002672:	4603      	mov	r3, r0
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <StartTaskBMP388+0x9c>)
 8002676:	6013      	str	r3, [r2, #0]
                                        (void*) argument,
                                        &TaskPres_attributes);
    vTaskSuspend(NULL);
 8002678:	2000      	movs	r0, #0
 800267a:	f004 fe03 	bl	8007284 <vTaskSuspend>
}
 800267e:	bf00      	nop
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	20000828 	.word	0x20000828
 800268c:	0800c038 	.word	0x0800c038
 8002690:	0800c440 	.word	0x0800c440
 8002694:	20000860 	.word	0x20000860
 8002698:	0800c3f8 	.word	0x0800c3f8
 800269c:	080024e5 	.word	0x080024e5
 80026a0:	20000820 	.word	0x20000820
 80026a4:	0800c41c 	.word	0x0800c41c
 80026a8:	0800258d 	.word	0x0800258d
 80026ac:	20000824 	.word	0x20000824

080026b0 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b08d      	sub	sp, #52	@ 0x34
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	463c      	mov	r4, r7
 80026b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	2303      	movs	r3, #3
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d2:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 80026d4:	68bc      	ldr	r4, [r7, #8]
 80026d6:	466a      	mov	r2, sp
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fbf2 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 fa79 	bl	8005bec <osSemaphoreRelease>
}
 80026fa:	bf00      	nop
 80026fc:	372c      	adds	r7, #44	@ 0x2c
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}

08002702 <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               LIS2MDL const lis2mdl)
{
 8002702:	b590      	push	{r4, r7, lr}
 8002704:	b08d      	sub	sp, #52	@ 0x34
 8002706:	af02      	add	r7, sp, #8
 8002708:	463c      	mov	r4, r7
 800270a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_LIS2MDL,
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]
 800271e:	2301      	movs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	f107 0318 	add.w	r3, r7, #24
 8002726:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800272a:	ca07      	ldmia	r2, {r0, r1, r2}
 800272c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                              .lis2mdl = lis2mdl};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002730:	68bc      	ldr	r4, [r7, #8]
 8002732:	466a      	mov	r2, sp
 8002734:	f107 0320 	add.w	r3, r7, #32
 8002738:	e893 0003 	ldmia.w	r3, {r0, r1}
 800273c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002746:	4620      	mov	r0, r4
 8002748:	f7ff fbc4 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fa4b 	bl	8005bec <osSemaphoreRelease>
}
 8002756:	bf00      	nop
 8002758:	372c      	adds	r7, #44	@ 0x2c
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}
	...

08002760 <StartTaskLIS2MDL>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartTaskLIS2MDL(void *argument)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b08f      	sub	sp, #60	@ 0x3c
 8002764:	af04      	add	r7, sp, #16
 8002766:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f107 0418 	add.w	r4, r7, #24
 800276e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(LIS2MDL_Setup(args.hspi) != LIS2MDL_SUCCESS) {
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff08 	bl	800158c <LIS2MDL_Setup>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <StartTaskLIS2MDL+0x36>
        report_error(args, "LIS2MDL SETUP ERROR");
 8002782:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <StartTaskLIS2MDL+0x80>)
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800278c:	f7ff ff90 	bl	80026b0 <report_error>
        vTaskSuspend(NULL);
 8002790:	2000      	movs	r0, #0
 8002792:	f004 fd77 	bl	8007284 <vTaskSuspend>
    }

    LIS2MDL lis2mdl;
    for(;;) {
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe ff24 	bl	80015ec <LIS2MDL_Read>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <StartTaskLIS2MDL+0x5e>
            report_error(args, "LIS2MDL READ ERROR");
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <StartTaskLIS2MDL+0x84>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	f107 0318 	add.w	r3, r7, #24
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	f7ff ff7c 	bl	80026b0 <report_error>
            vTaskSuspend(NULL);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f004 fd63 	bl	8007284 <vTaskSuspend>
        }

        send_update(args, lis2mdl);
 80027be:	466c      	mov	r4, sp
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d2:	f7ff ff96 	bl	8002702 <send_update>
        osDelay(125);
 80027d6:	207d      	movs	r0, #125	@ 0x7d
 80027d8:	f003 f912 	bl	8005a00 <osDelay>
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 80027dc:	e7db      	b.n	8002796 <StartTaskLIS2MDL+0x36>
 80027de:	bf00      	nop
 80027e0:	0800c04c 	.word	0x0800c04c
 80027e4:	0800c060 	.word	0x0800c060

080027e8 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(const SENSOR_ARGS args,
                                char * const message)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b08d      	sub	sp, #52	@ 0x34
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	463c      	mov	r4, r7
 80027f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	2303      	movs	r3, #3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280a:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 800280c:	68bc      	ldr	r4, [r7, #8]
 800280e:	466a      	mov	r2, sp
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002818:	e882 0003 	stmia.w	r2, {r0, r1}
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff fb56 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 f9dd 	bl	8005bec <osSemaphoreRelease>
}
 8002832:	bf00      	nop
 8002834:	372c      	adds	r7, #44	@ 0x2c
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}

0800283a <send_update>:

static inline void send_update(const SENSOR_ARGS args,
                               const LSM6DSO32 lsm6dso32)
{
 800283a:	b590      	push	{r4, r7, lr}
 800283c:	b08d      	sub	sp, #52	@ 0x34
 800283e:	af02      	add	r7, sp, #8
 8002840:	463c      	mov	r4, r7
 8002842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_LSM6DSO32,
 8002846:	2302      	movs	r3, #2
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	f107 0418 	add.w	r4, r7, #24
 800284e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                              .lsm6dso32 = lsm6dso32};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002858:	68bc      	ldr	r4, [r7, #8]
 800285a:	466a      	mov	r2, sp
 800285c:	f107 0320 	add.w	r3, r7, #32
 8002860:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002864:	e882 0003 	stmia.w	r2, {r0, r1}
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fb30 	bl	8001ed4 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 f9b7 	bl	8005bec <osSemaphoreRelease>
}
 800287e:	bf00      	nop
 8002880:	372c      	adds	r7, #44	@ 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
	...

08002888 <StartTaskGyroscope>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTaskGyroscope(void *argument)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	@ 0x3c
 800288c:	af04      	add	r7, sp, #16
 800288e:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f107 0418 	add.w	r4, r7, #24
 8002896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_GYROSCOPE};
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]

    for(;;) {
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
                              args.hspi,
 80028aa:	69b9      	ldr	r1, [r7, #24]
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
 80028ac:	f107 0308 	add.w	r3, r7, #8
 80028b0:	2201      	movs	r2, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe ff90 	bl	80017d8 <LSM6DSO32_ReadGyro>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <StartTaskGyroscope+0x4a>
                              GYROSCOPE_DATA_TYPE)
                              != LSM6DSO32_SUCCESS) {
            report_error(args, "GYROSCOPE READ ERROR");
 80028be:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <StartTaskGyroscope+0x68>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f107 0318 	add.w	r3, r7, #24
 80028c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c8:	f7ff ff8e 	bl	80027e8 <report_error>
            vTaskSuspend(NULL);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f004 fcd9 	bl	8007284 <vTaskSuspend>
        }

        send_update(args, lsm6dso32);
 80028d2:	466c      	mov	r4, sp
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e4:	f7ff ffa9 	bl	800283a <send_update>
        osDelay(100);
 80028e8:	2064      	movs	r0, #100	@ 0x64
 80028ea:	f003 f889 	bl	8005a00 <osDelay>
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
 80028ee:	e7dc      	b.n	80028aa <StartTaskGyroscope+0x22>
 80028f0:	0800c08c 	.word	0x0800c08c

080028f4 <StartTaskAccelerometer>:
    }
}

static void StartTaskAccelerometer(void *argument)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b093      	sub	sp, #76	@ 0x4c
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_ACCELEROMETER};
 8002908:	f107 0318 	add.w	r3, r7, #24
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	2301      	movs	r3, #1
 8002918:	763b      	strb	r3, [r7, #24]
    LSM6DSO32_OFFSET offset;

    LSM6DSO32_CalibrateOffset(&lsm6dso32,
                              &offset,
                              args.hspi,
 800291a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    LSM6DSO32_CalibrateOffset(&lsm6dso32,
 800291c:	f107 010c 	add.w	r1, r7, #12
 8002920:	f107 0018 	add.w	r0, r7, #24
 8002924:	2301      	movs	r3, #1
 8002926:	f7ff f833 	bl	8001990 <LSM6DSO32_CalibrateOffset>
                              ACCELEROMETER_DATA_TYPE);

    for(;;) {
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
                               args.hspi,
 800292a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
 800292c:	f107 0318 	add.w	r3, r7, #24
 8002930:	2201      	movs	r2, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe ffbe 	bl	80018b4 <LSM6DSO32_ReadAccel>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <StartTaskAccelerometer+0x5e>
                               ACCELEROMETER_DATA_TYPE)
                               != LSM6DSO32_SUCCESS) {
            report_error(args, "ACCELEROMETER READ ERROR");
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <StartTaskAccelerometer+0x8c>)
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002948:	f7ff ff4e 	bl	80027e8 <report_error>
            vTaskSuspend(NULL);
 800294c:	2000      	movs	r0, #0
 800294e:	f004 fc99 	bl	8007284 <vTaskSuspend>
        }

        LSM6DSO32_UseOffset(&lsm6dso32, &offset);
 8002952:	f107 020c 	add.w	r2, r7, #12
 8002956:	f107 0318 	add.w	r3, r7, #24
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f87b 	bl	8001a58 <LSM6DSO32_UseOffset>

        send_update(args, lsm6dso32);
 8002962:	466c      	mov	r4, sp
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800296e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002974:	f7ff ff61 	bl	800283a <send_update>
        osDelay(20);
 8002978:	2014      	movs	r0, #20
 800297a:	f003 f841 	bl	8005a00 <osDelay>
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
 800297e:	e7d4      	b.n	800292a <StartTaskAccelerometer+0x36>
 8002980:	0800c0a4 	.word	0x0800c0a4

08002984 <StartTaskLSM6DSO32>:
    }
}

void StartTaskLSM6DSO32(void *argument)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f107 0408 	add.w	r4, r7, #8
 8002992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(LSM6DSO32_Setup(args.hspi) != LSM6DSO32_SUCCESS) {
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fee6 	bl	800176c <LSM6DSO32_Setup>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <StartTaskLSM6DSO32+0x36>
        report_error(args, "LSM6DSO32 SETUP ERROR");
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <StartTaskLSM6DSO32+0x64>)
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029b0:	f7ff ff1a 	bl	80027e8 <report_error>
        vTaskSuspend(NULL);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f004 fc65 	bl	8007284 <vTaskSuspend>
    }

    TaskGyroscopeHandle     = osThreadNew(StartTaskGyroscope,
 80029ba:	4a0c      	ldr	r2, [pc, #48]	@ (80029ec <StartTaskLSM6DSO32+0x68>)
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <StartTaskLSM6DSO32+0x6c>)
 80029c0:	f002 ff8c 	bl	80058dc <osThreadNew>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <StartTaskLSM6DSO32+0x70>)
 80029c8:	6013      	str	r3, [r2, #0]
                                          (void*) argument,
                                          &TaskGyro_attributes);
    TaskAccelerometerHandle = osThreadNew(StartTaskAccelerometer,
 80029ca:	4a0b      	ldr	r2, [pc, #44]	@ (80029f8 <StartTaskLSM6DSO32+0x74>)
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	480b      	ldr	r0, [pc, #44]	@ (80029fc <StartTaskLSM6DSO32+0x78>)
 80029d0:	f002 ff84 	bl	80058dc <osThreadNew>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <StartTaskLSM6DSO32+0x7c>)
 80029d8:	6013      	str	r3, [r2, #0]
                                          (void*) argument,
                                          &TaskAccel_attributes);
    vTaskSuspend(NULL);
 80029da:	2000      	movs	r0, #0
 80029dc:	f004 fc52 	bl	8007284 <vTaskSuspend>
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}
 80029e8:	0800c0c0 	.word	0x0800c0c0
 80029ec:	0800c450 	.word	0x0800c450
 80029f0:	08002889 	.word	0x08002889
 80029f4:	20000864 	.word	0x20000864
 80029f8:	0800c474 	.word	0x0800c474
 80029fc:	080028f5 	.word	0x080028f5
 8002a00:	20000868 	.word	0x20000868

08002a04 <transmit>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline UART_STATUS transmit(UART_HandleTypeDef * const huart,
                                   char * const buf)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    if(HAL_UART_Transmit(huart,
                         (uint8_t*)buf,
                         strlen(buf),
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	f7fd fc4e 	bl	80002b0 <strlen>
 8002a14:	4603      	mov	r3, r0
    if(HAL_UART_Transmit(huart,
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <transmit+0x34>)
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f002 fb13 	bl	8005048 <HAL_UART_Transmit>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <transmit+0x28>
                         (uint32_t)1600000) // ~100 ms
                         != HAL_OK) {
        return UART_FAILURE;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <transmit+0x2a>
    }

    return UART_SUCCESS;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	00186a00 	.word	0x00186a00

08002a3c <StartTaskUART>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartTaskUART(void *argument)
{
 8002a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a40:	b0c7      	sub	sp, #284	@ 0x11c
 8002a42:	af06      	add	r7, sp, #24
 8002a44:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 8002a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    char buf[210];
    sprintf(buf, "%c[0;0H\n"
 8002a52:	f107 031c 	add.w	r3, r7, #28
 8002a56:	221b      	movs	r2, #27
 8002a58:	4971      	ldr	r1, [pc, #452]	@ (8002c20 <StartTaskUART+0x1e4>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f006 ff88 	bl	8009970 <siprintf>
                 "\tX:\t\t\tmg\r\n"
                 "\tY:\t\t\tmg\r\n"
                 "\tZ:\t\t\tmg\r\n",
                 0x1b);

    if(transmit(args.huart, buf) != UART_SUCCESS) {
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	f107 021c 	add.w	r2, r7, #28
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ffca 	bl	8002a04 <transmit>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <StartTaskUART+0x40>
        vTaskSuspend(NULL);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f004 fc04 	bl	8007284 <vTaskSuspend>
    }

    RingBuffer_t update;
    for(;;) {
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 8002a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f04f 31ff 	mov.w	r1, #4294967295
 8002a86:	4618      	mov	r0, r3
 8002a88:	f003 f85e 	bl	8005b48 <osSemaphoreAcquire>
        if(RingBuffer_dequeue(args.uart_rb, &update) != RB_SUCCESS) {
 8002a8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a90:	f107 0208 	add.w	r2, r7, #8
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa64 	bl	8001f64 <RingBuffer_dequeue>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d011      	beq.n	8002ac6 <StartTaskUART+0x8a>
            sprintf(buf, "%c[0;0H RINGBUFFER DEQUEUE ERROR", 0x1b);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	221b      	movs	r2, #27
 8002aa8:	495e      	ldr	r1, [pc, #376]	@ (8002c24 <StartTaskUART+0x1e8>)
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f006 ff60 	bl	8009970 <siprintf>
            transmit(args.huart, buf);
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	f107 021c 	add.w	r2, r7, #28
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffa2 	bl	8002a04 <transmit>
            vTaskSuspend(NULL);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f004 fbdf 	bl	8007284 <vTaskSuspend>
        }

        switch(update.type) {
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	f200 8090 	bhi.w	8002bee <StartTaskUART+0x1b2>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <StartTaskUART+0x98>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002b27 	.word	0x08002b27
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002bdf 	.word	0x08002bdf
        case UPDATE_BMP388:
            if(update.bmp388.sensor == BMP388_TEMPERATURE) {
 8002ae4:	7b3b      	ldrb	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10e      	bne.n	8002b08 <StartTaskUART+0xcc>
                sprintf(buf, "%c[0;0H"
                             "\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.bmp388.temperature);
 8002aea:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd4b 	bl	8000588 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f107 001c 	add.w	r0, r7, #28
 8002afa:	e9cd 2300 	strd	r2, r3, [sp]
 8002afe:	221b      	movs	r2, #27
 8002b00:	4949      	ldr	r1, [pc, #292]	@ (8002c28 <StartTaskUART+0x1ec>)
 8002b02:	f006 ff35 	bl	8009970 <siprintf>
                             "\n\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.bmp388.pressure);
            }
            break;
 8002b06:	e07a      	b.n	8002bfe <StartTaskUART+0x1c2>
                             update.bmp388.pressure);
 8002b08:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd fd3c 	bl	8000588 <__aeabi_f2d>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	f107 001c 	add.w	r0, r7, #28
 8002b18:	e9cd 2300 	strd	r2, r3, [sp]
 8002b1c:	221b      	movs	r2, #27
 8002b1e:	4943      	ldr	r1, [pc, #268]	@ (8002c2c <StartTaskUART+0x1f0>)
 8002b20:	f006 ff26 	bl	8009970 <siprintf>
            break;
 8002b24:	e06b      	b.n	8002bfe <StartTaskUART+0x1c2>
                         "\t\t%hd    \r\n"
                         "\t\t%hd    \r\n"
                         "\t\t%hd    \r\n"
                         "\t\t%5.2f    ",
                         0x1b,
                         update.lis2mdl.X,
 8002b26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
            sprintf(buf, "%c[0;0H"
 8002b2a:	461e      	mov	r6, r3
                         update.lis2mdl.Y,
 8002b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
            sprintf(buf, "%c[0;0H"
 8002b30:	461c      	mov	r4, r3
                         update.lis2mdl.Z,
 8002b32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
            sprintf(buf, "%c[0;0H"
 8002b36:	461d      	mov	r5, r3
                         update.lis2mdl.heading);
 8002b38:	697b      	ldr	r3, [r7, #20]
            sprintf(buf, "%c[0;0H"
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd24 	bl	8000588 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	f107 001c 	add.w	r0, r7, #28
 8002b48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b4c:	9501      	str	r5, [sp, #4]
 8002b4e:	9400      	str	r4, [sp, #0]
 8002b50:	4633      	mov	r3, r6
 8002b52:	221b      	movs	r2, #27
 8002b54:	4936      	ldr	r1, [pc, #216]	@ (8002c30 <StartTaskUART+0x1f4>)
 8002b56:	f006 ff0b 	bl	8009970 <siprintf>
            break;
 8002b5a:	e050      	b.n	8002bfe <StartTaskUART+0x1c2>
        case UPDATE_LSM6DSO32:
            if(update.lsm6dso32.sensor == LSM6DSO32_GYROSCOPE) {
 8002b5c:	7b3b      	ldrb	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11e      	bne.n	8002ba0 <StartTaskUART+0x164>
                             "\n\n\n\n\n\n\n\n\n"
                             "\t\t%5.2f    \r\n"
                             "\t\t%5.2f    \r\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.lsm6dso32.X,
 8002b62:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fd0f 	bl	8000588 <__aeabi_f2d>
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	460d      	mov	r5, r1
                             update.lsm6dso32.Y,
 8002b6e:	697b      	ldr	r3, [r7, #20]
                sprintf(buf, "%c[0;0H"
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fd09 	bl	8000588 <__aeabi_f2d>
 8002b76:	4680      	mov	r8, r0
 8002b78:	4689      	mov	r9, r1
                             update.lsm6dso32.Z);
 8002b7a:	69bb      	ldr	r3, [r7, #24]
                sprintf(buf, "%c[0;0H"
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fd03 	bl	8000588 <__aeabi_f2d>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	f107 001c 	add.w	r0, r7, #28
 8002b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b8e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b92:	e9cd 4500 	strd	r4, r5, [sp]
 8002b96:	221b      	movs	r2, #27
 8002b98:	4926      	ldr	r1, [pc, #152]	@ (8002c34 <StartTaskUART+0x1f8>)
 8002b9a:	f006 fee9 	bl	8009970 <siprintf>
                             0x1b,
                             update.lsm6dso32.X,
                             update.lsm6dso32.Y,
                             update.lsm6dso32.Z);
            }
            break;
 8002b9e:	e02e      	b.n	8002bfe <StartTaskUART+0x1c2>
                             update.lsm6dso32.X,
 8002ba0:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcf0 	bl	8000588 <__aeabi_f2d>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
                             update.lsm6dso32.Y,
 8002bac:	697b      	ldr	r3, [r7, #20]
                sprintf(buf, "%c[0;0H"
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fd fcea 	bl	8000588 <__aeabi_f2d>
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	4689      	mov	r9, r1
                             update.lsm6dso32.Z);
 8002bb8:	69bb      	ldr	r3, [r7, #24]
                sprintf(buf, "%c[0;0H"
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fce4 	bl	8000588 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	f107 001c 	add.w	r0, r7, #28
 8002bc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bcc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002bd0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bd4:	221b      	movs	r2, #27
 8002bd6:	4918      	ldr	r1, [pc, #96]	@ (8002c38 <StartTaskUART+0x1fc>)
 8002bd8:	f006 feca 	bl	8009970 <siprintf>
            break;
 8002bdc:	e00f      	b.n	8002bfe <StartTaskUART+0x1c2>
        case UPDATE_ERROR:
            sprintf(buf, "%c[0;0H"
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f107 001c 	add.w	r0, r7, #28
 8002be4:	221b      	movs	r2, #27
 8002be6:	4915      	ldr	r1, [pc, #84]	@ (8002c3c <StartTaskUART+0x200>)
 8002be8:	f006 fec2 	bl	8009970 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "%s    ",
                         0x1b,
                         update.error_buf);
            break;
 8002bec:	e007      	b.n	8002bfe <StartTaskUART+0x1c2>
        default:
            sprintf(buf, "%c[0;0H"
 8002bee:	f107 031c 	add.w	r3, r7, #28
 8002bf2:	221b      	movs	r2, #27
 8002bf4:	4912      	ldr	r1, [pc, #72]	@ (8002c40 <StartTaskUART+0x204>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 feba 	bl	8009970 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "UART RECEIVED INVALID UPDATE TYPE   ",
                         0x1b);
            break;
 8002bfc:	bf00      	nop
        }

        if(transmit(args.huart, buf) != UART_SUCCESS) {
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c02:	f107 021c 	add.w	r2, r7, #28
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fefb 	bl	8002a04 <transmit>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f43f af33 	beq.w	8002a7c <StartTaskUART+0x40>
            vTaskSuspend(NULL);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f004 fb34 	bl	8007284 <vTaskSuspend>
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 8002c1c:	e72e      	b.n	8002a7c <StartTaskUART+0x40>
 8002c1e:	bf00      	nop
 8002c20:	0800c0d8 	.word	0x0800c0d8
 8002c24:	0800c1ac 	.word	0x0800c1ac
 8002c28:	0800c1d0 	.word	0x0800c1d0
 8002c2c:	0800c1e4 	.word	0x0800c1e4
 8002c30:	0800c1fc 	.word	0x0800c1fc
 8002c34:	0800c234 	.word	0x0800c234
 8002c38:	0800c26c 	.word	0x0800c26c
 8002c3c:	0800c2a8 	.word	0x0800c2a8
 8002c40:	0800c2c8 	.word	0x0800c2c8

08002c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c48:	f7ff fbe4 	bl	8002414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c4c:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c4e:	490d      	ldr	r1, [pc, #52]	@ (8002c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c54:	e002      	b.n	8002c5c <LoopCopyDataInit>

08002c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5a:	3304      	adds	r3, #4

08002c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c60:	d3f9      	bcc.n	8002c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c62:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c64:	4c0a      	ldr	r4, [pc, #40]	@ (8002c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c68:	e001      	b.n	8002c6e <LoopFillZerobss>

08002c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c6c:	3204      	adds	r2, #4

08002c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c70:	d3fb      	bcc.n	8002c6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f006 ff8f 	bl	8009b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c76:	f7fe ff1d 	bl	8001ab4 <main>
  bx  lr    
 8002c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c88:	0800c850 	.word	0x0800c850
  ldr r2, =_sbss
 8002c8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c90:	20012914 	.word	0x20012914

08002c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c94:	e7fe      	b.n	8002c94 <ADC_IRQHandler>
	...

08002c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd8 <HAL_Init+0x40>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_Init+0x40>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb4:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_Init+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	@ (8002cd8 <HAL_Init+0x40>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f8fc 	bl	8002ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f7ff fa3c 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ccc:	f7ff f97e 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023c00 	.word	0x40023c00

08002cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <HAL_IncTick+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_IncTick+0x24>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_IncTick+0x24>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000018 	.word	0x20000018
 8002d00:	2000086c 	.word	0x2000086c

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <HAL_GetTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	2000086c 	.word	0x2000086c

08002d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff ffee 	bl	8002d04 <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d005      	beq.n	8002d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_Delay+0x44>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4413      	add	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d42:	bf00      	nop
 8002d44:	f7ff ffde 	bl	8002d04 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d8f7      	bhi.n	8002d44 <HAL_Delay+0x28>
  {
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000018 	.word	0x20000018

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	@ (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	@ (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff4c 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee6:	f7ff ff61 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	f7ff ffb1 	bl	8002e58 <NVIC_EncodePriority>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff80 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff54 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e165      	b.n	8003210 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	f040 8154 	bne.w	800320a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d005      	beq.n	8002f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d130      	bne.n	8002fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 0201 	and.w	r2, r3, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d017      	beq.n	8003018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d123      	bne.n	800306c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	2203      	movs	r2, #3
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80ae 	beq.w	800320a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80030b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030be:	4b5a      	ldr	r3, [pc, #360]	@ (8003228 <HAL_GPIO_Init+0x300>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ca:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_GPIO_Init+0x304>)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	089b      	lsrs	r3, r3, #2
 80030d0:	3302      	adds	r3, #2
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003230 <HAL_GPIO_Init+0x308>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d025      	beq.n	8003142 <HAL_GPIO_Init+0x21a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003234 <HAL_GPIO_Init+0x30c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <HAL_GPIO_Init+0x216>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4d      	ldr	r2, [pc, #308]	@ (8003238 <HAL_GPIO_Init+0x310>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d019      	beq.n	800313a <HAL_GPIO_Init+0x212>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4c      	ldr	r2, [pc, #304]	@ (800323c <HAL_GPIO_Init+0x314>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4b      	ldr	r2, [pc, #300]	@ (8003240 <HAL_GPIO_Init+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_GPIO_Init+0x20a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4a      	ldr	r2, [pc, #296]	@ (8003244 <HAL_GPIO_Init+0x31c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <HAL_GPIO_Init+0x206>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a49      	ldr	r2, [pc, #292]	@ (8003248 <HAL_GPIO_Init+0x320>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_GPIO_Init+0x202>
 8003126:	2306      	movs	r3, #6
 8003128:	e00c      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 800312a:	2307      	movs	r3, #7
 800312c:	e00a      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 800312e:	2305      	movs	r3, #5
 8003130:	e008      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 8003132:	2304      	movs	r3, #4
 8003134:	e006      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 8003136:	2303      	movs	r3, #3
 8003138:	e004      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 800313a:	2302      	movs	r3, #2
 800313c:	e002      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_GPIO_Init+0x21c>
 8003142:	2300      	movs	r3, #0
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	f002 0203 	and.w	r2, r2, #3
 800314a:	0092      	lsls	r2, r2, #2
 800314c:	4093      	lsls	r3, r2
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003154:	4935      	ldr	r1, [pc, #212]	@ (800322c <HAL_GPIO_Init+0x304>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	3302      	adds	r3, #2
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003162:	4b3a      	ldr	r3, [pc, #232]	@ (800324c <HAL_GPIO_Init+0x324>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003186:	4a31      	ldr	r2, [pc, #196]	@ (800324c <HAL_GPIO_Init+0x324>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800318c:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <HAL_GPIO_Init+0x324>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b0:	4a26      	ldr	r2, [pc, #152]	@ (800324c <HAL_GPIO_Init+0x324>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b6:	4b25      	ldr	r3, [pc, #148]	@ (800324c <HAL_GPIO_Init+0x324>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031da:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <HAL_GPIO_Init+0x324>)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_GPIO_Init+0x324>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003204:	4a11      	ldr	r2, [pc, #68]	@ (800324c <HAL_GPIO_Init+0x324>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b0f      	cmp	r3, #15
 8003214:	f67f ae96 	bls.w	8002f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3724      	adds	r7, #36	@ 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40013800 	.word	0x40013800
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40021400 	.word	0x40021400
 8003248:	40021800 	.word	0x40021800
 800324c:	40013c00 	.word	0x40013c00

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cc      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b68      	ldr	r3, [pc, #416]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d90c      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b65      	ldr	r3, [pc, #404]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a58      	ldr	r2, [pc, #352]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a52      	ldr	r2, [pc, #328]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d044      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d119      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d003      	beq.n	8003342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	2b03      	cmp	r3, #3
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b3f      	ldr	r3, [pc, #252]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e067      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b37      	ldr	r3, [pc, #220]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4934      	ldr	r1, [pc, #208]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7ff fcc6 	bl	8002d04 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7ff fcc2 	bl	8002d04 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20c      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b22      	ldr	r3, [pc, #136]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	@ (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b12      	ldr	r3, [pc, #72]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f887 	bl	800351c <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	@ (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fe8a 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00
 8003440:	40023800 	.word	0x40023800
 8003444:	0800c3e0 	.word	0x0800c3e0
 8003448:	20000010 	.word	0x20000010
 800344c:	20000014 	.word	0x20000014

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000010 	.word	0x20000010

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	0800c3f0 	.word	0x0800c3f0

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	0800c3f0 	.word	0x0800c3f0

080034b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	220f      	movs	r2, #15
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034c8:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <HAL_RCC_GetClockConfig+0x5c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <HAL_RCC_GetClockConfig+0x5c>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <HAL_RCC_GetClockConfig+0x5c>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_RCC_GetClockConfig+0x5c>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	08db      	lsrs	r3, r3, #3
 80034f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034fa:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <HAL_RCC_GetClockConfig+0x60>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 020f 	and.w	r2, r3, #15
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40023c00 	.word	0x40023c00

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003520:	b0ae      	sub	sp, #184	@ 0xb8
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003542:	4bcb      	ldr	r3, [pc, #812]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b0c      	cmp	r3, #12
 800354c:	f200 8206 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x440>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	0800395d 	.word	0x0800395d
 8003560:	0800395d 	.word	0x0800395d
 8003564:	0800395d 	.word	0x0800395d
 8003568:	08003595 	.word	0x08003595
 800356c:	0800395d 	.word	0x0800395d
 8003570:	0800395d 	.word	0x0800395d
 8003574:	0800395d 	.word	0x0800395d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	0800395d 	.word	0x0800395d
 8003580:	0800395d 	.word	0x0800395d
 8003584:	0800395d 	.word	0x0800395d
 8003588:	0800378d 	.word	0x0800378d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4bb9      	ldr	r3, [pc, #740]	@ (8003874 <HAL_RCC_GetSysClockFreq+0x358>)
 800358e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003592:	e1e7      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003594:	4bb8      	ldr	r3, [pc, #736]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800359a:	e1e3      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359c:	4bb4      	ldr	r3, [pc, #720]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a8:	4bb1      	ldr	r3, [pc, #708]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d071      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b4:	4bae      	ldr	r3, [pc, #696]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80035c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ec:	0150      	lsls	r0, r2, #5
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4621      	mov	r1, r4
 80035f4:	1a51      	subs	r1, r2, r1
 80035f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80035f8:	4629      	mov	r1, r5
 80035fa:	eb63 0301 	sbc.w	r3, r3, r1
 80035fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800360c:	4649      	mov	r1, r9
 800360e:	018b      	lsls	r3, r1, #6
 8003610:	4641      	mov	r1, r8
 8003612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003616:	4641      	mov	r1, r8
 8003618:	018a      	lsls	r2, r1, #6
 800361a:	4641      	mov	r1, r8
 800361c:	1a51      	subs	r1, r2, r1
 800361e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003620:	4649      	mov	r1, r9
 8003622:	eb63 0301 	sbc.w	r3, r3, r1
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003634:	4649      	mov	r1, r9
 8003636:	00cb      	lsls	r3, r1, #3
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800363e:	4641      	mov	r1, r8
 8003640:	00ca      	lsls	r2, r1, #3
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	4603      	mov	r3, r0
 8003648:	4622      	mov	r2, r4
 800364a:	189b      	adds	r3, r3, r2
 800364c:	633b      	str	r3, [r7, #48]	@ 0x30
 800364e:	462b      	mov	r3, r5
 8003650:	460a      	mov	r2, r1
 8003652:	eb42 0303 	adc.w	r3, r2, r3
 8003656:	637b      	str	r3, [r7, #52]	@ 0x34
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003664:	4629      	mov	r1, r5
 8003666:	024b      	lsls	r3, r1, #9
 8003668:	4621      	mov	r1, r4
 800366a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366e:	4621      	mov	r1, r4
 8003670:	024a      	lsls	r2, r1, #9
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800367a:	2200      	movs	r2, #0
 800367c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003680:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003684:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003688:	f7fd faae 	bl	8000be8 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4613      	mov	r3, r2
 8003692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003696:	e067      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003698:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80036a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036b2:	2300      	movs	r3, #0
 80036b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80036ba:	4622      	mov	r2, r4
 80036bc:	462b      	mov	r3, r5
 80036be:	f04f 0000 	mov.w	r0, #0
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	0159      	lsls	r1, r3, #5
 80036c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036cc:	0150      	lsls	r0, r2, #5
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4621      	mov	r1, r4
 80036d4:	1a51      	subs	r1, r2, r1
 80036d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036d8:	4629      	mov	r1, r5
 80036da:	eb63 0301 	sbc.w	r3, r3, r1
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80036ec:	4649      	mov	r1, r9
 80036ee:	018b      	lsls	r3, r1, #6
 80036f0:	4641      	mov	r1, r8
 80036f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036f6:	4641      	mov	r1, r8
 80036f8:	018a      	lsls	r2, r1, #6
 80036fa:	4641      	mov	r1, r8
 80036fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003700:	4649      	mov	r1, r9
 8003702:	eb63 0b01 	sbc.w	fp, r3, r1
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003712:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800371a:	4692      	mov	sl, r2
 800371c:	469b      	mov	fp, r3
 800371e:	4623      	mov	r3, r4
 8003720:	eb1a 0303 	adds.w	r3, sl, r3
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	462b      	mov	r3, r5
 8003728:	eb4b 0303 	adc.w	r3, fp, r3
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800373a:	4629      	mov	r1, r5
 800373c:	028b      	lsls	r3, r1, #10
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003744:	4621      	mov	r1, r4
 8003746:	028a      	lsls	r2, r1, #10
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003750:	2200      	movs	r2, #0
 8003752:	673b      	str	r3, [r7, #112]	@ 0x70
 8003754:	677a      	str	r2, [r7, #116]	@ 0x74
 8003756:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800375a:	f7fd fa45 	bl	8000be8 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4613      	mov	r3, r2
 8003764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003768:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	3301      	adds	r3, #1
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800377a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800377e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378a:	e0eb      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003798:	4b35      	ldr	r3, [pc, #212]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d06b      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b32      	ldr	r3, [pc, #200]	@ (8003870 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80037b8:	2300      	movs	r3, #0
 80037ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80037bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80037c0:	4622      	mov	r2, r4
 80037c2:	462b      	mov	r3, r5
 80037c4:	f04f 0000 	mov.w	r0, #0
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	0159      	lsls	r1, r3, #5
 80037ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d2:	0150      	lsls	r0, r2, #5
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4621      	mov	r1, r4
 80037da:	1a51      	subs	r1, r2, r1
 80037dc:	61b9      	str	r1, [r7, #24]
 80037de:	4629      	mov	r1, r5
 80037e0:	eb63 0301 	sbc.w	r3, r3, r1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037f2:	4659      	mov	r1, fp
 80037f4:	018b      	lsls	r3, r1, #6
 80037f6:	4651      	mov	r1, sl
 80037f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037fc:	4651      	mov	r1, sl
 80037fe:	018a      	lsls	r2, r1, #6
 8003800:	4651      	mov	r1, sl
 8003802:	ebb2 0801 	subs.w	r8, r2, r1
 8003806:	4659      	mov	r1, fp
 8003808:	eb63 0901 	sbc.w	r9, r3, r1
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003818:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800381c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003820:	4690      	mov	r8, r2
 8003822:	4699      	mov	r9, r3
 8003824:	4623      	mov	r3, r4
 8003826:	eb18 0303 	adds.w	r3, r8, r3
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	462b      	mov	r3, r5
 800382e:	eb49 0303 	adc.w	r3, r9, r3
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003840:	4629      	mov	r1, r5
 8003842:	024b      	lsls	r3, r1, #9
 8003844:	4621      	mov	r1, r4
 8003846:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800384a:	4621      	mov	r1, r4
 800384c:	024a      	lsls	r2, r1, #9
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003856:	2200      	movs	r2, #0
 8003858:	65bb      	str	r3, [r7, #88]	@ 0x58
 800385a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800385c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003860:	f7fd f9c2 	bl	8000be8 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4613      	mov	r3, r2
 800386a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800386e:	e065      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x420>
 8003870:	40023800 	.word	0x40023800
 8003874:	00f42400 	.word	0x00f42400
 8003878:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387c:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x458>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	2200      	movs	r2, #0
 8003884:	4618      	mov	r0, r3
 8003886:	4611      	mov	r1, r2
 8003888:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800388c:	653b      	str	r3, [r7, #80]	@ 0x50
 800388e:	2300      	movs	r3, #0
 8003890:	657b      	str	r3, [r7, #84]	@ 0x54
 8003892:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	f04f 0000 	mov.w	r0, #0
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	0159      	lsls	r1, r3, #5
 80038a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038a8:	0150      	lsls	r0, r2, #5
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4641      	mov	r1, r8
 80038b0:	1a51      	subs	r1, r2, r1
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	4649      	mov	r1, r9
 80038b6:	eb63 0301 	sbc.w	r3, r3, r1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80038c8:	4659      	mov	r1, fp
 80038ca:	018b      	lsls	r3, r1, #6
 80038cc:	4651      	mov	r1, sl
 80038ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d2:	4651      	mov	r1, sl
 80038d4:	018a      	lsls	r2, r1, #6
 80038d6:	4651      	mov	r1, sl
 80038d8:	1a54      	subs	r4, r2, r1
 80038da:	4659      	mov	r1, fp
 80038dc:	eb63 0501 	sbc.w	r5, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	00eb      	lsls	r3, r5, #3
 80038ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ee:	00e2      	lsls	r2, r4, #3
 80038f0:	4614      	mov	r4, r2
 80038f2:	461d      	mov	r5, r3
 80038f4:	4643      	mov	r3, r8
 80038f6:	18e3      	adds	r3, r4, r3
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb45 0303 	adc.w	r3, r5, r3
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390e:	4629      	mov	r1, r5
 8003910:	028b      	lsls	r3, r1, #10
 8003912:	4621      	mov	r1, r4
 8003914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003918:	4621      	mov	r1, r4
 800391a:	028a      	lsls	r2, r1, #10
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003924:	2200      	movs	r2, #0
 8003926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003928:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800392a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800392e:	f7fd f95b 	bl	8000be8 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4613      	mov	r3, r2
 8003938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x458>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0f1b      	lsrs	r3, r3, #28
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800394a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800394e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800395a:	e003      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x45c>)
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003968:	4618      	mov	r0, r3
 800396a:	37b8      	adds	r7, #184	@ 0xb8
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400

0800397c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e28d      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8083 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800399c:	4b94      	ldr	r3, [pc, #592]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d019      	beq.n	80039dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039a8:	4b91      	ldr	r3, [pc, #580]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c0:	d00c      	beq.n	80039dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d112      	bne.n	80039f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ce:	4b88      	ldr	r3, [pc, #544]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039da:	d10b      	bne.n	80039f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	4b84      	ldr	r3, [pc, #528]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d05b      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x124>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d157      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e25a      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fc:	d106      	bne.n	8003a0c <HAL_RCC_OscConfig+0x90>
 80039fe:	4b7c      	ldr	r3, [pc, #496]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7b      	ldr	r2, [pc, #492]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e01d      	b.n	8003a48 <HAL_RCC_OscConfig+0xcc>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0xb4>
 8003a16:	4b76      	ldr	r3, [pc, #472]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a75      	ldr	r2, [pc, #468]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b73      	ldr	r3, [pc, #460]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a72      	ldr	r2, [pc, #456]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0xcc>
 8003a30:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6b      	ldr	r2, [pc, #428]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7ff f958 	bl	8002d04 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7ff f954 	bl	8002d04 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	@ 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e21f      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b61      	ldr	r3, [pc, #388]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0xdc>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7ff f944 	bl	8002d04 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7ff f940 	bl	8002d04 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e20b      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	4b57      	ldr	r3, [pc, #348]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x104>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d06f      	beq.n	8003b8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003aae:	4b50      	ldr	r3, [pc, #320]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d017      	beq.n	8003aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aba:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b47      	ldr	r3, [pc, #284]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b44      	ldr	r3, [pc, #272]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x186>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1d3      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4937      	ldr	r1, [pc, #220]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b34      	ldr	r3, [pc, #208]	@ (8003bf4 <HAL_RCC_OscConfig+0x278>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7ff f8ed 	bl	8002d04 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7ff f8e9 	bl	8002d04 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1b4      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b28      	ldr	r3, [pc, #160]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4925      	ldr	r1, [pc, #148]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCC_OscConfig+0x278>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7ff f8cc 	bl	8002d04 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b70:	f7ff f8c8 	bl	8002d04 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e193      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d036      	beq.n	8003c08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7ff f8ac 	bl	8002d04 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7ff f8a8 	bl	8002d04 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e173      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x234>
 8003bce:	e01b      	b.n	8003c08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7ff f895 	bl	8002d04 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bde:	f7ff f891 	bl	8002d04 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d907      	bls.n	8003bfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e15c      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470000 	.word	0x42470000
 8003bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4b8a      	ldr	r3, [pc, #552]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ea      	bne.n	8003bde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8097 	beq.w	8003d44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1a:	4b83      	ldr	r3, [pc, #524]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c36:	4b7c      	ldr	r3, [pc, #496]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <HAL_RCC_OscConfig+0x4b0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d118      	bne.n	8003c84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b76      	ldr	r3, [pc, #472]	@ (8003e2c <HAL_RCC_OscConfig+0x4b0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a75      	ldr	r2, [pc, #468]	@ (8003e2c <HAL_RCC_OscConfig+0x4b0>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7ff f851 	bl	8002d04 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7ff f84d 	bl	8002d04 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e118      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b6c      	ldr	r3, [pc, #432]	@ (8003e2c <HAL_RCC_OscConfig+0x4b0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCC_OscConfig+0x31e>
 8003c8c:	4b66      	ldr	r3, [pc, #408]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a65      	ldr	r2, [pc, #404]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c98:	e01c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x358>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x340>
 8003ca2:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a60      	ldr	r2, [pc, #384]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cae:	4b5e      	ldr	r3, [pc, #376]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x358>
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc0:	4a59      	ldr	r2, [pc, #356]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc8:	4b57      	ldr	r3, [pc, #348]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ccc:	4a56      	ldr	r2, [pc, #344]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7ff f812 	bl	8002d04 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f7ff f80e 	bl	8002d04 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0d7      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ee      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x368>
 8003d06:	e014      	b.n	8003d32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe fffc 	bl	8002d04 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fe fff8 	bl	8002d04 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0c1      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d26:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ee      	bne.n	8003d10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d38:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80ad 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d4e:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d060      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d145      	bne.n	8003dee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_RCC_OscConfig+0x4b4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe ffcc 	bl	8002d04 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fe ffc8 	bl	8002d04 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e093      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d82:	4b29      	ldr	r3, [pc, #164]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	041b      	lsls	r3, r3, #16
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	071b      	lsls	r3, r3, #28
 8003dba:	491b      	ldr	r1, [pc, #108]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x4b4>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe ff9d 	bl	8002d04 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dce:	f7fe ff99 	bl	8002d04 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e064      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x452>
 8003dec:	e05c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_RCC_OscConfig+0x4b4>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe ff86 	bl	8002d04 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fe ff82 	bl	8002d04 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e04d      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x480>
 8003e1a:	e045      	b.n	8003ea8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e040      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e34:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb4 <HAL_RCC_OscConfig+0x538>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d030      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d129      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d122      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e64:	4013      	ands	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d119      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10f      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07b      	b.n	8003fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eda:	d009      	beq.n	8003ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	61da      	str	r2, [r3, #28]
 8003ee2:	e005      	b.n	8003ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fe f88a 	bl	8002024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f74:	ea42 0103 	orr.w	r1, r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	f003 0104 	and.w	r1, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	f003 0210 	and.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b088      	sub	sp, #32
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_SPI_Transmit+0x22>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e12d      	b.n	8004248 <HAL_SPI_Transmit+0x27e>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff4:	f7fe fe86 	bl	8002d04 <HAL_GetTick>
 8003ff8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800400e:	e116      	b.n	800423e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x52>
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004020:	e10d      	b.n	800423e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2203      	movs	r2, #3
 8004026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004068:	d10f      	bne.n	800408a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d007      	beq.n	80040a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040b0:	d14f      	bne.n	8004152 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0xf6>
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d142      	bne.n	8004146 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040e4:	e02f      	b.n	8004146 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d112      	bne.n	800411a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004118:	e015      	b.n	8004146 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411a:	f7fe fdf3 	bl	8002d04 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d803      	bhi.n	8004132 <HAL_SPI_Transmit+0x168>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d102      	bne.n	8004138 <HAL_SPI_Transmit+0x16e>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004144:	e07b      	b.n	800423e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ca      	bne.n	80040e6 <HAL_SPI_Transmit+0x11c>
 8004150:	e050      	b.n	80041f4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_SPI_Transmit+0x196>
 800415a:	8afb      	ldrh	r3, [r7, #22]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d144      	bne.n	80041ea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004186:	e030      	b.n	80041ea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d113      	bne.n	80041be <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041bc:	e015      	b.n	80041ea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041be:	f7fe fda1 	bl	8002d04 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d803      	bhi.n	80041d6 <HAL_SPI_Transmit+0x20c>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d102      	bne.n	80041dc <HAL_SPI_Transmit+0x212>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041e8:	e029      	b.n	800423e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1c9      	bne.n	8004188 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	6839      	ldr	r1, [r7, #0]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 fbdf 	bl	80049bc <SPI_EndRxTxTransaction>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e003      	b.n	800423e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004246:	7ffb      	ldrb	r3, [r7, #31]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004270:	2302      	movs	r3, #2
 8004272:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004274:	e0fb      	b.n	800446e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d112      	bne.n	80042a6 <HAL_SPI_Receive+0x56>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2204      	movs	r2, #4
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f8ef 	bl	8004480 <HAL_SPI_TransmitReceive>
 80042a2:	4603      	mov	r3, r0
 80042a4:	e0e8      	b.n	8004478 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_SPI_Receive+0x64>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0e1      	b.n	8004478 <HAL_SPI_Receive+0x228>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042bc:	f7fe fd22 	bl	8002d04 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_Receive+0x7e>
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042d2:	e0cc      	b.n	800446e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2204      	movs	r2, #4
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800431a:	d10f      	bne.n	800433c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800432a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800433a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d007      	beq.n	800435a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d16a      	bne.n	8004438 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004362:	e032      	b.n	80043ca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d115      	bne.n	800439e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f103 020c 	add.w	r2, r3, #12
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	7812      	ldrb	r2, [r2, #0]
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800439c:	e015      	b.n	80043ca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439e:	f7fe fcb1 	bl	8002d04 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d803      	bhi.n	80043b6 <HAL_SPI_Receive+0x166>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d102      	bne.n	80043bc <HAL_SPI_Receive+0x16c>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043c8:	e051      	b.n	800446e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1c7      	bne.n	8004364 <HAL_SPI_Receive+0x114>
 80043d4:	e035      	b.n	8004442 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d113      	bne.n	800440c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ee:	b292      	uxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800440a:	e015      	b.n	8004438 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800440c:	f7fe fc7a 	bl	8002d04 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d803      	bhi.n	8004424 <HAL_SPI_Receive+0x1d4>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d102      	bne.n	800442a <HAL_SPI_Receive+0x1da>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004436:	e01a      	b.n	800446e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1c9      	bne.n	80043d6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa52 	bl	80048f0 <SPI_EndRxTransaction>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
 8004464:	e003      	b.n	800446e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	@ 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800448e:	2301      	movs	r3, #1
 8004490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x26>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e198      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x358>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ae:	f7fe fc29 	bl	8002d04 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d00f      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x70>
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044d6:	d107      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d103      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x68>
 80044e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d003      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80044ee:	e16d      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x82>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x82>
 80044fc:	887b      	ldrh	r3, [r7, #2]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004508:	e160      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b04      	cmp	r3, #4
 8004514:	d003      	beq.n	800451e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2205      	movs	r2, #5
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	887a      	ldrh	r2, [r7, #2]
 800452e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	887a      	ldrh	r2, [r7, #2]
 8004540:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	887a      	ldrh	r2, [r7, #2]
 8004546:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	d007      	beq.n	8004572 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457a:	d17c      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SPI_TransmitReceive+0x10a>
 8004584:	8b7b      	ldrh	r3, [r7, #26]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d16a      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	1c9a      	adds	r2, r3, #2
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ae:	e057      	b.n	8004660 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d11b      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x176>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d016      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x176>
 80045c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d113      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d119      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x1b8>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d014      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	b292      	uxth	r2, r2
 800461a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	1c9a      	adds	r2, r3, #2
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004634:	2301      	movs	r3, #1
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004638:	f7fe fb64 	bl	8002d04 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004644:	429a      	cmp	r2, r3
 8004646:	d80b      	bhi.n	8004660 <HAL_SPI_TransmitReceive+0x1e0>
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464e:	d007      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800465e:	e0b5      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1a2      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x130>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d19d      	bne.n	80045b0 <HAL_SPI_TransmitReceive+0x130>
 8004674:	e080      	b.n	8004778 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x204>
 800467e:	8b7b      	ldrh	r3, [r7, #26]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d16f      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046aa:	e05b      	b.n	8004764 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d11c      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x274>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x274>
 80046c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d114      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x2b6>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004732:	2301      	movs	r3, #1
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004736:	f7fe fae5 	bl	8002d04 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004742:	429a      	cmp	r2, r3
 8004744:	d803      	bhi.n	800474e <HAL_SPI_TransmitReceive+0x2ce>
 8004746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x2d4>
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004762:	e033      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d19e      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x22c>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d199      	bne.n	80046ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f91d 	bl	80049bc <SPI_EndRxTxTransaction>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004794:	e01a      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c2:	e003      	b.n	80047cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3730      	adds	r7, #48	@ 0x30
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047f0:	f7fe fa88 	bl	8002d04 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004800:	f7fe fa80 	bl	8002d04 <HAL_GetTick>
 8004804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004806:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004816:	e054      	b.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d050      	beq.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004820:	f7fe fa70 	bl	8002d04 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13d      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484e:	d111      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004858:	d004      	beq.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004862:	d107      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487c:	d10f      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800489c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e017      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3b01      	subs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d19b      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000010 	.word	0x20000010

080048f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004904:	d111      	bne.n	800492a <SPI_EndRxTransaction+0x3a>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800490e:	d004      	beq.n	800491a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004918:	d107      	bne.n	800492a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004928:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004932:	d12a      	bne.n	800498a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493c:	d012      	beq.n	8004964 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	@ 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ff49 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02d      	beq.n	80049b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e026      	b.n	80049b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2101      	movs	r1, #1
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff ff36 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01a      	beq.n	80049b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e013      	b.n	80049b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	2101      	movs	r1, #1
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff ff23 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e000      	b.n	80049b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2201      	movs	r2, #1
 80049d0:	2102      	movs	r1, #2
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff04 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e032      	b.n	8004a54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <SPI_EndRxTxTransaction+0xa0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <SPI_EndRxTxTransaction+0xa4>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	0d5b      	lsrs	r3, r3, #21
 80049fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a0c:	d112      	bne.n	8004a34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2180      	movs	r1, #128	@ 0x80
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fee1 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b80      	cmp	r3, #128	@ 0x80
 8004a4c:	d0f2      	beq.n	8004a34 <SPI_EndRxTxTransaction+0x78>
 8004a4e:	e000      	b.n	8004a52 <SPI_EndRxTxTransaction+0x96>
        break;
 8004a50:	bf00      	nop
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000010 	.word	0x20000010
 8004a60:	165e9f81 	.word	0x165e9f81

08004a64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e041      	b.n	8004afa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f839 	bl	8004b02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f000 f9c0 	bl	8004e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e04e      	b.n	8004bce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	@ (8004bdc <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004be4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	@ (8004be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bec <HAL_TIM_Base_Start_IT+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d010      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e007      	b.n	8004bcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40001800 	.word	0x40001800

08004bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0202 	mvn.w	r2, #2
 8004c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8d2 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8c4 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8d5 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d020      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01b      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0204 	mvn.w	r2, #4
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8ac 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f89e 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8af 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0208 	mvn.w	r2, #8
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f886 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f878 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f889 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2208      	movs	r2, #8
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f860 	bl	8004dec <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f852 	bl	8004dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f863 	bl	8004e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fd f87c 	bl	8001e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f906 	bl	8004f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f834 	bl	8004e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0220 	mvn.w	r2, #32
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8d8 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a46      	ldr	r2, [pc, #280]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a43      	ldr	r2, [pc, #268]	@ (8004f58 <TIM_Base_SetConfig+0x130>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a42      	ldr	r2, [pc, #264]	@ (8004f5c <TIM_Base_SetConfig+0x134>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	@ (8004f60 <TIM_Base_SetConfig+0x138>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a35      	ldr	r2, [pc, #212]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e88:	d027      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	@ (8004f58 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d023      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a31      	ldr	r2, [pc, #196]	@ (8004f5c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a30      	ldr	r2, [pc, #192]	@ (8004f60 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d017      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2e      	ldr	r2, [pc, #184]	@ (8004f68 <TIM_Base_SetConfig+0x140>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <TIM_Base_SetConfig+0x144>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8004f70 <TIM_Base_SetConfig+0x148>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f74 <TIM_Base_SetConfig+0x14c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <TIM_Base_SetConfig+0x150>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a29      	ldr	r2, [pc, #164]	@ (8004f7c <TIM_Base_SetConfig+0x154>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	@ (8004f54 <TIM_Base_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <TIM_Base_SetConfig+0x13c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]
  }
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40010400 	.word	0x40010400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800
 8004f74:	40001800 	.word	0x40001800
 8004f78:	40001c00 	.word	0x40001c00
 8004f7c:	40002000 	.word	0x40002000

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e042      	b.n	8005040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fd f870 	bl	80020b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2224      	movs	r2, #36	@ 0x24
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f973 	bl	80052d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08a      	sub	sp, #40	@ 0x28
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b20      	cmp	r3, #32
 8005066:	d175      	bne.n	8005154 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Transmit+0x2c>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e06e      	b.n	8005156 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2221      	movs	r2, #33	@ 0x21
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005086:	f7fd fe3d 	bl	8002d04 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a0:	d108      	bne.n	80050b4 <HAL_UART_Transmit+0x6c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d104      	bne.n	80050b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e003      	b.n	80050bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050bc:	e02e      	b.n	800511c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2180      	movs	r1, #128	@ 0x80
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f848 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e03a      	b.n	8005156 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3302      	adds	r3, #2
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e007      	b.n	800510e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	781a      	ldrb	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	3301      	adds	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1cb      	bne.n	80050be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2140      	movs	r1, #64	@ 0x40
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f814 	bl	800515e <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e006      	b.n	8005156 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005154:	2302      	movs	r3, #2
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516e:	e03b      	b.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d037      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005178:	f7fd fdc4 	bl	8002d04 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	429a      	cmp	r2, r3
 8005186:	d302      	bcc.n	800518e <UART_WaitOnFlagUntilTimeout+0x30>
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e03a      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d023      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b80      	cmp	r3, #128	@ 0x80
 80051a4:	d020      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d01d      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d116      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f81d 	bl	8005210 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2208      	movs	r2, #8
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e00f      	b.n	8005208 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	429a      	cmp	r2, r3
 8005204:	d0b4      	beq.n	8005170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b095      	sub	sp, #84	@ 0x54
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800522e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005238:	643a      	str	r2, [r7, #64]	@ 0x40
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800523e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3314      	adds	r3, #20
 8005252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	61fb      	str	r3, [r7, #28]
   return(result);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800526c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	2b01      	cmp	r3, #1
 8005286:	d119      	bne.n	80052bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60bb      	str	r3, [r7, #8]
   return(result);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052a8:	61ba      	str	r2, [r7, #24]
 80052aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	613b      	str	r3, [r7, #16]
   return(result);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e5      	bne.n	8005288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052ca:	bf00      	nop
 80052cc:	3754      	adds	r7, #84	@ 0x54
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b0c0      	sub	sp, #256	@ 0x100
 80052de:	af00      	add	r7, sp, #0
 80052e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f4:	68d9      	ldr	r1, [r3, #12]
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	ea40 0301 	orr.w	r3, r0, r1
 8005300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	431a      	orrs	r2, r3
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005330:	f021 010c 	bic.w	r1, r1, #12
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800533e:	430b      	orrs	r3, r1
 8005340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005352:	6999      	ldr	r1, [r3, #24]
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	ea40 0301 	orr.w	r3, r0, r1
 800535e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b8f      	ldr	r3, [pc, #572]	@ (80055a4 <UART_SetConfig+0x2cc>)
 8005368:	429a      	cmp	r2, r3
 800536a:	d005      	beq.n	8005378 <UART_SetConfig+0xa0>
 800536c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b8d      	ldr	r3, [pc, #564]	@ (80055a8 <UART_SetConfig+0x2d0>)
 8005374:	429a      	cmp	r2, r3
 8005376:	d104      	bne.n	8005382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe f88a 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800537c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005380:	e003      	b.n	800538a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005382:	f7fe f871 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8005386:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005394:	f040 810c 	bne.w	80055b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800539c:	2200      	movs	r2, #0
 800539e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053aa:	4622      	mov	r2, r4
 80053ac:	462b      	mov	r3, r5
 80053ae:	1891      	adds	r1, r2, r2
 80053b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053b2:	415b      	adcs	r3, r3
 80053b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053ba:	4621      	mov	r1, r4
 80053bc:	eb12 0801 	adds.w	r8, r2, r1
 80053c0:	4629      	mov	r1, r5
 80053c2:	eb43 0901 	adc.w	r9, r3, r1
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053da:	4690      	mov	r8, r2
 80053dc:	4699      	mov	r9, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	eb18 0303 	adds.w	r3, r8, r3
 80053e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053e8:	462b      	mov	r3, r5
 80053ea:	eb49 0303 	adc.w	r3, r9, r3
 80053ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005406:	460b      	mov	r3, r1
 8005408:	18db      	adds	r3, r3, r3
 800540a:	653b      	str	r3, [r7, #80]	@ 0x50
 800540c:	4613      	mov	r3, r2
 800540e:	eb42 0303 	adc.w	r3, r2, r3
 8005412:	657b      	str	r3, [r7, #84]	@ 0x54
 8005414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800541c:	f7fb fbe4 	bl	8000be8 <__aeabi_uldivmod>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4b61      	ldr	r3, [pc, #388]	@ (80055ac <UART_SetConfig+0x2d4>)
 8005426:	fba3 2302 	umull	r2, r3, r3, r2
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	011c      	lsls	r4, r3, #4
 800542e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005438:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800543c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	1891      	adds	r1, r2, r2
 8005446:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005448:	415b      	adcs	r3, r3
 800544a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800544c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005450:	4641      	mov	r1, r8
 8005452:	eb12 0a01 	adds.w	sl, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0b01 	adc.w	fp, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800546c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005470:	4692      	mov	sl, r2
 8005472:	469b      	mov	fp, r3
 8005474:	4643      	mov	r3, r8
 8005476:	eb1a 0303 	adds.w	r3, sl, r3
 800547a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800547e:	464b      	mov	r3, r9
 8005480:	eb4b 0303 	adc.w	r3, fp, r3
 8005484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005494:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800549c:	460b      	mov	r3, r1
 800549e:	18db      	adds	r3, r3, r3
 80054a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a2:	4613      	mov	r3, r2
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054b2:	f7fb fb99 	bl	8000be8 <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	4b3b      	ldr	r3, [pc, #236]	@ (80055ac <UART_SetConfig+0x2d4>)
 80054be:	fba3 2301 	umull	r2, r3, r3, r1
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2264      	movs	r2, #100	@ 0x64
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	1acb      	subs	r3, r1, r3
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <UART_SetConfig+0x2d4>)
 80054d4:	fba3 2302 	umull	r2, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054e0:	441c      	add	r4, r3
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054fc:	415b      	adcs	r3, r3
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005504:	4641      	mov	r1, r8
 8005506:	1851      	adds	r1, r2, r1
 8005508:	6339      	str	r1, [r7, #48]	@ 0x30
 800550a:	4649      	mov	r1, r9
 800550c:	414b      	adcs	r3, r1
 800550e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800551c:	4659      	mov	r1, fp
 800551e:	00cb      	lsls	r3, r1, #3
 8005520:	4651      	mov	r1, sl
 8005522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005526:	4651      	mov	r1, sl
 8005528:	00ca      	lsls	r2, r1, #3
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	4603      	mov	r3, r0
 8005530:	4642      	mov	r2, r8
 8005532:	189b      	adds	r3, r3, r2
 8005534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005538:	464b      	mov	r3, r9
 800553a:	460a      	mov	r2, r1
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005550:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005558:	460b      	mov	r3, r1
 800555a:	18db      	adds	r3, r3, r3
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800555e:	4613      	mov	r3, r2
 8005560:	eb42 0303 	adc.w	r3, r2, r3
 8005564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800556a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800556e:	f7fb fb3b 	bl	8000be8 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <UART_SetConfig+0x2d4>)
 8005578:	fba3 1302 	umull	r1, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2164      	movs	r1, #100	@ 0x64
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	3332      	adds	r3, #50	@ 0x32
 800558a:	4a08      	ldr	r2, [pc, #32]	@ (80055ac <UART_SetConfig+0x2d4>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 0207 	and.w	r2, r3, #7
 8005596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4422      	add	r2, r4
 800559e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a0:	e106      	b.n	80057b0 <UART_SetConfig+0x4d8>
 80055a2:	bf00      	nop
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055c2:	4642      	mov	r2, r8
 80055c4:	464b      	mov	r3, r9
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	6239      	str	r1, [r7, #32]
 80055ca:	415b      	adcs	r3, r3
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055d2:	4641      	mov	r1, r8
 80055d4:	1854      	adds	r4, r2, r1
 80055d6:	4649      	mov	r1, r9
 80055d8:	eb43 0501 	adc.w	r5, r3, r1
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	00eb      	lsls	r3, r5, #3
 80055e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ea:	00e2      	lsls	r2, r4, #3
 80055ec:	4614      	mov	r4, r2
 80055ee:	461d      	mov	r5, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	18e3      	adds	r3, r4, r3
 80055f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055f8:	464b      	mov	r3, r9
 80055fa:	eb45 0303 	adc.w	r3, r5, r3
 80055fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800560e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800561e:	4629      	mov	r1, r5
 8005620:	008b      	lsls	r3, r1, #2
 8005622:	4621      	mov	r1, r4
 8005624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005628:	4621      	mov	r1, r4
 800562a:	008a      	lsls	r2, r1, #2
 800562c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005630:	f7fb fada 	bl	8000be8 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4b60      	ldr	r3, [pc, #384]	@ (80057bc <UART_SetConfig+0x4e4>)
 800563a:	fba3 2302 	umull	r2, r3, r3, r2
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	011c      	lsls	r4, r3, #4
 8005642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005646:	2200      	movs	r2, #0
 8005648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800564c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005654:	4642      	mov	r2, r8
 8005656:	464b      	mov	r3, r9
 8005658:	1891      	adds	r1, r2, r2
 800565a:	61b9      	str	r1, [r7, #24]
 800565c:	415b      	adcs	r3, r3
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005664:	4641      	mov	r1, r8
 8005666:	1851      	adds	r1, r2, r1
 8005668:	6139      	str	r1, [r7, #16]
 800566a:	4649      	mov	r1, r9
 800566c:	414b      	adcs	r3, r1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800567c:	4659      	mov	r1, fp
 800567e:	00cb      	lsls	r3, r1, #3
 8005680:	4651      	mov	r1, sl
 8005682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005686:	4651      	mov	r1, sl
 8005688:	00ca      	lsls	r2, r1, #3
 800568a:	4610      	mov	r0, r2
 800568c:	4619      	mov	r1, r3
 800568e:	4603      	mov	r3, r0
 8005690:	4642      	mov	r2, r8
 8005692:	189b      	adds	r3, r3, r2
 8005694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005698:	464b      	mov	r3, r9
 800569a:	460a      	mov	r2, r1
 800569c:	eb42 0303 	adc.w	r3, r2, r3
 80056a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056bc:	4649      	mov	r1, r9
 80056be:	008b      	lsls	r3, r1, #2
 80056c0:	4641      	mov	r1, r8
 80056c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c6:	4641      	mov	r1, r8
 80056c8:	008a      	lsls	r2, r1, #2
 80056ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ce:	f7fb fa8b 	bl	8000be8 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <UART_SetConfig+0x4e4>)
 80056da:	fba3 2301 	umull	r2, r3, r3, r1
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	2264      	movs	r2, #100	@ 0x64
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	1acb      	subs	r3, r1, r3
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	3332      	adds	r3, #50	@ 0x32
 80056ec:	4a33      	ldr	r2, [pc, #204]	@ (80057bc <UART_SetConfig+0x4e4>)
 80056ee:	fba2 2303 	umull	r2, r3, r2, r3
 80056f2:	095b      	lsrs	r3, r3, #5
 80056f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056f8:	441c      	add	r4, r3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	673b      	str	r3, [r7, #112]	@ 0x70
 8005702:	677a      	str	r2, [r7, #116]	@ 0x74
 8005704:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	1891      	adds	r1, r2, r2
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	415b      	adcs	r3, r3
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005718:	4641      	mov	r1, r8
 800571a:	1851      	adds	r1, r2, r1
 800571c:	6039      	str	r1, [r7, #0]
 800571e:	4649      	mov	r1, r9
 8005720:	414b      	adcs	r3, r1
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	f04f 0200 	mov.w	r2, #0
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005730:	4659      	mov	r1, fp
 8005732:	00cb      	lsls	r3, r1, #3
 8005734:	4651      	mov	r1, sl
 8005736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573a:	4651      	mov	r1, sl
 800573c:	00ca      	lsls	r2, r1, #3
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	4603      	mov	r3, r0
 8005744:	4642      	mov	r2, r8
 8005746:	189b      	adds	r3, r3, r2
 8005748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800574a:	464b      	mov	r3, r9
 800574c:	460a      	mov	r2, r1
 800574e:	eb42 0303 	adc.w	r3, r2, r3
 8005752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	663b      	str	r3, [r7, #96]	@ 0x60
 800575e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800576c:	4649      	mov	r1, r9
 800576e:	008b      	lsls	r3, r1, #2
 8005770:	4641      	mov	r1, r8
 8005772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005776:	4641      	mov	r1, r8
 8005778:	008a      	lsls	r2, r1, #2
 800577a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800577e:	f7fb fa33 	bl	8000be8 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <UART_SetConfig+0x4e4>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	@ 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	3332      	adds	r3, #50	@ 0x32
 800579a:	4a08      	ldr	r2, [pc, #32]	@ (80057bc <UART_SetConfig+0x4e4>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f003 020f 	and.w	r2, r3, #15
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4422      	add	r2, r4
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	bf00      	nop
 80057b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057b6:	46bd      	mov	sp, r7
 80057b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057bc:	51eb851f 	.word	0x51eb851f

080057c0 <__NVIC_SetPriority>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	6039      	str	r1, [r7, #0]
 80057ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	db0a      	blt.n	80057ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	490c      	ldr	r1, [pc, #48]	@ (800580c <__NVIC_SetPriority+0x4c>)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	0112      	lsls	r2, r2, #4
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	440b      	add	r3, r1
 80057e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057e8:	e00a      	b.n	8005800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4908      	ldr	r1, [pc, #32]	@ (8005810 <__NVIC_SetPriority+0x50>)
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	3b04      	subs	r3, #4
 80057f8:	0112      	lsls	r2, r2, #4
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	440b      	add	r3, r1
 80057fe:	761a      	strb	r2, [r3, #24]
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000e100 	.word	0xe000e100
 8005810:	e000ed00 	.word	0xe000ed00

08005814 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <SysTick_Handler+0x1c>)
 800581a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800581c:	f002 fa0c 	bl	8007c38 <xTaskGetSchedulerState>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005826:	f003 f907 	bl	8008a38 <xPortSysTickHandler>
  }
}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	e000e010 	.word	0xe000e010

08005834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005838:	2100      	movs	r1, #0
 800583a:	f06f 0004 	mvn.w	r0, #4
 800583e:	f7ff ffbf 	bl	80057c0 <__NVIC_SetPriority>
#endif
}
 8005842:	bf00      	nop
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584e:	f3ef 8305 	mrs	r3, IPSR
 8005852:	603b      	str	r3, [r7, #0]
  return(result);
 8005854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800585a:	f06f 0305 	mvn.w	r3, #5
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e00c      	b.n	800587c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005862:	4b0a      	ldr	r3, [pc, #40]	@ (800588c <osKernelInitialize+0x44>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800586a:	4b08      	ldr	r3, [pc, #32]	@ (800588c <osKernelInitialize+0x44>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005870:	2300      	movs	r3, #0
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	e002      	b.n	800587c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295
 800587a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800587c:	687b      	ldr	r3, [r7, #4]
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000870 	.word	0x20000870

08005890 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005896:	f3ef 8305 	mrs	r3, IPSR
 800589a:	603b      	str	r3, [r7, #0]
  return(result);
 800589c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80058a2:	f06f 0305 	mvn.w	r3, #5
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	e010      	b.n	80058cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058aa:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <osKernelStart+0x48>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d109      	bne.n	80058c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058b2:	f7ff ffbf 	bl	8005834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058b6:	4b08      	ldr	r3, [pc, #32]	@ (80058d8 <osKernelStart+0x48>)
 80058b8:	2202      	movs	r2, #2
 80058ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058bc:	f001 fd58 	bl	8007370 <vTaskStartScheduler>
      stat = osOK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	607b      	str	r3, [r7, #4]
 80058c4:	e002      	b.n	80058cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058c6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058cc:	687b      	ldr	r3, [r7, #4]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000870 	.word	0x20000870

080058dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08e      	sub	sp, #56	@ 0x38
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ec:	f3ef 8305 	mrs	r3, IPSR
 80058f0:	617b      	str	r3, [r7, #20]
  return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d17e      	bne.n	80059f6 <osThreadNew+0x11a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d07b      	beq.n	80059f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005902:	2318      	movs	r3, #24
 8005904:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d045      	beq.n	80059a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <osThreadNew+0x48>
        name = attr->name;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <osThreadNew+0x6e>
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b38      	cmp	r3, #56	@ 0x38
 800593c:	d805      	bhi.n	800594a <osThreadNew+0x6e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <osThreadNew+0x72>
        return (NULL);
 800594a:	2300      	movs	r3, #0
 800594c:	e054      	b.n	80059f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00e      	beq.n	8005984 <osThreadNew+0xa8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	2ba7      	cmp	r3, #167	@ 0xa7
 800596c:	d90a      	bls.n	8005984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <osThreadNew+0xa8>
        mem = 1;
 800597e:	2301      	movs	r3, #1
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	e010      	b.n	80059a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10c      	bne.n	80059a6 <osThreadNew+0xca>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <osThreadNew+0xca>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <osThreadNew+0xca>
          mem = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	e001      	b.n	80059a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d110      	bne.n	80059ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059b4:	9202      	str	r2, [sp, #8]
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f001 fa6a 	bl	8006e9c <xTaskCreateStatic>
 80059c8:	4603      	mov	r3, r0
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	e013      	b.n	80059f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d110      	bne.n	80059f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f107 0310 	add.w	r3, r7, #16
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f001 fab8 	bl	8006f5c <xTaskCreate>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d001      	beq.n	80059f6 <osThreadNew+0x11a>
            hTask = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059f6:	693b      	ldr	r3, [r7, #16]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3728      	adds	r7, #40	@ 0x28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a08:	f3ef 8305 	mrs	r3, IPSR
 8005a0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <osDelay+0x1c>
    stat = osErrorISR;
 8005a14:	f06f 0305 	mvn.w	r3, #5
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e007      	b.n	8005a2c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 fbf6 	bl	8007218 <vTaskDelay>
    }
  }

  return (stat);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	@ 0x28
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a46:	f3ef 8305 	mrs	r3, IPSR
 8005a4a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a4c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d175      	bne.n	8005b3e <osSemaphoreNew+0x108>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d072      	beq.n	8005b3e <osSemaphoreNew+0x108>
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d86e      	bhi.n	8005b3e <osSemaphoreNew+0x108>
    mem = -1;
 8005a60:	f04f 33ff 	mov.w	r3, #4294967295
 8005a64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d006      	beq.n	8005a82 <osSemaphoreNew+0x4c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a7a:	d902      	bls.n	8005a82 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e00c      	b.n	8005a9c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <osSemaphoreNew+0x66>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <osSemaphoreNew+0x66>
          mem = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e001      	b.n	8005a9c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d04c      	beq.n	8005b3e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d128      	bne.n	8005afc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d10a      	bne.n	8005ac6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	9200      	str	r2, [sp, #0]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	2001      	movs	r0, #1
 8005abe:	f000 fa2b 	bl	8005f18 <xQueueGenericCreateStatic>
 8005ac2:	61f8      	str	r0, [r7, #28]
 8005ac4:	e005      	b.n	8005ad2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2001      	movs	r0, #1
 8005acc:	f000 faa1 	bl	8006012 <xQueueGenericCreate>
 8005ad0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d022      	beq.n	8005b1e <osSemaphoreNew+0xe8>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01f      	beq.n	8005b1e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	69f8      	ldr	r0, [r7, #28]
 8005ae6:	f000 fb61 	bl	80061ac <xQueueGenericSend>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d016      	beq.n	8005b1e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005af0:	69f8      	ldr	r0, [r7, #28]
 8005af2:	f000 ffff 	bl	8006af4 <vQueueDelete>
            hSemaphore = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e010      	b.n	8005b1e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d108      	bne.n	8005b14 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	461a      	mov	r2, r3
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fadf 	bl	80060ce <xQueueCreateCountingSemaphoreStatic>
 8005b10:	61f8      	str	r0, [r7, #28]
 8005b12:	e004      	b.n	8005b1e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fb12 	bl	8006140 <xQueueCreateCountingSemaphore>
 8005b1c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00c      	beq.n	8005b3e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e001      	b.n	8005b36 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	69f8      	ldr	r0, [r7, #28]
 8005b3a:	f001 f927 	bl	8006d8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b3e:	69fb      	ldr	r3, [r7, #28]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d103      	bne.n	8005b68 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b60:	f06f 0303 	mvn.w	r3, #3
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e039      	b.n	8005bdc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b68:	f3ef 8305 	mrs	r3, IPSR
 8005b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d022      	beq.n	8005bba <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b7a:	f06f 0303 	mvn.w	r3, #3
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e02c      	b.n	8005bdc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b86:	f107 0308 	add.w	r3, r7, #8
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6938      	ldr	r0, [r7, #16]
 8005b90:	f000 ff2e 	bl	80069f0 <xQueueReceiveFromISR>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d003      	beq.n	8005ba2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b9a:	f06f 0302 	mvn.w	r3, #2
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	e01c      	b.n	8005bdc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <osSemaphoreAcquire+0x94>
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8005be8 <osSemaphoreAcquire+0xa0>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e010      	b.n	8005bdc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6938      	ldr	r0, [r7, #16]
 8005bbe:	f000 fe07 	bl	80067d0 <xQueueSemaphoreTake>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d009      	beq.n	8005bdc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005bce:	f06f 0301 	mvn.w	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e002      	b.n	8005bdc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005bd6:	f06f 0302 	mvn.w	r3, #2
 8005bda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bdc:	697b      	ldr	r3, [r7, #20]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d103      	bne.n	8005c0a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005c02:	f06f 0303 	mvn.w	r3, #3
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e02c      	b.n	8005c64 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c0a:	f3ef 8305 	mrs	r3, IPSR
 8005c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c10:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01a      	beq.n	8005c4c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c1a:	f107 0308 	add.w	r3, r7, #8
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6938      	ldr	r0, [r7, #16]
 8005c22:	f000 fc63 	bl	80064ec <xQueueGiveFromISR>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d003      	beq.n	8005c34 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c2c:	f06f 0302 	mvn.w	r3, #2
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e017      	b.n	8005c64 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d014      	beq.n	8005c64 <osSemaphoreRelease+0x78>
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <osSemaphoreRelease+0x84>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	e00b      	b.n	8005c64 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2100      	movs	r1, #0
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f000 faaa 	bl	80061ac <xQueueGenericSend>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d002      	beq.n	8005c64 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c5e:	f06f 0302 	mvn.w	r3, #2
 8005c62:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c64:	697b      	ldr	r3, [r7, #20]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a07      	ldr	r2, [pc, #28]	@ (8005ca0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4a06      	ldr	r2, [pc, #24]	@ (8005ca4 <vApplicationGetIdleTaskMemory+0x30>)
 8005c8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2280      	movs	r2, #128	@ 0x80
 8005c90:	601a      	str	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20000874 	.word	0x20000874
 8005ca4:	2000091c 	.word	0x2000091c

08005ca8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a07      	ldr	r2, [pc, #28]	@ (8005cd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4a06      	ldr	r2, [pc, #24]	@ (8005cd8 <vApplicationGetTimerTaskMemory+0x30>)
 8005cbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cc6:	601a      	str	r2, [r3, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	20000b1c 	.word	0x20000b1c
 8005cd8:	20000bc4 	.word	0x20000bc4

08005cdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f103 0208 	add.w	r2, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 0208 	add.w	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f103 0208 	add.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d103      	bne.n	8005d9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e00c      	b.n	8005db8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3308      	adds	r3, #8
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e002      	b.n	8005dac <vListInsert+0x2e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d2f6      	bcs.n	8005da6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d103      	bne.n	8005e24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10b      	bne.n	8005e70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5c:	f383 8811 	msr	BASEPRI, r3
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e6a:	bf00      	nop
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e70:	f002 fd52 	bl	8008918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	441a      	add	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	441a      	add	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	22ff      	movs	r2, #255	@ 0xff
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	22ff      	movs	r2, #255	@ 0xff
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d114      	bne.n	8005ef0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01a      	beq.n	8005f04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fcea 	bl	80078ac <xTaskRemoveFromEventList>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d012      	beq.n	8005f04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ede:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <xQueueGenericReset+0xd0>)
 8005ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	e009      	b.n	8005f04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fef1 	bl	8005cdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3324      	adds	r3, #36	@ 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff feec 	bl	8005cdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f04:	f002 fd3a 	bl	800897c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f08:	2301      	movs	r3, #1
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08e      	sub	sp, #56	@ 0x38
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10b      	bne.n	8005f44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10b      	bne.n	8005f62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f5c:	bf00      	nop
 8005f5e:	bf00      	nop
 8005f60:	e7fd      	b.n	8005f5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <xQueueGenericCreateStatic+0x56>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <xQueueGenericCreateStatic+0x5a>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericCreateStatic+0x5c>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	623b      	str	r3, [r7, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <xQueueGenericCreateStatic+0x84>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <xQueueGenericCreateStatic+0x88>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <xQueueGenericCreateStatic+0x8a>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	61fb      	str	r3, [r7, #28]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fbe:	2350      	movs	r3, #80	@ 0x50
 8005fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b50      	cmp	r3, #80	@ 0x50
 8005fc6:	d00b      	beq.n	8005fe0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61bb      	str	r3, [r7, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fe0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ff4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f840 	bl	8006088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800600a:	4618      	mov	r0, r3
 800600c:	3730      	adds	r7, #48	@ 0x30
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006012:	b580      	push	{r7, lr}
 8006014:	b08a      	sub	sp, #40	@ 0x28
 8006016:	af02      	add	r7, sp, #8
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	4613      	mov	r3, r2
 800601e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	613b      	str	r3, [r7, #16]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3350      	adds	r3, #80	@ 0x50
 800604c:	4618      	mov	r0, r3
 800604e:	f002 fd85 	bl	8008b5c <pvPortMalloc>
 8006052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3350      	adds	r3, #80	@ 0x50
 8006062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800606c:	79fa      	ldrb	r2, [r7, #7]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f805 	bl	8006088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800607e:	69bb      	ldr	r3, [r7, #24]
	}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e002      	b.n	80060aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060b6:	2101      	movs	r1, #1
 80060b8:	69b8      	ldr	r0, [r7, #24]
 80060ba:	f7ff fec3 	bl	8005e44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b08a      	sub	sp, #40	@ 0x28
 80060d2:	af02      	add	r7, sp, #8
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d90b      	bls.n	8006118 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	617b      	str	r3, [r7, #20]
}
 8006112:	bf00      	nop
 8006114:	bf00      	nop
 8006116:	e7fd      	b.n	8006114 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006118:	2302      	movs	r3, #2
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	2100      	movs	r1, #0
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fef8 	bl	8005f18 <xQueueGenericCreateStatic>
 8006128:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006136:	69fb      	ldr	r3, [r7, #28]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	613b      	str	r3, [r7, #16]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d90b      	bls.n	8006188 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006188:	2202      	movs	r2, #2
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff40 	bl	8006012 <xQueueGenericCreate>
 8006192:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80061a0:	697b      	ldr	r3, [r7, #20]
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	@ 0x38
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061ba:	2300      	movs	r3, #0
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xQueueGenericSend+0x34>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <xQueueGenericSend+0x42>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSend+0x46>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSend+0x48>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xQueueGenericSend+0x64>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d103      	bne.n	800621e <xQueueGenericSend+0x72>
 8006216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <xQueueGenericSend+0x76>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <xQueueGenericSend+0x78>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <xQueueGenericSend+0x94>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006240:	f001 fcfa 	bl	8007c38 <xTaskGetSchedulerState>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <xQueueGenericSend+0xa4>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <xQueueGenericSend+0xa8>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <xQueueGenericSend+0xaa>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10b      	bne.n	8006272 <xQueueGenericSend+0xc6>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	61fb      	str	r3, [r7, #28]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006272:	f002 fb51 	bl	8008918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <xQueueGenericSend+0xdc>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d129      	bne.n	80062dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800628e:	f000 fc6d 	bl	8006b6c <prvCopyDataToQueue>
 8006292:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	d010      	beq.n	80062be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	3324      	adds	r3, #36	@ 0x24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fb03 	bl	80078ac <xTaskRemoveFromEventList>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d013      	beq.n	80062d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062ac:	4b3f      	ldr	r3, [pc, #252]	@ (80063ac <xQueueGenericSend+0x200>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	e00a      	b.n	80062d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062c4:	4b39      	ldr	r3, [pc, #228]	@ (80063ac <xQueueGenericSend+0x200>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062d4:	f002 fb52 	bl	800897c <vPortExitCritical>
				return pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	e063      	b.n	80063a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e2:	f002 fb4b 	bl	800897c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e05c      	b.n	80063a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fb3d 	bl	8007974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fa:	2301      	movs	r3, #1
 80062fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062fe:	f002 fb3d 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006302:	f001 f8a5 	bl	8007450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006306:	f002 fb07 	bl	8008918 <vPortEnterCritical>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006310:	b25b      	sxtb	r3, r3
 8006312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006316:	d103      	bne.n	8006320 <xQueueGenericSend+0x174>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006326:	b25b      	sxtb	r3, r3
 8006328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632c:	d103      	bne.n	8006336 <xQueueGenericSend+0x18a>
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006336:	f002 fb21 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633a:	1d3a      	adds	r2, r7, #4
 800633c:	f107 0314 	add.w	r3, r7, #20
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fb2c 	bl	80079a0 <xTaskCheckForTimeOut>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d124      	bne.n	8006398 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800634e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006350:	f000 fd04 	bl	8006d5c <prvIsQueueFull>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d018      	beq.n	800638c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	3310      	adds	r3, #16
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f001 fa50 	bl	8007808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800636a:	f000 fc8f 	bl	8006c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800636e:	f001 f87d 	bl	800746c <xTaskResumeAll>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f47f af7c 	bne.w	8006272 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800637a:	4b0c      	ldr	r3, [pc, #48]	@ (80063ac <xQueueGenericSend+0x200>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	e772      	b.n	8006272 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800638c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800638e:	f000 fc7d 	bl	8006c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006392:	f001 f86b 	bl	800746c <xTaskResumeAll>
 8006396:	e76c      	b.n	8006272 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800639a:	f000 fc77 	bl	8006c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800639e:	f001 f865 	bl	800746c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3738      	adds	r7, #56	@ 0x38
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	e000ed04 	.word	0xe000ed04

080063b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b090      	sub	sp, #64	@ 0x40
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSendFromISR+0x3e>
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSendFromISR+0x42>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSendFromISR+0x44>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <xQueueGenericSendFromISR+0x6e>
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <xQueueGenericSendFromISR+0x72>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSendFromISR+0x74>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	623b      	str	r3, [r7, #32]
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006440:	f002 fb4a 	bl	8008ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006444:	f3ef 8211 	mrs	r2, BASEPRI
 8006448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800645c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800645e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <xQueueGenericSendFromISR+0xc2>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d12f      	bne.n	80064d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006478:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006488:	f000 fb70 	bl	8006b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800648c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d112      	bne.n	80064bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	3324      	adds	r3, #36	@ 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fa02 	bl	80078ac <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	b25a      	sxtb	r2, r3
 80064c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80064d0:	e001      	b.n	80064d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3740      	adds	r7, #64	@ 0x40
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	@ 0x38
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	623b      	str	r3, [r7, #32]
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	61fb      	str	r3, [r7, #28]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <xQueueGiveFromISR+0x5c>
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <xQueueGiveFromISR+0x60>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <xQueueGiveFromISR+0x62>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	61bb      	str	r3, [r7, #24]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800656a:	f002 fab5 	bl	8008ad8 <vPortValidateInterruptPriority>
	__asm volatile
 800656e:	f3ef 8211 	mrs	r2, BASEPRI
 8006572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	617a      	str	r2, [r7, #20]
 8006584:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006586:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006588:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006596:	429a      	cmp	r2, r3
 8006598:	d22b      	bcs.n	80065f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d112      	bne.n	80065dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d016      	beq.n	80065ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	3324      	adds	r3, #36	@ 0x24
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 f972 	bl	80078ac <xTaskRemoveFromEventList>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2201      	movs	r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e007      	b.n	80065ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e0:	3301      	adds	r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	b25a      	sxtb	r2, r3
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f0:	e001      	b.n	80065f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f383 8811 	msr	BASEPRI, r3
}
 8006600:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006604:	4618      	mov	r0, r3
 8006606:	3738      	adds	r7, #56	@ 0x38
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	@ 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xQueueReceive+0x32>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	623b      	str	r3, [r7, #32]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <xQueueReceive+0x40>
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <xQueueReceive+0x44>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <xQueueReceive+0x46>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xQueueReceive+0x62>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	61fb      	str	r3, [r7, #28]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800666e:	f001 fae3 	bl	8007c38 <xTaskGetSchedulerState>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <xQueueReceive+0x72>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueReceive+0x76>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <xQueueReceive+0x78>
 8006682:	2300      	movs	r3, #0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <xQueueReceive+0x94>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61bb      	str	r3, [r7, #24]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066a0:	f002 f93a 	bl	8008918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01f      	beq.n	80066f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066b4:	f000 fac4 	bl	8006c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	1e5a      	subs	r2, r3, #1
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	3310      	adds	r3, #16
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 f8ed 	bl	80078ac <xTaskRemoveFromEventList>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066d8:	4b3c      	ldr	r3, [pc, #240]	@ (80067cc <xQueueReceive+0x1c0>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066e8:	f002 f948 	bl	800897c <vPortExitCritical>
				return pdPASS;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e069      	b.n	80067c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d103      	bne.n	80066fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066f6:	f002 f941 	bl	800897c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e062      	b.n	80067c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	4618      	mov	r0, r3
 800670a:	f001 f933 	bl	8007974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006712:	f002 f933 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006716:	f000 fe9b 	bl	8007450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800671a:	f002 f8fd 	bl	8008918 <vPortEnterCritical>
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006724:	b25b      	sxtb	r3, r3
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672a:	d103      	bne.n	8006734 <xQueueReceive+0x128>
 800672c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800673a:	b25b      	sxtb	r3, r3
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d103      	bne.n	800674a <xQueueReceive+0x13e>
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800674a:	f002 f917 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800674e:	1d3a      	adds	r2, r7, #4
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f922 	bl	80079a0 <xTaskCheckForTimeOut>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d123      	bne.n	80067aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006764:	f000 fae4 	bl	8006d30 <prvIsQueueEmpty>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d017      	beq.n	800679e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	3324      	adds	r3, #36	@ 0x24
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f846 	bl	8007808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800677c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800677e:	f000 fa85 	bl	8006c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006782:	f000 fe73 	bl	800746c <xTaskResumeAll>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d189      	bne.n	80066a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800678c:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <xQueueReceive+0x1c0>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	e780      	b.n	80066a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800679e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067a0:	f000 fa74 	bl	8006c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a4:	f000 fe62 	bl	800746c <xTaskResumeAll>
 80067a8:	e77a      	b.n	80066a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ac:	f000 fa6e 	bl	8006c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067b0:	f000 fe5c 	bl	800746c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067b6:	f000 fabb 	bl	8006d30 <prvIsQueueEmpty>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f43f af6f 	beq.w	80066a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3730      	adds	r7, #48	@ 0x30
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	e000ed04 	.word	0xe000ed04

080067d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	@ 0x38
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	623b      	str	r3, [r7, #32]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	61fb      	str	r3, [r7, #28]
}
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	e7fd      	b.n	8006820 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006824:	f001 fa08 	bl	8007c38 <xTaskGetSchedulerState>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <xQueueSemaphoreTake+0x64>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <xQueueSemaphoreTake+0x68>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <xQueueSemaphoreTake+0x6a>
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10b      	bne.n	8006856 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	61bb      	str	r3, [r7, #24]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006856:	f002 f85f 	bl	8008918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800685a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d024      	beq.n	80068b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	1e5a      	subs	r2, r3, #1
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800686e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006876:	f001 fb59 	bl	8007f2c <pvTaskIncrementMutexHeldCount>
 800687a:	4602      	mov	r2, r0
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00f      	beq.n	80068a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	3310      	adds	r3, #16
 800688c:	4618      	mov	r0, r3
 800688e:	f001 f80d 	bl	80078ac <xTaskRemoveFromEventList>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006898:	4b54      	ldr	r3, [pc, #336]	@ (80069ec <xQueueSemaphoreTake+0x21c>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068a8:	f002 f868 	bl	800897c <vPortExitCritical>
				return pdPASS;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e098      	b.n	80069e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d112      	bne.n	80068dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	617b      	str	r3, [r7, #20]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80068d4:	f002 f852 	bl	800897c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068d8:	2300      	movs	r3, #0
 80068da:	e082      	b.n	80069e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068e2:	f107 030c 	add.w	r3, r7, #12
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 f844 	bl	8007974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068f0:	f002 f844 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068f4:	f000 fdac 	bl	8007450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068f8:	f002 f80e 	bl	8008918 <vPortEnterCritical>
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006902:	b25b      	sxtb	r3, r3
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d103      	bne.n	8006912 <xQueueSemaphoreTake+0x142>
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006918:	b25b      	sxtb	r3, r3
 800691a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691e:	d103      	bne.n	8006928 <xQueueSemaphoreTake+0x158>
 8006920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006928:	f002 f828 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800692c:	463a      	mov	r2, r7
 800692e:	f107 030c 	add.w	r3, r7, #12
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f001 f833 	bl	80079a0 <xTaskCheckForTimeOut>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d132      	bne.n	80069a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006940:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006942:	f000 f9f5 	bl	8006d30 <prvIsQueueEmpty>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d026      	beq.n	800699a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006954:	f001 ffe0 	bl	8008918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4618      	mov	r0, r3
 800695e:	f001 f989 	bl	8007c74 <xTaskPriorityInherit>
 8006962:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006964:	f002 f80a 	bl	800897c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	3324      	adds	r3, #36	@ 0x24
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ff49 	bl	8007808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006978:	f000 f988 	bl	8006c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800697c:	f000 fd76 	bl	800746c <xTaskResumeAll>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f47f af67 	bne.w	8006856 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006988:	4b18      	ldr	r3, [pc, #96]	@ (80069ec <xQueueSemaphoreTake+0x21c>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	e75d      	b.n	8006856 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800699a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800699c:	f000 f976 	bl	8006c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a0:	f000 fd64 	bl	800746c <xTaskResumeAll>
 80069a4:	e757      	b.n	8006856 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069a8:	f000 f970 	bl	8006c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ac:	f000 fd5e 	bl	800746c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069b2:	f000 f9bd 	bl	8006d30 <prvIsQueueEmpty>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f43f af4c 	beq.w	8006856 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00d      	beq.n	80069e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80069c4:	f001 ffa8 	bl	8008918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80069ca:	f000 f8b7 	bl	8006b3c <prvGetDisinheritPriorityAfterTimeout>
 80069ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 fa24 	bl	8007e24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80069dc:	f001 ffce 	bl	800897c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3738      	adds	r7, #56	@ 0x38
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	e000ed04 	.word	0xe000ed04

080069f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08e      	sub	sp, #56	@ 0x38
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	623b      	str	r3, [r7, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <xQueueReceiveFromISR+0x3c>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <xQueueReceiveFromISR+0x40>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <xQueueReceiveFromISR+0x42>
 8006a30:	2300      	movs	r3, #0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	61fb      	str	r3, [r7, #28]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a4e:	f002 f843 	bl	8008ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a52:	f3ef 8211 	mrs	r2, BASEPRI
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61ba      	str	r2, [r7, #24]
 8006a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02f      	beq.n	8006ada <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a88:	f000 f8da 	bl	8006c40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	1e5a      	subs	r2, r3, #1
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d112      	bne.n	8006ac4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d016      	beq.n	8006ad4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fefe 	bl	80078ac <xTaskRemoveFromEventList>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00e      	beq.n	8006ad4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	e007      	b.n	8006ad4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ac8:	3301      	adds	r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	b25a      	sxtb	r2, r3
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad8:	e001      	b.n	8006ade <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f383 8811 	msr	BASEPRI, r3
}
 8006ae8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3738      	adds	r7, #56	@ 0x38
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10b      	bne.n	8006b1e <vQueueDelete+0x2a>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	60bb      	str	r3, [r7, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	bf00      	nop
 8006b1c:	e7fd      	b.n	8006b1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 f95e 	bl	8006de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f002 f8e2 	bl	8008cf8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006b34:	bf00      	nop
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e001      	b.n	8006b5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d14d      	bne.n	8006c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f8d4 	bl	8007d44 <xTaskPriorityDisinherit>
 8006b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	e043      	b.n	8006c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d119      	bne.n	8006be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6858      	ldr	r0, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	f003 f813 	bl	8009be2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc4:	441a      	add	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d32b      	bcc.n	8006c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	e026      	b.n	8006c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68d8      	ldr	r0, [r3, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	461a      	mov	r2, r3
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	f002 fff9 	bl	8009be2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d207      	bcs.n	8006c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	425b      	negs	r3, r3
 8006c16:	441a      	add	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d105      	bne.n	8006c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c36:	697b      	ldr	r3, [r7, #20]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	441a      	add	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d303      	bcc.n	8006c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68d9      	ldr	r1, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6838      	ldr	r0, [r7, #0]
 8006c80:	f002 ffaf 	bl	8009be2 <memcpy>
	}
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c94:	f001 fe40 	bl	8008918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca0:	e011      	b.n	8006cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d012      	beq.n	8006cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	@ 0x24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fdfc 	bl	80078ac <xTaskRemoveFromEventList>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cba:	f000 fed5 	bl	8007a68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dce9      	bgt.n	8006ca2 <prvUnlockQueue+0x16>
 8006cce:	e000      	b.n	8006cd2 <prvUnlockQueue+0x46>
					break;
 8006cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	22ff      	movs	r2, #255	@ 0xff
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cda:	f001 fe4f 	bl	800897c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cde:	f001 fe1b 	bl	8008918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cea:	e011      	b.n	8006d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d012      	beq.n	8006d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fdd7 	bl	80078ac <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d04:	f000 feb0 	bl	8007a68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dce9      	bgt.n	8006cec <prvUnlockQueue+0x60>
 8006d18:	e000      	b.n	8006d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	22ff      	movs	r2, #255	@ 0xff
 8006d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d24:	f001 fe2a 	bl	800897c <vPortExitCritical>
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d38:	f001 fdee 	bl	8008918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e001      	b.n	8006d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d4e:	f001 fe15 	bl	800897c <vPortExitCritical>

	return xReturn;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d64:	f001 fdd8 	bl	8008918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d102      	bne.n	8006d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e001      	b.n	8006d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f001 fdfd 	bl	800897c <vPortExitCritical>

	return xReturn;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e014      	b.n	8006dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8006ddc <vQueueAddToRegistry+0x50>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006da8:	490c      	ldr	r1, [pc, #48]	@ (8006ddc <vQueueAddToRegistry+0x50>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006db2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ddc <vQueueAddToRegistry+0x50>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dbe:	e006      	b.n	8006dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b07      	cmp	r3, #7
 8006dca:	d9e7      	bls.n	8006d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000fc4 	.word	0x20000fc4

08006de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e016      	b.n	8006e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006dee:	4a10      	ldr	r2, [pc, #64]	@ (8006e30 <vQueueUnregisterQueue+0x50>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	4413      	add	r3, r2
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d10b      	bne.n	8006e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8006e30 <vQueueUnregisterQueue+0x50>)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2100      	movs	r1, #0
 8006e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e08:	4a09      	ldr	r2, [pc, #36]	@ (8006e30 <vQueueUnregisterQueue+0x50>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4413      	add	r3, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	605a      	str	r2, [r3, #4]
				break;
 8006e14:	e006      	b.n	8006e24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b07      	cmp	r3, #7
 8006e20:	d9e5      	bls.n	8006dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	20000fc4 	.word	0x20000fc4

08006e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e44:	f001 fd68 	bl	8008918 <vPortEnterCritical>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d103      	bne.n	8006e5e <vQueueWaitForMessageRestricted+0x2a>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d103      	bne.n	8006e74 <vQueueWaitForMessageRestricted+0x40>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e74:	f001 fd82 	bl	800897c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3324      	adds	r3, #36	@ 0x24
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fce3 	bl	8007854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f7ff fefc 	bl	8006c8c <prvUnlockQueue>
	}
 8006e94:	bf00      	nop
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08e      	sub	sp, #56	@ 0x38
 8006ea0:	af04      	add	r7, sp, #16
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	623b      	str	r3, [r7, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	61fb      	str	r3, [r7, #28]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ee6:	23a8      	movs	r3, #168	@ 0xa8
 8006ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2ba8      	cmp	r3, #168	@ 0xa8
 8006eee:	d00b      	beq.n	8006f08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	61bb      	str	r3, [r7, #24]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01e      	beq.n	8006f4e <xTaskCreateStatic+0xb2>
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01b      	beq.n	8006f4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9303      	str	r3, [sp, #12]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	9302      	str	r3, [sp, #8]
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f851 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f48:	f000 f8f6 	bl	8007138 <prvAddNewTaskToReadyList>
 8006f4c:	e001      	b.n	8006f52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f52:	697b      	ldr	r3, [r7, #20]
	}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3728      	adds	r7, #40	@ 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08c      	sub	sp, #48	@ 0x30
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fdf3 	bl	8008b5c <pvPortMalloc>
 8006f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f7e:	20a8      	movs	r0, #168	@ 0xa8
 8006f80:	f001 fdec 	bl	8008b5c <pvPortMalloc>
 8006f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f92:	e005      	b.n	8006fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f94:	6978      	ldr	r0, [r7, #20]
 8006f96:	f001 feaf 	bl	8008cf8 <vPortFree>
 8006f9a:	e001      	b.n	8006fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d017      	beq.n	8006fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f80f 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f000 f8b4 	bl	8007138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e002      	b.n	8006fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	21a5      	movs	r1, #165	@ 0xa5
 8007002:	f002 fd18 	bl	8009a36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007010:	3b01      	subs	r3, #1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f023 0307 	bic.w	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01f      	beq.n	8007088 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007048:	2300      	movs	r3, #0
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e012      	b.n	8007074 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	3334      	adds	r3, #52	@ 0x34
 800705e:	460a      	mov	r2, r1
 8007060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d006      	beq.n	800707c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d9e9      	bls.n	800704e <prvInitialiseNewTask+0x66>
 800707a:	e000      	b.n	800707e <prvInitialiseNewTask+0x96>
			{
				break;
 800707c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007086:	e003      	b.n	8007090 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b37      	cmp	r3, #55	@ 0x37
 8007094:	d901      	bls.n	800709a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007096:	2337      	movs	r3, #55	@ 0x37
 8007098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fe33 	bl	8005d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	3318      	adds	r3, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fe2e 	bl	8005d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	3354      	adds	r3, #84	@ 0x54
 80070ea:	224c      	movs	r2, #76	@ 0x4c
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 fca1 	bl	8009a36 <memset>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <prvInitialiseNewTask+0x144>)
 80070f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007130 <prvInitialiseNewTask+0x148>)
 80070fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <prvInitialiseNewTask+0x14c>)
 8007104:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f001 fad0 	bl	80086b0 <pxPortInitialiseStack>
 8007110:	4602      	mov	r2, r0
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200127c8 	.word	0x200127c8
 8007130:	20012830 	.word	0x20012830
 8007134:	20012898 	.word	0x20012898

08007138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007140:	f001 fbea 	bl	8008918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007144:	4b2d      	ldr	r3, [pc, #180]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	4a2c      	ldr	r2, [pc, #176]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 800714c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800714e:	4b2c      	ldr	r3, [pc, #176]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007156:	4a2a      	ldr	r2, [pc, #168]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800715c:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d110      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007164:	f000 fca4 	bl	8007ab0 <prvInitialiseTaskLists>
 8007168:	e00d      	b.n	8007186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800716a:	4b26      	ldr	r3, [pc, #152]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007172:	4b23      	ldr	r3, [pc, #140]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d802      	bhi.n	8007186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007180:	4a1f      	ldr	r2, [pc, #124]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007186:	4b20      	ldr	r3, [pc, #128]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 800718e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007190:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719c:	4b1b      	ldr	r3, [pc, #108]	@ (800720c <prvAddNewTaskToReadyList+0xd4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d903      	bls.n	80071ac <prvAddNewTaskToReadyList+0x74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	4a18      	ldr	r2, [pc, #96]	@ (800720c <prvAddNewTaskToReadyList+0xd4>)
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <prvAddNewTaskToReadyList+0xd8>)
 80071ba:	441a      	add	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7fe fdb7 	bl	8005d36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071c8:	f001 fbd8 	bl	800897c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00e      	beq.n	80071f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	429a      	cmp	r2, r3
 80071e0:	d207      	bcs.n	80071f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <prvAddNewTaskToReadyList+0xdc>)
 80071e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	200014d8 	.word	0x200014d8
 8007200:	20001004 	.word	0x20001004
 8007204:	200014e4 	.word	0x200014e4
 8007208:	200014f4 	.word	0x200014f4
 800720c:	200014e0 	.word	0x200014e0
 8007210:	20001008 	.word	0x20001008
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d018      	beq.n	800725c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800722a:	4b14      	ldr	r3, [pc, #80]	@ (800727c <vTaskDelay+0x64>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <vTaskDelay+0x32>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60bb      	str	r3, [r7, #8]
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop
 8007248:	e7fd      	b.n	8007246 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800724a:	f000 f901 	bl	8007450 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800724e:	2100      	movs	r1, #0
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fe7f 	bl	8007f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007256:	f000 f909 	bl	800746c <xTaskResumeAll>
 800725a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d107      	bne.n	8007272 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007262:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <vTaskDelay+0x68>)
 8007264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20001500 	.word	0x20001500
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800728c:	f001 fb44 	bl	8008918 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <vTaskSuspend+0x18>
 8007296:	4b30      	ldr	r3, [pc, #192]	@ (8007358 <vTaskSuspend+0xd4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	e000      	b.n	800729e <vTaskSuspend+0x1a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe fda3 	bl	8005df0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3318      	adds	r3, #24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fd9a 	bl	8005df0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4826      	ldr	r0, [pc, #152]	@ (800735c <vTaskSuspend+0xd8>)
 80072c4:	f7fe fd37 	bl	8005d36 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d103      	bne.n	80072dc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80072dc:	f001 fb4e 	bl	800897c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80072e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <vTaskSuspend+0xdc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80072e8:	f001 fb16 	bl	8008918 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80072ec:	f000 fc84 	bl	8007bf8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80072f0:	f001 fb44 	bl	800897c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80072f4:	4b18      	ldr	r3, [pc, #96]	@ (8007358 <vTaskSuspend+0xd4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d128      	bne.n	8007350 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 80072fe:	4b18      	ldr	r3, [pc, #96]	@ (8007360 <vTaskSuspend+0xdc>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d018      	beq.n	8007338 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007306:	4b17      	ldr	r3, [pc, #92]	@ (8007364 <vTaskSuspend+0xe0>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <vTaskSuspend+0xa2>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	60bb      	str	r3, [r7, #8]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007326:	4b10      	ldr	r3, [pc, #64]	@ (8007368 <vTaskSuspend+0xe4>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007336:	e00b      	b.n	8007350 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007338:	4b08      	ldr	r3, [pc, #32]	@ (800735c <vTaskSuspend+0xd8>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <vTaskSuspend+0xe8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d103      	bne.n	800734c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <vTaskSuspend+0xd4>)
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
	}
 800734a:	e001      	b.n	8007350 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800734c:	f000 f9f6 	bl	800773c <vTaskSwitchContext>
	}
 8007350:	bf00      	nop
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20001004 	.word	0x20001004
 800735c:	200014c4 	.word	0x200014c4
 8007360:	200014e4 	.word	0x200014e4
 8007364:	20001500 	.word	0x20001500
 8007368:	e000ed04 	.word	0xe000ed04
 800736c:	200014d8 	.word	0x200014d8

08007370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	@ 0x28
 8007374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800737a:	2300      	movs	r3, #0
 800737c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800737e:	463a      	mov	r2, r7
 8007380:	1d39      	adds	r1, r7, #4
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fc74 	bl	8005c74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	9202      	str	r2, [sp, #8]
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	2300      	movs	r3, #0
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	460a      	mov	r2, r1
 800739e:	4924      	ldr	r1, [pc, #144]	@ (8007430 <vTaskStartScheduler+0xc0>)
 80073a0:	4824      	ldr	r0, [pc, #144]	@ (8007434 <vTaskStartScheduler+0xc4>)
 80073a2:	f7ff fd7b 	bl	8006e9c <xTaskCreateStatic>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4a23      	ldr	r2, [pc, #140]	@ (8007438 <vTaskStartScheduler+0xc8>)
 80073aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073ac:	4b22      	ldr	r3, [pc, #136]	@ (8007438 <vTaskStartScheduler+0xc8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e001      	b.n	80073be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d102      	bne.n	80073ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073c4:	f000 fe1a 	bl	8007ffc <xTimerCreateTimerTask>
 80073c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d11b      	bne.n	8007408 <vTaskStartScheduler+0x98>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
}
 80073e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073e4:	4b15      	ldr	r3, [pc, #84]	@ (800743c <vTaskStartScheduler+0xcc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3354      	adds	r3, #84	@ 0x54
 80073ea:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <vTaskStartScheduler+0xd0>)
 80073ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073ee:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <vTaskStartScheduler+0xd4>)
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073f6:	4b14      	ldr	r3, [pc, #80]	@ (8007448 <vTaskStartScheduler+0xd8>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073fc:	4b13      	ldr	r3, [pc, #76]	@ (800744c <vTaskStartScheduler+0xdc>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007402:	f001 f9e5 	bl	80087d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007406:	e00f      	b.n	8007428 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d10b      	bne.n	8007428 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <vTaskStartScheduler+0xb4>
}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	0800c304 	.word	0x0800c304
 8007434:	08007a81 	.word	0x08007a81
 8007438:	200014fc 	.word	0x200014fc
 800743c:	20001004 	.word	0x20001004
 8007440:	2000002c 	.word	0x2000002c
 8007444:	200014f8 	.word	0x200014f8
 8007448:	200014e4 	.word	0x200014e4
 800744c:	200014dc 	.word	0x200014dc

08007450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007454:	4b04      	ldr	r3, [pc, #16]	@ (8007468 <vTaskSuspendAll+0x18>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	4a03      	ldr	r2, [pc, #12]	@ (8007468 <vTaskSuspendAll+0x18>)
 800745c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	20001500 	.word	0x20001500

0800746c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800747a:	4b42      	ldr	r3, [pc, #264]	@ (8007584 <xTaskResumeAll+0x118>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <xTaskResumeAll+0x2e>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	603b      	str	r3, [r7, #0]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800749a:	f001 fa3d 	bl	8008918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800749e:	4b39      	ldr	r3, [pc, #228]	@ (8007584 <xTaskResumeAll+0x118>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	4a37      	ldr	r2, [pc, #220]	@ (8007584 <xTaskResumeAll+0x118>)
 80074a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074a8:	4b36      	ldr	r3, [pc, #216]	@ (8007584 <xTaskResumeAll+0x118>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d162      	bne.n	8007576 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074b0:	4b35      	ldr	r3, [pc, #212]	@ (8007588 <xTaskResumeAll+0x11c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05e      	beq.n	8007576 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074b8:	e02f      	b.n	800751a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ba:	4b34      	ldr	r3, [pc, #208]	@ (800758c <xTaskResumeAll+0x120>)
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	3318      	adds	r3, #24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fc92 	bl	8005df0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fc8d 	bl	8005df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074da:	4b2d      	ldr	r3, [pc, #180]	@ (8007590 <xTaskResumeAll+0x124>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d903      	bls.n	80074ea <xTaskResumeAll+0x7e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007590 <xTaskResumeAll+0x124>)
 80074e8:	6013      	str	r3, [r2, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a27      	ldr	r2, [pc, #156]	@ (8007594 <xTaskResumeAll+0x128>)
 80074f8:	441a      	add	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe fc18 	bl	8005d36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750a:	4b23      	ldr	r3, [pc, #140]	@ (8007598 <xTaskResumeAll+0x12c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	429a      	cmp	r2, r3
 8007512:	d302      	bcc.n	800751a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007514:	4b21      	ldr	r3, [pc, #132]	@ (800759c <xTaskResumeAll+0x130>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800751a:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <xTaskResumeAll+0x120>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1cb      	bne.n	80074ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007528:	f000 fb66 	bl	8007bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800752c:	4b1c      	ldr	r3, [pc, #112]	@ (80075a0 <xTaskResumeAll+0x134>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d010      	beq.n	800755a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007538:	f000 f846 	bl	80075c8 <xTaskIncrementTick>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007542:	4b16      	ldr	r3, [pc, #88]	@ (800759c <xTaskResumeAll+0x130>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3b01      	subs	r3, #1
 800754c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1f1      	bne.n	8007538 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007554:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <xTaskResumeAll+0x134>)
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800755a:	4b10      	ldr	r3, [pc, #64]	@ (800759c <xTaskResumeAll+0x130>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007562:	2301      	movs	r3, #1
 8007564:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007566:	4b0f      	ldr	r3, [pc, #60]	@ (80075a4 <xTaskResumeAll+0x138>)
 8007568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007576:	f001 fa01 	bl	800897c <vPortExitCritical>

	return xAlreadyYielded;
 800757a:	68bb      	ldr	r3, [r7, #8]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20001500 	.word	0x20001500
 8007588:	200014d8 	.word	0x200014d8
 800758c:	20001498 	.word	0x20001498
 8007590:	200014e0 	.word	0x200014e0
 8007594:	20001008 	.word	0x20001008
 8007598:	20001004 	.word	0x20001004
 800759c:	200014ec 	.word	0x200014ec
 80075a0:	200014e8 	.word	0x200014e8
 80075a4:	e000ed04 	.word	0xe000ed04

080075a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ae:	4b05      	ldr	r3, [pc, #20]	@ (80075c4 <xTaskGetTickCount+0x1c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075b4:	687b      	ldr	r3, [r7, #4]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	200014dc 	.word	0x200014dc

080075c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007710 <xTaskIncrementTick+0x148>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 8090 	bne.w	80076fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007714 <xTaskIncrementTick+0x14c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007714 <xTaskIncrementTick+0x14c>)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d121      	bne.n	8007634 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80075f0:	4b49      	ldr	r3, [pc, #292]	@ (8007718 <xTaskIncrementTick+0x150>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <xTaskIncrementTick+0x4a>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	e7fd      	b.n	800760e <xTaskIncrementTick+0x46>
 8007612:	4b41      	ldr	r3, [pc, #260]	@ (8007718 <xTaskIncrementTick+0x150>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	4b40      	ldr	r3, [pc, #256]	@ (800771c <xTaskIncrementTick+0x154>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a3e      	ldr	r2, [pc, #248]	@ (8007718 <xTaskIncrementTick+0x150>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	4a3e      	ldr	r2, [pc, #248]	@ (800771c <xTaskIncrementTick+0x154>)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	4b3e      	ldr	r3, [pc, #248]	@ (8007720 <xTaskIncrementTick+0x158>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	4a3c      	ldr	r2, [pc, #240]	@ (8007720 <xTaskIncrementTick+0x158>)
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	f000 fae2 	bl	8007bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007634:	4b3b      	ldr	r3, [pc, #236]	@ (8007724 <xTaskIncrementTick+0x15c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	429a      	cmp	r2, r3
 800763c:	d349      	bcc.n	80076d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800763e:	4b36      	ldr	r3, [pc, #216]	@ (8007718 <xTaskIncrementTick+0x150>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007648:	4b36      	ldr	r3, [pc, #216]	@ (8007724 <xTaskIncrementTick+0x15c>)
 800764a:	f04f 32ff 	mov.w	r2, #4294967295
 800764e:	601a      	str	r2, [r3, #0]
					break;
 8007650:	e03f      	b.n	80076d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007652:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <xTaskIncrementTick+0x150>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d203      	bcs.n	8007672 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800766a:	4a2e      	ldr	r2, [pc, #184]	@ (8007724 <xTaskIncrementTick+0x15c>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007670:	e02f      	b.n	80076d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3304      	adds	r3, #4
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fbba 	bl	8005df0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	3318      	adds	r3, #24
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe fbb1 	bl	8005df0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	4b25      	ldr	r3, [pc, #148]	@ (8007728 <xTaskIncrementTick+0x160>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d903      	bls.n	80076a2 <xTaskIncrementTick+0xda>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769e:	4a22      	ldr	r2, [pc, #136]	@ (8007728 <xTaskIncrementTick+0x160>)
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4a1f      	ldr	r2, [pc, #124]	@ (800772c <xTaskIncrementTick+0x164>)
 80076b0:	441a      	add	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7fe fb3c 	bl	8005d36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007730 <xTaskIncrementTick+0x168>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d3b8      	bcc.n	800763e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076d0:	e7b5      	b.n	800763e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076d2:	4b17      	ldr	r3, [pc, #92]	@ (8007730 <xTaskIncrementTick+0x168>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d8:	4914      	ldr	r1, [pc, #80]	@ (800772c <xTaskIncrementTick+0x164>)
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d901      	bls.n	80076ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076ee:	4b11      	ldr	r3, [pc, #68]	@ (8007734 <xTaskIncrementTick+0x16c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	e004      	b.n	8007706 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076fc:	4b0e      	ldr	r3, [pc, #56]	@ (8007738 <xTaskIncrementTick+0x170>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a0d      	ldr	r2, [pc, #52]	@ (8007738 <xTaskIncrementTick+0x170>)
 8007704:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007706:	697b      	ldr	r3, [r7, #20]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20001500 	.word	0x20001500
 8007714:	200014dc 	.word	0x200014dc
 8007718:	20001490 	.word	0x20001490
 800771c:	20001494 	.word	0x20001494
 8007720:	200014f0 	.word	0x200014f0
 8007724:	200014f8 	.word	0x200014f8
 8007728:	200014e0 	.word	0x200014e0
 800772c:	20001008 	.word	0x20001008
 8007730:	20001004 	.word	0x20001004
 8007734:	200014ec 	.word	0x200014ec
 8007738:	200014e8 	.word	0x200014e8

0800773c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007742:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <vTaskSwitchContext+0xb4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800774a:	4b2a      	ldr	r3, [pc, #168]	@ (80077f4 <vTaskSwitchContext+0xb8>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007750:	e047      	b.n	80077e2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007752:	4b28      	ldr	r3, [pc, #160]	@ (80077f4 <vTaskSwitchContext+0xb8>)
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b27      	ldr	r3, [pc, #156]	@ (80077f8 <vTaskSwitchContext+0xbc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e011      	b.n	8007784 <vTaskSwitchContext+0x48>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <vTaskSwitchContext+0x42>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	607b      	str	r3, [r7, #4]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vTaskSwitchContext+0x3e>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b01      	subs	r3, #1
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	491d      	ldr	r1, [pc, #116]	@ (80077fc <vTaskSwitchContext+0xc0>)
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0e3      	beq.n	8007760 <vTaskSwitchContext+0x24>
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4a16      	ldr	r2, [pc, #88]	@ (80077fc <vTaskSwitchContext+0xc0>)
 80077a4:	4413      	add	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3308      	adds	r3, #8
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d104      	bne.n	80077c8 <vTaskSwitchContext+0x8c>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	605a      	str	r2, [r3, #4]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	4a0c      	ldr	r2, [pc, #48]	@ (8007800 <vTaskSwitchContext+0xc4>)
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4a09      	ldr	r2, [pc, #36]	@ (80077f8 <vTaskSwitchContext+0xbc>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077d8:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <vTaskSwitchContext+0xc4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3354      	adds	r3, #84	@ 0x54
 80077de:	4a09      	ldr	r2, [pc, #36]	@ (8007804 <vTaskSwitchContext+0xc8>)
 80077e0:	6013      	str	r3, [r2, #0]
}
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	20001500 	.word	0x20001500
 80077f4:	200014ec 	.word	0x200014ec
 80077f8:	200014e0 	.word	0x200014e0
 80077fc:	20001008 	.word	0x20001008
 8007800:	20001004 	.word	0x20001004
 8007804:	2000002c 	.word	0x2000002c

08007808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <vTaskPlaceOnEventList+0x48>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3318      	adds	r3, #24
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fe faa0 	bl	8005d7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800783e:	2101      	movs	r1, #1
 8007840:	6838      	ldr	r0, [r7, #0]
 8007842:	f000 fb87 	bl	8007f54 <prvAddCurrentTaskToDelayedList>
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20001004 	.word	0x20001004

08007854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10b      	bne.n	800787e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	617b      	str	r3, [r7, #20]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800787e:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3318      	adds	r3, #24
 8007884:	4619      	mov	r1, r3
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7fe fa55 	bl	8005d36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007892:	f04f 33ff 	mov.w	r3, #4294967295
 8007896:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	68b8      	ldr	r0, [r7, #8]
 800789c:	f000 fb5a 	bl	8007f54 <prvAddCurrentTaskToDelayedList>
	}
 80078a0:	bf00      	nop
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20001004 	.word	0x20001004

080078ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60fb      	str	r3, [r7, #12]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3318      	adds	r3, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fa86 	bl	8005df0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e4:	4b1d      	ldr	r3, [pc, #116]	@ (800795c <xTaskRemoveFromEventList+0xb0>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11d      	bne.n	8007928 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fa7d 	bl	8005df0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fa:	4b19      	ldr	r3, [pc, #100]	@ (8007960 <xTaskRemoveFromEventList+0xb4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d903      	bls.n	800790a <xTaskRemoveFromEventList+0x5e>
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	4a16      	ldr	r2, [pc, #88]	@ (8007960 <xTaskRemoveFromEventList+0xb4>)
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a13      	ldr	r2, [pc, #76]	@ (8007964 <xTaskRemoveFromEventList+0xb8>)
 8007918:	441a      	add	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fe fa08 	bl	8005d36 <vListInsertEnd>
 8007926:	e005      	b.n	8007934 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3318      	adds	r3, #24
 800792c:	4619      	mov	r1, r3
 800792e:	480e      	ldr	r0, [pc, #56]	@ (8007968 <xTaskRemoveFromEventList+0xbc>)
 8007930:	f7fe fa01 	bl	8005d36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	4b0c      	ldr	r3, [pc, #48]	@ (800796c <xTaskRemoveFromEventList+0xc0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	429a      	cmp	r2, r3
 8007940:	d905      	bls.n	800794e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007942:	2301      	movs	r3, #1
 8007944:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007946:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <xTaskRemoveFromEventList+0xc4>)
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e001      	b.n	8007952 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007952:	697b      	ldr	r3, [r7, #20]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20001500 	.word	0x20001500
 8007960:	200014e0 	.word	0x200014e0
 8007964:	20001008 	.word	0x20001008
 8007968:	20001498 	.word	0x20001498
 800796c:	20001004 	.word	0x20001004
 8007970:	200014ec 	.word	0x200014ec

08007974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800797c:	4b06      	ldr	r3, [pc, #24]	@ (8007998 <vTaskInternalSetTimeOutState+0x24>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <vTaskInternalSetTimeOutState+0x28>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	200014f0 	.word	0x200014f0
 800799c:	200014dc 	.word	0x200014dc

080079a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10b      	bne.n	80079e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	bf00      	nop
 80079e4:	e7fd      	b.n	80079e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80079e6:	f000 ff97 	bl	8008918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007a60 <xTaskCheckForTimeOut+0xc0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a02:	d102      	bne.n	8007a0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e023      	b.n	8007a52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b15      	ldr	r3, [pc, #84]	@ (8007a64 <xTaskCheckForTimeOut+0xc4>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d007      	beq.n	8007a26 <xTaskCheckForTimeOut+0x86>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	e015      	b.n	8007a52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d20b      	bcs.n	8007a48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	1ad2      	subs	r2, r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff ff99 	bl	8007974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	e004      	b.n	8007a52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a52:	f000 ff93 	bl	800897c <vPortExitCritical>

	return xReturn;
 8007a56:	69fb      	ldr	r3, [r7, #28]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	200014dc 	.word	0x200014dc
 8007a64:	200014f0 	.word	0x200014f0

08007a68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a6c:	4b03      	ldr	r3, [pc, #12]	@ (8007a7c <vTaskMissedYield+0x14>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
}
 8007a72:	bf00      	nop
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	200014ec 	.word	0x200014ec

08007a80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a88:	f000 f852 	bl	8007b30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a8c:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <prvIdleTask+0x28>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d9f9      	bls.n	8007a88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <prvIdleTask+0x2c>)
 8007a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007aa4:	e7f0      	b.n	8007a88 <prvIdleTask+0x8>
 8007aa6:	bf00      	nop
 8007aa8:	20001008 	.word	0x20001008
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	e00c      	b.n	8007ad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a12      	ldr	r2, [pc, #72]	@ (8007b10 <prvInitialiseTaskLists+0x60>)
 8007ac8:	4413      	add	r3, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe f906 	bl	8005cdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b37      	cmp	r3, #55	@ 0x37
 8007ada:	d9ef      	bls.n	8007abc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007adc:	480d      	ldr	r0, [pc, #52]	@ (8007b14 <prvInitialiseTaskLists+0x64>)
 8007ade:	f7fe f8fd 	bl	8005cdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ae2:	480d      	ldr	r0, [pc, #52]	@ (8007b18 <prvInitialiseTaskLists+0x68>)
 8007ae4:	f7fe f8fa 	bl	8005cdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ae8:	480c      	ldr	r0, [pc, #48]	@ (8007b1c <prvInitialiseTaskLists+0x6c>)
 8007aea:	f7fe f8f7 	bl	8005cdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007aee:	480c      	ldr	r0, [pc, #48]	@ (8007b20 <prvInitialiseTaskLists+0x70>)
 8007af0:	f7fe f8f4 	bl	8005cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007af4:	480b      	ldr	r0, [pc, #44]	@ (8007b24 <prvInitialiseTaskLists+0x74>)
 8007af6:	f7fe f8f1 	bl	8005cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007afa:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <prvInitialiseTaskLists+0x78>)
 8007afc:	4a05      	ldr	r2, [pc, #20]	@ (8007b14 <prvInitialiseTaskLists+0x64>)
 8007afe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b00:	4b0a      	ldr	r3, [pc, #40]	@ (8007b2c <prvInitialiseTaskLists+0x7c>)
 8007b02:	4a05      	ldr	r2, [pc, #20]	@ (8007b18 <prvInitialiseTaskLists+0x68>)
 8007b04:	601a      	str	r2, [r3, #0]
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20001008 	.word	0x20001008
 8007b14:	20001468 	.word	0x20001468
 8007b18:	2000147c 	.word	0x2000147c
 8007b1c:	20001498 	.word	0x20001498
 8007b20:	200014ac 	.word	0x200014ac
 8007b24:	200014c4 	.word	0x200014c4
 8007b28:	20001490 	.word	0x20001490
 8007b2c:	20001494 	.word	0x20001494

08007b30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b36:	e019      	b.n	8007b6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b38:	f000 feee 	bl	8008918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3c:	4b10      	ldr	r3, [pc, #64]	@ (8007b80 <prvCheckTasksWaitingTermination+0x50>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe f951 	bl	8005df0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b84 <prvCheckTasksWaitingTermination+0x54>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4a0b      	ldr	r2, [pc, #44]	@ (8007b84 <prvCheckTasksWaitingTermination+0x54>)
 8007b56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b58:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <prvCheckTasksWaitingTermination+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b88 <prvCheckTasksWaitingTermination+0x58>)
 8007b60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b62:	f000 ff0b 	bl	800897c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f810 	bl	8007b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b6c:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <prvCheckTasksWaitingTermination+0x58>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e1      	bne.n	8007b38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200014ac 	.word	0x200014ac
 8007b84:	200014d8 	.word	0x200014d8
 8007b88:	200014c0 	.word	0x200014c0

08007b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3354      	adds	r3, #84	@ 0x54
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 ff69 	bl	8009a70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d108      	bne.n	8007bba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 f8a3 	bl	8008cf8 <vPortFree>
				vPortFree( pxTCB );
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f8a0 	bl	8008cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bb8:	e019      	b.n	8007bee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d103      	bne.n	8007bcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f897 	bl	8008cf8 <vPortFree>
	}
 8007bca:	e010      	b.n	8007bee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d00b      	beq.n	8007bee <prvDeleteTCB+0x62>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <prvDeleteTCB+0x5e>
	}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <prvResetNextTaskUnblockTime+0x38>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	@ (8007c34 <prvResetNextTaskUnblockTime+0x3c>)
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c10:	e008      	b.n	8007c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c12:	4b07      	ldr	r3, [pc, #28]	@ (8007c30 <prvResetNextTaskUnblockTime+0x38>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a04      	ldr	r2, [pc, #16]	@ (8007c34 <prvResetNextTaskUnblockTime+0x3c>)
 8007c22:	6013      	str	r3, [r2, #0]
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20001490 	.word	0x20001490
 8007c34:	200014f8 	.word	0x200014f8

08007c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <xTaskGetSchedulerState+0x34>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c46:	2301      	movs	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	e008      	b.n	8007c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c4c:	4b08      	ldr	r3, [pc, #32]	@ (8007c70 <xTaskGetSchedulerState+0x38>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c54:	2302      	movs	r3, #2
 8007c56:	607b      	str	r3, [r7, #4]
 8007c58:	e001      	b.n	8007c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c5e:	687b      	ldr	r3, [r7, #4]
	}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	200014e4 	.word	0x200014e4
 8007c70:	20001500 	.word	0x20001500

08007c74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d051      	beq.n	8007d2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d38 <xTaskPriorityInherit+0xc4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d241      	bcs.n	8007d1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	db06      	blt.n	8007cae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca0:	4b25      	ldr	r3, [pc, #148]	@ (8007d38 <xTaskPriorityInherit+0xc4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6959      	ldr	r1, [r3, #20]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007d3c <xTaskPriorityInherit+0xc8>)
 8007cc0:	4413      	add	r3, r2
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	d122      	bne.n	8007d0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe f890 	bl	8005df0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cd0:	4b19      	ldr	r3, [pc, #100]	@ (8007d38 <xTaskPriorityInherit+0xc4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	4b18      	ldr	r3, [pc, #96]	@ (8007d40 <xTaskPriorityInherit+0xcc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d903      	bls.n	8007cee <xTaskPriorityInherit+0x7a>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <xTaskPriorityInherit+0xcc>)
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a10      	ldr	r2, [pc, #64]	@ (8007d3c <xTaskPriorityInherit+0xc8>)
 8007cfc:	441a      	add	r2, r3
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3304      	adds	r3, #4
 8007d02:	4619      	mov	r1, r3
 8007d04:	4610      	mov	r0, r2
 8007d06:	f7fe f816 	bl	8005d36 <vListInsertEnd>
 8007d0a:	e004      	b.n	8007d16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <xTaskPriorityInherit+0xc4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e008      	b.n	8007d2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <xTaskPriorityInherit+0xc4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d201      	bcs.n	8007d2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20001004 	.word	0x20001004
 8007d3c:	20001008 	.word	0x20001008
 8007d40:	200014e0 	.word	0x200014e0

08007d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d058      	beq.n	8007e0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e18 <xTaskPriorityDisinherit+0xd4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d00b      	beq.n	8007d7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	60bb      	str	r3, [r7, #8]
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da0:	1e5a      	subs	r2, r3, #1
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d02c      	beq.n	8007e0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d128      	bne.n	8007e0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe f816 	bl	8005df0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8007e1c <xTaskPriorityDisinherit+0xd8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d903      	bls.n	8007dec <xTaskPriorityDisinherit+0xa8>
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de8:	4a0c      	ldr	r2, [pc, #48]	@ (8007e1c <xTaskPriorityDisinherit+0xd8>)
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df0:	4613      	mov	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <xTaskPriorityDisinherit+0xdc>)
 8007dfa:	441a      	add	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	3304      	adds	r3, #4
 8007e00:	4619      	mov	r1, r3
 8007e02:	4610      	mov	r0, r2
 8007e04:	f7fd ff97 	bl	8005d36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e0c:	697b      	ldr	r3, [r7, #20]
	}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20001004 	.word	0x20001004
 8007e1c:	200014e0 	.word	0x200014e0
 8007e20:	20001008 	.word	0x20001008

08007e24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d06c      	beq.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	bf00      	nop
 8007e5a:	e7fd      	b.n	8007e58 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d902      	bls.n	8007e6c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	e002      	b.n	8007e72 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d04c      	beq.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d147      	bne.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e86:	4b26      	ldr	r3, [pc, #152]	@ (8007f20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d10b      	bne.n	8007ea8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60bb      	str	r3, [r7, #8]
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	e7fd      	b.n	8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	db04      	blt.n	8007ec6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	6959      	ldr	r1, [r3, #20]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4a13      	ldr	r2, [pc, #76]	@ (8007f24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ed6:	4413      	add	r3, r2
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	d11c      	bne.n	8007f16 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fd ff85 	bl	8005df0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eea:	4b0f      	ldr	r3, [pc, #60]	@ (8007f28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d903      	bls.n	8007efa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a07      	ldr	r2, [pc, #28]	@ (8007f24 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fd ff10 	bl	8005d36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f16:	bf00      	nop
 8007f18:	3720      	adds	r7, #32
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20001004 	.word	0x20001004
 8007f24:	20001008 	.word	0x20001008
 8007f28:	200014e0 	.word	0x200014e0

08007f2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f3e:	3201      	adds	r2, #1
 8007f40:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007f42:	4b03      	ldr	r3, [pc, #12]	@ (8007f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f44:	681b      	ldr	r3, [r3, #0]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	20001004 	.word	0x20001004

08007f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f5e:	4b21      	ldr	r3, [pc, #132]	@ (8007fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f64:	4b20      	ldr	r3, [pc, #128]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd ff40 	bl	8005df0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f76:	d10a      	bne.n	8007f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4819      	ldr	r0, [pc, #100]	@ (8007fec <prvAddCurrentTaskToDelayedList+0x98>)
 8007f88:	f7fd fed5 	bl	8005d36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f8c:	e026      	b.n	8007fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f96:	4b14      	ldr	r3, [pc, #80]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d209      	bcs.n	8007fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fa6:	4b12      	ldr	r3, [pc, #72]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fd fee3 	bl	8005d7e <vListInsert>
}
 8007fb8:	e010      	b.n	8007fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fba:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fd fed9 	bl	8005d7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d202      	bcs.n	8007fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fd6:	4a08      	ldr	r2, [pc, #32]	@ (8007ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6013      	str	r3, [r2, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200014dc 	.word	0x200014dc
 8007fe8:	20001004 	.word	0x20001004
 8007fec:	200014c4 	.word	0x200014c4
 8007ff0:	20001494 	.word	0x20001494
 8007ff4:	20001490 	.word	0x20001490
 8007ff8:	200014f8 	.word	0x200014f8

08007ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	@ 0x28
 8008000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008006:	f000 fb13 	bl	8008630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800800a:	4b1d      	ldr	r3, [pc, #116]	@ (8008080 <xTimerCreateTimerTask+0x84>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d021      	beq.n	8008056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800801a:	1d3a      	adds	r2, r7, #4
 800801c:	f107 0108 	add.w	r1, r7, #8
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	4618      	mov	r0, r3
 8008026:	f7fd fe3f 	bl	8005ca8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	9202      	str	r2, [sp, #8]
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	2302      	movs	r3, #2
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	2300      	movs	r3, #0
 800803a:	460a      	mov	r2, r1
 800803c:	4911      	ldr	r1, [pc, #68]	@ (8008084 <xTimerCreateTimerTask+0x88>)
 800803e:	4812      	ldr	r0, [pc, #72]	@ (8008088 <xTimerCreateTimerTask+0x8c>)
 8008040:	f7fe ff2c 	bl	8006e9c <xTaskCreateStatic>
 8008044:	4603      	mov	r3, r0
 8008046:	4a11      	ldr	r2, [pc, #68]	@ (800808c <xTimerCreateTimerTask+0x90>)
 8008048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800804a:	4b10      	ldr	r3, [pc, #64]	@ (800808c <xTimerCreateTimerTask+0x90>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008052:	2301      	movs	r3, #1
 8008054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	613b      	str	r3, [r7, #16]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008074:	697b      	ldr	r3, [r7, #20]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20001534 	.word	0x20001534
 8008084:	0800c30c 	.word	0x0800c30c
 8008088:	080081c9 	.word	0x080081c9
 800808c:	20001538 	.word	0x20001538

08008090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	@ 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800809e:	2300      	movs	r3, #0
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	623b      	str	r3, [r7, #32]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080c0:	4b19      	ldr	r3, [pc, #100]	@ (8008128 <xTimerGenericCommand+0x98>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02a      	beq.n	800811e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	dc18      	bgt.n	800810c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080da:	f7ff fdad 	bl	8007c38 <xTaskGetSchedulerState>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d109      	bne.n	80080f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080e4:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <xTimerGenericCommand+0x98>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	f107 0110 	add.w	r1, r7, #16
 80080ec:	2300      	movs	r3, #0
 80080ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f0:	f7fe f85c 	bl	80061ac <xQueueGenericSend>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80080f6:	e012      	b.n	800811e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008128 <xTimerGenericCommand+0x98>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	f107 0110 	add.w	r1, r7, #16
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	f7fe f852 	bl	80061ac <xQueueGenericSend>
 8008108:	6278      	str	r0, [r7, #36]	@ 0x24
 800810a:	e008      	b.n	800811e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800810c:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <xTimerGenericCommand+0x98>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	f107 0110 	add.w	r1, r7, #16
 8008114:	2300      	movs	r3, #0
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	f7fe f94a 	bl	80063b0 <xQueueGenericSendFromISR>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008120:	4618      	mov	r0, r3
 8008122:	3728      	adds	r7, #40	@ 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001534 	.word	0x20001534

0800812c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008136:	4b23      	ldr	r3, [pc, #140]	@ (80081c4 <prvProcessExpiredTimer+0x98>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3304      	adds	r3, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f7fd fe53 	bl	8005df0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	18d1      	adds	r1, r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	6978      	ldr	r0, [r7, #20]
 8008166:	f000 f8d5 	bl	8008314 <prvInsertTimerInActiveList>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d020      	beq.n	80081b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008170:	2300      	movs	r3, #0
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	2100      	movs	r1, #0
 800817a:	6978      	ldr	r0, [r7, #20]
 800817c:	f7ff ff88 	bl	8008090 <xTimerGenericCommand>
 8008180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d114      	bne.n	80081b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60fb      	str	r3, [r7, #12]
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	e7fd      	b.n	800819c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081a6:	f023 0301 	bic.w	r3, r3, #1
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	4798      	blx	r3
}
 80081ba:	bf00      	nop
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	2000152c 	.word	0x2000152c

080081c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 f859 	bl	800828c <prvGetNextExpireTime>
 80081da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4619      	mov	r1, r3
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f805 	bl	80081f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081e6:	f000 f8d7 	bl	8008398 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081ea:	bf00      	nop
 80081ec:	e7f0      	b.n	80081d0 <prvTimerTask+0x8>
	...

080081f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081fa:	f7ff f929 	bl	8007450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081fe:	f107 0308 	add.w	r3, r7, #8
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f866 	bl	80082d4 <prvSampleTimeNow>
 8008208:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d130      	bne.n	8008272 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10a      	bne.n	800822c <prvProcessTimerOrBlockTask+0x3c>
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d806      	bhi.n	800822c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800821e:	f7ff f925 	bl	800746c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ff81 	bl	800812c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800822a:	e024      	b.n	8008276 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d008      	beq.n	8008244 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008232:	4b13      	ldr	r3, [pc, #76]	@ (8008280 <prvProcessTimerOrBlockTask+0x90>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <prvProcessTimerOrBlockTask+0x50>
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <prvProcessTimerOrBlockTask+0x52>
 8008240:	2300      	movs	r3, #0
 8008242:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008244:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <prvProcessTimerOrBlockTask+0x94>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4619      	mov	r1, r3
 8008252:	f7fe fdef 	bl	8006e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008256:	f7ff f909 	bl	800746c <xTaskResumeAll>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10a      	bne.n	8008276 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008260:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <prvProcessTimerOrBlockTask+0x98>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
}
 8008270:	e001      	b.n	8008276 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008272:	f7ff f8fb 	bl	800746c <xTaskResumeAll>
}
 8008276:	bf00      	nop
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20001530 	.word	0x20001530
 8008284:	20001534 	.word	0x20001534
 8008288:	e000ed04 	.word	0xe000ed04

0800828c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008294:	4b0e      	ldr	r3, [pc, #56]	@ (80082d0 <prvGetNextExpireTime+0x44>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <prvGetNextExpireTime+0x16>
 800829e:	2201      	movs	r2, #1
 80082a0:	e000      	b.n	80082a4 <prvGetNextExpireTime+0x18>
 80082a2:	2200      	movs	r2, #0
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d105      	bne.n	80082bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b0:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <prvGetNextExpireTime+0x44>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	e001      	b.n	80082c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082c0:	68fb      	ldr	r3, [r7, #12]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	2000152c 	.word	0x2000152c

080082d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082dc:	f7ff f964 	bl	80075a8 <xTaskGetTickCount>
 80082e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <prvSampleTimeNow+0x3c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d205      	bcs.n	80082f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082ec:	f000 f93a 	bl	8008564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e002      	b.n	80082fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082fe:	4a04      	ldr	r2, [pc, #16]	@ (8008310 <prvSampleTimeNow+0x3c>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008304:	68fb      	ldr	r3, [r7, #12]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	2000153c 	.word	0x2000153c

08008314 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d812      	bhi.n	8008360 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	429a      	cmp	r2, r3
 8008346:	d302      	bcc.n	800834e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008348:	2301      	movs	r3, #1
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	e01b      	b.n	8008386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800834e:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <prvInsertTimerInActiveList+0x7c>)
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	3304      	adds	r3, #4
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7fd fd10 	bl	8005d7e <vListInsert>
 800835e:	e012      	b.n	8008386 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d206      	bcs.n	8008376 <prvInsertTimerInActiveList+0x62>
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d302      	bcc.n	8008376 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008370:	2301      	movs	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e007      	b.n	8008386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008376:	4b07      	ldr	r3, [pc, #28]	@ (8008394 <prvInsertTimerInActiveList+0x80>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fd fcfc 	bl	8005d7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008386:	697b      	ldr	r3, [r7, #20]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20001530 	.word	0x20001530
 8008394:	2000152c 	.word	0x2000152c

08008398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08e      	sub	sp, #56	@ 0x38
 800839c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800839e:	e0ce      	b.n	800853e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da19      	bge.n	80083da <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083a6:	1d3b      	adds	r3, r7, #4
 80083a8:	3304      	adds	r3, #4
 80083aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10b      	bne.n	80083ca <prvProcessReceivedCommands+0x32>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	61fb      	str	r3, [r7, #28]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d0:	6850      	ldr	r0, [r2, #4]
 80083d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d4:	6892      	ldr	r2, [r2, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f2c0 80ae 	blt.w	800853e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fd fcfc 	bl	8005df0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083f8:	463b      	mov	r3, r7
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff ff6a 	bl	80082d4 <prvSampleTimeNow>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b09      	cmp	r3, #9
 8008406:	f200 8097 	bhi.w	8008538 <prvProcessReceivedCommands+0x1a0>
 800840a:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <prvProcessReceivedCommands+0x78>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008439 	.word	0x08008439
 8008414:	08008439 	.word	0x08008439
 8008418:	08008439 	.word	0x08008439
 800841c:	080084af 	.word	0x080084af
 8008420:	080084c3 	.word	0x080084c3
 8008424:	0800850f 	.word	0x0800850f
 8008428:	08008439 	.word	0x08008439
 800842c:	08008439 	.word	0x08008439
 8008430:	080084af 	.word	0x080084af
 8008434:	080084c3 	.word	0x080084c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	b2da      	uxtb	r2, r3
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	18d1      	adds	r1, r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008458:	f7ff ff5c 	bl	8008314 <prvInsertTimerInActiveList>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d06c      	beq.n	800853c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008468:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d061      	beq.n	800853c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	441a      	add	r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	2100      	movs	r1, #0
 8008488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800848a:	f7ff fe01 	bl	8008090 <xTimerGenericCommand>
 800848e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d152      	bne.n	800853c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	61bb      	str	r3, [r7, #24]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084c0:	e03d      	b.n	800853e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c8:	f043 0301 	orr.w	r3, r3, #1
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10b      	bne.n	80084fa <prvProcessReceivedCommands+0x162>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	617b      	str	r3, [r7, #20]
}
 80084f4:	bf00      	nop
 80084f6:	bf00      	nop
 80084f8:	e7fd      	b.n	80084f6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	18d1      	adds	r1, r2, r3
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008508:	f7ff ff04 	bl	8008314 <prvInsertTimerInActiveList>
					break;
 800850c:	e017      	b.n	800853e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800851c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800851e:	f000 fbeb 	bl	8008cf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008522:	e00c      	b.n	800853e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008526:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008532:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008536:	e002      	b.n	800853e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008538:	bf00      	nop
 800853a:	e000      	b.n	800853e <prvProcessReceivedCommands+0x1a6>
					break;
 800853c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800853e:	4b08      	ldr	r3, [pc, #32]	@ (8008560 <prvProcessReceivedCommands+0x1c8>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	1d39      	adds	r1, r7, #4
 8008544:	2200      	movs	r2, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe f860 	bl	800660c <xQueueReceive>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f af26 	bne.w	80083a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	3730      	adds	r7, #48	@ 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20001534 	.word	0x20001534

08008564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856a:	e049      	b.n	8008600 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800856c:	4b2e      	ldr	r3, [pc, #184]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008576:	4b2c      	ldr	r3, [pc, #176]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fd fc33 	bl	8005df0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d02f      	beq.n	8008600 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d90e      	bls.n	80085d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085be:	4b1a      	ldr	r3, [pc, #104]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f7fd fbd8 	bl	8005d7e <vListInsert>
 80085ce:	e017      	b.n	8008600 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d0:	2300      	movs	r3, #0
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	2100      	movs	r1, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff fd58 	bl	8008090 <xTimerGenericCommand>
 80085e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	603b      	str	r3, [r7, #0]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1b0      	bne.n	800856c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800860a:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008610:	4b06      	ldr	r3, [pc, #24]	@ (800862c <prvSwitchTimerLists+0xc8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a04      	ldr	r2, [pc, #16]	@ (8008628 <prvSwitchTimerLists+0xc4>)
 8008616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008618:	4a04      	ldr	r2, [pc, #16]	@ (800862c <prvSwitchTimerLists+0xc8>)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6013      	str	r3, [r2, #0]
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	2000152c 	.word	0x2000152c
 800862c:	20001530 	.word	0x20001530

08008630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008636:	f000 f96f 	bl	8008918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800863a:	4b15      	ldr	r3, [pc, #84]	@ (8008690 <prvCheckForValidListAndQueue+0x60>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d120      	bne.n	8008684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008642:	4814      	ldr	r0, [pc, #80]	@ (8008694 <prvCheckForValidListAndQueue+0x64>)
 8008644:	f7fd fb4a 	bl	8005cdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008648:	4813      	ldr	r0, [pc, #76]	@ (8008698 <prvCheckForValidListAndQueue+0x68>)
 800864a:	f7fd fb47 	bl	8005cdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800864e:	4b13      	ldr	r3, [pc, #76]	@ (800869c <prvCheckForValidListAndQueue+0x6c>)
 8008650:	4a10      	ldr	r2, [pc, #64]	@ (8008694 <prvCheckForValidListAndQueue+0x64>)
 8008652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008654:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <prvCheckForValidListAndQueue+0x70>)
 8008656:	4a10      	ldr	r2, [pc, #64]	@ (8008698 <prvCheckForValidListAndQueue+0x68>)
 8008658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <prvCheckForValidListAndQueue+0x74>)
 8008660:	4a11      	ldr	r2, [pc, #68]	@ (80086a8 <prvCheckForValidListAndQueue+0x78>)
 8008662:	2110      	movs	r1, #16
 8008664:	200a      	movs	r0, #10
 8008666:	f7fd fc57 	bl	8005f18 <xQueueGenericCreateStatic>
 800866a:	4603      	mov	r3, r0
 800866c:	4a08      	ldr	r2, [pc, #32]	@ (8008690 <prvCheckForValidListAndQueue+0x60>)
 800866e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <prvCheckForValidListAndQueue+0x60>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008678:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <prvCheckForValidListAndQueue+0x60>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	490b      	ldr	r1, [pc, #44]	@ (80086ac <prvCheckForValidListAndQueue+0x7c>)
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fb84 	bl	8006d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008684:	f000 f97a 	bl	800897c <vPortExitCritical>
}
 8008688:	bf00      	nop
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20001534 	.word	0x20001534
 8008694:	20001504 	.word	0x20001504
 8008698:	20001518 	.word	0x20001518
 800869c:	2000152c 	.word	0x2000152c
 80086a0:	20001530 	.word	0x20001530
 80086a4:	200015e0 	.word	0x200015e0
 80086a8:	20001540 	.word	0x20001540
 80086ac:	0800c314 	.word	0x0800c314

080086b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b04      	subs	r3, #4
 80086c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3b04      	subs	r3, #4
 80086ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0201 	bic.w	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b04      	subs	r3, #4
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e0:	4a0c      	ldr	r2, [pc, #48]	@ (8008714 <pxPortInitialiseStack+0x64>)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b14      	subs	r3, #20
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f06f 0202 	mvn.w	r2, #2
 80086fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b20      	subs	r3, #32
 8008704:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	08008719 	.word	0x08008719

08008718 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008722:	4b13      	ldr	r3, [pc, #76]	@ (8008770 <prvTaskExitError+0x58>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d00b      	beq.n	8008744 <prvTaskExitError+0x2c>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60fb      	str	r3, [r7, #12]
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <prvTaskExitError+0x28>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	60bb      	str	r3, [r7, #8]
}
 8008756:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008758:	bf00      	nop
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d0fc      	beq.n	800875a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000001c 	.word	0x2000001c
	...

08008780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <pxCurrentTCBConst2>)
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	6808      	ldr	r0, [r1, #0]
 8008786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	f380 8809 	msr	PSP, r0
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	4770      	bx	lr
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst2>:
 80087a0:	20001004 	.word	0x20001004
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087a8:	4808      	ldr	r0, [pc, #32]	@ (80087cc <prvPortStartFirstTask+0x24>)
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f380 8808 	msr	MSP, r0
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	f380 8814 	msr	CONTROL, r0
 80087ba:	b662      	cpsie	i
 80087bc:	b661      	cpsie	f
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	df00      	svc	0
 80087c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ca:	bf00      	nop
 80087cc:	e000ed08 	.word	0xe000ed08

080087d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087d6:	4b47      	ldr	r3, [pc, #284]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a47      	ldr	r2, [pc, #284]	@ (80088f8 <xPortStartScheduler+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d10b      	bne.n	80087f8 <xPortStartScheduler+0x28>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	613b      	str	r3, [r7, #16]
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087f8:	4b3e      	ldr	r3, [pc, #248]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a3f      	ldr	r2, [pc, #252]	@ (80088fc <xPortStartScheduler+0x12c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10b      	bne.n	800881a <xPortStartScheduler+0x4a>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800881a:	4b39      	ldr	r3, [pc, #228]	@ (8008900 <xPortStartScheduler+0x130>)
 800881c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	22ff      	movs	r2, #255	@ 0xff
 800882a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4b31      	ldr	r3, [pc, #196]	@ (8008904 <xPortStartScheduler+0x134>)
 8008840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008842:	4b31      	ldr	r3, [pc, #196]	@ (8008908 <xPortStartScheduler+0x138>)
 8008844:	2207      	movs	r2, #7
 8008846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008848:	e009      	b.n	800885e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800884a:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <xPortStartScheduler+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a2d      	ldr	r2, [pc, #180]	@ (8008908 <xPortStartScheduler+0x138>)
 8008852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008866:	2b80      	cmp	r3, #128	@ 0x80
 8008868:	d0ef      	beq.n	800884a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800886a:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <xPortStartScheduler+0x138>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1c3 0307 	rsb	r3, r3, #7
 8008872:	2b04      	cmp	r3, #4
 8008874:	d00b      	beq.n	800888e <xPortStartScheduler+0xbe>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60bb      	str	r3, [r7, #8]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800888e:	4b1e      	ldr	r3, [pc, #120]	@ (8008908 <xPortStartScheduler+0x138>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	4a1c      	ldr	r2, [pc, #112]	@ (8008908 <xPortStartScheduler+0x138>)
 8008896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008898:	4b1b      	ldr	r3, [pc, #108]	@ (8008908 <xPortStartScheduler+0x138>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088a0:	4a19      	ldr	r2, [pc, #100]	@ (8008908 <xPortStartScheduler+0x138>)
 80088a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088ac:	4b17      	ldr	r3, [pc, #92]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <xPortStartScheduler+0x13c>)
 80088b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088b8:	4b14      	ldr	r3, [pc, #80]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a13      	ldr	r2, [pc, #76]	@ (800890c <xPortStartScheduler+0x13c>)
 80088be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088c4:	f000 f8da 	bl	8008a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xPortStartScheduler+0x140>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088ce:	f000 f8f9 	bl	8008ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088d2:	4b10      	ldr	r3, [pc, #64]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088de:	f7ff ff63 	bl	80087a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088e2:	f7fe ff2b 	bl	800773c <vTaskSwitchContext>
	prvTaskExitError();
 80088e6:	f7ff ff17 	bl	8008718 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed00 	.word	0xe000ed00
 80088f8:	410fc271 	.word	0x410fc271
 80088fc:	410fc270 	.word	0x410fc270
 8008900:	e000e400 	.word	0xe000e400
 8008904:	20001630 	.word	0x20001630
 8008908:	20001634 	.word	0x20001634
 800890c:	e000ed20 	.word	0xe000ed20
 8008910:	2000001c 	.word	0x2000001c
 8008914:	e000ef34 	.word	0xe000ef34

08008918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008932:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <vPortEnterCritical+0x5c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	4a0e      	ldr	r2, [pc, #56]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800893c:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d110      	bne.n	8008966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <vPortEnterCritical+0x60>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00b      	beq.n	8008966 <vPortEnterCritical+0x4e>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	603b      	str	r3, [r7, #0]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <vPortEnterCritical+0x4a>
	}
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	2000001c 	.word	0x2000001c
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008982:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <vPortExitCritical+0x50>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <vPortExitCritical+0x26>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <vPortExitCritical+0x50>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	4a08      	ldr	r2, [pc, #32]	@ (80089cc <vPortExitCritical+0x50>)
 80089aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <vPortExitCritical+0x50>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <vPortExitCritical+0x44>
 80089b4:	2300      	movs	r3, #0
 80089b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f383 8811 	msr	BASEPRI, r3
}
 80089be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	2000001c 	.word	0x2000001c

080089d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089d0:	f3ef 8009 	mrs	r0, PSP
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4b15      	ldr	r3, [pc, #84]	@ (8008a30 <pxCurrentTCBConst>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f01e 0f10 	tst.w	lr, #16
 80089e0:	bf08      	it	eq
 80089e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089f4:	f380 8811 	msr	BASEPRI, r0
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f7fe fe9c 	bl	800773c <vTaskSwitchContext>
 8008a04:	f04f 0000 	mov.w	r0, #0
 8008a08:	f380 8811 	msr	BASEPRI, r0
 8008a0c:	bc09      	pop	{r0, r3}
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	f01e 0f10 	tst.w	lr, #16
 8008a1a:	bf08      	it	eq
 8008a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a20:	f380 8809 	msr	PSP, r0
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst>:
 8008a30:	20001004 	.word	0x20001004
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
}
 8008a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a52:	f7fe fdb9 	bl	80075c8 <xTaskIncrementTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a5c:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <xPortSysTickHandler+0x40>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f383 8811 	msr	BASEPRI, r3
}
 8008a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a86:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <vPortSetupTimerInterrupt+0x38>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <vPortSetupTimerInterrupt+0x3c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <vPortSetupTimerInterrupt+0x40>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	099b      	lsrs	r3, r3, #6
 8008a98:	4a09      	ldr	r2, [pc, #36]	@ (8008ac0 <vPortSetupTimerInterrupt+0x44>)
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a9e:	4b04      	ldr	r3, [pc, #16]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	e000e010 	.word	0xe000e010
 8008ab4:	e000e018 	.word	0xe000e018
 8008ab8:	20000010 	.word	0x20000010
 8008abc:	10624dd3 	.word	0x10624dd3
 8008ac0:	e000e014 	.word	0xe000e014

08008ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ad4 <vPortEnableVFP+0x10>
 8008ac8:	6801      	ldr	r1, [r0, #0]
 8008aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ace:	6001      	str	r1, [r0, #0]
 8008ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ad2:	bf00      	nop
 8008ad4:	e000ed88 	.word	0xe000ed88

08008ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ade:	f3ef 8305 	mrs	r3, IPSR
 8008ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	d915      	bls.n	8008b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aea:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <vPortValidateInterruptPriority+0x74>)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008af4:	4b16      	ldr	r3, [pc, #88]	@ (8008b50 <vPortValidateInterruptPriority+0x78>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	7afa      	ldrb	r2, [r7, #11]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d20b      	bcs.n	8008b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b16:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <vPortValidateInterruptPriority+0x7c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b58 <vPortValidateInterruptPriority+0x80>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d90b      	bls.n	8008b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	603b      	str	r3, [r7, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <vPortValidateInterruptPriority+0x62>
	}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	e000e3f0 	.word	0xe000e3f0
 8008b50:	20001630 	.word	0x20001630
 8008b54:	e000ed0c 	.word	0xe000ed0c
 8008b58:	20001634 	.word	0x20001634

08008b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	@ 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b68:	f7fe fc72 	bl	8007450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ce0 <pvPortMalloc+0x184>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b74:	f000 f924 	bl	8008dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b78:	4b5a      	ldr	r3, [pc, #360]	@ (8008ce4 <pvPortMalloc+0x188>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 8095 	bne.w	8008cb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01e      	beq.n	8008bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d015      	beq.n	8008bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f023 0307 	bic.w	r3, r3, #7
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <pvPortMalloc+0x6e>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	617b      	str	r3, [r7, #20]
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	e7fd      	b.n	8008bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d06f      	beq.n	8008cb0 <pvPortMalloc+0x154>
 8008bd0:	4b45      	ldr	r3, [pc, #276]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d86a      	bhi.n	8008cb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bda:	4b44      	ldr	r3, [pc, #272]	@ (8008cec <pvPortMalloc+0x190>)
 8008bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bde:	4b43      	ldr	r3, [pc, #268]	@ (8008cec <pvPortMalloc+0x190>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008be4:	e004      	b.n	8008bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d903      	bls.n	8008c02 <pvPortMalloc+0xa6>
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f1      	bne.n	8008be6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c02:	4b37      	ldr	r3, [pc, #220]	@ (8008ce0 <pvPortMalloc+0x184>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d051      	beq.n	8008cb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2208      	movs	r2, #8
 8008c12:	4413      	add	r3, r2
 8008c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	1ad2      	subs	r2, r2, r3
 8008c26:	2308      	movs	r3, #8
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d920      	bls.n	8008c70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <pvPortMalloc+0xfc>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	613b      	str	r3, [r7, #16]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c6a:	69b8      	ldr	r0, [r7, #24]
 8008c6c:	f000 f90c 	bl	8008e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf0 <pvPortMalloc+0x194>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d203      	bcs.n	8008c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c8a:	4b17      	ldr	r3, [pc, #92]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <pvPortMalloc+0x194>)
 8008c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4b13      	ldr	r3, [pc, #76]	@ (8008ce4 <pvPortMalloc+0x188>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ca6:	4b13      	ldr	r3, [pc, #76]	@ (8008cf4 <pvPortMalloc+0x198>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a11      	ldr	r2, [pc, #68]	@ (8008cf4 <pvPortMalloc+0x198>)
 8008cae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cb0:	f7fe fbdc 	bl	800746c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <pvPortMalloc+0x17a>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60fb      	str	r3, [r7, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <pvPortMalloc+0x176>
	return pvReturn;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3728      	adds	r7, #40	@ 0x28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	200127b0 	.word	0x200127b0
 8008ce4:	200127c4 	.word	0x200127c4
 8008ce8:	200127b4 	.word	0x200127b4
 8008cec:	200127a8 	.word	0x200127a8
 8008cf0:	200127b8 	.word	0x200127b8
 8008cf4:	200127bc 	.word	0x200127bc

08008cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d04f      	beq.n	8008daa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b25      	ldr	r3, [pc, #148]	@ (8008db4 <vPortFree+0xbc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <vPortFree+0x46>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <vPortFree+0x66>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60bb      	str	r3, [r7, #8]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4b14      	ldr	r3, [pc, #80]	@ (8008db4 <vPortFree+0xbc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01e      	beq.n	8008daa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11a      	bne.n	8008daa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	4b0e      	ldr	r3, [pc, #56]	@ (8008db4 <vPortFree+0xbc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d84:	f7fe fb64 	bl	8007450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <vPortFree+0xc0>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4413      	add	r3, r2
 8008d92:	4a09      	ldr	r2, [pc, #36]	@ (8008db8 <vPortFree+0xc0>)
 8008d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f000 f876 	bl	8008e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d9c:	4b07      	ldr	r3, [pc, #28]	@ (8008dbc <vPortFree+0xc4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	4a06      	ldr	r2, [pc, #24]	@ (8008dbc <vPortFree+0xc4>)
 8008da4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008da6:	f7fe fb61 	bl	800746c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008daa:	bf00      	nop
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200127c4 	.word	0x200127c4
 8008db8:	200127b4 	.word	0x200127b4
 8008dbc:	200127c0 	.word	0x200127c0

08008dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dc6:	4b29      	ldr	r3, [pc, #164]	@ (8008e6c <prvHeapInit+0xac>)
 8008dc8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dca:	4b29      	ldr	r3, [pc, #164]	@ (8008e70 <prvHeapInit+0xb0>)
 8008dcc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f003 0307 	and.w	r3, r3, #7
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00c      	beq.n	8008df2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3307      	adds	r3, #7
 8008ddc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f023 0307 	bic.w	r3, r3, #7
 8008de4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	4a20      	ldr	r2, [pc, #128]	@ (8008e70 <prvHeapInit+0xb0>)
 8008dee:	4413      	add	r3, r2
 8008df0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008df6:	4a1f      	ldr	r2, [pc, #124]	@ (8008e74 <prvHeapInit+0xb4>)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e74 <prvHeapInit+0xb4>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	4413      	add	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f023 0307 	bic.w	r3, r3, #7
 8008e18:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a16      	ldr	r2, [pc, #88]	@ (8008e78 <prvHeapInit+0xb8>)
 8008e1e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e20:	4b15      	ldr	r3, [pc, #84]	@ (8008e78 <prvHeapInit+0xb8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e28:	4b13      	ldr	r3, [pc, #76]	@ (8008e78 <prvHeapInit+0xb8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e78 <prvHeapInit+0xb8>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e7c <prvHeapInit+0xbc>)
 8008e4c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	4a0b      	ldr	r2, [pc, #44]	@ (8008e80 <prvHeapInit+0xc0>)
 8008e54:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e56:	4b0b      	ldr	r3, [pc, #44]	@ (8008e84 <prvHeapInit+0xc4>)
 8008e58:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e5c:	601a      	str	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	00011170 	.word	0x00011170
 8008e70:	20001638 	.word	0x20001638
 8008e74:	200127a8 	.word	0x200127a8
 8008e78:	200127b0 	.word	0x200127b0
 8008e7c:	200127b8 	.word	0x200127b8
 8008e80:	200127b4 	.word	0x200127b4
 8008e84:	200127c4 	.word	0x200127c4

08008e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e90:	4b28      	ldr	r3, [pc, #160]	@ (8008f34 <prvInsertBlockIntoFreeList+0xac>)
 8008e92:	60fb      	str	r3, [r7, #12]
 8008e94:	e002      	b.n	8008e9c <prvInsertBlockIntoFreeList+0x14>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d8f7      	bhi.n	8008e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d108      	bne.n	8008eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	441a      	add	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	441a      	add	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d118      	bne.n	8008f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b15      	ldr	r3, [pc, #84]	@ (8008f38 <prvInsertBlockIntoFreeList+0xb0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d00d      	beq.n	8008f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e008      	b.n	8008f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f06:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <prvInsertBlockIntoFreeList+0xb0>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e003      	b.n	8008f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d002      	beq.n	8008f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f26:	bf00      	nop
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	200127a8 	.word	0x200127a8
 8008f38:	200127b0 	.word	0x200127b0

08008f3c <__cvt>:
 8008f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	ec57 6b10 	vmov	r6, r7, d0
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	460c      	mov	r4, r1
 8008f48:	4619      	mov	r1, r3
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	bfbb      	ittet	lt
 8008f4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f52:	461f      	movlt	r7, r3
 8008f54:	2300      	movge	r3, #0
 8008f56:	232d      	movlt	r3, #45	@ 0x2d
 8008f58:	700b      	strb	r3, [r1, #0]
 8008f5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f60:	4691      	mov	r9, r2
 8008f62:	f023 0820 	bic.w	r8, r3, #32
 8008f66:	bfbc      	itt	lt
 8008f68:	4632      	movlt	r2, r6
 8008f6a:	4616      	movlt	r6, r2
 8008f6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f70:	d005      	beq.n	8008f7e <__cvt+0x42>
 8008f72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f76:	d100      	bne.n	8008f7a <__cvt+0x3e>
 8008f78:	3401      	adds	r4, #1
 8008f7a:	2102      	movs	r1, #2
 8008f7c:	e000      	b.n	8008f80 <__cvt+0x44>
 8008f7e:	2103      	movs	r1, #3
 8008f80:	ab03      	add	r3, sp, #12
 8008f82:	9301      	str	r3, [sp, #4]
 8008f84:	ab02      	add	r3, sp, #8
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	ec47 6b10 	vmov	d0, r6, r7
 8008f8c:	4653      	mov	r3, sl
 8008f8e:	4622      	mov	r2, r4
 8008f90:	f000 febe 	bl	8009d10 <_dtoa_r>
 8008f94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f98:	4605      	mov	r5, r0
 8008f9a:	d119      	bne.n	8008fd0 <__cvt+0x94>
 8008f9c:	f019 0f01 	tst.w	r9, #1
 8008fa0:	d00e      	beq.n	8008fc0 <__cvt+0x84>
 8008fa2:	eb00 0904 	add.w	r9, r0, r4
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	f7f7 fdab 	bl	8000b08 <__aeabi_dcmpeq>
 8008fb2:	b108      	cbz	r0, 8008fb8 <__cvt+0x7c>
 8008fb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fb8:	2230      	movs	r2, #48	@ 0x30
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	454b      	cmp	r3, r9
 8008fbe:	d31e      	bcc.n	8008ffe <__cvt+0xc2>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc4:	1b5b      	subs	r3, r3, r5
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	b004      	add	sp, #16
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fd4:	eb00 0904 	add.w	r9, r0, r4
 8008fd8:	d1e5      	bne.n	8008fa6 <__cvt+0x6a>
 8008fda:	7803      	ldrb	r3, [r0, #0]
 8008fdc:	2b30      	cmp	r3, #48	@ 0x30
 8008fde:	d10a      	bne.n	8008ff6 <__cvt+0xba>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	f7f7 fd8e 	bl	8000b08 <__aeabi_dcmpeq>
 8008fec:	b918      	cbnz	r0, 8008ff6 <__cvt+0xba>
 8008fee:	f1c4 0401 	rsb	r4, r4, #1
 8008ff2:	f8ca 4000 	str.w	r4, [sl]
 8008ff6:	f8da 3000 	ldr.w	r3, [sl]
 8008ffa:	4499      	add	r9, r3
 8008ffc:	e7d3      	b.n	8008fa6 <__cvt+0x6a>
 8008ffe:	1c59      	adds	r1, r3, #1
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	701a      	strb	r2, [r3, #0]
 8009004:	e7d9      	b.n	8008fba <__cvt+0x7e>

08009006 <__exponent>:
 8009006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009008:	2900      	cmp	r1, #0
 800900a:	bfba      	itte	lt
 800900c:	4249      	neglt	r1, r1
 800900e:	232d      	movlt	r3, #45	@ 0x2d
 8009010:	232b      	movge	r3, #43	@ 0x2b
 8009012:	2909      	cmp	r1, #9
 8009014:	7002      	strb	r2, [r0, #0]
 8009016:	7043      	strb	r3, [r0, #1]
 8009018:	dd29      	ble.n	800906e <__exponent+0x68>
 800901a:	f10d 0307 	add.w	r3, sp, #7
 800901e:	461d      	mov	r5, r3
 8009020:	270a      	movs	r7, #10
 8009022:	461a      	mov	r2, r3
 8009024:	fbb1 f6f7 	udiv	r6, r1, r7
 8009028:	fb07 1416 	mls	r4, r7, r6, r1
 800902c:	3430      	adds	r4, #48	@ 0x30
 800902e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009032:	460c      	mov	r4, r1
 8009034:	2c63      	cmp	r4, #99	@ 0x63
 8009036:	f103 33ff 	add.w	r3, r3, #4294967295
 800903a:	4631      	mov	r1, r6
 800903c:	dcf1      	bgt.n	8009022 <__exponent+0x1c>
 800903e:	3130      	adds	r1, #48	@ 0x30
 8009040:	1e94      	subs	r4, r2, #2
 8009042:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009046:	1c41      	adds	r1, r0, #1
 8009048:	4623      	mov	r3, r4
 800904a:	42ab      	cmp	r3, r5
 800904c:	d30a      	bcc.n	8009064 <__exponent+0x5e>
 800904e:	f10d 0309 	add.w	r3, sp, #9
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	42ac      	cmp	r4, r5
 8009056:	bf88      	it	hi
 8009058:	2300      	movhi	r3, #0
 800905a:	3302      	adds	r3, #2
 800905c:	4403      	add	r3, r0
 800905e:	1a18      	subs	r0, r3, r0
 8009060:	b003      	add	sp, #12
 8009062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009064:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009068:	f801 6f01 	strb.w	r6, [r1, #1]!
 800906c:	e7ed      	b.n	800904a <__exponent+0x44>
 800906e:	2330      	movs	r3, #48	@ 0x30
 8009070:	3130      	adds	r1, #48	@ 0x30
 8009072:	7083      	strb	r3, [r0, #2]
 8009074:	70c1      	strb	r1, [r0, #3]
 8009076:	1d03      	adds	r3, r0, #4
 8009078:	e7f1      	b.n	800905e <__exponent+0x58>
	...

0800907c <_printf_float>:
 800907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	b08d      	sub	sp, #52	@ 0x34
 8009082:	460c      	mov	r4, r1
 8009084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009088:	4616      	mov	r6, r2
 800908a:	461f      	mov	r7, r3
 800908c:	4605      	mov	r5, r0
 800908e:	f000 fcdb 	bl	8009a48 <_localeconv_r>
 8009092:	6803      	ldr	r3, [r0, #0]
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	4618      	mov	r0, r3
 8009098:	f7f7 f90a 	bl	80002b0 <strlen>
 800909c:	2300      	movs	r3, #0
 800909e:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a0:	f8d8 3000 	ldr.w	r3, [r8]
 80090a4:	9005      	str	r0, [sp, #20]
 80090a6:	3307      	adds	r3, #7
 80090a8:	f023 0307 	bic.w	r3, r3, #7
 80090ac:	f103 0208 	add.w	r2, r3, #8
 80090b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090b4:	f8d4 b000 	ldr.w	fp, [r4]
 80090b8:	f8c8 2000 	str.w	r2, [r8]
 80090bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090c4:	9307      	str	r3, [sp, #28]
 80090c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80090ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009344 <_printf_float+0x2c8>)
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295
 80090d8:	f7f7 fd48 	bl	8000b6c <__aeabi_dcmpun>
 80090dc:	bb70      	cbnz	r0, 800913c <_printf_float+0xc0>
 80090de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e2:	4b98      	ldr	r3, [pc, #608]	@ (8009344 <_printf_float+0x2c8>)
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	f7f7 fd22 	bl	8000b30 <__aeabi_dcmple>
 80090ec:	bb30      	cbnz	r0, 800913c <_printf_float+0xc0>
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 fd11 	bl	8000b1c <__aeabi_dcmplt>
 80090fa:	b110      	cbz	r0, 8009102 <_printf_float+0x86>
 80090fc:	232d      	movs	r3, #45	@ 0x2d
 80090fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009102:	4a91      	ldr	r2, [pc, #580]	@ (8009348 <_printf_float+0x2cc>)
 8009104:	4b91      	ldr	r3, [pc, #580]	@ (800934c <_printf_float+0x2d0>)
 8009106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800910a:	bf94      	ite	ls
 800910c:	4690      	movls	r8, r2
 800910e:	4698      	movhi	r8, r3
 8009110:	2303      	movs	r3, #3
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	f02b 0304 	bic.w	r3, fp, #4
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	f04f 0900 	mov.w	r9, #0
 800911e:	9700      	str	r7, [sp, #0]
 8009120:	4633      	mov	r3, r6
 8009122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009124:	4621      	mov	r1, r4
 8009126:	4628      	mov	r0, r5
 8009128:	f000 f9d2 	bl	80094d0 <_printf_common>
 800912c:	3001      	adds	r0, #1
 800912e:	f040 808d 	bne.w	800924c <_printf_float+0x1d0>
 8009132:	f04f 30ff 	mov.w	r0, #4294967295
 8009136:	b00d      	add	sp, #52	@ 0x34
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	4640      	mov	r0, r8
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 fd12 	bl	8000b6c <__aeabi_dcmpun>
 8009148:	b140      	cbz	r0, 800915c <_printf_float+0xe0>
 800914a:	464b      	mov	r3, r9
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfbc      	itt	lt
 8009150:	232d      	movlt	r3, #45	@ 0x2d
 8009152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009156:	4a7e      	ldr	r2, [pc, #504]	@ (8009350 <_printf_float+0x2d4>)
 8009158:	4b7e      	ldr	r3, [pc, #504]	@ (8009354 <_printf_float+0x2d8>)
 800915a:	e7d4      	b.n	8009106 <_printf_float+0x8a>
 800915c:	6863      	ldr	r3, [r4, #4]
 800915e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009162:	9206      	str	r2, [sp, #24]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	d13b      	bne.n	80091e0 <_printf_float+0x164>
 8009168:	2306      	movs	r3, #6
 800916a:	6063      	str	r3, [r4, #4]
 800916c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009170:	2300      	movs	r3, #0
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	9303      	str	r3, [sp, #12]
 8009176:	ab0a      	add	r3, sp, #40	@ 0x28
 8009178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800917c:	ab09      	add	r3, sp, #36	@ 0x24
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	6861      	ldr	r1, [r4, #4]
 8009182:	ec49 8b10 	vmov	d0, r8, r9
 8009186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800918a:	4628      	mov	r0, r5
 800918c:	f7ff fed6 	bl	8008f3c <__cvt>
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009194:	2b47      	cmp	r3, #71	@ 0x47
 8009196:	4680      	mov	r8, r0
 8009198:	d129      	bne.n	80091ee <_printf_float+0x172>
 800919a:	1cc8      	adds	r0, r1, #3
 800919c:	db02      	blt.n	80091a4 <_printf_float+0x128>
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	4299      	cmp	r1, r3
 80091a2:	dd41      	ble.n	8009228 <_printf_float+0x1ac>
 80091a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80091a8:	fa5f fa8a 	uxtb.w	sl, sl
 80091ac:	3901      	subs	r1, #1
 80091ae:	4652      	mov	r2, sl
 80091b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091b6:	f7ff ff26 	bl	8009006 <__exponent>
 80091ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091bc:	1813      	adds	r3, r2, r0
 80091be:	2a01      	cmp	r2, #1
 80091c0:	4681      	mov	r9, r0
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	dc02      	bgt.n	80091cc <_printf_float+0x150>
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	07d2      	lsls	r2, r2, #31
 80091ca:	d501      	bpl.n	80091d0 <_printf_float+0x154>
 80091cc:	3301      	adds	r3, #1
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0a2      	beq.n	800911e <_printf_float+0xa2>
 80091d8:	232d      	movs	r3, #45	@ 0x2d
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091de:	e79e      	b.n	800911e <_printf_float+0xa2>
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	2a47      	cmp	r2, #71	@ 0x47
 80091e4:	d1c2      	bne.n	800916c <_printf_float+0xf0>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1c0      	bne.n	800916c <_printf_float+0xf0>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7bd      	b.n	800916a <_printf_float+0xee>
 80091ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091f2:	d9db      	bls.n	80091ac <_printf_float+0x130>
 80091f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091f8:	d118      	bne.n	800922c <_printf_float+0x1b0>
 80091fa:	2900      	cmp	r1, #0
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	dd0b      	ble.n	8009218 <_printf_float+0x19c>
 8009200:	6121      	str	r1, [r4, #16]
 8009202:	b913      	cbnz	r3, 800920a <_printf_float+0x18e>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	07d0      	lsls	r0, r2, #31
 8009208:	d502      	bpl.n	8009210 <_printf_float+0x194>
 800920a:	3301      	adds	r3, #1
 800920c:	440b      	add	r3, r1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	e7db      	b.n	80091d0 <_printf_float+0x154>
 8009218:	b913      	cbnz	r3, 8009220 <_printf_float+0x1a4>
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	07d2      	lsls	r2, r2, #31
 800921e:	d501      	bpl.n	8009224 <_printf_float+0x1a8>
 8009220:	3302      	adds	r3, #2
 8009222:	e7f4      	b.n	800920e <_printf_float+0x192>
 8009224:	2301      	movs	r3, #1
 8009226:	e7f2      	b.n	800920e <_printf_float+0x192>
 8009228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800922c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922e:	4299      	cmp	r1, r3
 8009230:	db05      	blt.n	800923e <_printf_float+0x1c2>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6121      	str	r1, [r4, #16]
 8009236:	07d8      	lsls	r0, r3, #31
 8009238:	d5ea      	bpl.n	8009210 <_printf_float+0x194>
 800923a:	1c4b      	adds	r3, r1, #1
 800923c:	e7e7      	b.n	800920e <_printf_float+0x192>
 800923e:	2900      	cmp	r1, #0
 8009240:	bfd4      	ite	le
 8009242:	f1c1 0202 	rsble	r2, r1, #2
 8009246:	2201      	movgt	r2, #1
 8009248:	4413      	add	r3, r2
 800924a:	e7e0      	b.n	800920e <_printf_float+0x192>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	055a      	lsls	r2, r3, #21
 8009250:	d407      	bmi.n	8009262 <_printf_float+0x1e6>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	4642      	mov	r2, r8
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	d12b      	bne.n	80092b8 <_printf_float+0x23c>
 8009260:	e767      	b.n	8009132 <_printf_float+0xb6>
 8009262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009266:	f240 80dd 	bls.w	8009424 <_printf_float+0x3a8>
 800926a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800926e:	2200      	movs	r2, #0
 8009270:	2300      	movs	r3, #0
 8009272:	f7f7 fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8009276:	2800      	cmp	r0, #0
 8009278:	d033      	beq.n	80092e2 <_printf_float+0x266>
 800927a:	4a37      	ldr	r2, [pc, #220]	@ (8009358 <_printf_float+0x2dc>)
 800927c:	2301      	movs	r3, #1
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f af54 	beq.w	8009132 <_printf_float+0xb6>
 800928a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800928e:	4543      	cmp	r3, r8
 8009290:	db02      	blt.n	8009298 <_printf_float+0x21c>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	07d8      	lsls	r0, r3, #31
 8009296:	d50f      	bpl.n	80092b8 <_printf_float+0x23c>
 8009298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f af45 	beq.w	8009132 <_printf_float+0xb6>
 80092a8:	f04f 0900 	mov.w	r9, #0
 80092ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80092b0:	f104 0a1a 	add.w	sl, r4, #26
 80092b4:	45c8      	cmp	r8, r9
 80092b6:	dc09      	bgt.n	80092cc <_printf_float+0x250>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	079b      	lsls	r3, r3, #30
 80092bc:	f100 8103 	bmi.w	80094c6 <_printf_float+0x44a>
 80092c0:	68e0      	ldr	r0, [r4, #12]
 80092c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c4:	4298      	cmp	r0, r3
 80092c6:	bfb8      	it	lt
 80092c8:	4618      	movlt	r0, r3
 80092ca:	e734      	b.n	8009136 <_printf_float+0xba>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f af2b 	beq.w	8009132 <_printf_float+0xb6>
 80092dc:	f109 0901 	add.w	r9, r9, #1
 80092e0:	e7e8      	b.n	80092b4 <_printf_float+0x238>
 80092e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dc39      	bgt.n	800935c <_printf_float+0x2e0>
 80092e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <_printf_float+0x2dc>)
 80092ea:	2301      	movs	r3, #1
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	f43f af1d 	beq.w	8009132 <_printf_float+0xb6>
 80092f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092fc:	ea59 0303 	orrs.w	r3, r9, r3
 8009300:	d102      	bne.n	8009308 <_printf_float+0x28c>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	d5d7      	bpl.n	80092b8 <_printf_float+0x23c>
 8009308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f af0d 	beq.w	8009132 <_printf_float+0xb6>
 8009318:	f04f 0a00 	mov.w	sl, #0
 800931c:	f104 0b1a 	add.w	fp, r4, #26
 8009320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009322:	425b      	negs	r3, r3
 8009324:	4553      	cmp	r3, sl
 8009326:	dc01      	bgt.n	800932c <_printf_float+0x2b0>
 8009328:	464b      	mov	r3, r9
 800932a:	e793      	b.n	8009254 <_printf_float+0x1d8>
 800932c:	2301      	movs	r3, #1
 800932e:	465a      	mov	r2, fp
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f aefb 	beq.w	8009132 <_printf_float+0xb6>
 800933c:	f10a 0a01 	add.w	sl, sl, #1
 8009340:	e7ee      	b.n	8009320 <_printf_float+0x2a4>
 8009342:	bf00      	nop
 8009344:	7fefffff 	.word	0x7fefffff
 8009348:	0800c498 	.word	0x0800c498
 800934c:	0800c49c 	.word	0x0800c49c
 8009350:	0800c4a0 	.word	0x0800c4a0
 8009354:	0800c4a4 	.word	0x0800c4a4
 8009358:	0800c4a8 	.word	0x0800c4a8
 800935c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800935e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009362:	4553      	cmp	r3, sl
 8009364:	bfa8      	it	ge
 8009366:	4653      	movge	r3, sl
 8009368:	2b00      	cmp	r3, #0
 800936a:	4699      	mov	r9, r3
 800936c:	dc36      	bgt.n	80093dc <_printf_float+0x360>
 800936e:	f04f 0b00 	mov.w	fp, #0
 8009372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009376:	f104 021a 	add.w	r2, r4, #26
 800937a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800937c:	9306      	str	r3, [sp, #24]
 800937e:	eba3 0309 	sub.w	r3, r3, r9
 8009382:	455b      	cmp	r3, fp
 8009384:	dc31      	bgt.n	80093ea <_printf_float+0x36e>
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	459a      	cmp	sl, r3
 800938a:	dc3a      	bgt.n	8009402 <_printf_float+0x386>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07da      	lsls	r2, r3, #31
 8009390:	d437      	bmi.n	8009402 <_printf_float+0x386>
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	ebaa 0903 	sub.w	r9, sl, r3
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	ebaa 0303 	sub.w	r3, sl, r3
 800939e:	4599      	cmp	r9, r3
 80093a0:	bfa8      	it	ge
 80093a2:	4699      	movge	r9, r3
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	dc33      	bgt.n	8009412 <_printf_float+0x396>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b2:	f104 0b1a 	add.w	fp, r4, #26
 80093b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b8:	ebaa 0303 	sub.w	r3, sl, r3
 80093bc:	eba3 0309 	sub.w	r3, r3, r9
 80093c0:	4543      	cmp	r3, r8
 80093c2:	f77f af79 	ble.w	80092b8 <_printf_float+0x23c>
 80093c6:	2301      	movs	r3, #1
 80093c8:	465a      	mov	r2, fp
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f aeae 	beq.w	8009132 <_printf_float+0xb6>
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	e7ec      	b.n	80093b6 <_printf_float+0x33a>
 80093dc:	4642      	mov	r2, r8
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	d1c2      	bne.n	800936e <_printf_float+0x2f2>
 80093e8:	e6a3      	b.n	8009132 <_printf_float+0xb6>
 80093ea:	2301      	movs	r3, #1
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	9206      	str	r2, [sp, #24]
 80093f2:	47b8      	blx	r7
 80093f4:	3001      	adds	r0, #1
 80093f6:	f43f ae9c 	beq.w	8009132 <_printf_float+0xb6>
 80093fa:	9a06      	ldr	r2, [sp, #24]
 80093fc:	f10b 0b01 	add.w	fp, fp, #1
 8009400:	e7bb      	b.n	800937a <_printf_float+0x2fe>
 8009402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d1c0      	bne.n	8009392 <_printf_float+0x316>
 8009410:	e68f      	b.n	8009132 <_printf_float+0xb6>
 8009412:	9a06      	ldr	r2, [sp, #24]
 8009414:	464b      	mov	r3, r9
 8009416:	4442      	add	r2, r8
 8009418:	4631      	mov	r1, r6
 800941a:	4628      	mov	r0, r5
 800941c:	47b8      	blx	r7
 800941e:	3001      	adds	r0, #1
 8009420:	d1c3      	bne.n	80093aa <_printf_float+0x32e>
 8009422:	e686      	b.n	8009132 <_printf_float+0xb6>
 8009424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009428:	f1ba 0f01 	cmp.w	sl, #1
 800942c:	dc01      	bgt.n	8009432 <_printf_float+0x3b6>
 800942e:	07db      	lsls	r3, r3, #31
 8009430:	d536      	bpl.n	80094a0 <_printf_float+0x424>
 8009432:	2301      	movs	r3, #1
 8009434:	4642      	mov	r2, r8
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	f43f ae78 	beq.w	8009132 <_printf_float+0xb6>
 8009442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae70 	beq.w	8009132 <_printf_float+0xb6>
 8009452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009456:	2200      	movs	r2, #0
 8009458:	2300      	movs	r3, #0
 800945a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800945e:	f7f7 fb53 	bl	8000b08 <__aeabi_dcmpeq>
 8009462:	b9c0      	cbnz	r0, 8009496 <_printf_float+0x41a>
 8009464:	4653      	mov	r3, sl
 8009466:	f108 0201 	add.w	r2, r8, #1
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d10c      	bne.n	800948e <_printf_float+0x412>
 8009474:	e65d      	b.n	8009132 <_printf_float+0xb6>
 8009476:	2301      	movs	r3, #1
 8009478:	465a      	mov	r2, fp
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae56 	beq.w	8009132 <_printf_float+0xb6>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	45d0      	cmp	r8, sl
 800948c:	dbf3      	blt.n	8009476 <_printf_float+0x3fa>
 800948e:	464b      	mov	r3, r9
 8009490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009494:	e6df      	b.n	8009256 <_printf_float+0x1da>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0b1a 	add.w	fp, r4, #26
 800949e:	e7f4      	b.n	800948a <_printf_float+0x40e>
 80094a0:	2301      	movs	r3, #1
 80094a2:	4642      	mov	r2, r8
 80094a4:	e7e1      	b.n	800946a <_printf_float+0x3ee>
 80094a6:	2301      	movs	r3, #1
 80094a8:	464a      	mov	r2, r9
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae3e 	beq.w	8009132 <_printf_float+0xb6>
 80094b6:	f108 0801 	add.w	r8, r8, #1
 80094ba:	68e3      	ldr	r3, [r4, #12]
 80094bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094be:	1a5b      	subs	r3, r3, r1
 80094c0:	4543      	cmp	r3, r8
 80094c2:	dcf0      	bgt.n	80094a6 <_printf_float+0x42a>
 80094c4:	e6fc      	b.n	80092c0 <_printf_float+0x244>
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	f104 0919 	add.w	r9, r4, #25
 80094ce:	e7f4      	b.n	80094ba <_printf_float+0x43e>

080094d0 <_printf_common>:
 80094d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d4:	4616      	mov	r6, r2
 80094d6:	4698      	mov	r8, r3
 80094d8:	688a      	ldr	r2, [r1, #8]
 80094da:	690b      	ldr	r3, [r1, #16]
 80094dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	bfb8      	it	lt
 80094e4:	4613      	movlt	r3, r2
 80094e6:	6033      	str	r3, [r6, #0]
 80094e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094ec:	4607      	mov	r7, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	b10a      	cbz	r2, 80094f6 <_printf_common+0x26>
 80094f2:	3301      	adds	r3, #1
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	0699      	lsls	r1, r3, #26
 80094fa:	bf42      	ittt	mi
 80094fc:	6833      	ldrmi	r3, [r6, #0]
 80094fe:	3302      	addmi	r3, #2
 8009500:	6033      	strmi	r3, [r6, #0]
 8009502:	6825      	ldr	r5, [r4, #0]
 8009504:	f015 0506 	ands.w	r5, r5, #6
 8009508:	d106      	bne.n	8009518 <_printf_common+0x48>
 800950a:	f104 0a19 	add.w	sl, r4, #25
 800950e:	68e3      	ldr	r3, [r4, #12]
 8009510:	6832      	ldr	r2, [r6, #0]
 8009512:	1a9b      	subs	r3, r3, r2
 8009514:	42ab      	cmp	r3, r5
 8009516:	dc26      	bgt.n	8009566 <_printf_common+0x96>
 8009518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800951c:	6822      	ldr	r2, [r4, #0]
 800951e:	3b00      	subs	r3, #0
 8009520:	bf18      	it	ne
 8009522:	2301      	movne	r3, #1
 8009524:	0692      	lsls	r2, r2, #26
 8009526:	d42b      	bmi.n	8009580 <_printf_common+0xb0>
 8009528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800952c:	4641      	mov	r1, r8
 800952e:	4638      	mov	r0, r7
 8009530:	47c8      	blx	r9
 8009532:	3001      	adds	r0, #1
 8009534:	d01e      	beq.n	8009574 <_printf_common+0xa4>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	6922      	ldr	r2, [r4, #16]
 800953a:	f003 0306 	and.w	r3, r3, #6
 800953e:	2b04      	cmp	r3, #4
 8009540:	bf02      	ittt	eq
 8009542:	68e5      	ldreq	r5, [r4, #12]
 8009544:	6833      	ldreq	r3, [r6, #0]
 8009546:	1aed      	subeq	r5, r5, r3
 8009548:	68a3      	ldr	r3, [r4, #8]
 800954a:	bf0c      	ite	eq
 800954c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009550:	2500      	movne	r5, #0
 8009552:	4293      	cmp	r3, r2
 8009554:	bfc4      	itt	gt
 8009556:	1a9b      	subgt	r3, r3, r2
 8009558:	18ed      	addgt	r5, r5, r3
 800955a:	2600      	movs	r6, #0
 800955c:	341a      	adds	r4, #26
 800955e:	42b5      	cmp	r5, r6
 8009560:	d11a      	bne.n	8009598 <_printf_common+0xc8>
 8009562:	2000      	movs	r0, #0
 8009564:	e008      	b.n	8009578 <_printf_common+0xa8>
 8009566:	2301      	movs	r3, #1
 8009568:	4652      	mov	r2, sl
 800956a:	4641      	mov	r1, r8
 800956c:	4638      	mov	r0, r7
 800956e:	47c8      	blx	r9
 8009570:	3001      	adds	r0, #1
 8009572:	d103      	bne.n	800957c <_printf_common+0xac>
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957c:	3501      	adds	r5, #1
 800957e:	e7c6      	b.n	800950e <_printf_common+0x3e>
 8009580:	18e1      	adds	r1, r4, r3
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	2030      	movs	r0, #48	@ 0x30
 8009586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800958a:	4422      	add	r2, r4
 800958c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009594:	3302      	adds	r3, #2
 8009596:	e7c7      	b.n	8009528 <_printf_common+0x58>
 8009598:	2301      	movs	r3, #1
 800959a:	4622      	mov	r2, r4
 800959c:	4641      	mov	r1, r8
 800959e:	4638      	mov	r0, r7
 80095a0:	47c8      	blx	r9
 80095a2:	3001      	adds	r0, #1
 80095a4:	d0e6      	beq.n	8009574 <_printf_common+0xa4>
 80095a6:	3601      	adds	r6, #1
 80095a8:	e7d9      	b.n	800955e <_printf_common+0x8e>
	...

080095ac <_printf_i>:
 80095ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b0:	7e0f      	ldrb	r7, [r1, #24]
 80095b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095b4:	2f78      	cmp	r7, #120	@ 0x78
 80095b6:	4691      	mov	r9, r2
 80095b8:	4680      	mov	r8, r0
 80095ba:	460c      	mov	r4, r1
 80095bc:	469a      	mov	sl, r3
 80095be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095c2:	d807      	bhi.n	80095d4 <_printf_i+0x28>
 80095c4:	2f62      	cmp	r7, #98	@ 0x62
 80095c6:	d80a      	bhi.n	80095de <_printf_i+0x32>
 80095c8:	2f00      	cmp	r7, #0
 80095ca:	f000 80d2 	beq.w	8009772 <_printf_i+0x1c6>
 80095ce:	2f58      	cmp	r7, #88	@ 0x58
 80095d0:	f000 80b9 	beq.w	8009746 <_printf_i+0x19a>
 80095d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095dc:	e03a      	b.n	8009654 <_printf_i+0xa8>
 80095de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095e2:	2b15      	cmp	r3, #21
 80095e4:	d8f6      	bhi.n	80095d4 <_printf_i+0x28>
 80095e6:	a101      	add	r1, pc, #4	@ (adr r1, 80095ec <_printf_i+0x40>)
 80095e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009659 	.word	0x08009659
 80095f4:	080095d5 	.word	0x080095d5
 80095f8:	080095d5 	.word	0x080095d5
 80095fc:	080095d5 	.word	0x080095d5
 8009600:	080095d5 	.word	0x080095d5
 8009604:	08009659 	.word	0x08009659
 8009608:	080095d5 	.word	0x080095d5
 800960c:	080095d5 	.word	0x080095d5
 8009610:	080095d5 	.word	0x080095d5
 8009614:	080095d5 	.word	0x080095d5
 8009618:	08009759 	.word	0x08009759
 800961c:	08009683 	.word	0x08009683
 8009620:	08009713 	.word	0x08009713
 8009624:	080095d5 	.word	0x080095d5
 8009628:	080095d5 	.word	0x080095d5
 800962c:	0800977b 	.word	0x0800977b
 8009630:	080095d5 	.word	0x080095d5
 8009634:	08009683 	.word	0x08009683
 8009638:	080095d5 	.word	0x080095d5
 800963c:	080095d5 	.word	0x080095d5
 8009640:	0800971b 	.word	0x0800971b
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6032      	str	r2, [r6, #0]
 800964c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009654:	2301      	movs	r3, #1
 8009656:	e09d      	b.n	8009794 <_printf_i+0x1e8>
 8009658:	6833      	ldr	r3, [r6, #0]
 800965a:	6820      	ldr	r0, [r4, #0]
 800965c:	1d19      	adds	r1, r3, #4
 800965e:	6031      	str	r1, [r6, #0]
 8009660:	0606      	lsls	r6, r0, #24
 8009662:	d501      	bpl.n	8009668 <_printf_i+0xbc>
 8009664:	681d      	ldr	r5, [r3, #0]
 8009666:	e003      	b.n	8009670 <_printf_i+0xc4>
 8009668:	0645      	lsls	r5, r0, #25
 800966a:	d5fb      	bpl.n	8009664 <_printf_i+0xb8>
 800966c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009670:	2d00      	cmp	r5, #0
 8009672:	da03      	bge.n	800967c <_printf_i+0xd0>
 8009674:	232d      	movs	r3, #45	@ 0x2d
 8009676:	426d      	negs	r5, r5
 8009678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800967c:	4859      	ldr	r0, [pc, #356]	@ (80097e4 <_printf_i+0x238>)
 800967e:	230a      	movs	r3, #10
 8009680:	e011      	b.n	80096a6 <_printf_i+0xfa>
 8009682:	6821      	ldr	r1, [r4, #0]
 8009684:	6833      	ldr	r3, [r6, #0]
 8009686:	0608      	lsls	r0, r1, #24
 8009688:	f853 5b04 	ldr.w	r5, [r3], #4
 800968c:	d402      	bmi.n	8009694 <_printf_i+0xe8>
 800968e:	0649      	lsls	r1, r1, #25
 8009690:	bf48      	it	mi
 8009692:	b2ad      	uxthmi	r5, r5
 8009694:	2f6f      	cmp	r7, #111	@ 0x6f
 8009696:	4853      	ldr	r0, [pc, #332]	@ (80097e4 <_printf_i+0x238>)
 8009698:	6033      	str	r3, [r6, #0]
 800969a:	bf14      	ite	ne
 800969c:	230a      	movne	r3, #10
 800969e:	2308      	moveq	r3, #8
 80096a0:	2100      	movs	r1, #0
 80096a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096a6:	6866      	ldr	r6, [r4, #4]
 80096a8:	60a6      	str	r6, [r4, #8]
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	bfa2      	ittt	ge
 80096ae:	6821      	ldrge	r1, [r4, #0]
 80096b0:	f021 0104 	bicge.w	r1, r1, #4
 80096b4:	6021      	strge	r1, [r4, #0]
 80096b6:	b90d      	cbnz	r5, 80096bc <_printf_i+0x110>
 80096b8:	2e00      	cmp	r6, #0
 80096ba:	d04b      	beq.n	8009754 <_printf_i+0x1a8>
 80096bc:	4616      	mov	r6, r2
 80096be:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c2:	fb03 5711 	mls	r7, r3, r1, r5
 80096c6:	5dc7      	ldrb	r7, [r0, r7]
 80096c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096cc:	462f      	mov	r7, r5
 80096ce:	42bb      	cmp	r3, r7
 80096d0:	460d      	mov	r5, r1
 80096d2:	d9f4      	bls.n	80096be <_printf_i+0x112>
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d10b      	bne.n	80096f0 <_printf_i+0x144>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	07df      	lsls	r7, r3, #31
 80096dc:	d508      	bpl.n	80096f0 <_printf_i+0x144>
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	6861      	ldr	r1, [r4, #4]
 80096e2:	4299      	cmp	r1, r3
 80096e4:	bfde      	ittt	le
 80096e6:	2330      	movle	r3, #48	@ 0x30
 80096e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096f0:	1b92      	subs	r2, r2, r6
 80096f2:	6122      	str	r2, [r4, #16]
 80096f4:	f8cd a000 	str.w	sl, [sp]
 80096f8:	464b      	mov	r3, r9
 80096fa:	aa03      	add	r2, sp, #12
 80096fc:	4621      	mov	r1, r4
 80096fe:	4640      	mov	r0, r8
 8009700:	f7ff fee6 	bl	80094d0 <_printf_common>
 8009704:	3001      	adds	r0, #1
 8009706:	d14a      	bne.n	800979e <_printf_i+0x1f2>
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	b004      	add	sp, #16
 800970e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	f043 0320 	orr.w	r3, r3, #32
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	4833      	ldr	r0, [pc, #204]	@ (80097e8 <_printf_i+0x23c>)
 800971c:	2778      	movs	r7, #120	@ 0x78
 800971e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	6831      	ldr	r1, [r6, #0]
 8009726:	061f      	lsls	r7, r3, #24
 8009728:	f851 5b04 	ldr.w	r5, [r1], #4
 800972c:	d402      	bmi.n	8009734 <_printf_i+0x188>
 800972e:	065f      	lsls	r7, r3, #25
 8009730:	bf48      	it	mi
 8009732:	b2ad      	uxthmi	r5, r5
 8009734:	6031      	str	r1, [r6, #0]
 8009736:	07d9      	lsls	r1, r3, #31
 8009738:	bf44      	itt	mi
 800973a:	f043 0320 	orrmi.w	r3, r3, #32
 800973e:	6023      	strmi	r3, [r4, #0]
 8009740:	b11d      	cbz	r5, 800974a <_printf_i+0x19e>
 8009742:	2310      	movs	r3, #16
 8009744:	e7ac      	b.n	80096a0 <_printf_i+0xf4>
 8009746:	4827      	ldr	r0, [pc, #156]	@ (80097e4 <_printf_i+0x238>)
 8009748:	e7e9      	b.n	800971e <_printf_i+0x172>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f023 0320 	bic.w	r3, r3, #32
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	e7f6      	b.n	8009742 <_printf_i+0x196>
 8009754:	4616      	mov	r6, r2
 8009756:	e7bd      	b.n	80096d4 <_printf_i+0x128>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	6825      	ldr	r5, [r4, #0]
 800975c:	6961      	ldr	r1, [r4, #20]
 800975e:	1d18      	adds	r0, r3, #4
 8009760:	6030      	str	r0, [r6, #0]
 8009762:	062e      	lsls	r6, r5, #24
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	d501      	bpl.n	800976c <_printf_i+0x1c0>
 8009768:	6019      	str	r1, [r3, #0]
 800976a:	e002      	b.n	8009772 <_printf_i+0x1c6>
 800976c:	0668      	lsls	r0, r5, #25
 800976e:	d5fb      	bpl.n	8009768 <_printf_i+0x1bc>
 8009770:	8019      	strh	r1, [r3, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	4616      	mov	r6, r2
 8009778:	e7bc      	b.n	80096f4 <_printf_i+0x148>
 800977a:	6833      	ldr	r3, [r6, #0]
 800977c:	1d1a      	adds	r2, r3, #4
 800977e:	6032      	str	r2, [r6, #0]
 8009780:	681e      	ldr	r6, [r3, #0]
 8009782:	6862      	ldr	r2, [r4, #4]
 8009784:	2100      	movs	r1, #0
 8009786:	4630      	mov	r0, r6
 8009788:	f7f6 fd42 	bl	8000210 <memchr>
 800978c:	b108      	cbz	r0, 8009792 <_printf_i+0x1e6>
 800978e:	1b80      	subs	r0, r0, r6
 8009790:	6060      	str	r0, [r4, #4]
 8009792:	6863      	ldr	r3, [r4, #4]
 8009794:	6123      	str	r3, [r4, #16]
 8009796:	2300      	movs	r3, #0
 8009798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979c:	e7aa      	b.n	80096f4 <_printf_i+0x148>
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	4632      	mov	r2, r6
 80097a2:	4649      	mov	r1, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	47d0      	blx	sl
 80097a8:	3001      	adds	r0, #1
 80097aa:	d0ad      	beq.n	8009708 <_printf_i+0x15c>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	079b      	lsls	r3, r3, #30
 80097b0:	d413      	bmi.n	80097da <_printf_i+0x22e>
 80097b2:	68e0      	ldr	r0, [r4, #12]
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	4298      	cmp	r0, r3
 80097b8:	bfb8      	it	lt
 80097ba:	4618      	movlt	r0, r3
 80097bc:	e7a6      	b.n	800970c <_printf_i+0x160>
 80097be:	2301      	movs	r3, #1
 80097c0:	4632      	mov	r2, r6
 80097c2:	4649      	mov	r1, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	47d0      	blx	sl
 80097c8:	3001      	adds	r0, #1
 80097ca:	d09d      	beq.n	8009708 <_printf_i+0x15c>
 80097cc:	3501      	adds	r5, #1
 80097ce:	68e3      	ldr	r3, [r4, #12]
 80097d0:	9903      	ldr	r1, [sp, #12]
 80097d2:	1a5b      	subs	r3, r3, r1
 80097d4:	42ab      	cmp	r3, r5
 80097d6:	dcf2      	bgt.n	80097be <_printf_i+0x212>
 80097d8:	e7eb      	b.n	80097b2 <_printf_i+0x206>
 80097da:	2500      	movs	r5, #0
 80097dc:	f104 0619 	add.w	r6, r4, #25
 80097e0:	e7f5      	b.n	80097ce <_printf_i+0x222>
 80097e2:	bf00      	nop
 80097e4:	0800c4aa 	.word	0x0800c4aa
 80097e8:	0800c4bb 	.word	0x0800c4bb

080097ec <std>:
 80097ec:	2300      	movs	r3, #0
 80097ee:	b510      	push	{r4, lr}
 80097f0:	4604      	mov	r4, r0
 80097f2:	e9c0 3300 	strd	r3, r3, [r0]
 80097f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097fa:	6083      	str	r3, [r0, #8]
 80097fc:	8181      	strh	r1, [r0, #12]
 80097fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009800:	81c2      	strh	r2, [r0, #14]
 8009802:	6183      	str	r3, [r0, #24]
 8009804:	4619      	mov	r1, r3
 8009806:	2208      	movs	r2, #8
 8009808:	305c      	adds	r0, #92	@ 0x5c
 800980a:	f000 f914 	bl	8009a36 <memset>
 800980e:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <std+0x58>)
 8009810:	6263      	str	r3, [r4, #36]	@ 0x24
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <std+0x5c>)
 8009814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <std+0x60>)
 8009818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800981a:	4b0d      	ldr	r3, [pc, #52]	@ (8009850 <std+0x64>)
 800981c:	6323      	str	r3, [r4, #48]	@ 0x30
 800981e:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <std+0x68>)
 8009820:	6224      	str	r4, [r4, #32]
 8009822:	429c      	cmp	r4, r3
 8009824:	d006      	beq.n	8009834 <std+0x48>
 8009826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800982a:	4294      	cmp	r4, r2
 800982c:	d002      	beq.n	8009834 <std+0x48>
 800982e:	33d0      	adds	r3, #208	@ 0xd0
 8009830:	429c      	cmp	r4, r3
 8009832:	d105      	bne.n	8009840 <std+0x54>
 8009834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800983c:	f000 b9ce 	b.w	8009bdc <__retarget_lock_init_recursive>
 8009840:	bd10      	pop	{r4, pc}
 8009842:	bf00      	nop
 8009844:	080099b1 	.word	0x080099b1
 8009848:	080099d3 	.word	0x080099d3
 800984c:	08009a0b 	.word	0x08009a0b
 8009850:	08009a2f 	.word	0x08009a2f
 8009854:	200127c8 	.word	0x200127c8

08009858 <stdio_exit_handler>:
 8009858:	4a02      	ldr	r2, [pc, #8]	@ (8009864 <stdio_exit_handler+0xc>)
 800985a:	4903      	ldr	r1, [pc, #12]	@ (8009868 <stdio_exit_handler+0x10>)
 800985c:	4803      	ldr	r0, [pc, #12]	@ (800986c <stdio_exit_handler+0x14>)
 800985e:	f000 b869 	b.w	8009934 <_fwalk_sglue>
 8009862:	bf00      	nop
 8009864:	20000020 	.word	0x20000020
 8009868:	0800b555 	.word	0x0800b555
 800986c:	20000030 	.word	0x20000030

08009870 <cleanup_stdio>:
 8009870:	6841      	ldr	r1, [r0, #4]
 8009872:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <cleanup_stdio+0x34>)
 8009874:	4299      	cmp	r1, r3
 8009876:	b510      	push	{r4, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	d001      	beq.n	8009880 <cleanup_stdio+0x10>
 800987c:	f001 fe6a 	bl	800b554 <_fflush_r>
 8009880:	68a1      	ldr	r1, [r4, #8]
 8009882:	4b09      	ldr	r3, [pc, #36]	@ (80098a8 <cleanup_stdio+0x38>)
 8009884:	4299      	cmp	r1, r3
 8009886:	d002      	beq.n	800988e <cleanup_stdio+0x1e>
 8009888:	4620      	mov	r0, r4
 800988a:	f001 fe63 	bl	800b554 <_fflush_r>
 800988e:	68e1      	ldr	r1, [r4, #12]
 8009890:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <cleanup_stdio+0x3c>)
 8009892:	4299      	cmp	r1, r3
 8009894:	d004      	beq.n	80098a0 <cleanup_stdio+0x30>
 8009896:	4620      	mov	r0, r4
 8009898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989c:	f001 be5a 	b.w	800b554 <_fflush_r>
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	bf00      	nop
 80098a4:	200127c8 	.word	0x200127c8
 80098a8:	20012830 	.word	0x20012830
 80098ac:	20012898 	.word	0x20012898

080098b0 <global_stdio_init.part.0>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <global_stdio_init.part.0+0x30>)
 80098b4:	4c0b      	ldr	r4, [pc, #44]	@ (80098e4 <global_stdio_init.part.0+0x34>)
 80098b6:	4a0c      	ldr	r2, [pc, #48]	@ (80098e8 <global_stdio_init.part.0+0x38>)
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	4620      	mov	r0, r4
 80098bc:	2200      	movs	r2, #0
 80098be:	2104      	movs	r1, #4
 80098c0:	f7ff ff94 	bl	80097ec <std>
 80098c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098c8:	2201      	movs	r2, #1
 80098ca:	2109      	movs	r1, #9
 80098cc:	f7ff ff8e 	bl	80097ec <std>
 80098d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098d4:	2202      	movs	r2, #2
 80098d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098da:	2112      	movs	r1, #18
 80098dc:	f7ff bf86 	b.w	80097ec <std>
 80098e0:	20012900 	.word	0x20012900
 80098e4:	200127c8 	.word	0x200127c8
 80098e8:	08009859 	.word	0x08009859

080098ec <__sfp_lock_acquire>:
 80098ec:	4801      	ldr	r0, [pc, #4]	@ (80098f4 <__sfp_lock_acquire+0x8>)
 80098ee:	f000 b976 	b.w	8009bde <__retarget_lock_acquire_recursive>
 80098f2:	bf00      	nop
 80098f4:	20012909 	.word	0x20012909

080098f8 <__sfp_lock_release>:
 80098f8:	4801      	ldr	r0, [pc, #4]	@ (8009900 <__sfp_lock_release+0x8>)
 80098fa:	f000 b971 	b.w	8009be0 <__retarget_lock_release_recursive>
 80098fe:	bf00      	nop
 8009900:	20012909 	.word	0x20012909

08009904 <__sinit>:
 8009904:	b510      	push	{r4, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	f7ff fff0 	bl	80098ec <__sfp_lock_acquire>
 800990c:	6a23      	ldr	r3, [r4, #32]
 800990e:	b11b      	cbz	r3, 8009918 <__sinit+0x14>
 8009910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009914:	f7ff bff0 	b.w	80098f8 <__sfp_lock_release>
 8009918:	4b04      	ldr	r3, [pc, #16]	@ (800992c <__sinit+0x28>)
 800991a:	6223      	str	r3, [r4, #32]
 800991c:	4b04      	ldr	r3, [pc, #16]	@ (8009930 <__sinit+0x2c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1f5      	bne.n	8009910 <__sinit+0xc>
 8009924:	f7ff ffc4 	bl	80098b0 <global_stdio_init.part.0>
 8009928:	e7f2      	b.n	8009910 <__sinit+0xc>
 800992a:	bf00      	nop
 800992c:	08009871 	.word	0x08009871
 8009930:	20012900 	.word	0x20012900

08009934 <_fwalk_sglue>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4607      	mov	r7, r0
 800993a:	4688      	mov	r8, r1
 800993c:	4614      	mov	r4, r2
 800993e:	2600      	movs	r6, #0
 8009940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009944:	f1b9 0901 	subs.w	r9, r9, #1
 8009948:	d505      	bpl.n	8009956 <_fwalk_sglue+0x22>
 800994a:	6824      	ldr	r4, [r4, #0]
 800994c:	2c00      	cmp	r4, #0
 800994e:	d1f7      	bne.n	8009940 <_fwalk_sglue+0xc>
 8009950:	4630      	mov	r0, r6
 8009952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d907      	bls.n	800996c <_fwalk_sglue+0x38>
 800995c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009960:	3301      	adds	r3, #1
 8009962:	d003      	beq.n	800996c <_fwalk_sglue+0x38>
 8009964:	4629      	mov	r1, r5
 8009966:	4638      	mov	r0, r7
 8009968:	47c0      	blx	r8
 800996a:	4306      	orrs	r6, r0
 800996c:	3568      	adds	r5, #104	@ 0x68
 800996e:	e7e9      	b.n	8009944 <_fwalk_sglue+0x10>

08009970 <siprintf>:
 8009970:	b40e      	push	{r1, r2, r3}
 8009972:	b500      	push	{lr}
 8009974:	b09c      	sub	sp, #112	@ 0x70
 8009976:	ab1d      	add	r3, sp, #116	@ 0x74
 8009978:	9002      	str	r0, [sp, #8]
 800997a:	9006      	str	r0, [sp, #24]
 800997c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009980:	4809      	ldr	r0, [pc, #36]	@ (80099a8 <siprintf+0x38>)
 8009982:	9107      	str	r1, [sp, #28]
 8009984:	9104      	str	r1, [sp, #16]
 8009986:	4909      	ldr	r1, [pc, #36]	@ (80099ac <siprintf+0x3c>)
 8009988:	f853 2b04 	ldr.w	r2, [r3], #4
 800998c:	9105      	str	r1, [sp, #20]
 800998e:	6800      	ldr	r0, [r0, #0]
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	a902      	add	r1, sp, #8
 8009994:	f001 fc5e 	bl	800b254 <_svfiprintf_r>
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	b01c      	add	sp, #112	@ 0x70
 80099a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099a4:	b003      	add	sp, #12
 80099a6:	4770      	bx	lr
 80099a8:	2000002c 	.word	0x2000002c
 80099ac:	ffff0208 	.word	0xffff0208

080099b0 <__sread>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	460c      	mov	r4, r1
 80099b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b8:	f000 f8c2 	bl	8009b40 <_read_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	bfab      	itete	ge
 80099c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099c2:	89a3      	ldrhlt	r3, [r4, #12]
 80099c4:	181b      	addge	r3, r3, r0
 80099c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ca:	bfac      	ite	ge
 80099cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099ce:	81a3      	strhlt	r3, [r4, #12]
 80099d0:	bd10      	pop	{r4, pc}

080099d2 <__swrite>:
 80099d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	461f      	mov	r7, r3
 80099d8:	898b      	ldrh	r3, [r1, #12]
 80099da:	05db      	lsls	r3, r3, #23
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	4616      	mov	r6, r2
 80099e2:	d505      	bpl.n	80099f0 <__swrite+0x1e>
 80099e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e8:	2302      	movs	r3, #2
 80099ea:	2200      	movs	r2, #0
 80099ec:	f000 f896 	bl	8009b1c <_lseek_r>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	4632      	mov	r2, r6
 80099fe:	463b      	mov	r3, r7
 8009a00:	4628      	mov	r0, r5
 8009a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a06:	f000 b8ad 	b.w	8009b64 <_write_r>

08009a0a <__sseek>:
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a12:	f000 f883 	bl	8009b1c <_lseek_r>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	bf15      	itete	ne
 8009a1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a26:	81a3      	strheq	r3, [r4, #12]
 8009a28:	bf18      	it	ne
 8009a2a:	81a3      	strhne	r3, [r4, #12]
 8009a2c:	bd10      	pop	{r4, pc}

08009a2e <__sclose>:
 8009a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a32:	f000 b80d 	b.w	8009a50 <_close_r>

08009a36 <memset>:
 8009a36:	4402      	add	r2, r0
 8009a38:	4603      	mov	r3, r0
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d100      	bne.n	8009a40 <memset+0xa>
 8009a3e:	4770      	bx	lr
 8009a40:	f803 1b01 	strb.w	r1, [r3], #1
 8009a44:	e7f9      	b.n	8009a3a <memset+0x4>
	...

08009a48 <_localeconv_r>:
 8009a48:	4800      	ldr	r0, [pc, #0]	@ (8009a4c <_localeconv_r+0x4>)
 8009a4a:	4770      	bx	lr
 8009a4c:	2000016c 	.word	0x2000016c

08009a50 <_close_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d06      	ldr	r5, [pc, #24]	@ (8009a6c <_close_r+0x1c>)
 8009a54:	2300      	movs	r3, #0
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f8 fc70 	bl	8002340 <_close>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_close_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_close_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	20012904 	.word	0x20012904

08009a70 <_reclaim_reent>:
 8009a70:	4b29      	ldr	r3, [pc, #164]	@ (8009b18 <_reclaim_reent+0xa8>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4283      	cmp	r3, r0
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	d04b      	beq.n	8009b14 <_reclaim_reent+0xa4>
 8009a7c:	69c3      	ldr	r3, [r0, #28]
 8009a7e:	b1ab      	cbz	r3, 8009aac <_reclaim_reent+0x3c>
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	b16b      	cbz	r3, 8009aa0 <_reclaim_reent+0x30>
 8009a84:	2500      	movs	r5, #0
 8009a86:	69e3      	ldr	r3, [r4, #28]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	5959      	ldr	r1, [r3, r5]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d13b      	bne.n	8009b08 <_reclaim_reent+0x98>
 8009a90:	3504      	adds	r5, #4
 8009a92:	2d80      	cmp	r5, #128	@ 0x80
 8009a94:	d1f7      	bne.n	8009a86 <_reclaim_reent+0x16>
 8009a96:	69e3      	ldr	r3, [r4, #28]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	68d9      	ldr	r1, [r3, #12]
 8009a9c:	f000 fefc 	bl	800a898 <_free_r>
 8009aa0:	69e3      	ldr	r3, [r4, #28]
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	b111      	cbz	r1, 8009aac <_reclaim_reent+0x3c>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fef6 	bl	800a898 <_free_r>
 8009aac:	6961      	ldr	r1, [r4, #20]
 8009aae:	b111      	cbz	r1, 8009ab6 <_reclaim_reent+0x46>
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fef1 	bl	800a898 <_free_r>
 8009ab6:	69e1      	ldr	r1, [r4, #28]
 8009ab8:	b111      	cbz	r1, 8009ac0 <_reclaim_reent+0x50>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 feec 	bl	800a898 <_free_r>
 8009ac0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ac2:	b111      	cbz	r1, 8009aca <_reclaim_reent+0x5a>
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fee7 	bl	800a898 <_free_r>
 8009aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009acc:	b111      	cbz	r1, 8009ad4 <_reclaim_reent+0x64>
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 fee2 	bl	800a898 <_free_r>
 8009ad4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009ad6:	b111      	cbz	r1, 8009ade <_reclaim_reent+0x6e>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fedd 	bl	800a898 <_free_r>
 8009ade:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009ae0:	b111      	cbz	r1, 8009ae8 <_reclaim_reent+0x78>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f000 fed8 	bl	800a898 <_free_r>
 8009ae8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009aea:	b111      	cbz	r1, 8009af2 <_reclaim_reent+0x82>
 8009aec:	4620      	mov	r0, r4
 8009aee:	f000 fed3 	bl	800a898 <_free_r>
 8009af2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009af4:	b111      	cbz	r1, 8009afc <_reclaim_reent+0x8c>
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fece 	bl	800a898 <_free_r>
 8009afc:	6a23      	ldr	r3, [r4, #32]
 8009afe:	b14b      	cbz	r3, 8009b14 <_reclaim_reent+0xa4>
 8009b00:	4620      	mov	r0, r4
 8009b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b06:	4718      	bx	r3
 8009b08:	680e      	ldr	r6, [r1, #0]
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f000 fec4 	bl	800a898 <_free_r>
 8009b10:	4631      	mov	r1, r6
 8009b12:	e7bb      	b.n	8009a8c <_reclaim_reent+0x1c>
 8009b14:	bd70      	pop	{r4, r5, r6, pc}
 8009b16:	bf00      	nop
 8009b18:	2000002c 	.word	0x2000002c

08009b1c <_lseek_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	@ (8009b3c <_lseek_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7f8 fc2f 	bl	800238e <_lseek>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_lseek_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_lseek_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20012904 	.word	0x20012904

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	@ (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 fbbd 	bl	80022ce <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20012904 	.word	0x20012904

08009b64 <_write_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	@ (8009b84 <_write_r+0x20>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7f8 fbc8 	bl	8002308 <_write>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_write_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_write_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20012904 	.word	0x20012904

08009b88 <__errno>:
 8009b88:	4b01      	ldr	r3, [pc, #4]	@ (8009b90 <__errno+0x8>)
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	2000002c 	.word	0x2000002c

08009b94 <__libc_init_array>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4d0d      	ldr	r5, [pc, #52]	@ (8009bcc <__libc_init_array+0x38>)
 8009b98:	4c0d      	ldr	r4, [pc, #52]	@ (8009bd0 <__libc_init_array+0x3c>)
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	d109      	bne.n	8009bb8 <__libc_init_array+0x24>
 8009ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8009bd4 <__libc_init_array+0x40>)
 8009ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8009bd8 <__libc_init_array+0x44>)
 8009ba8:	f002 f9e2 	bl	800bf70 <_init>
 8009bac:	1b64      	subs	r4, r4, r5
 8009bae:	10a4      	asrs	r4, r4, #2
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	d105      	bne.n	8009bc2 <__libc_init_array+0x2e>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbc:	4798      	blx	r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__libc_init_array+0xc>
 8009bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc6:	4798      	blx	r3
 8009bc8:	3601      	adds	r6, #1
 8009bca:	e7f2      	b.n	8009bb2 <__libc_init_array+0x1e>
 8009bcc:	0800c848 	.word	0x0800c848
 8009bd0:	0800c848 	.word	0x0800c848
 8009bd4:	0800c848 	.word	0x0800c848
 8009bd8:	0800c84c 	.word	0x0800c84c

08009bdc <__retarget_lock_init_recursive>:
 8009bdc:	4770      	bx	lr

08009bde <__retarget_lock_acquire_recursive>:
 8009bde:	4770      	bx	lr

08009be0 <__retarget_lock_release_recursive>:
 8009be0:	4770      	bx	lr

08009be2 <memcpy>:
 8009be2:	440a      	add	r2, r1
 8009be4:	4291      	cmp	r1, r2
 8009be6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bea:	d100      	bne.n	8009bee <memcpy+0xc>
 8009bec:	4770      	bx	lr
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf8:	4291      	cmp	r1, r2
 8009bfa:	d1f9      	bne.n	8009bf0 <memcpy+0xe>
 8009bfc:	bd10      	pop	{r4, pc}

08009bfe <quorem>:
 8009bfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c02:	6903      	ldr	r3, [r0, #16]
 8009c04:	690c      	ldr	r4, [r1, #16]
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	4607      	mov	r7, r0
 8009c0a:	db7e      	blt.n	8009d0a <quorem+0x10c>
 8009c0c:	3c01      	subs	r4, #1
 8009c0e:	f101 0814 	add.w	r8, r1, #20
 8009c12:	00a3      	lsls	r3, r4, #2
 8009c14:	f100 0514 	add.w	r5, r0, #20
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c30:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c34:	d32e      	bcc.n	8009c94 <quorem+0x96>
 8009c36:	f04f 0a00 	mov.w	sl, #0
 8009c3a:	46c4      	mov	ip, r8
 8009c3c:	46ae      	mov	lr, r5
 8009c3e:	46d3      	mov	fp, sl
 8009c40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c44:	b298      	uxth	r0, r3
 8009c46:	fb06 a000 	mla	r0, r6, r0, sl
 8009c4a:	0c02      	lsrs	r2, r0, #16
 8009c4c:	0c1b      	lsrs	r3, r3, #16
 8009c4e:	fb06 2303 	mla	r3, r6, r3, r2
 8009c52:	f8de 2000 	ldr.w	r2, [lr]
 8009c56:	b280      	uxth	r0, r0
 8009c58:	b292      	uxth	r2, r2
 8009c5a:	1a12      	subs	r2, r2, r0
 8009c5c:	445a      	add	r2, fp
 8009c5e:	f8de 0000 	ldr.w	r0, [lr]
 8009c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009c6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009c70:	b292      	uxth	r2, r2
 8009c72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c76:	45e1      	cmp	r9, ip
 8009c78:	f84e 2b04 	str.w	r2, [lr], #4
 8009c7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009c80:	d2de      	bcs.n	8009c40 <quorem+0x42>
 8009c82:	9b00      	ldr	r3, [sp, #0]
 8009c84:	58eb      	ldr	r3, [r5, r3]
 8009c86:	b92b      	cbnz	r3, 8009c94 <quorem+0x96>
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	d32f      	bcc.n	8009cf2 <quorem+0xf4>
 8009c92:	613c      	str	r4, [r7, #16]
 8009c94:	4638      	mov	r0, r7
 8009c96:	f001 f979 	bl	800af8c <__mcmp>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	db25      	blt.n	8009cea <quorem+0xec>
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ca6:	f8d1 c000 	ldr.w	ip, [r1]
 8009caa:	fa1f fe82 	uxth.w	lr, r2
 8009cae:	fa1f f38c 	uxth.w	r3, ip
 8009cb2:	eba3 030e 	sub.w	r3, r3, lr
 8009cb6:	4403      	add	r3, r0
 8009cb8:	0c12      	lsrs	r2, r2, #16
 8009cba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cbe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc8:	45c1      	cmp	r9, r8
 8009cca:	f841 3b04 	str.w	r3, [r1], #4
 8009cce:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009cd2:	d2e6      	bcs.n	8009ca2 <quorem+0xa4>
 8009cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cdc:	b922      	cbnz	r2, 8009ce8 <quorem+0xea>
 8009cde:	3b04      	subs	r3, #4
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	d30b      	bcc.n	8009cfe <quorem+0x100>
 8009ce6:	613c      	str	r4, [r7, #16]
 8009ce8:	3601      	adds	r6, #1
 8009cea:	4630      	mov	r0, r6
 8009cec:	b003      	add	sp, #12
 8009cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	2a00      	cmp	r2, #0
 8009cf8:	d1cb      	bne.n	8009c92 <quorem+0x94>
 8009cfa:	3c01      	subs	r4, #1
 8009cfc:	e7c6      	b.n	8009c8c <quorem+0x8e>
 8009cfe:	6812      	ldr	r2, [r2, #0]
 8009d00:	3b04      	subs	r3, #4
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d1ef      	bne.n	8009ce6 <quorem+0xe8>
 8009d06:	3c01      	subs	r4, #1
 8009d08:	e7ea      	b.n	8009ce0 <quorem+0xe2>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e7ee      	b.n	8009cec <quorem+0xee>
	...

08009d10 <_dtoa_r>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	69c7      	ldr	r7, [r0, #28]
 8009d16:	b099      	sub	sp, #100	@ 0x64
 8009d18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d1c:	ec55 4b10 	vmov	r4, r5, d0
 8009d20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009d22:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d24:	4683      	mov	fp, r0
 8009d26:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d2a:	b97f      	cbnz	r7, 8009d4c <_dtoa_r+0x3c>
 8009d2c:	2010      	movs	r0, #16
 8009d2e:	f000 fdfd 	bl	800a92c <malloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d38:	b920      	cbnz	r0, 8009d44 <_dtoa_r+0x34>
 8009d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8009fd8 <_dtoa_r+0x2c8>)
 8009d3c:	21ef      	movs	r1, #239	@ 0xef
 8009d3e:	48a7      	ldr	r0, [pc, #668]	@ (8009fdc <_dtoa_r+0x2cc>)
 8009d40:	f001 fc5a 	bl	800b5f8 <__assert_func>
 8009d44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d48:	6007      	str	r7, [r0, #0]
 8009d4a:	60c7      	str	r7, [r0, #12]
 8009d4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d50:	6819      	ldr	r1, [r3, #0]
 8009d52:	b159      	cbz	r1, 8009d6c <_dtoa_r+0x5c>
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	604a      	str	r2, [r1, #4]
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4093      	lsls	r3, r2
 8009d5c:	608b      	str	r3, [r1, #8]
 8009d5e:	4658      	mov	r0, fp
 8009d60:	f000 feda 	bl	800ab18 <_Bfree>
 8009d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	1e2b      	subs	r3, r5, #0
 8009d6e:	bfb9      	ittee	lt
 8009d70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009d74:	9303      	strlt	r3, [sp, #12]
 8009d76:	2300      	movge	r3, #0
 8009d78:	6033      	strge	r3, [r6, #0]
 8009d7a:	9f03      	ldr	r7, [sp, #12]
 8009d7c:	4b98      	ldr	r3, [pc, #608]	@ (8009fe0 <_dtoa_r+0x2d0>)
 8009d7e:	bfbc      	itt	lt
 8009d80:	2201      	movlt	r2, #1
 8009d82:	6032      	strlt	r2, [r6, #0]
 8009d84:	43bb      	bics	r3, r7
 8009d86:	d112      	bne.n	8009dae <_dtoa_r+0x9e>
 8009d88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d94:	4323      	orrs	r3, r4
 8009d96:	f000 854d 	beq.w	800a834 <_dtoa_r+0xb24>
 8009d9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009ff4 <_dtoa_r+0x2e4>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 854f 	beq.w	800a844 <_dtoa_r+0xb34>
 8009da6:	f10a 0303 	add.w	r3, sl, #3
 8009daa:	f000 bd49 	b.w	800a840 <_dtoa_r+0xb30>
 8009dae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009db2:	2200      	movs	r2, #0
 8009db4:	ec51 0b17 	vmov	r0, r1, d7
 8009db8:	2300      	movs	r3, #0
 8009dba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009dbe:	f7f6 fea3 	bl	8000b08 <__aeabi_dcmpeq>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	b158      	cbz	r0, 8009dde <_dtoa_r+0xce>
 8009dc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009dc8:	2301      	movs	r3, #1
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009dce:	b113      	cbz	r3, 8009dd6 <_dtoa_r+0xc6>
 8009dd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009dd2:	4b84      	ldr	r3, [pc, #528]	@ (8009fe4 <_dtoa_r+0x2d4>)
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ff8 <_dtoa_r+0x2e8>
 8009dda:	f000 bd33 	b.w	800a844 <_dtoa_r+0xb34>
 8009dde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009de2:	aa16      	add	r2, sp, #88	@ 0x58
 8009de4:	a917      	add	r1, sp, #92	@ 0x5c
 8009de6:	4658      	mov	r0, fp
 8009de8:	f001 f980 	bl	800b0ec <__d2b>
 8009dec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009df0:	4681      	mov	r9, r0
 8009df2:	2e00      	cmp	r6, #0
 8009df4:	d077      	beq.n	8009ee6 <_dtoa_r+0x1d6>
 8009df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e10:	4619      	mov	r1, r3
 8009e12:	2200      	movs	r2, #0
 8009e14:	4b74      	ldr	r3, [pc, #464]	@ (8009fe8 <_dtoa_r+0x2d8>)
 8009e16:	f7f6 fa57 	bl	80002c8 <__aeabi_dsub>
 8009e1a:	a369      	add	r3, pc, #420	@ (adr r3, 8009fc0 <_dtoa_r+0x2b0>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 fc0a 	bl	8000638 <__aeabi_dmul>
 8009e24:	a368      	add	r3, pc, #416	@ (adr r3, 8009fc8 <_dtoa_r+0x2b8>)
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f7f6 fa4f 	bl	80002cc <__adddf3>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4630      	mov	r0, r6
 8009e32:	460d      	mov	r5, r1
 8009e34:	f7f6 fb96 	bl	8000564 <__aeabi_i2d>
 8009e38:	a365      	add	r3, pc, #404	@ (adr r3, 8009fd0 <_dtoa_r+0x2c0>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fbfb 	bl	8000638 <__aeabi_dmul>
 8009e42:	4602      	mov	r2, r0
 8009e44:	460b      	mov	r3, r1
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 fa3f 	bl	80002cc <__adddf3>
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
 8009e52:	f7f6 fea1 	bl	8000b98 <__aeabi_d2iz>
 8009e56:	2200      	movs	r2, #0
 8009e58:	4607      	mov	r7, r0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	4629      	mov	r1, r5
 8009e60:	f7f6 fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8009e64:	b140      	cbz	r0, 8009e78 <_dtoa_r+0x168>
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7f6 fb7c 	bl	8000564 <__aeabi_i2d>
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	462b      	mov	r3, r5
 8009e70:	f7f6 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8009e74:	b900      	cbnz	r0, 8009e78 <_dtoa_r+0x168>
 8009e76:	3f01      	subs	r7, #1
 8009e78:	2f16      	cmp	r7, #22
 8009e7a:	d851      	bhi.n	8009f20 <_dtoa_r+0x210>
 8009e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8009fec <_dtoa_r+0x2dc>)
 8009e7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e8a:	f7f6 fe47 	bl	8000b1c <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d048      	beq.n	8009f24 <_dtoa_r+0x214>
 8009e92:	3f01      	subs	r7, #1
 8009e94:	2300      	movs	r3, #0
 8009e96:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e9a:	1b9b      	subs	r3, r3, r6
 8009e9c:	1e5a      	subs	r2, r3, #1
 8009e9e:	bf44      	itt	mi
 8009ea0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ea4:	2300      	movmi	r3, #0
 8009ea6:	9208      	str	r2, [sp, #32]
 8009ea8:	bf54      	ite	pl
 8009eaa:	f04f 0800 	movpl.w	r8, #0
 8009eae:	9308      	strmi	r3, [sp, #32]
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	db39      	blt.n	8009f28 <_dtoa_r+0x218>
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009eb8:	443b      	add	r3, r7
 8009eba:	9308      	str	r3, [sp, #32]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec2:	2b09      	cmp	r3, #9
 8009ec4:	d864      	bhi.n	8009f90 <_dtoa_r+0x280>
 8009ec6:	2b05      	cmp	r3, #5
 8009ec8:	bfc4      	itt	gt
 8009eca:	3b04      	subgt	r3, #4
 8009ecc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ed4:	bfcc      	ite	gt
 8009ed6:	2400      	movgt	r4, #0
 8009ed8:	2401      	movle	r4, #1
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d863      	bhi.n	8009fa6 <_dtoa_r+0x296>
 8009ede:	e8df f003 	tbb	[pc, r3]
 8009ee2:	372a      	.short	0x372a
 8009ee4:	5535      	.short	0x5535
 8009ee6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009eea:	441e      	add	r6, r3
 8009eec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	bfc1      	itttt	gt
 8009ef4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ef8:	409f      	lslgt	r7, r3
 8009efa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009efe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f02:	bfd6      	itet	le
 8009f04:	f1c3 0320 	rsble	r3, r3, #32
 8009f08:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f0c:	fa04 f003 	lslle.w	r0, r4, r3
 8009f10:	f7f6 fb18 	bl	8000544 <__aeabi_ui2d>
 8009f14:	2201      	movs	r2, #1
 8009f16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f1a:	3e01      	subs	r6, #1
 8009f1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009f1e:	e777      	b.n	8009e10 <_dtoa_r+0x100>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e7b8      	b.n	8009e96 <_dtoa_r+0x186>
 8009f24:	9012      	str	r0, [sp, #72]	@ 0x48
 8009f26:	e7b7      	b.n	8009e98 <_dtoa_r+0x188>
 8009f28:	427b      	negs	r3, r7
 8009f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	eba8 0807 	sub.w	r8, r8, r7
 8009f32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f34:	e7c4      	b.n	8009ec0 <_dtoa_r+0x1b0>
 8009f36:	2300      	movs	r3, #0
 8009f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dc35      	bgt.n	8009fac <_dtoa_r+0x29c>
 8009f40:	2301      	movs	r3, #1
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	461a      	mov	r2, r3
 8009f48:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f4a:	e00b      	b.n	8009f64 <_dtoa_r+0x254>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e7f3      	b.n	8009f38 <_dtoa_r+0x228>
 8009f50:	2300      	movs	r3, #0
 8009f52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f56:	18fb      	adds	r3, r7, r3
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	9307      	str	r3, [sp, #28]
 8009f60:	bfb8      	it	lt
 8009f62:	2301      	movlt	r3, #1
 8009f64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	f102 0514 	add.w	r5, r2, #20
 8009f70:	429d      	cmp	r5, r3
 8009f72:	d91f      	bls.n	8009fb4 <_dtoa_r+0x2a4>
 8009f74:	6041      	str	r1, [r0, #4]
 8009f76:	4658      	mov	r0, fp
 8009f78:	f000 fd8e 	bl	800aa98 <_Balloc>
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d13c      	bne.n	8009ffc <_dtoa_r+0x2ec>
 8009f82:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff0 <_dtoa_r+0x2e0>)
 8009f84:	4602      	mov	r2, r0
 8009f86:	f240 11af 	movw	r1, #431	@ 0x1af
 8009f8a:	e6d8      	b.n	8009d3e <_dtoa_r+0x2e>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e7e0      	b.n	8009f52 <_dtoa_r+0x242>
 8009f90:	2401      	movs	r4, #1
 8009f92:	2300      	movs	r3, #0
 8009f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	9307      	str	r3, [sp, #28]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2312      	movs	r3, #18
 8009fa4:	e7d0      	b.n	8009f48 <_dtoa_r+0x238>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009faa:	e7f5      	b.n	8009f98 <_dtoa_r+0x288>
 8009fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	9307      	str	r3, [sp, #28]
 8009fb2:	e7d7      	b.n	8009f64 <_dtoa_r+0x254>
 8009fb4:	3101      	adds	r1, #1
 8009fb6:	0052      	lsls	r2, r2, #1
 8009fb8:	e7d8      	b.n	8009f6c <_dtoa_r+0x25c>
 8009fba:	bf00      	nop
 8009fbc:	f3af 8000 	nop.w
 8009fc0:	636f4361 	.word	0x636f4361
 8009fc4:	3fd287a7 	.word	0x3fd287a7
 8009fc8:	8b60c8b3 	.word	0x8b60c8b3
 8009fcc:	3fc68a28 	.word	0x3fc68a28
 8009fd0:	509f79fb 	.word	0x509f79fb
 8009fd4:	3fd34413 	.word	0x3fd34413
 8009fd8:	0800c4d9 	.word	0x0800c4d9
 8009fdc:	0800c4f0 	.word	0x0800c4f0
 8009fe0:	7ff00000 	.word	0x7ff00000
 8009fe4:	0800c4a9 	.word	0x0800c4a9
 8009fe8:	3ff80000 	.word	0x3ff80000
 8009fec:	0800c5e8 	.word	0x0800c5e8
 8009ff0:	0800c548 	.word	0x0800c548
 8009ff4:	0800c4d5 	.word	0x0800c4d5
 8009ff8:	0800c4a8 	.word	0x0800c4a8
 8009ffc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a000:	6018      	str	r0, [r3, #0]
 800a002:	9b07      	ldr	r3, [sp, #28]
 800a004:	2b0e      	cmp	r3, #14
 800a006:	f200 80a4 	bhi.w	800a152 <_dtoa_r+0x442>
 800a00a:	2c00      	cmp	r4, #0
 800a00c:	f000 80a1 	beq.w	800a152 <_dtoa_r+0x442>
 800a010:	2f00      	cmp	r7, #0
 800a012:	dd33      	ble.n	800a07c <_dtoa_r+0x36c>
 800a014:	4bad      	ldr	r3, [pc, #692]	@ (800a2cc <_dtoa_r+0x5bc>)
 800a016:	f007 020f 	and.w	r2, r7, #15
 800a01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a01e:	ed93 7b00 	vldr	d7, [r3]
 800a022:	05f8      	lsls	r0, r7, #23
 800a024:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a028:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a02c:	d516      	bpl.n	800a05c <_dtoa_r+0x34c>
 800a02e:	4ba8      	ldr	r3, [pc, #672]	@ (800a2d0 <_dtoa_r+0x5c0>)
 800a030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a034:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a038:	f7f6 fc28 	bl	800088c <__aeabi_ddiv>
 800a03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a040:	f004 040f 	and.w	r4, r4, #15
 800a044:	2603      	movs	r6, #3
 800a046:	4da2      	ldr	r5, [pc, #648]	@ (800a2d0 <_dtoa_r+0x5c0>)
 800a048:	b954      	cbnz	r4, 800a060 <_dtoa_r+0x350>
 800a04a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a04e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a052:	f7f6 fc1b 	bl	800088c <__aeabi_ddiv>
 800a056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a05a:	e028      	b.n	800a0ae <_dtoa_r+0x39e>
 800a05c:	2602      	movs	r6, #2
 800a05e:	e7f2      	b.n	800a046 <_dtoa_r+0x336>
 800a060:	07e1      	lsls	r1, r4, #31
 800a062:	d508      	bpl.n	800a076 <_dtoa_r+0x366>
 800a064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a06c:	f7f6 fae4 	bl	8000638 <__aeabi_dmul>
 800a070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a074:	3601      	adds	r6, #1
 800a076:	1064      	asrs	r4, r4, #1
 800a078:	3508      	adds	r5, #8
 800a07a:	e7e5      	b.n	800a048 <_dtoa_r+0x338>
 800a07c:	f000 80d2 	beq.w	800a224 <_dtoa_r+0x514>
 800a080:	427c      	negs	r4, r7
 800a082:	4b92      	ldr	r3, [pc, #584]	@ (800a2cc <_dtoa_r+0x5bc>)
 800a084:	4d92      	ldr	r5, [pc, #584]	@ (800a2d0 <_dtoa_r+0x5c0>)
 800a086:	f004 020f 	and.w	r2, r4, #15
 800a08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a096:	f7f6 facf 	bl	8000638 <__aeabi_dmul>
 800a09a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a09e:	1124      	asrs	r4, r4, #4
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2602      	movs	r6, #2
 800a0a4:	2c00      	cmp	r4, #0
 800a0a6:	f040 80b2 	bne.w	800a20e <_dtoa_r+0x4fe>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1d3      	bne.n	800a056 <_dtoa_r+0x346>
 800a0ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 80b7 	beq.w	800a228 <_dtoa_r+0x518>
 800a0ba:	4b86      	ldr	r3, [pc, #536]	@ (800a2d4 <_dtoa_r+0x5c4>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f000 80ae 	beq.w	800a228 <_dtoa_r+0x518>
 800a0cc:	9b07      	ldr	r3, [sp, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80aa 	beq.w	800a228 <_dtoa_r+0x518>
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dd37      	ble.n	800a14a <_dtoa_r+0x43a>
 800a0da:	1e7b      	subs	r3, r7, #1
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4b7d      	ldr	r3, [pc, #500]	@ (800a2d8 <_dtoa_r+0x5c8>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 faa7 	bl	8000638 <__aeabi_dmul>
 800a0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ee:	9c00      	ldr	r4, [sp, #0]
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f7f6 fa36 	bl	8000564 <__aeabi_i2d>
 800a0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0fc:	f7f6 fa9c 	bl	8000638 <__aeabi_dmul>
 800a100:	4b76      	ldr	r3, [pc, #472]	@ (800a2dc <_dtoa_r+0x5cc>)
 800a102:	2200      	movs	r2, #0
 800a104:	f7f6 f8e2 	bl	80002cc <__adddf3>
 800a108:	4605      	mov	r5, r0
 800a10a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a10e:	2c00      	cmp	r4, #0
 800a110:	f040 808d 	bne.w	800a22e <_dtoa_r+0x51e>
 800a114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a118:	4b71      	ldr	r3, [pc, #452]	@ (800a2e0 <_dtoa_r+0x5d0>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f8d4 	bl	80002c8 <__aeabi_dsub>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a128:	462a      	mov	r2, r5
 800a12a:	4633      	mov	r3, r6
 800a12c:	f7f6 fd14 	bl	8000b58 <__aeabi_dcmpgt>
 800a130:	2800      	cmp	r0, #0
 800a132:	f040 828b 	bne.w	800a64c <_dtoa_r+0x93c>
 800a136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a13a:	462a      	mov	r2, r5
 800a13c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a140:	f7f6 fcec 	bl	8000b1c <__aeabi_dcmplt>
 800a144:	2800      	cmp	r0, #0
 800a146:	f040 8128 	bne.w	800a39a <_dtoa_r+0x68a>
 800a14a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a14e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a154:	2b00      	cmp	r3, #0
 800a156:	f2c0 815a 	blt.w	800a40e <_dtoa_r+0x6fe>
 800a15a:	2f0e      	cmp	r7, #14
 800a15c:	f300 8157 	bgt.w	800a40e <_dtoa_r+0x6fe>
 800a160:	4b5a      	ldr	r3, [pc, #360]	@ (800a2cc <_dtoa_r+0x5bc>)
 800a162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a166:	ed93 7b00 	vldr	d7, [r3]
 800a16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	ed8d 7b00 	vstr	d7, [sp]
 800a172:	da03      	bge.n	800a17c <_dtoa_r+0x46c>
 800a174:	9b07      	ldr	r3, [sp, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f340 8101 	ble.w	800a37e <_dtoa_r+0x66e>
 800a17c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a180:	4656      	mov	r6, sl
 800a182:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a186:	4620      	mov	r0, r4
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 fb7f 	bl	800088c <__aeabi_ddiv>
 800a18e:	f7f6 fd03 	bl	8000b98 <__aeabi_d2iz>
 800a192:	4680      	mov	r8, r0
 800a194:	f7f6 f9e6 	bl	8000564 <__aeabi_i2d>
 800a198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a19c:	f7f6 fa4c 	bl	8000638 <__aeabi_dmul>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1ac:	f7f6 f88c 	bl	80002c8 <__aeabi_dsub>
 800a1b0:	f806 4b01 	strb.w	r4, [r6], #1
 800a1b4:	9d07      	ldr	r5, [sp, #28]
 800a1b6:	eba6 040a 	sub.w	r4, r6, sl
 800a1ba:	42a5      	cmp	r5, r4
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	f040 8117 	bne.w	800a3f2 <_dtoa_r+0x6e2>
 800a1c4:	f7f6 f882 	bl	80002cc <__adddf3>
 800a1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	f7f6 fcc2 	bl	8000b58 <__aeabi_dcmpgt>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f040 80f9 	bne.w	800a3cc <_dtoa_r+0x6bc>
 800a1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f6 fc91 	bl	8000b08 <__aeabi_dcmpeq>
 800a1e6:	b118      	cbz	r0, 800a1f0 <_dtoa_r+0x4e0>
 800a1e8:	f018 0f01 	tst.w	r8, #1
 800a1ec:	f040 80ee 	bne.w	800a3cc <_dtoa_r+0x6bc>
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	4658      	mov	r0, fp
 800a1f4:	f000 fc90 	bl	800ab18 <_Bfree>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	7033      	strb	r3, [r6, #0]
 800a1fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a1fe:	3701      	adds	r7, #1
 800a200:	601f      	str	r7, [r3, #0]
 800a202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a204:	2b00      	cmp	r3, #0
 800a206:	f000 831d 	beq.w	800a844 <_dtoa_r+0xb34>
 800a20a:	601e      	str	r6, [r3, #0]
 800a20c:	e31a      	b.n	800a844 <_dtoa_r+0xb34>
 800a20e:	07e2      	lsls	r2, r4, #31
 800a210:	d505      	bpl.n	800a21e <_dtoa_r+0x50e>
 800a212:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a216:	f7f6 fa0f 	bl	8000638 <__aeabi_dmul>
 800a21a:	3601      	adds	r6, #1
 800a21c:	2301      	movs	r3, #1
 800a21e:	1064      	asrs	r4, r4, #1
 800a220:	3508      	adds	r5, #8
 800a222:	e73f      	b.n	800a0a4 <_dtoa_r+0x394>
 800a224:	2602      	movs	r6, #2
 800a226:	e742      	b.n	800a0ae <_dtoa_r+0x39e>
 800a228:	9c07      	ldr	r4, [sp, #28]
 800a22a:	9704      	str	r7, [sp, #16]
 800a22c:	e761      	b.n	800a0f2 <_dtoa_r+0x3e2>
 800a22e:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <_dtoa_r+0x5bc>)
 800a230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a236:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a23a:	4454      	add	r4, sl
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d053      	beq.n	800a2e8 <_dtoa_r+0x5d8>
 800a240:	4928      	ldr	r1, [pc, #160]	@ (800a2e4 <_dtoa_r+0x5d4>)
 800a242:	2000      	movs	r0, #0
 800a244:	f7f6 fb22 	bl	800088c <__aeabi_ddiv>
 800a248:	4633      	mov	r3, r6
 800a24a:	462a      	mov	r2, r5
 800a24c:	f7f6 f83c 	bl	80002c8 <__aeabi_dsub>
 800a250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a254:	4656      	mov	r6, sl
 800a256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25a:	f7f6 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800a25e:	4605      	mov	r5, r0
 800a260:	f7f6 f980 	bl	8000564 <__aeabi_i2d>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26c:	f7f6 f82c 	bl	80002c8 <__aeabi_dsub>
 800a270:	3530      	adds	r5, #48	@ 0x30
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a27a:	f806 5b01 	strb.w	r5, [r6], #1
 800a27e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a282:	f7f6 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 800a286:	2800      	cmp	r0, #0
 800a288:	d171      	bne.n	800a36e <_dtoa_r+0x65e>
 800a28a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28e:	4911      	ldr	r1, [pc, #68]	@ (800a2d4 <_dtoa_r+0x5c4>)
 800a290:	2000      	movs	r0, #0
 800a292:	f7f6 f819 	bl	80002c8 <__aeabi_dsub>
 800a296:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a29a:	f7f6 fc3f 	bl	8000b1c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	f040 8095 	bne.w	800a3ce <_dtoa_r+0x6be>
 800a2a4:	42a6      	cmp	r6, r4
 800a2a6:	f43f af50 	beq.w	800a14a <_dtoa_r+0x43a>
 800a2aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d8 <_dtoa_r+0x5c8>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f7f6 f9c1 	bl	8000638 <__aeabi_dmul>
 800a2b6:	4b08      	ldr	r3, [pc, #32]	@ (800a2d8 <_dtoa_r+0x5c8>)
 800a2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2bc:	2200      	movs	r2, #0
 800a2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c2:	f7f6 f9b9 	bl	8000638 <__aeabi_dmul>
 800a2c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ca:	e7c4      	b.n	800a256 <_dtoa_r+0x546>
 800a2cc:	0800c5e8 	.word	0x0800c5e8
 800a2d0:	0800c5c0 	.word	0x0800c5c0
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	40240000 	.word	0x40240000
 800a2dc:	401c0000 	.word	0x401c0000
 800a2e0:	40140000 	.word	0x40140000
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7f6 f9a4 	bl	8000638 <__aeabi_dmul>
 800a2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a2f6:	4656      	mov	r6, sl
 800a2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fc:	f7f6 fc4c 	bl	8000b98 <__aeabi_d2iz>
 800a300:	4605      	mov	r5, r0
 800a302:	f7f6 f92f 	bl	8000564 <__aeabi_i2d>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a30e:	f7f5 ffdb 	bl	80002c8 <__aeabi_dsub>
 800a312:	3530      	adds	r5, #48	@ 0x30
 800a314:	f806 5b01 	strb.w	r5, [r6], #1
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	42a6      	cmp	r6, r4
 800a31e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	d124      	bne.n	800a372 <_dtoa_r+0x662>
 800a328:	4bac      	ldr	r3, [pc, #688]	@ (800a5dc <_dtoa_r+0x8cc>)
 800a32a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a32e:	f7f5 ffcd 	bl	80002cc <__adddf3>
 800a332:	4602      	mov	r2, r0
 800a334:	460b      	mov	r3, r1
 800a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a33a:	f7f6 fc0d 	bl	8000b58 <__aeabi_dcmpgt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d145      	bne.n	800a3ce <_dtoa_r+0x6be>
 800a342:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a346:	49a5      	ldr	r1, [pc, #660]	@ (800a5dc <_dtoa_r+0x8cc>)
 800a348:	2000      	movs	r0, #0
 800a34a:	f7f5 ffbd 	bl	80002c8 <__aeabi_dsub>
 800a34e:	4602      	mov	r2, r0
 800a350:	460b      	mov	r3, r1
 800a352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a356:	f7f6 fbe1 	bl	8000b1c <__aeabi_dcmplt>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f43f aef5 	beq.w	800a14a <_dtoa_r+0x43a>
 800a360:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a362:	1e73      	subs	r3, r6, #1
 800a364:	9315      	str	r3, [sp, #84]	@ 0x54
 800a366:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a36a:	2b30      	cmp	r3, #48	@ 0x30
 800a36c:	d0f8      	beq.n	800a360 <_dtoa_r+0x650>
 800a36e:	9f04      	ldr	r7, [sp, #16]
 800a370:	e73e      	b.n	800a1f0 <_dtoa_r+0x4e0>
 800a372:	4b9b      	ldr	r3, [pc, #620]	@ (800a5e0 <_dtoa_r+0x8d0>)
 800a374:	f7f6 f960 	bl	8000638 <__aeabi_dmul>
 800a378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a37c:	e7bc      	b.n	800a2f8 <_dtoa_r+0x5e8>
 800a37e:	d10c      	bne.n	800a39a <_dtoa_r+0x68a>
 800a380:	4b98      	ldr	r3, [pc, #608]	@ (800a5e4 <_dtoa_r+0x8d4>)
 800a382:	2200      	movs	r2, #0
 800a384:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a388:	f7f6 f956 	bl	8000638 <__aeabi_dmul>
 800a38c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a390:	f7f6 fbd8 	bl	8000b44 <__aeabi_dcmpge>
 800a394:	2800      	cmp	r0, #0
 800a396:	f000 8157 	beq.w	800a648 <_dtoa_r+0x938>
 800a39a:	2400      	movs	r4, #0
 800a39c:	4625      	mov	r5, r4
 800a39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a0:	43db      	mvns	r3, r3
 800a3a2:	9304      	str	r3, [sp, #16]
 800a3a4:	4656      	mov	r6, sl
 800a3a6:	2700      	movs	r7, #0
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4658      	mov	r0, fp
 800a3ac:	f000 fbb4 	bl	800ab18 <_Bfree>
 800a3b0:	2d00      	cmp	r5, #0
 800a3b2:	d0dc      	beq.n	800a36e <_dtoa_r+0x65e>
 800a3b4:	b12f      	cbz	r7, 800a3c2 <_dtoa_r+0x6b2>
 800a3b6:	42af      	cmp	r7, r5
 800a3b8:	d003      	beq.n	800a3c2 <_dtoa_r+0x6b2>
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	4658      	mov	r0, fp
 800a3be:	f000 fbab 	bl	800ab18 <_Bfree>
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4658      	mov	r0, fp
 800a3c6:	f000 fba7 	bl	800ab18 <_Bfree>
 800a3ca:	e7d0      	b.n	800a36e <_dtoa_r+0x65e>
 800a3cc:	9704      	str	r7, [sp, #16]
 800a3ce:	4633      	mov	r3, r6
 800a3d0:	461e      	mov	r6, r3
 800a3d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3d6:	2a39      	cmp	r2, #57	@ 0x39
 800a3d8:	d107      	bne.n	800a3ea <_dtoa_r+0x6da>
 800a3da:	459a      	cmp	sl, r3
 800a3dc:	d1f8      	bne.n	800a3d0 <_dtoa_r+0x6c0>
 800a3de:	9a04      	ldr	r2, [sp, #16]
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	9204      	str	r2, [sp, #16]
 800a3e4:	2230      	movs	r2, #48	@ 0x30
 800a3e6:	f88a 2000 	strb.w	r2, [sl]
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	3201      	adds	r2, #1
 800a3ee:	701a      	strb	r2, [r3, #0]
 800a3f0:	e7bd      	b.n	800a36e <_dtoa_r+0x65e>
 800a3f2:	4b7b      	ldr	r3, [pc, #492]	@ (800a5e0 <_dtoa_r+0x8d0>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f7f6 f91f 	bl	8000638 <__aeabi_dmul>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	460d      	mov	r5, r1
 800a402:	f7f6 fb81 	bl	8000b08 <__aeabi_dcmpeq>
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f aebb 	beq.w	800a182 <_dtoa_r+0x472>
 800a40c:	e6f0      	b.n	800a1f0 <_dtoa_r+0x4e0>
 800a40e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a410:	2a00      	cmp	r2, #0
 800a412:	f000 80db 	beq.w	800a5cc <_dtoa_r+0x8bc>
 800a416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a418:	2a01      	cmp	r2, #1
 800a41a:	f300 80bf 	bgt.w	800a59c <_dtoa_r+0x88c>
 800a41e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a420:	2a00      	cmp	r2, #0
 800a422:	f000 80b7 	beq.w	800a594 <_dtoa_r+0x884>
 800a426:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a42a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a42c:	4646      	mov	r6, r8
 800a42e:	9a08      	ldr	r2, [sp, #32]
 800a430:	2101      	movs	r1, #1
 800a432:	441a      	add	r2, r3
 800a434:	4658      	mov	r0, fp
 800a436:	4498      	add	r8, r3
 800a438:	9208      	str	r2, [sp, #32]
 800a43a:	f000 fc21 	bl	800ac80 <__i2b>
 800a43e:	4605      	mov	r5, r0
 800a440:	b15e      	cbz	r6, 800a45a <_dtoa_r+0x74a>
 800a442:	9b08      	ldr	r3, [sp, #32]
 800a444:	2b00      	cmp	r3, #0
 800a446:	dd08      	ble.n	800a45a <_dtoa_r+0x74a>
 800a448:	42b3      	cmp	r3, r6
 800a44a:	9a08      	ldr	r2, [sp, #32]
 800a44c:	bfa8      	it	ge
 800a44e:	4633      	movge	r3, r6
 800a450:	eba8 0803 	sub.w	r8, r8, r3
 800a454:	1af6      	subs	r6, r6, r3
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	9308      	str	r3, [sp, #32]
 800a45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45c:	b1f3      	cbz	r3, 800a49c <_dtoa_r+0x78c>
 800a45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 80b7 	beq.w	800a5d4 <_dtoa_r+0x8c4>
 800a466:	b18c      	cbz	r4, 800a48c <_dtoa_r+0x77c>
 800a468:	4629      	mov	r1, r5
 800a46a:	4622      	mov	r2, r4
 800a46c:	4658      	mov	r0, fp
 800a46e:	f000 fcc7 	bl	800ae00 <__pow5mult>
 800a472:	464a      	mov	r2, r9
 800a474:	4601      	mov	r1, r0
 800a476:	4605      	mov	r5, r0
 800a478:	4658      	mov	r0, fp
 800a47a:	f000 fc17 	bl	800acac <__multiply>
 800a47e:	4649      	mov	r1, r9
 800a480:	9004      	str	r0, [sp, #16]
 800a482:	4658      	mov	r0, fp
 800a484:	f000 fb48 	bl	800ab18 <_Bfree>
 800a488:	9b04      	ldr	r3, [sp, #16]
 800a48a:	4699      	mov	r9, r3
 800a48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a48e:	1b1a      	subs	r2, r3, r4
 800a490:	d004      	beq.n	800a49c <_dtoa_r+0x78c>
 800a492:	4649      	mov	r1, r9
 800a494:	4658      	mov	r0, fp
 800a496:	f000 fcb3 	bl	800ae00 <__pow5mult>
 800a49a:	4681      	mov	r9, r0
 800a49c:	2101      	movs	r1, #1
 800a49e:	4658      	mov	r0, fp
 800a4a0:	f000 fbee 	bl	800ac80 <__i2b>
 800a4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 81cf 	beq.w	800a84c <_dtoa_r+0xb3c>
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	4658      	mov	r0, fp
 800a4b4:	f000 fca4 	bl	800ae00 <__pow5mult>
 800a4b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f300 8095 	bgt.w	800a5ec <_dtoa_r+0x8dc>
 800a4c2:	9b02      	ldr	r3, [sp, #8]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f040 8087 	bne.w	800a5d8 <_dtoa_r+0x8c8>
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f040 8089 	bne.w	800a5e8 <_dtoa_r+0x8d8>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4dc:	0d1b      	lsrs	r3, r3, #20
 800a4de:	051b      	lsls	r3, r3, #20
 800a4e0:	b12b      	cbz	r3, 800a4ee <_dtoa_r+0x7de>
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	9308      	str	r3, [sp, #32]
 800a4e8:	f108 0801 	add.w	r8, r8, #1
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 81b0 	beq.w	800a858 <_dtoa_r+0xb48>
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4fe:	6918      	ldr	r0, [r3, #16]
 800a500:	f000 fb72 	bl	800abe8 <__hi0bits>
 800a504:	f1c0 0020 	rsb	r0, r0, #32
 800a508:	9b08      	ldr	r3, [sp, #32]
 800a50a:	4418      	add	r0, r3
 800a50c:	f010 001f 	ands.w	r0, r0, #31
 800a510:	d077      	beq.n	800a602 <_dtoa_r+0x8f2>
 800a512:	f1c0 0320 	rsb	r3, r0, #32
 800a516:	2b04      	cmp	r3, #4
 800a518:	dd6b      	ble.n	800a5f2 <_dtoa_r+0x8e2>
 800a51a:	9b08      	ldr	r3, [sp, #32]
 800a51c:	f1c0 001c 	rsb	r0, r0, #28
 800a520:	4403      	add	r3, r0
 800a522:	4480      	add	r8, r0
 800a524:	4406      	add	r6, r0
 800a526:	9308      	str	r3, [sp, #32]
 800a528:	f1b8 0f00 	cmp.w	r8, #0
 800a52c:	dd05      	ble.n	800a53a <_dtoa_r+0x82a>
 800a52e:	4649      	mov	r1, r9
 800a530:	4642      	mov	r2, r8
 800a532:	4658      	mov	r0, fp
 800a534:	f000 fcbe 	bl	800aeb4 <__lshift>
 800a538:	4681      	mov	r9, r0
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	dd05      	ble.n	800a54c <_dtoa_r+0x83c>
 800a540:	4621      	mov	r1, r4
 800a542:	461a      	mov	r2, r3
 800a544:	4658      	mov	r0, fp
 800a546:	f000 fcb5 	bl	800aeb4 <__lshift>
 800a54a:	4604      	mov	r4, r0
 800a54c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d059      	beq.n	800a606 <_dtoa_r+0x8f6>
 800a552:	4621      	mov	r1, r4
 800a554:	4648      	mov	r0, r9
 800a556:	f000 fd19 	bl	800af8c <__mcmp>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	da53      	bge.n	800a606 <_dtoa_r+0x8f6>
 800a55e:	1e7b      	subs	r3, r7, #1
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	4649      	mov	r1, r9
 800a564:	2300      	movs	r3, #0
 800a566:	220a      	movs	r2, #10
 800a568:	4658      	mov	r0, fp
 800a56a:	f000 faf7 	bl	800ab5c <__multadd>
 800a56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a570:	4681      	mov	r9, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 8172 	beq.w	800a85c <_dtoa_r+0xb4c>
 800a578:	2300      	movs	r3, #0
 800a57a:	4629      	mov	r1, r5
 800a57c:	220a      	movs	r2, #10
 800a57e:	4658      	mov	r0, fp
 800a580:	f000 faec 	bl	800ab5c <__multadd>
 800a584:	9b00      	ldr	r3, [sp, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	4605      	mov	r5, r0
 800a58a:	dc67      	bgt.n	800a65c <_dtoa_r+0x94c>
 800a58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58e:	2b02      	cmp	r3, #2
 800a590:	dc41      	bgt.n	800a616 <_dtoa_r+0x906>
 800a592:	e063      	b.n	800a65c <_dtoa_r+0x94c>
 800a594:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a596:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a59a:	e746      	b.n	800a42a <_dtoa_r+0x71a>
 800a59c:	9b07      	ldr	r3, [sp, #28]
 800a59e:	1e5c      	subs	r4, r3, #1
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	bfbf      	itttt	lt
 800a5a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a5aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a5ac:	1ae3      	sublt	r3, r4, r3
 800a5ae:	bfb4      	ite	lt
 800a5b0:	18d2      	addlt	r2, r2, r3
 800a5b2:	1b1c      	subge	r4, r3, r4
 800a5b4:	9b07      	ldr	r3, [sp, #28]
 800a5b6:	bfbc      	itt	lt
 800a5b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a5ba:	2400      	movlt	r4, #0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	bfb5      	itete	lt
 800a5c0:	eba8 0603 	sublt.w	r6, r8, r3
 800a5c4:	9b07      	ldrge	r3, [sp, #28]
 800a5c6:	2300      	movlt	r3, #0
 800a5c8:	4646      	movge	r6, r8
 800a5ca:	e730      	b.n	800a42e <_dtoa_r+0x71e>
 800a5cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a5d0:	4646      	mov	r6, r8
 800a5d2:	e735      	b.n	800a440 <_dtoa_r+0x730>
 800a5d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5d6:	e75c      	b.n	800a492 <_dtoa_r+0x782>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	e788      	b.n	800a4ee <_dtoa_r+0x7de>
 800a5dc:	3fe00000 	.word	0x3fe00000
 800a5e0:	40240000 	.word	0x40240000
 800a5e4:	40140000 	.word	0x40140000
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	e780      	b.n	800a4ee <_dtoa_r+0x7de>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5f0:	e782      	b.n	800a4f8 <_dtoa_r+0x7e8>
 800a5f2:	d099      	beq.n	800a528 <_dtoa_r+0x818>
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	331c      	adds	r3, #28
 800a5f8:	441a      	add	r2, r3
 800a5fa:	4498      	add	r8, r3
 800a5fc:	441e      	add	r6, r3
 800a5fe:	9208      	str	r2, [sp, #32]
 800a600:	e792      	b.n	800a528 <_dtoa_r+0x818>
 800a602:	4603      	mov	r3, r0
 800a604:	e7f6      	b.n	800a5f4 <_dtoa_r+0x8e4>
 800a606:	9b07      	ldr	r3, [sp, #28]
 800a608:	9704      	str	r7, [sp, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dc20      	bgt.n	800a650 <_dtoa_r+0x940>
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a612:	2b02      	cmp	r3, #2
 800a614:	dd1e      	ble.n	800a654 <_dtoa_r+0x944>
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f47f aec0 	bne.w	800a39e <_dtoa_r+0x68e>
 800a61e:	4621      	mov	r1, r4
 800a620:	2205      	movs	r2, #5
 800a622:	4658      	mov	r0, fp
 800a624:	f000 fa9a 	bl	800ab5c <__multadd>
 800a628:	4601      	mov	r1, r0
 800a62a:	4604      	mov	r4, r0
 800a62c:	4648      	mov	r0, r9
 800a62e:	f000 fcad 	bl	800af8c <__mcmp>
 800a632:	2800      	cmp	r0, #0
 800a634:	f77f aeb3 	ble.w	800a39e <_dtoa_r+0x68e>
 800a638:	4656      	mov	r6, sl
 800a63a:	2331      	movs	r3, #49	@ 0x31
 800a63c:	f806 3b01 	strb.w	r3, [r6], #1
 800a640:	9b04      	ldr	r3, [sp, #16]
 800a642:	3301      	adds	r3, #1
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	e6ae      	b.n	800a3a6 <_dtoa_r+0x696>
 800a648:	9c07      	ldr	r4, [sp, #28]
 800a64a:	9704      	str	r7, [sp, #16]
 800a64c:	4625      	mov	r5, r4
 800a64e:	e7f3      	b.n	800a638 <_dtoa_r+0x928>
 800a650:	9b07      	ldr	r3, [sp, #28]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 8104 	beq.w	800a864 <_dtoa_r+0xb54>
 800a65c:	2e00      	cmp	r6, #0
 800a65e:	dd05      	ble.n	800a66c <_dtoa_r+0x95c>
 800a660:	4629      	mov	r1, r5
 800a662:	4632      	mov	r2, r6
 800a664:	4658      	mov	r0, fp
 800a666:	f000 fc25 	bl	800aeb4 <__lshift>
 800a66a:	4605      	mov	r5, r0
 800a66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d05a      	beq.n	800a728 <_dtoa_r+0xa18>
 800a672:	6869      	ldr	r1, [r5, #4]
 800a674:	4658      	mov	r0, fp
 800a676:	f000 fa0f 	bl	800aa98 <_Balloc>
 800a67a:	4606      	mov	r6, r0
 800a67c:	b928      	cbnz	r0, 800a68a <_dtoa_r+0x97a>
 800a67e:	4b84      	ldr	r3, [pc, #528]	@ (800a890 <_dtoa_r+0xb80>)
 800a680:	4602      	mov	r2, r0
 800a682:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a686:	f7ff bb5a 	b.w	8009d3e <_dtoa_r+0x2e>
 800a68a:	692a      	ldr	r2, [r5, #16]
 800a68c:	3202      	adds	r2, #2
 800a68e:	0092      	lsls	r2, r2, #2
 800a690:	f105 010c 	add.w	r1, r5, #12
 800a694:	300c      	adds	r0, #12
 800a696:	f7ff faa4 	bl	8009be2 <memcpy>
 800a69a:	2201      	movs	r2, #1
 800a69c:	4631      	mov	r1, r6
 800a69e:	4658      	mov	r0, fp
 800a6a0:	f000 fc08 	bl	800aeb4 <__lshift>
 800a6a4:	f10a 0301 	add.w	r3, sl, #1
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	4453      	add	r3, sl
 800a6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6b0:	9b02      	ldr	r3, [sp, #8]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	462f      	mov	r7, r5
 800a6b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	4621      	mov	r1, r4
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	f7ff fa9a 	bl	8009bfe <quorem>
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	9002      	str	r0, [sp, #8]
 800a6ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6d2:	4648      	mov	r0, r9
 800a6d4:	f000 fc5a 	bl	800af8c <__mcmp>
 800a6d8:	462a      	mov	r2, r5
 800a6da:	9008      	str	r0, [sp, #32]
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4658      	mov	r0, fp
 800a6e0:	f000 fc70 	bl	800afc4 <__mdiff>
 800a6e4:	68c2      	ldr	r2, [r0, #12]
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	bb02      	cbnz	r2, 800a72c <_dtoa_r+0xa1c>
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	4648      	mov	r0, r9
 800a6ee:	f000 fc4d 	bl	800af8c <__mcmp>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4658      	mov	r0, fp
 800a6f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6fa:	f000 fa0d 	bl	800ab18 <_Bfree>
 800a6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a702:	9e07      	ldr	r6, [sp, #28]
 800a704:	ea43 0102 	orr.w	r1, r3, r2
 800a708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a70a:	4319      	orrs	r1, r3
 800a70c:	d110      	bne.n	800a730 <_dtoa_r+0xa20>
 800a70e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a712:	d029      	beq.n	800a768 <_dtoa_r+0xa58>
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	dd02      	ble.n	800a720 <_dtoa_r+0xa10>
 800a71a:	9b02      	ldr	r3, [sp, #8]
 800a71c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	f883 8000 	strb.w	r8, [r3]
 800a726:	e63f      	b.n	800a3a8 <_dtoa_r+0x698>
 800a728:	4628      	mov	r0, r5
 800a72a:	e7bb      	b.n	800a6a4 <_dtoa_r+0x994>
 800a72c:	2201      	movs	r2, #1
 800a72e:	e7e1      	b.n	800a6f4 <_dtoa_r+0x9e4>
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	2b00      	cmp	r3, #0
 800a734:	db04      	blt.n	800a740 <_dtoa_r+0xa30>
 800a736:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a738:	430b      	orrs	r3, r1
 800a73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a73c:	430b      	orrs	r3, r1
 800a73e:	d120      	bne.n	800a782 <_dtoa_r+0xa72>
 800a740:	2a00      	cmp	r2, #0
 800a742:	dded      	ble.n	800a720 <_dtoa_r+0xa10>
 800a744:	4649      	mov	r1, r9
 800a746:	2201      	movs	r2, #1
 800a748:	4658      	mov	r0, fp
 800a74a:	f000 fbb3 	bl	800aeb4 <__lshift>
 800a74e:	4621      	mov	r1, r4
 800a750:	4681      	mov	r9, r0
 800a752:	f000 fc1b 	bl	800af8c <__mcmp>
 800a756:	2800      	cmp	r0, #0
 800a758:	dc03      	bgt.n	800a762 <_dtoa_r+0xa52>
 800a75a:	d1e1      	bne.n	800a720 <_dtoa_r+0xa10>
 800a75c:	f018 0f01 	tst.w	r8, #1
 800a760:	d0de      	beq.n	800a720 <_dtoa_r+0xa10>
 800a762:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a766:	d1d8      	bne.n	800a71a <_dtoa_r+0xa0a>
 800a768:	9a00      	ldr	r2, [sp, #0]
 800a76a:	2339      	movs	r3, #57	@ 0x39
 800a76c:	7013      	strb	r3, [r2, #0]
 800a76e:	4633      	mov	r3, r6
 800a770:	461e      	mov	r6, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a778:	2a39      	cmp	r2, #57	@ 0x39
 800a77a:	d052      	beq.n	800a822 <_dtoa_r+0xb12>
 800a77c:	3201      	adds	r2, #1
 800a77e:	701a      	strb	r2, [r3, #0]
 800a780:	e612      	b.n	800a3a8 <_dtoa_r+0x698>
 800a782:	2a00      	cmp	r2, #0
 800a784:	dd07      	ble.n	800a796 <_dtoa_r+0xa86>
 800a786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a78a:	d0ed      	beq.n	800a768 <_dtoa_r+0xa58>
 800a78c:	9a00      	ldr	r2, [sp, #0]
 800a78e:	f108 0301 	add.w	r3, r8, #1
 800a792:	7013      	strb	r3, [r2, #0]
 800a794:	e608      	b.n	800a3a8 <_dtoa_r+0x698>
 800a796:	9b07      	ldr	r3, [sp, #28]
 800a798:	9a07      	ldr	r2, [sp, #28]
 800a79a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d028      	beq.n	800a7f6 <_dtoa_r+0xae6>
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	220a      	movs	r2, #10
 800a7aa:	4658      	mov	r0, fp
 800a7ac:	f000 f9d6 	bl	800ab5c <__multadd>
 800a7b0:	42af      	cmp	r7, r5
 800a7b2:	4681      	mov	r9, r0
 800a7b4:	f04f 0300 	mov.w	r3, #0
 800a7b8:	f04f 020a 	mov.w	r2, #10
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4658      	mov	r0, fp
 800a7c0:	d107      	bne.n	800a7d2 <_dtoa_r+0xac2>
 800a7c2:	f000 f9cb 	bl	800ab5c <__multadd>
 800a7c6:	4607      	mov	r7, r0
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	e774      	b.n	800a6bc <_dtoa_r+0x9ac>
 800a7d2:	f000 f9c3 	bl	800ab5c <__multadd>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4607      	mov	r7, r0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	220a      	movs	r2, #10
 800a7de:	4658      	mov	r0, fp
 800a7e0:	f000 f9bc 	bl	800ab5c <__multadd>
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	e7f0      	b.n	800a7ca <_dtoa_r+0xaba>
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bfcc      	ite	gt
 800a7ee:	461e      	movgt	r6, r3
 800a7f0:	2601      	movle	r6, #1
 800a7f2:	4456      	add	r6, sl
 800a7f4:	2700      	movs	r7, #0
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fb5a 	bl	800aeb4 <__lshift>
 800a800:	4621      	mov	r1, r4
 800a802:	4681      	mov	r9, r0
 800a804:	f000 fbc2 	bl	800af8c <__mcmp>
 800a808:	2800      	cmp	r0, #0
 800a80a:	dcb0      	bgt.n	800a76e <_dtoa_r+0xa5e>
 800a80c:	d102      	bne.n	800a814 <_dtoa_r+0xb04>
 800a80e:	f018 0f01 	tst.w	r8, #1
 800a812:	d1ac      	bne.n	800a76e <_dtoa_r+0xa5e>
 800a814:	4633      	mov	r3, r6
 800a816:	461e      	mov	r6, r3
 800a818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a81c:	2a30      	cmp	r2, #48	@ 0x30
 800a81e:	d0fa      	beq.n	800a816 <_dtoa_r+0xb06>
 800a820:	e5c2      	b.n	800a3a8 <_dtoa_r+0x698>
 800a822:	459a      	cmp	sl, r3
 800a824:	d1a4      	bne.n	800a770 <_dtoa_r+0xa60>
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	3301      	adds	r3, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	2331      	movs	r3, #49	@ 0x31
 800a82e:	f88a 3000 	strb.w	r3, [sl]
 800a832:	e5b9      	b.n	800a3a8 <_dtoa_r+0x698>
 800a834:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a836:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a894 <_dtoa_r+0xb84>
 800a83a:	b11b      	cbz	r3, 800a844 <_dtoa_r+0xb34>
 800a83c:	f10a 0308 	add.w	r3, sl, #8
 800a840:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a842:	6013      	str	r3, [r2, #0]
 800a844:	4650      	mov	r0, sl
 800a846:	b019      	add	sp, #100	@ 0x64
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a84e:	2b01      	cmp	r3, #1
 800a850:	f77f ae37 	ble.w	800a4c2 <_dtoa_r+0x7b2>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	930a      	str	r3, [sp, #40]	@ 0x28
 800a858:	2001      	movs	r0, #1
 800a85a:	e655      	b.n	800a508 <_dtoa_r+0x7f8>
 800a85c:	9b00      	ldr	r3, [sp, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f77f aed6 	ble.w	800a610 <_dtoa_r+0x900>
 800a864:	4656      	mov	r6, sl
 800a866:	4621      	mov	r1, r4
 800a868:	4648      	mov	r0, r9
 800a86a:	f7ff f9c8 	bl	8009bfe <quorem>
 800a86e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a872:	f806 8b01 	strb.w	r8, [r6], #1
 800a876:	9b00      	ldr	r3, [sp, #0]
 800a878:	eba6 020a 	sub.w	r2, r6, sl
 800a87c:	4293      	cmp	r3, r2
 800a87e:	ddb3      	ble.n	800a7e8 <_dtoa_r+0xad8>
 800a880:	4649      	mov	r1, r9
 800a882:	2300      	movs	r3, #0
 800a884:	220a      	movs	r2, #10
 800a886:	4658      	mov	r0, fp
 800a888:	f000 f968 	bl	800ab5c <__multadd>
 800a88c:	4681      	mov	r9, r0
 800a88e:	e7ea      	b.n	800a866 <_dtoa_r+0xb56>
 800a890:	0800c548 	.word	0x0800c548
 800a894:	0800c4cc 	.word	0x0800c4cc

0800a898 <_free_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4605      	mov	r5, r0
 800a89c:	2900      	cmp	r1, #0
 800a89e:	d041      	beq.n	800a924 <_free_r+0x8c>
 800a8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8a4:	1f0c      	subs	r4, r1, #4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bfb8      	it	lt
 800a8aa:	18e4      	addlt	r4, r4, r3
 800a8ac:	f000 f8e8 	bl	800aa80 <__malloc_lock>
 800a8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a928 <_free_r+0x90>)
 800a8b2:	6813      	ldr	r3, [r2, #0]
 800a8b4:	b933      	cbnz	r3, 800a8c4 <_free_r+0x2c>
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	6014      	str	r4, [r2, #0]
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8c0:	f000 b8e4 	b.w	800aa8c <__malloc_unlock>
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d908      	bls.n	800a8da <_free_r+0x42>
 800a8c8:	6820      	ldr	r0, [r4, #0]
 800a8ca:	1821      	adds	r1, r4, r0
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf01      	itttt	eq
 800a8d0:	6819      	ldreq	r1, [r3, #0]
 800a8d2:	685b      	ldreq	r3, [r3, #4]
 800a8d4:	1809      	addeq	r1, r1, r0
 800a8d6:	6021      	streq	r1, [r4, #0]
 800a8d8:	e7ed      	b.n	800a8b6 <_free_r+0x1e>
 800a8da:	461a      	mov	r2, r3
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	b10b      	cbz	r3, 800a8e4 <_free_r+0x4c>
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	d9fa      	bls.n	800a8da <_free_r+0x42>
 800a8e4:	6811      	ldr	r1, [r2, #0]
 800a8e6:	1850      	adds	r0, r2, r1
 800a8e8:	42a0      	cmp	r0, r4
 800a8ea:	d10b      	bne.n	800a904 <_free_r+0x6c>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	4401      	add	r1, r0
 800a8f0:	1850      	adds	r0, r2, r1
 800a8f2:	4283      	cmp	r3, r0
 800a8f4:	6011      	str	r1, [r2, #0]
 800a8f6:	d1e0      	bne.n	800a8ba <_free_r+0x22>
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	6053      	str	r3, [r2, #4]
 800a8fe:	4408      	add	r0, r1
 800a900:	6010      	str	r0, [r2, #0]
 800a902:	e7da      	b.n	800a8ba <_free_r+0x22>
 800a904:	d902      	bls.n	800a90c <_free_r+0x74>
 800a906:	230c      	movs	r3, #12
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	e7d6      	b.n	800a8ba <_free_r+0x22>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	1821      	adds	r1, r4, r0
 800a910:	428b      	cmp	r3, r1
 800a912:	bf04      	itt	eq
 800a914:	6819      	ldreq	r1, [r3, #0]
 800a916:	685b      	ldreq	r3, [r3, #4]
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	bf04      	itt	eq
 800a91c:	1809      	addeq	r1, r1, r0
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	6054      	str	r4, [r2, #4]
 800a922:	e7ca      	b.n	800a8ba <_free_r+0x22>
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	bf00      	nop
 800a928:	20012910 	.word	0x20012910

0800a92c <malloc>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <malloc+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f000 b825 	b.w	800a980 <_malloc_r>
 800a936:	bf00      	nop
 800a938:	2000002c 	.word	0x2000002c

0800a93c <sbrk_aligned>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0f      	ldr	r6, [pc, #60]	@ (800a97c <sbrk_aligned+0x40>)
 800a940:	460c      	mov	r4, r1
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	4605      	mov	r5, r0
 800a946:	b911      	cbnz	r1, 800a94e <sbrk_aligned+0x12>
 800a948:	f000 fe46 	bl	800b5d8 <_sbrk_r>
 800a94c:	6030      	str	r0, [r6, #0]
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 fe41 	bl	800b5d8 <_sbrk_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d103      	bne.n	800a962 <sbrk_aligned+0x26>
 800a95a:	f04f 34ff 	mov.w	r4, #4294967295
 800a95e:	4620      	mov	r0, r4
 800a960:	bd70      	pop	{r4, r5, r6, pc}
 800a962:	1cc4      	adds	r4, r0, #3
 800a964:	f024 0403 	bic.w	r4, r4, #3
 800a968:	42a0      	cmp	r0, r4
 800a96a:	d0f8      	beq.n	800a95e <sbrk_aligned+0x22>
 800a96c:	1a21      	subs	r1, r4, r0
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 fe32 	bl	800b5d8 <_sbrk_r>
 800a974:	3001      	adds	r0, #1
 800a976:	d1f2      	bne.n	800a95e <sbrk_aligned+0x22>
 800a978:	e7ef      	b.n	800a95a <sbrk_aligned+0x1e>
 800a97a:	bf00      	nop
 800a97c:	2001290c 	.word	0x2001290c

0800a980 <_malloc_r>:
 800a980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a984:	1ccd      	adds	r5, r1, #3
 800a986:	f025 0503 	bic.w	r5, r5, #3
 800a98a:	3508      	adds	r5, #8
 800a98c:	2d0c      	cmp	r5, #12
 800a98e:	bf38      	it	cc
 800a990:	250c      	movcc	r5, #12
 800a992:	2d00      	cmp	r5, #0
 800a994:	4606      	mov	r6, r0
 800a996:	db01      	blt.n	800a99c <_malloc_r+0x1c>
 800a998:	42a9      	cmp	r1, r5
 800a99a:	d904      	bls.n	800a9a6 <_malloc_r+0x26>
 800a99c:	230c      	movs	r3, #12
 800a99e:	6033      	str	r3, [r6, #0]
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa7c <_malloc_r+0xfc>
 800a9aa:	f000 f869 	bl	800aa80 <__malloc_lock>
 800a9ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b2:	461c      	mov	r4, r3
 800a9b4:	bb44      	cbnz	r4, 800aa08 <_malloc_r+0x88>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7ff ffbf 	bl	800a93c <sbrk_aligned>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	d158      	bne.n	800aa76 <_malloc_r+0xf6>
 800a9c4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c8:	4627      	mov	r7, r4
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	d143      	bne.n	800aa56 <_malloc_r+0xd6>
 800a9ce:	2c00      	cmp	r4, #0
 800a9d0:	d04b      	beq.n	800aa6a <_malloc_r+0xea>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	eb04 0903 	add.w	r9, r4, r3
 800a9dc:	f000 fdfc 	bl	800b5d8 <_sbrk_r>
 800a9e0:	4581      	cmp	r9, r0
 800a9e2:	d142      	bne.n	800aa6a <_malloc_r+0xea>
 800a9e4:	6821      	ldr	r1, [r4, #0]
 800a9e6:	1a6d      	subs	r5, r5, r1
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7ff ffa6 	bl	800a93c <sbrk_aligned>
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d03a      	beq.n	800aa6a <_malloc_r+0xea>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	442b      	add	r3, r5
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fe:	685a      	ldr	r2, [r3, #4]
 800aa00:	bb62      	cbnz	r2, 800aa5c <_malloc_r+0xdc>
 800aa02:	f8c8 7000 	str.w	r7, [r8]
 800aa06:	e00f      	b.n	800aa28 <_malloc_r+0xa8>
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	1b52      	subs	r2, r2, r5
 800aa0c:	d420      	bmi.n	800aa50 <_malloc_r+0xd0>
 800aa0e:	2a0b      	cmp	r2, #11
 800aa10:	d917      	bls.n	800aa42 <_malloc_r+0xc2>
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	6025      	str	r5, [r4, #0]
 800aa18:	bf18      	it	ne
 800aa1a:	6059      	strne	r1, [r3, #4]
 800aa1c:	6863      	ldr	r3, [r4, #4]
 800aa1e:	bf08      	it	eq
 800aa20:	f8c8 1000 	streq.w	r1, [r8]
 800aa24:	5162      	str	r2, [r4, r5]
 800aa26:	604b      	str	r3, [r1, #4]
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f000 f82f 	bl	800aa8c <__malloc_unlock>
 800aa2e:	f104 000b 	add.w	r0, r4, #11
 800aa32:	1d23      	adds	r3, r4, #4
 800aa34:	f020 0007 	bic.w	r0, r0, #7
 800aa38:	1ac2      	subs	r2, r0, r3
 800aa3a:	bf1c      	itt	ne
 800aa3c:	1a1b      	subne	r3, r3, r0
 800aa3e:	50a3      	strne	r3, [r4, r2]
 800aa40:	e7af      	b.n	800a9a2 <_malloc_r+0x22>
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	42a3      	cmp	r3, r4
 800aa46:	bf0c      	ite	eq
 800aa48:	f8c8 2000 	streq.w	r2, [r8]
 800aa4c:	605a      	strne	r2, [r3, #4]
 800aa4e:	e7eb      	b.n	800aa28 <_malloc_r+0xa8>
 800aa50:	4623      	mov	r3, r4
 800aa52:	6864      	ldr	r4, [r4, #4]
 800aa54:	e7ae      	b.n	800a9b4 <_malloc_r+0x34>
 800aa56:	463c      	mov	r4, r7
 800aa58:	687f      	ldr	r7, [r7, #4]
 800aa5a:	e7b6      	b.n	800a9ca <_malloc_r+0x4a>
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	d1fb      	bne.n	800aa5c <_malloc_r+0xdc>
 800aa64:	2300      	movs	r3, #0
 800aa66:	6053      	str	r3, [r2, #4]
 800aa68:	e7de      	b.n	800aa28 <_malloc_r+0xa8>
 800aa6a:	230c      	movs	r3, #12
 800aa6c:	6033      	str	r3, [r6, #0]
 800aa6e:	4630      	mov	r0, r6
 800aa70:	f000 f80c 	bl	800aa8c <__malloc_unlock>
 800aa74:	e794      	b.n	800a9a0 <_malloc_r+0x20>
 800aa76:	6005      	str	r5, [r0, #0]
 800aa78:	e7d6      	b.n	800aa28 <_malloc_r+0xa8>
 800aa7a:	bf00      	nop
 800aa7c:	20012910 	.word	0x20012910

0800aa80 <__malloc_lock>:
 800aa80:	4801      	ldr	r0, [pc, #4]	@ (800aa88 <__malloc_lock+0x8>)
 800aa82:	f7ff b8ac 	b.w	8009bde <__retarget_lock_acquire_recursive>
 800aa86:	bf00      	nop
 800aa88:	20012908 	.word	0x20012908

0800aa8c <__malloc_unlock>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	@ (800aa94 <__malloc_unlock+0x8>)
 800aa8e:	f7ff b8a7 	b.w	8009be0 <__retarget_lock_release_recursive>
 800aa92:	bf00      	nop
 800aa94:	20012908 	.word	0x20012908

0800aa98 <_Balloc>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	69c6      	ldr	r6, [r0, #28]
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	b976      	cbnz	r6, 800aac0 <_Balloc+0x28>
 800aaa2:	2010      	movs	r0, #16
 800aaa4:	f7ff ff42 	bl	800a92c <malloc>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	61e0      	str	r0, [r4, #28]
 800aaac:	b920      	cbnz	r0, 800aab8 <_Balloc+0x20>
 800aaae:	4b18      	ldr	r3, [pc, #96]	@ (800ab10 <_Balloc+0x78>)
 800aab0:	4818      	ldr	r0, [pc, #96]	@ (800ab14 <_Balloc+0x7c>)
 800aab2:	216b      	movs	r1, #107	@ 0x6b
 800aab4:	f000 fda0 	bl	800b5f8 <__assert_func>
 800aab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aabc:	6006      	str	r6, [r0, #0]
 800aabe:	60c6      	str	r6, [r0, #12]
 800aac0:	69e6      	ldr	r6, [r4, #28]
 800aac2:	68f3      	ldr	r3, [r6, #12]
 800aac4:	b183      	cbz	r3, 800aae8 <_Balloc+0x50>
 800aac6:	69e3      	ldr	r3, [r4, #28]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aace:	b9b8      	cbnz	r0, 800ab00 <_Balloc+0x68>
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f605 	lsl.w	r6, r1, r5
 800aad6:	1d72      	adds	r2, r6, #5
 800aad8:	0092      	lsls	r2, r2, #2
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fdaa 	bl	800b634 <_calloc_r>
 800aae0:	b160      	cbz	r0, 800aafc <_Balloc+0x64>
 800aae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aae6:	e00e      	b.n	800ab06 <_Balloc+0x6e>
 800aae8:	2221      	movs	r2, #33	@ 0x21
 800aaea:	2104      	movs	r1, #4
 800aaec:	4620      	mov	r0, r4
 800aaee:	f000 fda1 	bl	800b634 <_calloc_r>
 800aaf2:	69e3      	ldr	r3, [r4, #28]
 800aaf4:	60f0      	str	r0, [r6, #12]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d1e4      	bne.n	800aac6 <_Balloc+0x2e>
 800aafc:	2000      	movs	r0, #0
 800aafe:	bd70      	pop	{r4, r5, r6, pc}
 800ab00:	6802      	ldr	r2, [r0, #0]
 800ab02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab06:	2300      	movs	r3, #0
 800ab08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab0c:	e7f7      	b.n	800aafe <_Balloc+0x66>
 800ab0e:	bf00      	nop
 800ab10:	0800c4d9 	.word	0x0800c4d9
 800ab14:	0800c559 	.word	0x0800c559

0800ab18 <_Bfree>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	69c6      	ldr	r6, [r0, #28]
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	b976      	cbnz	r6, 800ab40 <_Bfree+0x28>
 800ab22:	2010      	movs	r0, #16
 800ab24:	f7ff ff02 	bl	800a92c <malloc>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	61e8      	str	r0, [r5, #28]
 800ab2c:	b920      	cbnz	r0, 800ab38 <_Bfree+0x20>
 800ab2e:	4b09      	ldr	r3, [pc, #36]	@ (800ab54 <_Bfree+0x3c>)
 800ab30:	4809      	ldr	r0, [pc, #36]	@ (800ab58 <_Bfree+0x40>)
 800ab32:	218f      	movs	r1, #143	@ 0x8f
 800ab34:	f000 fd60 	bl	800b5f8 <__assert_func>
 800ab38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab3c:	6006      	str	r6, [r0, #0]
 800ab3e:	60c6      	str	r6, [r0, #12]
 800ab40:	b13c      	cbz	r4, 800ab52 <_Bfree+0x3a>
 800ab42:	69eb      	ldr	r3, [r5, #28]
 800ab44:	6862      	ldr	r2, [r4, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab4c:	6021      	str	r1, [r4, #0]
 800ab4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	0800c4d9 	.word	0x0800c4d9
 800ab58:	0800c559 	.word	0x0800c559

0800ab5c <__multadd>:
 800ab5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab60:	690d      	ldr	r5, [r1, #16]
 800ab62:	4607      	mov	r7, r0
 800ab64:	460c      	mov	r4, r1
 800ab66:	461e      	mov	r6, r3
 800ab68:	f101 0c14 	add.w	ip, r1, #20
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab72:	b299      	uxth	r1, r3
 800ab74:	fb02 6101 	mla	r1, r2, r1, r6
 800ab78:	0c1e      	lsrs	r6, r3, #16
 800ab7a:	0c0b      	lsrs	r3, r1, #16
 800ab7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ab80:	b289      	uxth	r1, r1
 800ab82:	3001      	adds	r0, #1
 800ab84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab88:	4285      	cmp	r5, r0
 800ab8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ab8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab92:	dcec      	bgt.n	800ab6e <__multadd+0x12>
 800ab94:	b30e      	cbz	r6, 800abda <__multadd+0x7e>
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	42ab      	cmp	r3, r5
 800ab9a:	dc19      	bgt.n	800abd0 <__multadd+0x74>
 800ab9c:	6861      	ldr	r1, [r4, #4]
 800ab9e:	4638      	mov	r0, r7
 800aba0:	3101      	adds	r1, #1
 800aba2:	f7ff ff79 	bl	800aa98 <_Balloc>
 800aba6:	4680      	mov	r8, r0
 800aba8:	b928      	cbnz	r0, 800abb6 <__multadd+0x5a>
 800abaa:	4602      	mov	r2, r0
 800abac:	4b0c      	ldr	r3, [pc, #48]	@ (800abe0 <__multadd+0x84>)
 800abae:	480d      	ldr	r0, [pc, #52]	@ (800abe4 <__multadd+0x88>)
 800abb0:	21ba      	movs	r1, #186	@ 0xba
 800abb2:	f000 fd21 	bl	800b5f8 <__assert_func>
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	3202      	adds	r2, #2
 800abba:	f104 010c 	add.w	r1, r4, #12
 800abbe:	0092      	lsls	r2, r2, #2
 800abc0:	300c      	adds	r0, #12
 800abc2:	f7ff f80e 	bl	8009be2 <memcpy>
 800abc6:	4621      	mov	r1, r4
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ffa5 	bl	800ab18 <_Bfree>
 800abce:	4644      	mov	r4, r8
 800abd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abd4:	3501      	adds	r5, #1
 800abd6:	615e      	str	r6, [r3, #20]
 800abd8:	6125      	str	r5, [r4, #16]
 800abda:	4620      	mov	r0, r4
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	0800c548 	.word	0x0800c548
 800abe4:	0800c559 	.word	0x0800c559

0800abe8 <__hi0bits>:
 800abe8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abec:	4603      	mov	r3, r0
 800abee:	bf36      	itet	cc
 800abf0:	0403      	lslcc	r3, r0, #16
 800abf2:	2000      	movcs	r0, #0
 800abf4:	2010      	movcc	r0, #16
 800abf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abfa:	bf3c      	itt	cc
 800abfc:	021b      	lslcc	r3, r3, #8
 800abfe:	3008      	addcc	r0, #8
 800ac00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac04:	bf3c      	itt	cc
 800ac06:	011b      	lslcc	r3, r3, #4
 800ac08:	3004      	addcc	r0, #4
 800ac0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac0e:	bf3c      	itt	cc
 800ac10:	009b      	lslcc	r3, r3, #2
 800ac12:	3002      	addcc	r0, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	db05      	blt.n	800ac24 <__hi0bits+0x3c>
 800ac18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac1c:	f100 0001 	add.w	r0, r0, #1
 800ac20:	bf08      	it	eq
 800ac22:	2020      	moveq	r0, #32
 800ac24:	4770      	bx	lr

0800ac26 <__lo0bits>:
 800ac26:	6803      	ldr	r3, [r0, #0]
 800ac28:	4602      	mov	r2, r0
 800ac2a:	f013 0007 	ands.w	r0, r3, #7
 800ac2e:	d00b      	beq.n	800ac48 <__lo0bits+0x22>
 800ac30:	07d9      	lsls	r1, r3, #31
 800ac32:	d421      	bmi.n	800ac78 <__lo0bits+0x52>
 800ac34:	0798      	lsls	r0, r3, #30
 800ac36:	bf49      	itett	mi
 800ac38:	085b      	lsrmi	r3, r3, #1
 800ac3a:	089b      	lsrpl	r3, r3, #2
 800ac3c:	2001      	movmi	r0, #1
 800ac3e:	6013      	strmi	r3, [r2, #0]
 800ac40:	bf5c      	itt	pl
 800ac42:	6013      	strpl	r3, [r2, #0]
 800ac44:	2002      	movpl	r0, #2
 800ac46:	4770      	bx	lr
 800ac48:	b299      	uxth	r1, r3
 800ac4a:	b909      	cbnz	r1, 800ac50 <__lo0bits+0x2a>
 800ac4c:	0c1b      	lsrs	r3, r3, #16
 800ac4e:	2010      	movs	r0, #16
 800ac50:	b2d9      	uxtb	r1, r3
 800ac52:	b909      	cbnz	r1, 800ac58 <__lo0bits+0x32>
 800ac54:	3008      	adds	r0, #8
 800ac56:	0a1b      	lsrs	r3, r3, #8
 800ac58:	0719      	lsls	r1, r3, #28
 800ac5a:	bf04      	itt	eq
 800ac5c:	091b      	lsreq	r3, r3, #4
 800ac5e:	3004      	addeq	r0, #4
 800ac60:	0799      	lsls	r1, r3, #30
 800ac62:	bf04      	itt	eq
 800ac64:	089b      	lsreq	r3, r3, #2
 800ac66:	3002      	addeq	r0, #2
 800ac68:	07d9      	lsls	r1, r3, #31
 800ac6a:	d403      	bmi.n	800ac74 <__lo0bits+0x4e>
 800ac6c:	085b      	lsrs	r3, r3, #1
 800ac6e:	f100 0001 	add.w	r0, r0, #1
 800ac72:	d003      	beq.n	800ac7c <__lo0bits+0x56>
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	4770      	bx	lr
 800ac78:	2000      	movs	r0, #0
 800ac7a:	4770      	bx	lr
 800ac7c:	2020      	movs	r0, #32
 800ac7e:	4770      	bx	lr

0800ac80 <__i2b>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	460c      	mov	r4, r1
 800ac84:	2101      	movs	r1, #1
 800ac86:	f7ff ff07 	bl	800aa98 <_Balloc>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__i2b+0x1a>
 800ac8e:	4b05      	ldr	r3, [pc, #20]	@ (800aca4 <__i2b+0x24>)
 800ac90:	4805      	ldr	r0, [pc, #20]	@ (800aca8 <__i2b+0x28>)
 800ac92:	f240 1145 	movw	r1, #325	@ 0x145
 800ac96:	f000 fcaf 	bl	800b5f8 <__assert_func>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	6144      	str	r4, [r0, #20]
 800ac9e:	6103      	str	r3, [r0, #16]
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	bf00      	nop
 800aca4:	0800c548 	.word	0x0800c548
 800aca8:	0800c559 	.word	0x0800c559

0800acac <__multiply>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	4614      	mov	r4, r2
 800acb2:	690a      	ldr	r2, [r1, #16]
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	bfa8      	it	ge
 800acba:	4623      	movge	r3, r4
 800acbc:	460f      	mov	r7, r1
 800acbe:	bfa4      	itt	ge
 800acc0:	460c      	movge	r4, r1
 800acc2:	461f      	movge	r7, r3
 800acc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800acc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800accc:	68a3      	ldr	r3, [r4, #8]
 800acce:	6861      	ldr	r1, [r4, #4]
 800acd0:	eb0a 0609 	add.w	r6, sl, r9
 800acd4:	42b3      	cmp	r3, r6
 800acd6:	b085      	sub	sp, #20
 800acd8:	bfb8      	it	lt
 800acda:	3101      	addlt	r1, #1
 800acdc:	f7ff fedc 	bl	800aa98 <_Balloc>
 800ace0:	b930      	cbnz	r0, 800acf0 <__multiply+0x44>
 800ace2:	4602      	mov	r2, r0
 800ace4:	4b44      	ldr	r3, [pc, #272]	@ (800adf8 <__multiply+0x14c>)
 800ace6:	4845      	ldr	r0, [pc, #276]	@ (800adfc <__multiply+0x150>)
 800ace8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acec:	f000 fc84 	bl	800b5f8 <__assert_func>
 800acf0:	f100 0514 	add.w	r5, r0, #20
 800acf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acf8:	462b      	mov	r3, r5
 800acfa:	2200      	movs	r2, #0
 800acfc:	4543      	cmp	r3, r8
 800acfe:	d321      	bcc.n	800ad44 <__multiply+0x98>
 800ad00:	f107 0114 	add.w	r1, r7, #20
 800ad04:	f104 0214 	add.w	r2, r4, #20
 800ad08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ad0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ad10:	9302      	str	r3, [sp, #8]
 800ad12:	1b13      	subs	r3, r2, r4
 800ad14:	3b15      	subs	r3, #21
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	f104 0715 	add.w	r7, r4, #21
 800ad20:	42ba      	cmp	r2, r7
 800ad22:	bf38      	it	cc
 800ad24:	2304      	movcc	r3, #4
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	9103      	str	r1, [sp, #12]
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	d80c      	bhi.n	800ad4a <__multiply+0x9e>
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	dd03      	ble.n	800ad3c <__multiply+0x90>
 800ad34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d05b      	beq.n	800adf4 <__multiply+0x148>
 800ad3c:	6106      	str	r6, [r0, #16]
 800ad3e:	b005      	add	sp, #20
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	f843 2b04 	str.w	r2, [r3], #4
 800ad48:	e7d8      	b.n	800acfc <__multiply+0x50>
 800ad4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad4e:	f1ba 0f00 	cmp.w	sl, #0
 800ad52:	d024      	beq.n	800ad9e <__multiply+0xf2>
 800ad54:	f104 0e14 	add.w	lr, r4, #20
 800ad58:	46a9      	mov	r9, r5
 800ad5a:	f04f 0c00 	mov.w	ip, #0
 800ad5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad62:	f8d9 3000 	ldr.w	r3, [r9]
 800ad66:	fa1f fb87 	uxth.w	fp, r7
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad74:	f8d9 7000 	ldr.w	r7, [r9]
 800ad78:	4463      	add	r3, ip
 800ad7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad7e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad8c:	4572      	cmp	r2, lr
 800ad8e:	f849 3b04 	str.w	r3, [r9], #4
 800ad92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad96:	d8e2      	bhi.n	800ad5e <__multiply+0xb2>
 800ad98:	9b01      	ldr	r3, [sp, #4]
 800ad9a:	f845 c003 	str.w	ip, [r5, r3]
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ada4:	3104      	adds	r1, #4
 800ada6:	f1b9 0f00 	cmp.w	r9, #0
 800adaa:	d021      	beq.n	800adf0 <__multiply+0x144>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	f104 0c14 	add.w	ip, r4, #20
 800adb2:	46ae      	mov	lr, r5
 800adb4:	f04f 0a00 	mov.w	sl, #0
 800adb8:	f8bc b000 	ldrh.w	fp, [ip]
 800adbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800adc0:	fb09 770b 	mla	r7, r9, fp, r7
 800adc4:	4457      	add	r7, sl
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adcc:	f84e 3b04 	str.w	r3, [lr], #4
 800add0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800add4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800add8:	f8be 3000 	ldrh.w	r3, [lr]
 800addc:	fb09 330a 	mla	r3, r9, sl, r3
 800ade0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ade4:	4562      	cmp	r2, ip
 800ade6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adea:	d8e5      	bhi.n	800adb8 <__multiply+0x10c>
 800adec:	9f01      	ldr	r7, [sp, #4]
 800adee:	51eb      	str	r3, [r5, r7]
 800adf0:	3504      	adds	r5, #4
 800adf2:	e799      	b.n	800ad28 <__multiply+0x7c>
 800adf4:	3e01      	subs	r6, #1
 800adf6:	e79b      	b.n	800ad30 <__multiply+0x84>
 800adf8:	0800c548 	.word	0x0800c548
 800adfc:	0800c559 	.word	0x0800c559

0800ae00 <__pow5mult>:
 800ae00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae04:	4615      	mov	r5, r2
 800ae06:	f012 0203 	ands.w	r2, r2, #3
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	460e      	mov	r6, r1
 800ae0e:	d007      	beq.n	800ae20 <__pow5mult+0x20>
 800ae10:	4c25      	ldr	r4, [pc, #148]	@ (800aea8 <__pow5mult+0xa8>)
 800ae12:	3a01      	subs	r2, #1
 800ae14:	2300      	movs	r3, #0
 800ae16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae1a:	f7ff fe9f 	bl	800ab5c <__multadd>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	10ad      	asrs	r5, r5, #2
 800ae22:	d03d      	beq.n	800aea0 <__pow5mult+0xa0>
 800ae24:	69fc      	ldr	r4, [r7, #28]
 800ae26:	b97c      	cbnz	r4, 800ae48 <__pow5mult+0x48>
 800ae28:	2010      	movs	r0, #16
 800ae2a:	f7ff fd7f 	bl	800a92c <malloc>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	61f8      	str	r0, [r7, #28]
 800ae32:	b928      	cbnz	r0, 800ae40 <__pow5mult+0x40>
 800ae34:	4b1d      	ldr	r3, [pc, #116]	@ (800aeac <__pow5mult+0xac>)
 800ae36:	481e      	ldr	r0, [pc, #120]	@ (800aeb0 <__pow5mult+0xb0>)
 800ae38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae3c:	f000 fbdc 	bl	800b5f8 <__assert_func>
 800ae40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae44:	6004      	str	r4, [r0, #0]
 800ae46:	60c4      	str	r4, [r0, #12]
 800ae48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae50:	b94c      	cbnz	r4, 800ae66 <__pow5mult+0x66>
 800ae52:	f240 2171 	movw	r1, #625	@ 0x271
 800ae56:	4638      	mov	r0, r7
 800ae58:	f7ff ff12 	bl	800ac80 <__i2b>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae62:	4604      	mov	r4, r0
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	f04f 0900 	mov.w	r9, #0
 800ae6a:	07eb      	lsls	r3, r5, #31
 800ae6c:	d50a      	bpl.n	800ae84 <__pow5mult+0x84>
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4622      	mov	r2, r4
 800ae72:	4638      	mov	r0, r7
 800ae74:	f7ff ff1a 	bl	800acac <__multiply>
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff fe4b 	bl	800ab18 <_Bfree>
 800ae82:	4646      	mov	r6, r8
 800ae84:	106d      	asrs	r5, r5, #1
 800ae86:	d00b      	beq.n	800aea0 <__pow5mult+0xa0>
 800ae88:	6820      	ldr	r0, [r4, #0]
 800ae8a:	b938      	cbnz	r0, 800ae9c <__pow5mult+0x9c>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff ff0b 	bl	800acac <__multiply>
 800ae96:	6020      	str	r0, [r4, #0]
 800ae98:	f8c0 9000 	str.w	r9, [r0]
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	e7e4      	b.n	800ae6a <__pow5mult+0x6a>
 800aea0:	4630      	mov	r0, r6
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea6:	bf00      	nop
 800aea8:	0800c5b4 	.word	0x0800c5b4
 800aeac:	0800c4d9 	.word	0x0800c4d9
 800aeb0:	0800c559 	.word	0x0800c559

0800aeb4 <__lshift>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	460c      	mov	r4, r1
 800aeba:	6849      	ldr	r1, [r1, #4]
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	4607      	mov	r7, r0
 800aec6:	4691      	mov	r9, r2
 800aec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aecc:	f108 0601 	add.w	r6, r8, #1
 800aed0:	42b3      	cmp	r3, r6
 800aed2:	db0b      	blt.n	800aeec <__lshift+0x38>
 800aed4:	4638      	mov	r0, r7
 800aed6:	f7ff fddf 	bl	800aa98 <_Balloc>
 800aeda:	4605      	mov	r5, r0
 800aedc:	b948      	cbnz	r0, 800aef2 <__lshift+0x3e>
 800aede:	4602      	mov	r2, r0
 800aee0:	4b28      	ldr	r3, [pc, #160]	@ (800af84 <__lshift+0xd0>)
 800aee2:	4829      	ldr	r0, [pc, #164]	@ (800af88 <__lshift+0xd4>)
 800aee4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aee8:	f000 fb86 	bl	800b5f8 <__assert_func>
 800aeec:	3101      	adds	r1, #1
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	e7ee      	b.n	800aed0 <__lshift+0x1c>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f100 0114 	add.w	r1, r0, #20
 800aef8:	f100 0210 	add.w	r2, r0, #16
 800aefc:	4618      	mov	r0, r3
 800aefe:	4553      	cmp	r3, sl
 800af00:	db33      	blt.n	800af6a <__lshift+0xb6>
 800af02:	6920      	ldr	r0, [r4, #16]
 800af04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af08:	f104 0314 	add.w	r3, r4, #20
 800af0c:	f019 091f 	ands.w	r9, r9, #31
 800af10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af18:	d02b      	beq.n	800af72 <__lshift+0xbe>
 800af1a:	f1c9 0e20 	rsb	lr, r9, #32
 800af1e:	468a      	mov	sl, r1
 800af20:	2200      	movs	r2, #0
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	fa00 f009 	lsl.w	r0, r0, r9
 800af28:	4310      	orrs	r0, r2
 800af2a:	f84a 0b04 	str.w	r0, [sl], #4
 800af2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af32:	459c      	cmp	ip, r3
 800af34:	fa22 f20e 	lsr.w	r2, r2, lr
 800af38:	d8f3      	bhi.n	800af22 <__lshift+0x6e>
 800af3a:	ebac 0304 	sub.w	r3, ip, r4
 800af3e:	3b15      	subs	r3, #21
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	3304      	adds	r3, #4
 800af46:	f104 0015 	add.w	r0, r4, #21
 800af4a:	4584      	cmp	ip, r0
 800af4c:	bf38      	it	cc
 800af4e:	2304      	movcc	r3, #4
 800af50:	50ca      	str	r2, [r1, r3]
 800af52:	b10a      	cbz	r2, 800af58 <__lshift+0xa4>
 800af54:	f108 0602 	add.w	r6, r8, #2
 800af58:	3e01      	subs	r6, #1
 800af5a:	4638      	mov	r0, r7
 800af5c:	612e      	str	r6, [r5, #16]
 800af5e:	4621      	mov	r1, r4
 800af60:	f7ff fdda 	bl	800ab18 <_Bfree>
 800af64:	4628      	mov	r0, r5
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af6e:	3301      	adds	r3, #1
 800af70:	e7c5      	b.n	800aefe <__lshift+0x4a>
 800af72:	3904      	subs	r1, #4
 800af74:	f853 2b04 	ldr.w	r2, [r3], #4
 800af78:	f841 2f04 	str.w	r2, [r1, #4]!
 800af7c:	459c      	cmp	ip, r3
 800af7e:	d8f9      	bhi.n	800af74 <__lshift+0xc0>
 800af80:	e7ea      	b.n	800af58 <__lshift+0xa4>
 800af82:	bf00      	nop
 800af84:	0800c548 	.word	0x0800c548
 800af88:	0800c559 	.word	0x0800c559

0800af8c <__mcmp>:
 800af8c:	690a      	ldr	r2, [r1, #16]
 800af8e:	4603      	mov	r3, r0
 800af90:	6900      	ldr	r0, [r0, #16]
 800af92:	1a80      	subs	r0, r0, r2
 800af94:	b530      	push	{r4, r5, lr}
 800af96:	d10e      	bne.n	800afb6 <__mcmp+0x2a>
 800af98:	3314      	adds	r3, #20
 800af9a:	3114      	adds	r1, #20
 800af9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afac:	4295      	cmp	r5, r2
 800afae:	d003      	beq.n	800afb8 <__mcmp+0x2c>
 800afb0:	d205      	bcs.n	800afbe <__mcmp+0x32>
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d3f3      	bcc.n	800afa4 <__mcmp+0x18>
 800afbc:	e7fb      	b.n	800afb6 <__mcmp+0x2a>
 800afbe:	2001      	movs	r0, #1
 800afc0:	e7f9      	b.n	800afb6 <__mcmp+0x2a>
	...

0800afc4 <__mdiff>:
 800afc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	4689      	mov	r9, r1
 800afca:	4606      	mov	r6, r0
 800afcc:	4611      	mov	r1, r2
 800afce:	4648      	mov	r0, r9
 800afd0:	4614      	mov	r4, r2
 800afd2:	f7ff ffdb 	bl	800af8c <__mcmp>
 800afd6:	1e05      	subs	r5, r0, #0
 800afd8:	d112      	bne.n	800b000 <__mdiff+0x3c>
 800afda:	4629      	mov	r1, r5
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff fd5b 	bl	800aa98 <_Balloc>
 800afe2:	4602      	mov	r2, r0
 800afe4:	b928      	cbnz	r0, 800aff2 <__mdiff+0x2e>
 800afe6:	4b3f      	ldr	r3, [pc, #252]	@ (800b0e4 <__mdiff+0x120>)
 800afe8:	f240 2137 	movw	r1, #567	@ 0x237
 800afec:	483e      	ldr	r0, [pc, #248]	@ (800b0e8 <__mdiff+0x124>)
 800afee:	f000 fb03 	bl	800b5f8 <__assert_func>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aff8:	4610      	mov	r0, r2
 800affa:	b003      	add	sp, #12
 800affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b000:	bfbc      	itt	lt
 800b002:	464b      	movlt	r3, r9
 800b004:	46a1      	movlt	r9, r4
 800b006:	4630      	mov	r0, r6
 800b008:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b00c:	bfba      	itte	lt
 800b00e:	461c      	movlt	r4, r3
 800b010:	2501      	movlt	r5, #1
 800b012:	2500      	movge	r5, #0
 800b014:	f7ff fd40 	bl	800aa98 <_Balloc>
 800b018:	4602      	mov	r2, r0
 800b01a:	b918      	cbnz	r0, 800b024 <__mdiff+0x60>
 800b01c:	4b31      	ldr	r3, [pc, #196]	@ (800b0e4 <__mdiff+0x120>)
 800b01e:	f240 2145 	movw	r1, #581	@ 0x245
 800b022:	e7e3      	b.n	800afec <__mdiff+0x28>
 800b024:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b028:	6926      	ldr	r6, [r4, #16]
 800b02a:	60c5      	str	r5, [r0, #12]
 800b02c:	f109 0310 	add.w	r3, r9, #16
 800b030:	f109 0514 	add.w	r5, r9, #20
 800b034:	f104 0e14 	add.w	lr, r4, #20
 800b038:	f100 0b14 	add.w	fp, r0, #20
 800b03c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b040:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	46d9      	mov	r9, fp
 800b048:	f04f 0c00 	mov.w	ip, #0
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b052:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	fa1f f38a 	uxth.w	r3, sl
 800b05c:	4619      	mov	r1, r3
 800b05e:	b283      	uxth	r3, r0
 800b060:	1acb      	subs	r3, r1, r3
 800b062:	0c00      	lsrs	r0, r0, #16
 800b064:	4463      	add	r3, ip
 800b066:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b06a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b06e:	b29b      	uxth	r3, r3
 800b070:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b074:	4576      	cmp	r6, lr
 800b076:	f849 3b04 	str.w	r3, [r9], #4
 800b07a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b07e:	d8e5      	bhi.n	800b04c <__mdiff+0x88>
 800b080:	1b33      	subs	r3, r6, r4
 800b082:	3b15      	subs	r3, #21
 800b084:	f023 0303 	bic.w	r3, r3, #3
 800b088:	3415      	adds	r4, #21
 800b08a:	3304      	adds	r3, #4
 800b08c:	42a6      	cmp	r6, r4
 800b08e:	bf38      	it	cc
 800b090:	2304      	movcc	r3, #4
 800b092:	441d      	add	r5, r3
 800b094:	445b      	add	r3, fp
 800b096:	461e      	mov	r6, r3
 800b098:	462c      	mov	r4, r5
 800b09a:	4544      	cmp	r4, r8
 800b09c:	d30e      	bcc.n	800b0bc <__mdiff+0xf8>
 800b09e:	f108 0103 	add.w	r1, r8, #3
 800b0a2:	1b49      	subs	r1, r1, r5
 800b0a4:	f021 0103 	bic.w	r1, r1, #3
 800b0a8:	3d03      	subs	r5, #3
 800b0aa:	45a8      	cmp	r8, r5
 800b0ac:	bf38      	it	cc
 800b0ae:	2100      	movcc	r1, #0
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0b6:	b191      	cbz	r1, 800b0de <__mdiff+0x11a>
 800b0b8:	6117      	str	r7, [r2, #16]
 800b0ba:	e79d      	b.n	800aff8 <__mdiff+0x34>
 800b0bc:	f854 1b04 	ldr.w	r1, [r4], #4
 800b0c0:	46e6      	mov	lr, ip
 800b0c2:	0c08      	lsrs	r0, r1, #16
 800b0c4:	fa1c fc81 	uxtah	ip, ip, r1
 800b0c8:	4471      	add	r1, lr
 800b0ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0ce:	b289      	uxth	r1, r1
 800b0d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0d4:	f846 1b04 	str.w	r1, [r6], #4
 800b0d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0dc:	e7dd      	b.n	800b09a <__mdiff+0xd6>
 800b0de:	3f01      	subs	r7, #1
 800b0e0:	e7e7      	b.n	800b0b2 <__mdiff+0xee>
 800b0e2:	bf00      	nop
 800b0e4:	0800c548 	.word	0x0800c548
 800b0e8:	0800c559 	.word	0x0800c559

0800b0ec <__d2b>:
 800b0ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0f0:	460f      	mov	r7, r1
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	ec59 8b10 	vmov	r8, r9, d0
 800b0f8:	4616      	mov	r6, r2
 800b0fa:	f7ff fccd 	bl	800aa98 <_Balloc>
 800b0fe:	4604      	mov	r4, r0
 800b100:	b930      	cbnz	r0, 800b110 <__d2b+0x24>
 800b102:	4602      	mov	r2, r0
 800b104:	4b23      	ldr	r3, [pc, #140]	@ (800b194 <__d2b+0xa8>)
 800b106:	4824      	ldr	r0, [pc, #144]	@ (800b198 <__d2b+0xac>)
 800b108:	f240 310f 	movw	r1, #783	@ 0x30f
 800b10c:	f000 fa74 	bl	800b5f8 <__assert_func>
 800b110:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b118:	b10d      	cbz	r5, 800b11e <__d2b+0x32>
 800b11a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f1b8 0300 	subs.w	r3, r8, #0
 800b124:	d023      	beq.n	800b16e <__d2b+0x82>
 800b126:	4668      	mov	r0, sp
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	f7ff fd7c 	bl	800ac26 <__lo0bits>
 800b12e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b132:	b1d0      	cbz	r0, 800b16a <__d2b+0x7e>
 800b134:	f1c0 0320 	rsb	r3, r0, #32
 800b138:	fa02 f303 	lsl.w	r3, r2, r3
 800b13c:	430b      	orrs	r3, r1
 800b13e:	40c2      	lsrs	r2, r0
 800b140:	6163      	str	r3, [r4, #20]
 800b142:	9201      	str	r2, [sp, #4]
 800b144:	9b01      	ldr	r3, [sp, #4]
 800b146:	61a3      	str	r3, [r4, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bf0c      	ite	eq
 800b14c:	2201      	moveq	r2, #1
 800b14e:	2202      	movne	r2, #2
 800b150:	6122      	str	r2, [r4, #16]
 800b152:	b1a5      	cbz	r5, 800b17e <__d2b+0x92>
 800b154:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b158:	4405      	add	r5, r0
 800b15a:	603d      	str	r5, [r7, #0]
 800b15c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b160:	6030      	str	r0, [r6, #0]
 800b162:	4620      	mov	r0, r4
 800b164:	b003      	add	sp, #12
 800b166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b16a:	6161      	str	r1, [r4, #20]
 800b16c:	e7ea      	b.n	800b144 <__d2b+0x58>
 800b16e:	a801      	add	r0, sp, #4
 800b170:	f7ff fd59 	bl	800ac26 <__lo0bits>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	6163      	str	r3, [r4, #20]
 800b178:	3020      	adds	r0, #32
 800b17a:	2201      	movs	r2, #1
 800b17c:	e7e8      	b.n	800b150 <__d2b+0x64>
 800b17e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b182:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b186:	6038      	str	r0, [r7, #0]
 800b188:	6918      	ldr	r0, [r3, #16]
 800b18a:	f7ff fd2d 	bl	800abe8 <__hi0bits>
 800b18e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b192:	e7e5      	b.n	800b160 <__d2b+0x74>
 800b194:	0800c548 	.word	0x0800c548
 800b198:	0800c559 	.word	0x0800c559

0800b19c <__ssputs_r>:
 800b19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a0:	688e      	ldr	r6, [r1, #8]
 800b1a2:	461f      	mov	r7, r3
 800b1a4:	42be      	cmp	r6, r7
 800b1a6:	680b      	ldr	r3, [r1, #0]
 800b1a8:	4682      	mov	sl, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	4690      	mov	r8, r2
 800b1ae:	d82d      	bhi.n	800b20c <__ssputs_r+0x70>
 800b1b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1b8:	d026      	beq.n	800b208 <__ssputs_r+0x6c>
 800b1ba:	6965      	ldr	r5, [r4, #20]
 800b1bc:	6909      	ldr	r1, [r1, #16]
 800b1be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1c2:	eba3 0901 	sub.w	r9, r3, r1
 800b1c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1ca:	1c7b      	adds	r3, r7, #1
 800b1cc:	444b      	add	r3, r9
 800b1ce:	106d      	asrs	r5, r5, #1
 800b1d0:	429d      	cmp	r5, r3
 800b1d2:	bf38      	it	cc
 800b1d4:	461d      	movcc	r5, r3
 800b1d6:	0553      	lsls	r3, r2, #21
 800b1d8:	d527      	bpl.n	800b22a <__ssputs_r+0x8e>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7ff fbd0 	bl	800a980 <_malloc_r>
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	b360      	cbz	r0, 800b23e <__ssputs_r+0xa2>
 800b1e4:	6921      	ldr	r1, [r4, #16]
 800b1e6:	464a      	mov	r2, r9
 800b1e8:	f7fe fcfb 	bl	8009be2 <memcpy>
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f6:	81a3      	strh	r3, [r4, #12]
 800b1f8:	6126      	str	r6, [r4, #16]
 800b1fa:	6165      	str	r5, [r4, #20]
 800b1fc:	444e      	add	r6, r9
 800b1fe:	eba5 0509 	sub.w	r5, r5, r9
 800b202:	6026      	str	r6, [r4, #0]
 800b204:	60a5      	str	r5, [r4, #8]
 800b206:	463e      	mov	r6, r7
 800b208:	42be      	cmp	r6, r7
 800b20a:	d900      	bls.n	800b20e <__ssputs_r+0x72>
 800b20c:	463e      	mov	r6, r7
 800b20e:	6820      	ldr	r0, [r4, #0]
 800b210:	4632      	mov	r2, r6
 800b212:	4641      	mov	r1, r8
 800b214:	f000 f9c6 	bl	800b5a4 <memmove>
 800b218:	68a3      	ldr	r3, [r4, #8]
 800b21a:	1b9b      	subs	r3, r3, r6
 800b21c:	60a3      	str	r3, [r4, #8]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	4433      	add	r3, r6
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	2000      	movs	r0, #0
 800b226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b22a:	462a      	mov	r2, r5
 800b22c:	f000 fa28 	bl	800b680 <_realloc_r>
 800b230:	4606      	mov	r6, r0
 800b232:	2800      	cmp	r0, #0
 800b234:	d1e0      	bne.n	800b1f8 <__ssputs_r+0x5c>
 800b236:	6921      	ldr	r1, [r4, #16]
 800b238:	4650      	mov	r0, sl
 800b23a:	f7ff fb2d 	bl	800a898 <_free_r>
 800b23e:	230c      	movs	r3, #12
 800b240:	f8ca 3000 	str.w	r3, [sl]
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295
 800b250:	e7e9      	b.n	800b226 <__ssputs_r+0x8a>
	...

0800b254 <_svfiprintf_r>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	4698      	mov	r8, r3
 800b25a:	898b      	ldrh	r3, [r1, #12]
 800b25c:	061b      	lsls	r3, r3, #24
 800b25e:	b09d      	sub	sp, #116	@ 0x74
 800b260:	4607      	mov	r7, r0
 800b262:	460d      	mov	r5, r1
 800b264:	4614      	mov	r4, r2
 800b266:	d510      	bpl.n	800b28a <_svfiprintf_r+0x36>
 800b268:	690b      	ldr	r3, [r1, #16]
 800b26a:	b973      	cbnz	r3, 800b28a <_svfiprintf_r+0x36>
 800b26c:	2140      	movs	r1, #64	@ 0x40
 800b26e:	f7ff fb87 	bl	800a980 <_malloc_r>
 800b272:	6028      	str	r0, [r5, #0]
 800b274:	6128      	str	r0, [r5, #16]
 800b276:	b930      	cbnz	r0, 800b286 <_svfiprintf_r+0x32>
 800b278:	230c      	movs	r3, #12
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	b01d      	add	sp, #116	@ 0x74
 800b282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b286:	2340      	movs	r3, #64	@ 0x40
 800b288:	616b      	str	r3, [r5, #20]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b28e:	2320      	movs	r3, #32
 800b290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b294:	f8cd 800c 	str.w	r8, [sp, #12]
 800b298:	2330      	movs	r3, #48	@ 0x30
 800b29a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b438 <_svfiprintf_r+0x1e4>
 800b29e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2a2:	f04f 0901 	mov.w	r9, #1
 800b2a6:	4623      	mov	r3, r4
 800b2a8:	469a      	mov	sl, r3
 800b2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ae:	b10a      	cbz	r2, 800b2b4 <_svfiprintf_r+0x60>
 800b2b0:	2a25      	cmp	r2, #37	@ 0x25
 800b2b2:	d1f9      	bne.n	800b2a8 <_svfiprintf_r+0x54>
 800b2b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2b8:	d00b      	beq.n	800b2d2 <_svfiprintf_r+0x7e>
 800b2ba:	465b      	mov	r3, fp
 800b2bc:	4622      	mov	r2, r4
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f7ff ff6b 	bl	800b19c <__ssputs_r>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f000 80a7 	beq.w	800b41a <_svfiprintf_r+0x1c6>
 800b2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2ce:	445a      	add	r2, fp
 800b2d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 809f 	beq.w	800b41a <_svfiprintf_r+0x1c6>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e6:	f10a 0a01 	add.w	sl, sl, #1
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	9307      	str	r3, [sp, #28]
 800b2ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2f4:	4654      	mov	r4, sl
 800b2f6:	2205      	movs	r2, #5
 800b2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fc:	484e      	ldr	r0, [pc, #312]	@ (800b438 <_svfiprintf_r+0x1e4>)
 800b2fe:	f7f4 ff87 	bl	8000210 <memchr>
 800b302:	9a04      	ldr	r2, [sp, #16]
 800b304:	b9d8      	cbnz	r0, 800b33e <_svfiprintf_r+0xea>
 800b306:	06d0      	lsls	r0, r2, #27
 800b308:	bf44      	itt	mi
 800b30a:	2320      	movmi	r3, #32
 800b30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b310:	0711      	lsls	r1, r2, #28
 800b312:	bf44      	itt	mi
 800b314:	232b      	movmi	r3, #43	@ 0x2b
 800b316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b31a:	f89a 3000 	ldrb.w	r3, [sl]
 800b31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b320:	d015      	beq.n	800b34e <_svfiprintf_r+0xfa>
 800b322:	9a07      	ldr	r2, [sp, #28]
 800b324:	4654      	mov	r4, sl
 800b326:	2000      	movs	r0, #0
 800b328:	f04f 0c0a 	mov.w	ip, #10
 800b32c:	4621      	mov	r1, r4
 800b32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b332:	3b30      	subs	r3, #48	@ 0x30
 800b334:	2b09      	cmp	r3, #9
 800b336:	d94b      	bls.n	800b3d0 <_svfiprintf_r+0x17c>
 800b338:	b1b0      	cbz	r0, 800b368 <_svfiprintf_r+0x114>
 800b33a:	9207      	str	r2, [sp, #28]
 800b33c:	e014      	b.n	800b368 <_svfiprintf_r+0x114>
 800b33e:	eba0 0308 	sub.w	r3, r0, r8
 800b342:	fa09 f303 	lsl.w	r3, r9, r3
 800b346:	4313      	orrs	r3, r2
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	46a2      	mov	sl, r4
 800b34c:	e7d2      	b.n	800b2f4 <_svfiprintf_r+0xa0>
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	1d19      	adds	r1, r3, #4
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	9103      	str	r1, [sp, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	bfbb      	ittet	lt
 800b35a:	425b      	neglt	r3, r3
 800b35c:	f042 0202 	orrlt.w	r2, r2, #2
 800b360:	9307      	strge	r3, [sp, #28]
 800b362:	9307      	strlt	r3, [sp, #28]
 800b364:	bfb8      	it	lt
 800b366:	9204      	strlt	r2, [sp, #16]
 800b368:	7823      	ldrb	r3, [r4, #0]
 800b36a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b36c:	d10a      	bne.n	800b384 <_svfiprintf_r+0x130>
 800b36e:	7863      	ldrb	r3, [r4, #1]
 800b370:	2b2a      	cmp	r3, #42	@ 0x2a
 800b372:	d132      	bne.n	800b3da <_svfiprintf_r+0x186>
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	1d1a      	adds	r2, r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	9203      	str	r2, [sp, #12]
 800b37c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b380:	3402      	adds	r4, #2
 800b382:	9305      	str	r3, [sp, #20]
 800b384:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b448 <_svfiprintf_r+0x1f4>
 800b388:	7821      	ldrb	r1, [r4, #0]
 800b38a:	2203      	movs	r2, #3
 800b38c:	4650      	mov	r0, sl
 800b38e:	f7f4 ff3f 	bl	8000210 <memchr>
 800b392:	b138      	cbz	r0, 800b3a4 <_svfiprintf_r+0x150>
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	eba0 000a 	sub.w	r0, r0, sl
 800b39a:	2240      	movs	r2, #64	@ 0x40
 800b39c:	4082      	lsls	r2, r0
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a8:	4824      	ldr	r0, [pc, #144]	@ (800b43c <_svfiprintf_r+0x1e8>)
 800b3aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3ae:	2206      	movs	r2, #6
 800b3b0:	f7f4 ff2e 	bl	8000210 <memchr>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d036      	beq.n	800b426 <_svfiprintf_r+0x1d2>
 800b3b8:	4b21      	ldr	r3, [pc, #132]	@ (800b440 <_svfiprintf_r+0x1ec>)
 800b3ba:	bb1b      	cbnz	r3, 800b404 <_svfiprintf_r+0x1b0>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	3307      	adds	r3, #7
 800b3c0:	f023 0307 	bic.w	r3, r3, #7
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	9303      	str	r3, [sp, #12]
 800b3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ca:	4433      	add	r3, r6
 800b3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ce:	e76a      	b.n	800b2a6 <_svfiprintf_r+0x52>
 800b3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	e7a8      	b.n	800b32c <_svfiprintf_r+0xd8>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	3401      	adds	r4, #1
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	f04f 0c0a 	mov.w	ip, #10
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ec:	3a30      	subs	r2, #48	@ 0x30
 800b3ee:	2a09      	cmp	r2, #9
 800b3f0:	d903      	bls.n	800b3fa <_svfiprintf_r+0x1a6>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0c6      	beq.n	800b384 <_svfiprintf_r+0x130>
 800b3f6:	9105      	str	r1, [sp, #20]
 800b3f8:	e7c4      	b.n	800b384 <_svfiprintf_r+0x130>
 800b3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3fe:	4604      	mov	r4, r0
 800b400:	2301      	movs	r3, #1
 800b402:	e7f0      	b.n	800b3e6 <_svfiprintf_r+0x192>
 800b404:	ab03      	add	r3, sp, #12
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	462a      	mov	r2, r5
 800b40a:	4b0e      	ldr	r3, [pc, #56]	@ (800b444 <_svfiprintf_r+0x1f0>)
 800b40c:	a904      	add	r1, sp, #16
 800b40e:	4638      	mov	r0, r7
 800b410:	f7fd fe34 	bl	800907c <_printf_float>
 800b414:	1c42      	adds	r2, r0, #1
 800b416:	4606      	mov	r6, r0
 800b418:	d1d6      	bne.n	800b3c8 <_svfiprintf_r+0x174>
 800b41a:	89ab      	ldrh	r3, [r5, #12]
 800b41c:	065b      	lsls	r3, r3, #25
 800b41e:	f53f af2d 	bmi.w	800b27c <_svfiprintf_r+0x28>
 800b422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b424:	e72c      	b.n	800b280 <_svfiprintf_r+0x2c>
 800b426:	ab03      	add	r3, sp, #12
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	462a      	mov	r2, r5
 800b42c:	4b05      	ldr	r3, [pc, #20]	@ (800b444 <_svfiprintf_r+0x1f0>)
 800b42e:	a904      	add	r1, sp, #16
 800b430:	4638      	mov	r0, r7
 800b432:	f7fe f8bb 	bl	80095ac <_printf_i>
 800b436:	e7ed      	b.n	800b414 <_svfiprintf_r+0x1c0>
 800b438:	0800c6b0 	.word	0x0800c6b0
 800b43c:	0800c6ba 	.word	0x0800c6ba
 800b440:	0800907d 	.word	0x0800907d
 800b444:	0800b19d 	.word	0x0800b19d
 800b448:	0800c6b6 	.word	0x0800c6b6

0800b44c <__sflush_r>:
 800b44c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b454:	0716      	lsls	r6, r2, #28
 800b456:	4605      	mov	r5, r0
 800b458:	460c      	mov	r4, r1
 800b45a:	d454      	bmi.n	800b506 <__sflush_r+0xba>
 800b45c:	684b      	ldr	r3, [r1, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dc02      	bgt.n	800b468 <__sflush_r+0x1c>
 800b462:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b464:	2b00      	cmp	r3, #0
 800b466:	dd48      	ble.n	800b4fa <__sflush_r+0xae>
 800b468:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	d045      	beq.n	800b4fa <__sflush_r+0xae>
 800b46e:	2300      	movs	r3, #0
 800b470:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b474:	682f      	ldr	r7, [r5, #0]
 800b476:	6a21      	ldr	r1, [r4, #32]
 800b478:	602b      	str	r3, [r5, #0]
 800b47a:	d030      	beq.n	800b4de <__sflush_r+0x92>
 800b47c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	0759      	lsls	r1, r3, #29
 800b482:	d505      	bpl.n	800b490 <__sflush_r+0x44>
 800b484:	6863      	ldr	r3, [r4, #4]
 800b486:	1ad2      	subs	r2, r2, r3
 800b488:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b48a:	b10b      	cbz	r3, 800b490 <__sflush_r+0x44>
 800b48c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b48e:	1ad2      	subs	r2, r2, r3
 800b490:	2300      	movs	r3, #0
 800b492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b494:	6a21      	ldr	r1, [r4, #32]
 800b496:	4628      	mov	r0, r5
 800b498:	47b0      	blx	r6
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	d106      	bne.n	800b4ae <__sflush_r+0x62>
 800b4a0:	6829      	ldr	r1, [r5, #0]
 800b4a2:	291d      	cmp	r1, #29
 800b4a4:	d82b      	bhi.n	800b4fe <__sflush_r+0xb2>
 800b4a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b550 <__sflush_r+0x104>)
 800b4a8:	410a      	asrs	r2, r1
 800b4aa:	07d6      	lsls	r6, r2, #31
 800b4ac:	d427      	bmi.n	800b4fe <__sflush_r+0xb2>
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	6062      	str	r2, [r4, #4]
 800b4b2:	04d9      	lsls	r1, r3, #19
 800b4b4:	6922      	ldr	r2, [r4, #16]
 800b4b6:	6022      	str	r2, [r4, #0]
 800b4b8:	d504      	bpl.n	800b4c4 <__sflush_r+0x78>
 800b4ba:	1c42      	adds	r2, r0, #1
 800b4bc:	d101      	bne.n	800b4c2 <__sflush_r+0x76>
 800b4be:	682b      	ldr	r3, [r5, #0]
 800b4c0:	b903      	cbnz	r3, 800b4c4 <__sflush_r+0x78>
 800b4c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4c6:	602f      	str	r7, [r5, #0]
 800b4c8:	b1b9      	cbz	r1, 800b4fa <__sflush_r+0xae>
 800b4ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ce:	4299      	cmp	r1, r3
 800b4d0:	d002      	beq.n	800b4d8 <__sflush_r+0x8c>
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f7ff f9e0 	bl	800a898 <_free_r>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4dc:	e00d      	b.n	800b4fa <__sflush_r+0xae>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b0      	blx	r6
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	1c50      	adds	r0, r2, #1
 800b4e8:	d1c9      	bne.n	800b47e <__sflush_r+0x32>
 800b4ea:	682b      	ldr	r3, [r5, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d0c6      	beq.n	800b47e <__sflush_r+0x32>
 800b4f0:	2b1d      	cmp	r3, #29
 800b4f2:	d001      	beq.n	800b4f8 <__sflush_r+0xac>
 800b4f4:	2b16      	cmp	r3, #22
 800b4f6:	d11e      	bne.n	800b536 <__sflush_r+0xea>
 800b4f8:	602f      	str	r7, [r5, #0]
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e022      	b.n	800b544 <__sflush_r+0xf8>
 800b4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b502:	b21b      	sxth	r3, r3
 800b504:	e01b      	b.n	800b53e <__sflush_r+0xf2>
 800b506:	690f      	ldr	r7, [r1, #16]
 800b508:	2f00      	cmp	r7, #0
 800b50a:	d0f6      	beq.n	800b4fa <__sflush_r+0xae>
 800b50c:	0793      	lsls	r3, r2, #30
 800b50e:	680e      	ldr	r6, [r1, #0]
 800b510:	bf08      	it	eq
 800b512:	694b      	ldreq	r3, [r1, #20]
 800b514:	600f      	str	r7, [r1, #0]
 800b516:	bf18      	it	ne
 800b518:	2300      	movne	r3, #0
 800b51a:	eba6 0807 	sub.w	r8, r6, r7
 800b51e:	608b      	str	r3, [r1, #8]
 800b520:	f1b8 0f00 	cmp.w	r8, #0
 800b524:	dde9      	ble.n	800b4fa <__sflush_r+0xae>
 800b526:	6a21      	ldr	r1, [r4, #32]
 800b528:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b52a:	4643      	mov	r3, r8
 800b52c:	463a      	mov	r2, r7
 800b52e:	4628      	mov	r0, r5
 800b530:	47b0      	blx	r6
 800b532:	2800      	cmp	r0, #0
 800b534:	dc08      	bgt.n	800b548 <__sflush_r+0xfc>
 800b536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	4407      	add	r7, r0
 800b54a:	eba8 0800 	sub.w	r8, r8, r0
 800b54e:	e7e7      	b.n	800b520 <__sflush_r+0xd4>
 800b550:	dfbffffe 	.word	0xdfbffffe

0800b554 <_fflush_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	690b      	ldr	r3, [r1, #16]
 800b558:	4605      	mov	r5, r0
 800b55a:	460c      	mov	r4, r1
 800b55c:	b913      	cbnz	r3, 800b564 <_fflush_r+0x10>
 800b55e:	2500      	movs	r5, #0
 800b560:	4628      	mov	r0, r5
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	b118      	cbz	r0, 800b56e <_fflush_r+0x1a>
 800b566:	6a03      	ldr	r3, [r0, #32]
 800b568:	b90b      	cbnz	r3, 800b56e <_fflush_r+0x1a>
 800b56a:	f7fe f9cb 	bl	8009904 <__sinit>
 800b56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0f3      	beq.n	800b55e <_fflush_r+0xa>
 800b576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b578:	07d0      	lsls	r0, r2, #31
 800b57a:	d404      	bmi.n	800b586 <_fflush_r+0x32>
 800b57c:	0599      	lsls	r1, r3, #22
 800b57e:	d402      	bmi.n	800b586 <_fflush_r+0x32>
 800b580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b582:	f7fe fb2c 	bl	8009bde <__retarget_lock_acquire_recursive>
 800b586:	4628      	mov	r0, r5
 800b588:	4621      	mov	r1, r4
 800b58a:	f7ff ff5f 	bl	800b44c <__sflush_r>
 800b58e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b590:	07da      	lsls	r2, r3, #31
 800b592:	4605      	mov	r5, r0
 800b594:	d4e4      	bmi.n	800b560 <_fflush_r+0xc>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	059b      	lsls	r3, r3, #22
 800b59a:	d4e1      	bmi.n	800b560 <_fflush_r+0xc>
 800b59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b59e:	f7fe fb1f 	bl	8009be0 <__retarget_lock_release_recursive>
 800b5a2:	e7dd      	b.n	800b560 <_fflush_r+0xc>

0800b5a4 <memmove>:
 800b5a4:	4288      	cmp	r0, r1
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	eb01 0402 	add.w	r4, r1, r2
 800b5ac:	d902      	bls.n	800b5b4 <memmove+0x10>
 800b5ae:	4284      	cmp	r4, r0
 800b5b0:	4623      	mov	r3, r4
 800b5b2:	d807      	bhi.n	800b5c4 <memmove+0x20>
 800b5b4:	1e43      	subs	r3, r0, #1
 800b5b6:	42a1      	cmp	r1, r4
 800b5b8:	d008      	beq.n	800b5cc <memmove+0x28>
 800b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5c2:	e7f8      	b.n	800b5b6 <memmove+0x12>
 800b5c4:	4402      	add	r2, r0
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	428a      	cmp	r2, r1
 800b5ca:	d100      	bne.n	800b5ce <memmove+0x2a>
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5d6:	e7f7      	b.n	800b5c8 <memmove+0x24>

0800b5d8 <_sbrk_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4d06      	ldr	r5, [pc, #24]	@ (800b5f4 <_sbrk_r+0x1c>)
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4604      	mov	r4, r0
 800b5e0:	4608      	mov	r0, r1
 800b5e2:	602b      	str	r3, [r5, #0]
 800b5e4:	f7f6 fee0 	bl	80023a8 <_sbrk>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d102      	bne.n	800b5f2 <_sbrk_r+0x1a>
 800b5ec:	682b      	ldr	r3, [r5, #0]
 800b5ee:	b103      	cbz	r3, 800b5f2 <_sbrk_r+0x1a>
 800b5f0:	6023      	str	r3, [r4, #0]
 800b5f2:	bd38      	pop	{r3, r4, r5, pc}
 800b5f4:	20012904 	.word	0x20012904

0800b5f8 <__assert_func>:
 800b5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5fa:	4614      	mov	r4, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4b09      	ldr	r3, [pc, #36]	@ (800b624 <__assert_func+0x2c>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4605      	mov	r5, r0
 800b604:	68d8      	ldr	r0, [r3, #12]
 800b606:	b954      	cbnz	r4, 800b61e <__assert_func+0x26>
 800b608:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <__assert_func+0x30>)
 800b60a:	461c      	mov	r4, r3
 800b60c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b610:	9100      	str	r1, [sp, #0]
 800b612:	462b      	mov	r3, r5
 800b614:	4905      	ldr	r1, [pc, #20]	@ (800b62c <__assert_func+0x34>)
 800b616:	f000 f86f 	bl	800b6f8 <fiprintf>
 800b61a:	f000 f87f 	bl	800b71c <abort>
 800b61e:	4b04      	ldr	r3, [pc, #16]	@ (800b630 <__assert_func+0x38>)
 800b620:	e7f4      	b.n	800b60c <__assert_func+0x14>
 800b622:	bf00      	nop
 800b624:	2000002c 	.word	0x2000002c
 800b628:	0800c706 	.word	0x0800c706
 800b62c:	0800c6d8 	.word	0x0800c6d8
 800b630:	0800c6cb 	.word	0x0800c6cb

0800b634 <_calloc_r>:
 800b634:	b570      	push	{r4, r5, r6, lr}
 800b636:	fba1 5402 	umull	r5, r4, r1, r2
 800b63a:	b93c      	cbnz	r4, 800b64c <_calloc_r+0x18>
 800b63c:	4629      	mov	r1, r5
 800b63e:	f7ff f99f 	bl	800a980 <_malloc_r>
 800b642:	4606      	mov	r6, r0
 800b644:	b928      	cbnz	r0, 800b652 <_calloc_r+0x1e>
 800b646:	2600      	movs	r6, #0
 800b648:	4630      	mov	r0, r6
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	220c      	movs	r2, #12
 800b64e:	6002      	str	r2, [r0, #0]
 800b650:	e7f9      	b.n	800b646 <_calloc_r+0x12>
 800b652:	462a      	mov	r2, r5
 800b654:	4621      	mov	r1, r4
 800b656:	f7fe f9ee 	bl	8009a36 <memset>
 800b65a:	e7f5      	b.n	800b648 <_calloc_r+0x14>

0800b65c <__ascii_mbtowc>:
 800b65c:	b082      	sub	sp, #8
 800b65e:	b901      	cbnz	r1, 800b662 <__ascii_mbtowc+0x6>
 800b660:	a901      	add	r1, sp, #4
 800b662:	b142      	cbz	r2, 800b676 <__ascii_mbtowc+0x1a>
 800b664:	b14b      	cbz	r3, 800b67a <__ascii_mbtowc+0x1e>
 800b666:	7813      	ldrb	r3, [r2, #0]
 800b668:	600b      	str	r3, [r1, #0]
 800b66a:	7812      	ldrb	r2, [r2, #0]
 800b66c:	1e10      	subs	r0, r2, #0
 800b66e:	bf18      	it	ne
 800b670:	2001      	movne	r0, #1
 800b672:	b002      	add	sp, #8
 800b674:	4770      	bx	lr
 800b676:	4610      	mov	r0, r2
 800b678:	e7fb      	b.n	800b672 <__ascii_mbtowc+0x16>
 800b67a:	f06f 0001 	mvn.w	r0, #1
 800b67e:	e7f8      	b.n	800b672 <__ascii_mbtowc+0x16>

0800b680 <_realloc_r>:
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	4680      	mov	r8, r0
 800b686:	4615      	mov	r5, r2
 800b688:	460c      	mov	r4, r1
 800b68a:	b921      	cbnz	r1, 800b696 <_realloc_r+0x16>
 800b68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4611      	mov	r1, r2
 800b692:	f7ff b975 	b.w	800a980 <_malloc_r>
 800b696:	b92a      	cbnz	r2, 800b6a4 <_realloc_r+0x24>
 800b698:	f7ff f8fe 	bl	800a898 <_free_r>
 800b69c:	2400      	movs	r4, #0
 800b69e:	4620      	mov	r0, r4
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	f000 f841 	bl	800b72a <_malloc_usable_size_r>
 800b6a8:	4285      	cmp	r5, r0
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	d802      	bhi.n	800b6b4 <_realloc_r+0x34>
 800b6ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b6b2:	d8f4      	bhi.n	800b69e <_realloc_r+0x1e>
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	f7ff f962 	bl	800a980 <_malloc_r>
 800b6bc:	4607      	mov	r7, r0
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d0ec      	beq.n	800b69c <_realloc_r+0x1c>
 800b6c2:	42b5      	cmp	r5, r6
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	bf28      	it	cs
 800b6ca:	4632      	movcs	r2, r6
 800b6cc:	f7fe fa89 	bl	8009be2 <memcpy>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	f7ff f8e0 	bl	800a898 <_free_r>
 800b6d8:	463c      	mov	r4, r7
 800b6da:	e7e0      	b.n	800b69e <_realloc_r+0x1e>

0800b6dc <__ascii_wctomb>:
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4608      	mov	r0, r1
 800b6e0:	b141      	cbz	r1, 800b6f4 <__ascii_wctomb+0x18>
 800b6e2:	2aff      	cmp	r2, #255	@ 0xff
 800b6e4:	d904      	bls.n	800b6f0 <__ascii_wctomb+0x14>
 800b6e6:	228a      	movs	r2, #138	@ 0x8a
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ee:	4770      	bx	lr
 800b6f0:	700a      	strb	r2, [r1, #0]
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <fiprintf>:
 800b6f8:	b40e      	push	{r1, r2, r3}
 800b6fa:	b503      	push	{r0, r1, lr}
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	ab03      	add	r3, sp, #12
 800b700:	4805      	ldr	r0, [pc, #20]	@ (800b718 <fiprintf+0x20>)
 800b702:	f853 2b04 	ldr.w	r2, [r3], #4
 800b706:	6800      	ldr	r0, [r0, #0]
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	f000 f83f 	bl	800b78c <_vfiprintf_r>
 800b70e:	b002      	add	sp, #8
 800b710:	f85d eb04 	ldr.w	lr, [sp], #4
 800b714:	b003      	add	sp, #12
 800b716:	4770      	bx	lr
 800b718:	2000002c 	.word	0x2000002c

0800b71c <abort>:
 800b71c:	b508      	push	{r3, lr}
 800b71e:	2006      	movs	r0, #6
 800b720:	f000 fa08 	bl	800bb34 <raise>
 800b724:	2001      	movs	r0, #1
 800b726:	f7f6 fdc7 	bl	80022b8 <_exit>

0800b72a <_malloc_usable_size_r>:
 800b72a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b72e:	1f18      	subs	r0, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfbc      	itt	lt
 800b734:	580b      	ldrlt	r3, [r1, r0]
 800b736:	18c0      	addlt	r0, r0, r3
 800b738:	4770      	bx	lr

0800b73a <__sfputc_r>:
 800b73a:	6893      	ldr	r3, [r2, #8]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	b410      	push	{r4}
 800b742:	6093      	str	r3, [r2, #8]
 800b744:	da08      	bge.n	800b758 <__sfputc_r+0x1e>
 800b746:	6994      	ldr	r4, [r2, #24]
 800b748:	42a3      	cmp	r3, r4
 800b74a:	db01      	blt.n	800b750 <__sfputc_r+0x16>
 800b74c:	290a      	cmp	r1, #10
 800b74e:	d103      	bne.n	800b758 <__sfputc_r+0x1e>
 800b750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b754:	f000 b932 	b.w	800b9bc <__swbuf_r>
 800b758:	6813      	ldr	r3, [r2, #0]
 800b75a:	1c58      	adds	r0, r3, #1
 800b75c:	6010      	str	r0, [r2, #0]
 800b75e:	7019      	strb	r1, [r3, #0]
 800b760:	4608      	mov	r0, r1
 800b762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <__sfputs_r>:
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	4614      	mov	r4, r2
 800b770:	18d5      	adds	r5, r2, r3
 800b772:	42ac      	cmp	r4, r5
 800b774:	d101      	bne.n	800b77a <__sfputs_r+0x12>
 800b776:	2000      	movs	r0, #0
 800b778:	e007      	b.n	800b78a <__sfputs_r+0x22>
 800b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77e:	463a      	mov	r2, r7
 800b780:	4630      	mov	r0, r6
 800b782:	f7ff ffda 	bl	800b73a <__sfputc_r>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d1f3      	bne.n	800b772 <__sfputs_r+0xa>
 800b78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b78c <_vfiprintf_r>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	460d      	mov	r5, r1
 800b792:	b09d      	sub	sp, #116	@ 0x74
 800b794:	4614      	mov	r4, r2
 800b796:	4698      	mov	r8, r3
 800b798:	4606      	mov	r6, r0
 800b79a:	b118      	cbz	r0, 800b7a4 <_vfiprintf_r+0x18>
 800b79c:	6a03      	ldr	r3, [r0, #32]
 800b79e:	b90b      	cbnz	r3, 800b7a4 <_vfiprintf_r+0x18>
 800b7a0:	f7fe f8b0 	bl	8009904 <__sinit>
 800b7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7a6:	07d9      	lsls	r1, r3, #31
 800b7a8:	d405      	bmi.n	800b7b6 <_vfiprintf_r+0x2a>
 800b7aa:	89ab      	ldrh	r3, [r5, #12]
 800b7ac:	059a      	lsls	r2, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_vfiprintf_r+0x2a>
 800b7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b2:	f7fe fa14 	bl	8009bde <__retarget_lock_acquire_recursive>
 800b7b6:	89ab      	ldrh	r3, [r5, #12]
 800b7b8:	071b      	lsls	r3, r3, #28
 800b7ba:	d501      	bpl.n	800b7c0 <_vfiprintf_r+0x34>
 800b7bc:	692b      	ldr	r3, [r5, #16]
 800b7be:	b99b      	cbnz	r3, 800b7e8 <_vfiprintf_r+0x5c>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 f938 	bl	800ba38 <__swsetup_r>
 800b7c8:	b170      	cbz	r0, 800b7e8 <_vfiprintf_r+0x5c>
 800b7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7cc:	07dc      	lsls	r4, r3, #31
 800b7ce:	d504      	bpl.n	800b7da <_vfiprintf_r+0x4e>
 800b7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d4:	b01d      	add	sp, #116	@ 0x74
 800b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	0598      	lsls	r0, r3, #22
 800b7de:	d4f7      	bmi.n	800b7d0 <_vfiprintf_r+0x44>
 800b7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7e2:	f7fe f9fd 	bl	8009be0 <__retarget_lock_release_recursive>
 800b7e6:	e7f3      	b.n	800b7d0 <_vfiprintf_r+0x44>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ec:	2320      	movs	r3, #32
 800b7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7f6:	2330      	movs	r3, #48	@ 0x30
 800b7f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9a8 <_vfiprintf_r+0x21c>
 800b7fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b800:	f04f 0901 	mov.w	r9, #1
 800b804:	4623      	mov	r3, r4
 800b806:	469a      	mov	sl, r3
 800b808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b80c:	b10a      	cbz	r2, 800b812 <_vfiprintf_r+0x86>
 800b80e:	2a25      	cmp	r2, #37	@ 0x25
 800b810:	d1f9      	bne.n	800b806 <_vfiprintf_r+0x7a>
 800b812:	ebba 0b04 	subs.w	fp, sl, r4
 800b816:	d00b      	beq.n	800b830 <_vfiprintf_r+0xa4>
 800b818:	465b      	mov	r3, fp
 800b81a:	4622      	mov	r2, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff ffa2 	bl	800b768 <__sfputs_r>
 800b824:	3001      	adds	r0, #1
 800b826:	f000 80a7 	beq.w	800b978 <_vfiprintf_r+0x1ec>
 800b82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b82c:	445a      	add	r2, fp
 800b82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b830:	f89a 3000 	ldrb.w	r3, [sl]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 809f 	beq.w	800b978 <_vfiprintf_r+0x1ec>
 800b83a:	2300      	movs	r3, #0
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295
 800b840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b844:	f10a 0a01 	add.w	sl, sl, #1
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	9307      	str	r3, [sp, #28]
 800b84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b850:	931a      	str	r3, [sp, #104]	@ 0x68
 800b852:	4654      	mov	r4, sl
 800b854:	2205      	movs	r2, #5
 800b856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b85a:	4853      	ldr	r0, [pc, #332]	@ (800b9a8 <_vfiprintf_r+0x21c>)
 800b85c:	f7f4 fcd8 	bl	8000210 <memchr>
 800b860:	9a04      	ldr	r2, [sp, #16]
 800b862:	b9d8      	cbnz	r0, 800b89c <_vfiprintf_r+0x110>
 800b864:	06d1      	lsls	r1, r2, #27
 800b866:	bf44      	itt	mi
 800b868:	2320      	movmi	r3, #32
 800b86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b86e:	0713      	lsls	r3, r2, #28
 800b870:	bf44      	itt	mi
 800b872:	232b      	movmi	r3, #43	@ 0x2b
 800b874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b87e:	d015      	beq.n	800b8ac <_vfiprintf_r+0x120>
 800b880:	9a07      	ldr	r2, [sp, #28]
 800b882:	4654      	mov	r4, sl
 800b884:	2000      	movs	r0, #0
 800b886:	f04f 0c0a 	mov.w	ip, #10
 800b88a:	4621      	mov	r1, r4
 800b88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b890:	3b30      	subs	r3, #48	@ 0x30
 800b892:	2b09      	cmp	r3, #9
 800b894:	d94b      	bls.n	800b92e <_vfiprintf_r+0x1a2>
 800b896:	b1b0      	cbz	r0, 800b8c6 <_vfiprintf_r+0x13a>
 800b898:	9207      	str	r2, [sp, #28]
 800b89a:	e014      	b.n	800b8c6 <_vfiprintf_r+0x13a>
 800b89c:	eba0 0308 	sub.w	r3, r0, r8
 800b8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	46a2      	mov	sl, r4
 800b8aa:	e7d2      	b.n	800b852 <_vfiprintf_r+0xc6>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	1d19      	adds	r1, r3, #4
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	9103      	str	r1, [sp, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bfbb      	ittet	lt
 800b8b8:	425b      	neglt	r3, r3
 800b8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b8be:	9307      	strge	r3, [sp, #28]
 800b8c0:	9307      	strlt	r3, [sp, #28]
 800b8c2:	bfb8      	it	lt
 800b8c4:	9204      	strlt	r2, [sp, #16]
 800b8c6:	7823      	ldrb	r3, [r4, #0]
 800b8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ca:	d10a      	bne.n	800b8e2 <_vfiprintf_r+0x156>
 800b8cc:	7863      	ldrb	r3, [r4, #1]
 800b8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d0:	d132      	bne.n	800b938 <_vfiprintf_r+0x1ac>
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	1d1a      	adds	r2, r3, #4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	9203      	str	r2, [sp, #12]
 800b8da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8de:	3402      	adds	r4, #2
 800b8e0:	9305      	str	r3, [sp, #20]
 800b8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b9b8 <_vfiprintf_r+0x22c>
 800b8e6:	7821      	ldrb	r1, [r4, #0]
 800b8e8:	2203      	movs	r2, #3
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	f7f4 fc90 	bl	8000210 <memchr>
 800b8f0:	b138      	cbz	r0, 800b902 <_vfiprintf_r+0x176>
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	eba0 000a 	sub.w	r0, r0, sl
 800b8f8:	2240      	movs	r2, #64	@ 0x40
 800b8fa:	4082      	lsls	r2, r0
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	3401      	adds	r4, #1
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b906:	4829      	ldr	r0, [pc, #164]	@ (800b9ac <_vfiprintf_r+0x220>)
 800b908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b90c:	2206      	movs	r2, #6
 800b90e:	f7f4 fc7f 	bl	8000210 <memchr>
 800b912:	2800      	cmp	r0, #0
 800b914:	d03f      	beq.n	800b996 <_vfiprintf_r+0x20a>
 800b916:	4b26      	ldr	r3, [pc, #152]	@ (800b9b0 <_vfiprintf_r+0x224>)
 800b918:	bb1b      	cbnz	r3, 800b962 <_vfiprintf_r+0x1d6>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	3307      	adds	r3, #7
 800b91e:	f023 0307 	bic.w	r3, r3, #7
 800b922:	3308      	adds	r3, #8
 800b924:	9303      	str	r3, [sp, #12]
 800b926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b928:	443b      	add	r3, r7
 800b92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b92c:	e76a      	b.n	800b804 <_vfiprintf_r+0x78>
 800b92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b932:	460c      	mov	r4, r1
 800b934:	2001      	movs	r0, #1
 800b936:	e7a8      	b.n	800b88a <_vfiprintf_r+0xfe>
 800b938:	2300      	movs	r3, #0
 800b93a:	3401      	adds	r4, #1
 800b93c:	9305      	str	r3, [sp, #20]
 800b93e:	4619      	mov	r1, r3
 800b940:	f04f 0c0a 	mov.w	ip, #10
 800b944:	4620      	mov	r0, r4
 800b946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b94a:	3a30      	subs	r2, #48	@ 0x30
 800b94c:	2a09      	cmp	r2, #9
 800b94e:	d903      	bls.n	800b958 <_vfiprintf_r+0x1cc>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0c6      	beq.n	800b8e2 <_vfiprintf_r+0x156>
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	e7c4      	b.n	800b8e2 <_vfiprintf_r+0x156>
 800b958:	fb0c 2101 	mla	r1, ip, r1, r2
 800b95c:	4604      	mov	r4, r0
 800b95e:	2301      	movs	r3, #1
 800b960:	e7f0      	b.n	800b944 <_vfiprintf_r+0x1b8>
 800b962:	ab03      	add	r3, sp, #12
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	462a      	mov	r2, r5
 800b968:	4b12      	ldr	r3, [pc, #72]	@ (800b9b4 <_vfiprintf_r+0x228>)
 800b96a:	a904      	add	r1, sp, #16
 800b96c:	4630      	mov	r0, r6
 800b96e:	f7fd fb85 	bl	800907c <_printf_float>
 800b972:	4607      	mov	r7, r0
 800b974:	1c78      	adds	r0, r7, #1
 800b976:	d1d6      	bne.n	800b926 <_vfiprintf_r+0x19a>
 800b978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b97a:	07d9      	lsls	r1, r3, #31
 800b97c:	d405      	bmi.n	800b98a <_vfiprintf_r+0x1fe>
 800b97e:	89ab      	ldrh	r3, [r5, #12]
 800b980:	059a      	lsls	r2, r3, #22
 800b982:	d402      	bmi.n	800b98a <_vfiprintf_r+0x1fe>
 800b984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b986:	f7fe f92b 	bl	8009be0 <__retarget_lock_release_recursive>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	065b      	lsls	r3, r3, #25
 800b98e:	f53f af1f 	bmi.w	800b7d0 <_vfiprintf_r+0x44>
 800b992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b994:	e71e      	b.n	800b7d4 <_vfiprintf_r+0x48>
 800b996:	ab03      	add	r3, sp, #12
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	462a      	mov	r2, r5
 800b99c:	4b05      	ldr	r3, [pc, #20]	@ (800b9b4 <_vfiprintf_r+0x228>)
 800b99e:	a904      	add	r1, sp, #16
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f7fd fe03 	bl	80095ac <_printf_i>
 800b9a6:	e7e4      	b.n	800b972 <_vfiprintf_r+0x1e6>
 800b9a8:	0800c6b0 	.word	0x0800c6b0
 800b9ac:	0800c6ba 	.word	0x0800c6ba
 800b9b0:	0800907d 	.word	0x0800907d
 800b9b4:	0800b769 	.word	0x0800b769
 800b9b8:	0800c6b6 	.word	0x0800c6b6

0800b9bc <__swbuf_r>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	460e      	mov	r6, r1
 800b9c0:	4614      	mov	r4, r2
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	b118      	cbz	r0, 800b9ce <__swbuf_r+0x12>
 800b9c6:	6a03      	ldr	r3, [r0, #32]
 800b9c8:	b90b      	cbnz	r3, 800b9ce <__swbuf_r+0x12>
 800b9ca:	f7fd ff9b 	bl	8009904 <__sinit>
 800b9ce:	69a3      	ldr	r3, [r4, #24]
 800b9d0:	60a3      	str	r3, [r4, #8]
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	071a      	lsls	r2, r3, #28
 800b9d6:	d501      	bpl.n	800b9dc <__swbuf_r+0x20>
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	b943      	cbnz	r3, 800b9ee <__swbuf_r+0x32>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f000 f82a 	bl	800ba38 <__swsetup_r>
 800b9e4:	b118      	cbz	r0, 800b9ee <__swbuf_r+0x32>
 800b9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	6922      	ldr	r2, [r4, #16]
 800b9f2:	1a98      	subs	r0, r3, r2
 800b9f4:	6963      	ldr	r3, [r4, #20]
 800b9f6:	b2f6      	uxtb	r6, r6
 800b9f8:	4283      	cmp	r3, r0
 800b9fa:	4637      	mov	r7, r6
 800b9fc:	dc05      	bgt.n	800ba0a <__swbuf_r+0x4e>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4628      	mov	r0, r5
 800ba02:	f7ff fda7 	bl	800b554 <_fflush_r>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d1ed      	bne.n	800b9e6 <__swbuf_r+0x2a>
 800ba0a:	68a3      	ldr	r3, [r4, #8]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	60a3      	str	r3, [r4, #8]
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	6022      	str	r2, [r4, #0]
 800ba16:	701e      	strb	r6, [r3, #0]
 800ba18:	6962      	ldr	r2, [r4, #20]
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d004      	beq.n	800ba2a <__swbuf_r+0x6e>
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	07db      	lsls	r3, r3, #31
 800ba24:	d5e1      	bpl.n	800b9ea <__swbuf_r+0x2e>
 800ba26:	2e0a      	cmp	r6, #10
 800ba28:	d1df      	bne.n	800b9ea <__swbuf_r+0x2e>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	f7ff fd91 	bl	800b554 <_fflush_r>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0d9      	beq.n	800b9ea <__swbuf_r+0x2e>
 800ba36:	e7d6      	b.n	800b9e6 <__swbuf_r+0x2a>

0800ba38 <__swsetup_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4b29      	ldr	r3, [pc, #164]	@ (800bae0 <__swsetup_r+0xa8>)
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	6818      	ldr	r0, [r3, #0]
 800ba40:	460c      	mov	r4, r1
 800ba42:	b118      	cbz	r0, 800ba4c <__swsetup_r+0x14>
 800ba44:	6a03      	ldr	r3, [r0, #32]
 800ba46:	b90b      	cbnz	r3, 800ba4c <__swsetup_r+0x14>
 800ba48:	f7fd ff5c 	bl	8009904 <__sinit>
 800ba4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba50:	0719      	lsls	r1, r3, #28
 800ba52:	d422      	bmi.n	800ba9a <__swsetup_r+0x62>
 800ba54:	06da      	lsls	r2, r3, #27
 800ba56:	d407      	bmi.n	800ba68 <__swsetup_r+0x30>
 800ba58:	2209      	movs	r2, #9
 800ba5a:	602a      	str	r2, [r5, #0]
 800ba5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba60:	81a3      	strh	r3, [r4, #12]
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	e033      	b.n	800bad0 <__swsetup_r+0x98>
 800ba68:	0758      	lsls	r0, r3, #29
 800ba6a:	d512      	bpl.n	800ba92 <__swsetup_r+0x5a>
 800ba6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba6e:	b141      	cbz	r1, 800ba82 <__swsetup_r+0x4a>
 800ba70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba74:	4299      	cmp	r1, r3
 800ba76:	d002      	beq.n	800ba7e <__swsetup_r+0x46>
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7fe ff0d 	bl	800a898 <_free_r>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	6063      	str	r3, [r4, #4]
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	f043 0308 	orr.w	r3, r3, #8
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	6923      	ldr	r3, [r4, #16]
 800ba9c:	b94b      	cbnz	r3, 800bab2 <__swsetup_r+0x7a>
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800baa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baa8:	d003      	beq.n	800bab2 <__swsetup_r+0x7a>
 800baaa:	4621      	mov	r1, r4
 800baac:	4628      	mov	r0, r5
 800baae:	f000 f883 	bl	800bbb8 <__smakebuf_r>
 800bab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab6:	f013 0201 	ands.w	r2, r3, #1
 800baba:	d00a      	beq.n	800bad2 <__swsetup_r+0x9a>
 800babc:	2200      	movs	r2, #0
 800babe:	60a2      	str	r2, [r4, #8]
 800bac0:	6962      	ldr	r2, [r4, #20]
 800bac2:	4252      	negs	r2, r2
 800bac4:	61a2      	str	r2, [r4, #24]
 800bac6:	6922      	ldr	r2, [r4, #16]
 800bac8:	b942      	cbnz	r2, 800badc <__swsetup_r+0xa4>
 800baca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bace:	d1c5      	bne.n	800ba5c <__swsetup_r+0x24>
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	0799      	lsls	r1, r3, #30
 800bad4:	bf58      	it	pl
 800bad6:	6962      	ldrpl	r2, [r4, #20]
 800bad8:	60a2      	str	r2, [r4, #8]
 800bada:	e7f4      	b.n	800bac6 <__swsetup_r+0x8e>
 800badc:	2000      	movs	r0, #0
 800bade:	e7f7      	b.n	800bad0 <__swsetup_r+0x98>
 800bae0:	2000002c 	.word	0x2000002c

0800bae4 <_raise_r>:
 800bae4:	291f      	cmp	r1, #31
 800bae6:	b538      	push	{r3, r4, r5, lr}
 800bae8:	4605      	mov	r5, r0
 800baea:	460c      	mov	r4, r1
 800baec:	d904      	bls.n	800baf8 <_raise_r+0x14>
 800baee:	2316      	movs	r3, #22
 800baf0:	6003      	str	r3, [r0, #0]
 800baf2:	f04f 30ff 	mov.w	r0, #4294967295
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bafa:	b112      	cbz	r2, 800bb02 <_raise_r+0x1e>
 800bafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb00:	b94b      	cbnz	r3, 800bb16 <_raise_r+0x32>
 800bb02:	4628      	mov	r0, r5
 800bb04:	f000 f830 	bl	800bb68 <_getpid_r>
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb12:	f000 b817 	b.w	800bb44 <_kill_r>
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d00a      	beq.n	800bb30 <_raise_r+0x4c>
 800bb1a:	1c59      	adds	r1, r3, #1
 800bb1c:	d103      	bne.n	800bb26 <_raise_r+0x42>
 800bb1e:	2316      	movs	r3, #22
 800bb20:	6003      	str	r3, [r0, #0]
 800bb22:	2001      	movs	r0, #1
 800bb24:	e7e7      	b.n	800baf6 <_raise_r+0x12>
 800bb26:	2100      	movs	r1, #0
 800bb28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4798      	blx	r3
 800bb30:	2000      	movs	r0, #0
 800bb32:	e7e0      	b.n	800baf6 <_raise_r+0x12>

0800bb34 <raise>:
 800bb34:	4b02      	ldr	r3, [pc, #8]	@ (800bb40 <raise+0xc>)
 800bb36:	4601      	mov	r1, r0
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	f7ff bfd3 	b.w	800bae4 <_raise_r>
 800bb3e:	bf00      	nop
 800bb40:	2000002c 	.word	0x2000002c

0800bb44 <_kill_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	@ (800bb64 <_kill_r+0x20>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	4611      	mov	r1, r2
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	f7f6 fba1 	bl	8002298 <_kill>
 800bb56:	1c43      	adds	r3, r0, #1
 800bb58:	d102      	bne.n	800bb60 <_kill_r+0x1c>
 800bb5a:	682b      	ldr	r3, [r5, #0]
 800bb5c:	b103      	cbz	r3, 800bb60 <_kill_r+0x1c>
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	bd38      	pop	{r3, r4, r5, pc}
 800bb62:	bf00      	nop
 800bb64:	20012904 	.word	0x20012904

0800bb68 <_getpid_r>:
 800bb68:	f7f6 bb8e 	b.w	8002288 <_getpid>

0800bb6c <__swhatbuf_r>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	460c      	mov	r4, r1
 800bb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb74:	2900      	cmp	r1, #0
 800bb76:	b096      	sub	sp, #88	@ 0x58
 800bb78:	4615      	mov	r5, r2
 800bb7a:	461e      	mov	r6, r3
 800bb7c:	da0d      	bge.n	800bb9a <__swhatbuf_r+0x2e>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb84:	f04f 0100 	mov.w	r1, #0
 800bb88:	bf14      	ite	ne
 800bb8a:	2340      	movne	r3, #64	@ 0x40
 800bb8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb90:	2000      	movs	r0, #0
 800bb92:	6031      	str	r1, [r6, #0]
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	b016      	add	sp, #88	@ 0x58
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	466a      	mov	r2, sp
 800bb9c:	f000 f848 	bl	800bc30 <_fstat_r>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	dbec      	blt.n	800bb7e <__swhatbuf_r+0x12>
 800bba4:	9901      	ldr	r1, [sp, #4]
 800bba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bbaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bbae:	4259      	negs	r1, r3
 800bbb0:	4159      	adcs	r1, r3
 800bbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbb6:	e7eb      	b.n	800bb90 <__swhatbuf_r+0x24>

0800bbb8 <__smakebuf_r>:
 800bbb8:	898b      	ldrh	r3, [r1, #12]
 800bbba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	d507      	bpl.n	800bbd4 <__smakebuf_r+0x1c>
 800bbc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	6123      	str	r3, [r4, #16]
 800bbcc:	2301      	movs	r3, #1
 800bbce:	6163      	str	r3, [r4, #20]
 800bbd0:	b003      	add	sp, #12
 800bbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbd4:	ab01      	add	r3, sp, #4
 800bbd6:	466a      	mov	r2, sp
 800bbd8:	f7ff ffc8 	bl	800bb6c <__swhatbuf_r>
 800bbdc:	9f00      	ldr	r7, [sp, #0]
 800bbde:	4605      	mov	r5, r0
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7fe fecc 	bl	800a980 <_malloc_r>
 800bbe8:	b948      	cbnz	r0, 800bbfe <__smakebuf_r+0x46>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	059a      	lsls	r2, r3, #22
 800bbf0:	d4ee      	bmi.n	800bbd0 <__smakebuf_r+0x18>
 800bbf2:	f023 0303 	bic.w	r3, r3, #3
 800bbf6:	f043 0302 	orr.w	r3, r3, #2
 800bbfa:	81a3      	strh	r3, [r4, #12]
 800bbfc:	e7e2      	b.n	800bbc4 <__smakebuf_r+0xc>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	6020      	str	r0, [r4, #0]
 800bc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc0e:	b15b      	cbz	r3, 800bc28 <__smakebuf_r+0x70>
 800bc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 f81d 	bl	800bc54 <_isatty_r>
 800bc1a:	b128      	cbz	r0, 800bc28 <__smakebuf_r+0x70>
 800bc1c:	89a3      	ldrh	r3, [r4, #12]
 800bc1e:	f023 0303 	bic.w	r3, r3, #3
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	81a3      	strh	r3, [r4, #12]
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	431d      	orrs	r5, r3
 800bc2c:	81a5      	strh	r5, [r4, #12]
 800bc2e:	e7cf      	b.n	800bbd0 <__smakebuf_r+0x18>

0800bc30 <_fstat_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	@ (800bc50 <_fstat_r+0x20>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f7f6 fb8b 	bl	8002358 <_fstat>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d102      	bne.n	800bc4c <_fstat_r+0x1c>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b103      	cbz	r3, 800bc4c <_fstat_r+0x1c>
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	bf00      	nop
 800bc50:	20012904 	.word	0x20012904

0800bc54 <_isatty_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4d06      	ldr	r5, [pc, #24]	@ (800bc70 <_isatty_r+0x1c>)
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	4608      	mov	r0, r1
 800bc5e:	602b      	str	r3, [r5, #0]
 800bc60:	f7f6 fb8a 	bl	8002378 <_isatty>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_isatty_r+0x1a>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_isatty_r+0x1a>
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	20012904 	.word	0x20012904

0800bc74 <atan2f>:
 800bc74:	f000 b800 	b.w	800bc78 <__ieee754_atan2f>

0800bc78 <__ieee754_atan2f>:
 800bc78:	ee10 2a90 	vmov	r2, s1
 800bc7c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bc80:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc84:	b510      	push	{r4, lr}
 800bc86:	eef0 7a40 	vmov.f32	s15, s0
 800bc8a:	d806      	bhi.n	800bc9a <__ieee754_atan2f+0x22>
 800bc8c:	ee10 0a10 	vmov	r0, s0
 800bc90:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bc94:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc98:	d904      	bls.n	800bca4 <__ieee754_atan2f+0x2c>
 800bc9a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bc9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bca2:	bd10      	pop	{r4, pc}
 800bca4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bca8:	d103      	bne.n	800bcb2 <__ieee754_atan2f+0x3a>
 800bcaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcae:	f000 b883 	b.w	800bdb8 <atanf>
 800bcb2:	1794      	asrs	r4, r2, #30
 800bcb4:	f004 0402 	and.w	r4, r4, #2
 800bcb8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bcbc:	b943      	cbnz	r3, 800bcd0 <__ieee754_atan2f+0x58>
 800bcbe:	2c02      	cmp	r4, #2
 800bcc0:	d05e      	beq.n	800bd80 <__ieee754_atan2f+0x108>
 800bcc2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bd94 <__ieee754_atan2f+0x11c>
 800bcc6:	2c03      	cmp	r4, #3
 800bcc8:	bf08      	it	eq
 800bcca:	eef0 7a47 	vmoveq.f32	s15, s14
 800bcce:	e7e6      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bcd0:	b941      	cbnz	r1, 800bce4 <__ieee754_atan2f+0x6c>
 800bcd2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bd98 <__ieee754_atan2f+0x120>
 800bcd6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bd9c <__ieee754_atan2f+0x124>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	bfb8      	it	lt
 800bcde:	eef0 7a47 	vmovlt.f32	s15, s14
 800bce2:	e7dc      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bce4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bce8:	d110      	bne.n	800bd0c <__ieee754_atan2f+0x94>
 800bcea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bcee:	f104 34ff 	add.w	r4, r4, #4294967295
 800bcf2:	d107      	bne.n	800bd04 <__ieee754_atan2f+0x8c>
 800bcf4:	2c02      	cmp	r4, #2
 800bcf6:	d846      	bhi.n	800bd86 <__ieee754_atan2f+0x10e>
 800bcf8:	4b29      	ldr	r3, [pc, #164]	@ (800bda0 <__ieee754_atan2f+0x128>)
 800bcfa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bcfe:	edd3 7a00 	vldr	s15, [r3]
 800bd02:	e7cc      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd04:	2c02      	cmp	r4, #2
 800bd06:	d841      	bhi.n	800bd8c <__ieee754_atan2f+0x114>
 800bd08:	4b26      	ldr	r3, [pc, #152]	@ (800bda4 <__ieee754_atan2f+0x12c>)
 800bd0a:	e7f6      	b.n	800bcfa <__ieee754_atan2f+0x82>
 800bd0c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd10:	d0df      	beq.n	800bcd2 <__ieee754_atan2f+0x5a>
 800bd12:	1a5b      	subs	r3, r3, r1
 800bd14:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800bd18:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bd1c:	da1a      	bge.n	800bd54 <__ieee754_atan2f+0xdc>
 800bd1e:	2a00      	cmp	r2, #0
 800bd20:	da01      	bge.n	800bd26 <__ieee754_atan2f+0xae>
 800bd22:	313c      	adds	r1, #60	@ 0x3c
 800bd24:	db19      	blt.n	800bd5a <__ieee754_atan2f+0xe2>
 800bd26:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bd2a:	f000 f919 	bl	800bf60 <fabsf>
 800bd2e:	f000 f843 	bl	800bdb8 <atanf>
 800bd32:	eef0 7a40 	vmov.f32	s15, s0
 800bd36:	2c01      	cmp	r4, #1
 800bd38:	d012      	beq.n	800bd60 <__ieee754_atan2f+0xe8>
 800bd3a:	2c02      	cmp	r4, #2
 800bd3c:	d017      	beq.n	800bd6e <__ieee754_atan2f+0xf6>
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	d0ad      	beq.n	800bc9e <__ieee754_atan2f+0x26>
 800bd42:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bda8 <__ieee754_atan2f+0x130>
 800bd46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd4a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bdac <__ieee754_atan2f+0x134>
 800bd4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd52:	e7a4      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd54:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800bd98 <__ieee754_atan2f+0x120>
 800bd58:	e7ed      	b.n	800bd36 <__ieee754_atan2f+0xbe>
 800bd5a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bdb0 <__ieee754_atan2f+0x138>
 800bd5e:	e7ea      	b.n	800bd36 <__ieee754_atan2f+0xbe>
 800bd60:	ee17 3a90 	vmov	r3, s15
 800bd64:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	e797      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd6e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bda8 <__ieee754_atan2f+0x130>
 800bd72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd76:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bdac <__ieee754_atan2f+0x134>
 800bd7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd7e:	e78e      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd80:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bdac <__ieee754_atan2f+0x134>
 800bd84:	e78b      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd86:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bdb4 <__ieee754_atan2f+0x13c>
 800bd8a:	e788      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd8c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bdb0 <__ieee754_atan2f+0x138>
 800bd90:	e785      	b.n	800bc9e <__ieee754_atan2f+0x26>
 800bd92:	bf00      	nop
 800bd94:	c0490fdb 	.word	0xc0490fdb
 800bd98:	3fc90fdb 	.word	0x3fc90fdb
 800bd9c:	bfc90fdb 	.word	0xbfc90fdb
 800bda0:	0800c814 	.word	0x0800c814
 800bda4:	0800c808 	.word	0x0800c808
 800bda8:	33bbbd2e 	.word	0x33bbbd2e
 800bdac:	40490fdb 	.word	0x40490fdb
 800bdb0:	00000000 	.word	0x00000000
 800bdb4:	3f490fdb 	.word	0x3f490fdb

0800bdb8 <atanf>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	ee10 5a10 	vmov	r5, s0
 800bdbe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bdc2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800bdc6:	eef0 7a40 	vmov.f32	s15, s0
 800bdca:	d310      	bcc.n	800bdee <atanf+0x36>
 800bdcc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bdd0:	d904      	bls.n	800bddc <atanf+0x24>
 800bdd2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bdd6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bf14 <atanf+0x15c>
 800bde0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bf18 <atanf+0x160>
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	bfc8      	it	gt
 800bde8:	eef0 7a47 	vmovgt.f32	s15, s14
 800bdec:	e7f3      	b.n	800bdd6 <atanf+0x1e>
 800bdee:	4b4b      	ldr	r3, [pc, #300]	@ (800bf1c <atanf+0x164>)
 800bdf0:	429c      	cmp	r4, r3
 800bdf2:	d810      	bhi.n	800be16 <atanf+0x5e>
 800bdf4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bdf8:	d20a      	bcs.n	800be10 <atanf+0x58>
 800bdfa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800bf20 <atanf+0x168>
 800bdfe:	ee30 7a07 	vadd.f32	s14, s0, s14
 800be02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be06:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800be0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0e:	dce2      	bgt.n	800bdd6 <atanf+0x1e>
 800be10:	f04f 33ff 	mov.w	r3, #4294967295
 800be14:	e013      	b.n	800be3e <atanf+0x86>
 800be16:	f000 f8a3 	bl	800bf60 <fabsf>
 800be1a:	4b42      	ldr	r3, [pc, #264]	@ (800bf24 <atanf+0x16c>)
 800be1c:	429c      	cmp	r4, r3
 800be1e:	d84f      	bhi.n	800bec0 <atanf+0x108>
 800be20:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800be24:	429c      	cmp	r4, r3
 800be26:	d841      	bhi.n	800beac <atanf+0xf4>
 800be28:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800be2c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800be30:	eea0 7a27 	vfma.f32	s14, s0, s15
 800be34:	2300      	movs	r3, #0
 800be36:	ee30 0a27 	vadd.f32	s0, s0, s15
 800be3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800be44:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bf28 <atanf+0x170>
 800be48:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800bf2c <atanf+0x174>
 800be4c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bf30 <atanf+0x178>
 800be50:	ee66 6a06 	vmul.f32	s13, s12, s12
 800be54:	eee6 5a87 	vfma.f32	s11, s13, s14
 800be58:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bf34 <atanf+0x17c>
 800be5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800be60:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bf38 <atanf+0x180>
 800be64:	eee7 5a26 	vfma.f32	s11, s14, s13
 800be68:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bf3c <atanf+0x184>
 800be6c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800be70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bf40 <atanf+0x188>
 800be74:	eee7 5a26 	vfma.f32	s11, s14, s13
 800be78:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bf44 <atanf+0x18c>
 800be7c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800be80:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bf48 <atanf+0x190>
 800be84:	eea5 7a26 	vfma.f32	s14, s10, s13
 800be88:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bf4c <atanf+0x194>
 800be8c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800be90:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bf50 <atanf+0x198>
 800be94:	eea5 7a26 	vfma.f32	s14, s10, s13
 800be98:	ee27 7a26 	vmul.f32	s14, s14, s13
 800be9c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bea4:	d121      	bne.n	800beea <atanf+0x132>
 800bea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800beaa:	e794      	b.n	800bdd6 <atanf+0x1e>
 800beac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800beb0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800beb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800beb8:	2301      	movs	r3, #1
 800beba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bebe:	e7be      	b.n	800be3e <atanf+0x86>
 800bec0:	4b24      	ldr	r3, [pc, #144]	@ (800bf54 <atanf+0x19c>)
 800bec2:	429c      	cmp	r4, r3
 800bec4:	d80b      	bhi.n	800bede <atanf+0x126>
 800bec6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800beca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bece:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bed2:	2302      	movs	r3, #2
 800bed4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bedc:	e7af      	b.n	800be3e <atanf+0x86>
 800bede:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bee2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bee6:	2303      	movs	r3, #3
 800bee8:	e7a9      	b.n	800be3e <atanf+0x86>
 800beea:	4a1b      	ldr	r2, [pc, #108]	@ (800bf58 <atanf+0x1a0>)
 800beec:	491b      	ldr	r1, [pc, #108]	@ (800bf5c <atanf+0x1a4>)
 800beee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bef2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bef6:	edd3 6a00 	vldr	s13, [r3]
 800befa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800befe:	2d00      	cmp	r5, #0
 800bf00:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf04:	edd2 7a00 	vldr	s15, [r2]
 800bf08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf0c:	bfb8      	it	lt
 800bf0e:	eef1 7a67 	vneglt.f32	s15, s15
 800bf12:	e760      	b.n	800bdd6 <atanf+0x1e>
 800bf14:	bfc90fdb 	.word	0xbfc90fdb
 800bf18:	3fc90fdb 	.word	0x3fc90fdb
 800bf1c:	3edfffff 	.word	0x3edfffff
 800bf20:	7149f2ca 	.word	0x7149f2ca
 800bf24:	3f97ffff 	.word	0x3f97ffff
 800bf28:	3c8569d7 	.word	0x3c8569d7
 800bf2c:	3d4bda59 	.word	0x3d4bda59
 800bf30:	bd6ef16b 	.word	0xbd6ef16b
 800bf34:	3d886b35 	.word	0x3d886b35
 800bf38:	3dba2e6e 	.word	0x3dba2e6e
 800bf3c:	3e124925 	.word	0x3e124925
 800bf40:	3eaaaaab 	.word	0x3eaaaaab
 800bf44:	bd15a221 	.word	0xbd15a221
 800bf48:	bd9d8795 	.word	0xbd9d8795
 800bf4c:	bde38e38 	.word	0xbde38e38
 800bf50:	be4ccccd 	.word	0xbe4ccccd
 800bf54:	401bffff 	.word	0x401bffff
 800bf58:	0800c830 	.word	0x0800c830
 800bf5c:	0800c820 	.word	0x0800c820

0800bf60 <fabsf>:
 800bf60:	ee10 3a10 	vmov	r3, s0
 800bf64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf68:	ee00 3a10 	vmov	s0, r3
 800bf6c:	4770      	bx	lr
	...

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr


Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e138  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800e308  0800e308  0000f308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee78  0800ee78  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee78  0800ee78  0000fe78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee80  0800ee80  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee80  0800ee80  0000fe80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee84  0800ee84  0000fe84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800ee88  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aa24  200001f8  0800f080  000101f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ac1c  0800f080  00010c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026191  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000571b  00000000  00000000  000363b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0003bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001439  00000000  00000000  0003d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ec3  00000000  00000000  0003e981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027cee  00000000  00000000  00068844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e21b2  00000000  00000000  00090532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001726e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce8  00000000  00000000  00172728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000090  00000000  00000000  0017a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0017a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e2f0 	.word	0x0800e2f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800e2f0 	.word	0x0800e2f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <RingBuffer_ctor>:
#include <RingBuffer.h>

RB_STATUS RingBuffer_ctor(RingBuffer * const rb,
                          uint32_t const capacity,
                          RingBuffer_t * const buffer)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
    // If capacity is 0 or buffer is a nullptr, return failure.
    if(!capacity || !buffer) {
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <RingBuffer_ctor+0x18>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <RingBuffer_ctor+0x1c>
        return RB_FAILURE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00f      	b.n	8000fb4 <RingBuffer_ctor+0x3c>
    }
    // Else, initialize values and return success.
    rb->capacity = capacity;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	601a      	str	r2, [r3, #0]
    rb->buffer   = buffer;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	611a      	str	r2, [r3, #16]
    rb->size     = (uint32_t)0;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
    rb->head     = (uint32_t)0;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    rb->tail     = (uint32_t)0;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]

    return RB_SUCCESS;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <RingBuffer_enqueue>:

RB_STATUS RingBuffer_enqueue(RingBuffer * const rb,
                             RingBuffer_t const item)
{
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b4b0      	push	{r4, r5, r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	f107 001c 	add.w	r0, r7, #28
 8000fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Add item to head end of RingBuffer. Overwrite old data if necessary.
    rb->buffer[rb->head] = item;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	f107 041c 	add.w	r4, r7, #28
 8000fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff6:	e885 0003 	stmia.w	r5, {r0, r1}
    // If head is at the end of memory, wrap around to 0.
    if(++rb->head == rb->capacity) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d102      	bne.n	8001016 <RingBuffer_enqueue+0x56>
        rb->head = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    }
    // Increment size if not already at capacity.
    if(rb->size < rb->capacity) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d205      	bcs.n	800102e <RingBuffer_enqueue+0x6e>
        rb->size++;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	e00d      	b.n	800104a <RingBuffer_enqueue+0x8a>
    } else {
        // Otherwise, increment tail so that we're still reading oldest data.
        if(++rb->tail == rb->capacity) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d102      	bne.n	800104a <RingBuffer_enqueue+0x8a>
            rb->tail = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
        }
    }
    // Return success to calling function.
    return RB_SUCCESS;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bcb0      	pop	{r4, r5, r7}
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr

08001058 <RingBuffer_dequeue>:

RB_STATUS RingBuffer_dequeue(RingBuffer * const rb,
                             RingBuffer_t * const item)
{
 8001058:	b4b0      	push	{r4, r5, r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    // If RingBuffer is empty, return failure.
    if(!rb->size) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <RingBuffer_dequeue+0x16>
        return RB_FAILURE;
 800106a:	2301      	movs	r3, #1
 800106c:	e027      	b.n	80010be <RingBuffer_dequeue+0x66>
    } else {
        // Otherwise, take item from tail end of RingBuffer.
        *item = rb->buffer[rb->tail];
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6919      	ldr	r1, [r3, #16]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	4614      	mov	r4, r2
 8001084:	461d      	mov	r5, r3
 8001086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001092:	e884 0003 	stmia.w	r4, {r0, r1}
        // If tail is at the end of memory, wrap around to 0.
        if(++rb->tail == rb->capacity) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d102      	bne.n	80010b2 <RingBuffer_dequeue+0x5a>
          rb->tail = 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
        }
        // Decrement the size of the buffer.
        rb->size--;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	1e5a      	subs	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
    }
    // Return success to calling function.
    return RB_SUCCESS;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bcb0      	pop	{r4, r5, r7}
 80010c6:	4770      	bx	lr

080010c8 <set_initial_conditions>:
/******************************/
/*      HELPER FUNCTIONS      */
/******************************/

static inline void set_initial_conditions(StateMachine * const sm)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	f5ad 5d9d 	sub.w	sp, sp, #5024	@ 0x13a0
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80010d4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010d8:	6018      	str	r0, [r3, #0]
    *sm = (StateMachine){
 80010da:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80010de:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f241 3398 	movw	r3, #5016	@ 0x1398
 80010ea:	461a      	mov	r2, r3
 80010ec:	2100      	movs	r1, #0
 80010ee:	f00a fe62 	bl	800bdb6 <memset>
 80010f2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80010f6:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
 8001102:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001106:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001110:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001112:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001116:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001120:	675a      	str	r2, [r3, #116]	@ 0x74
 8001122:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001126:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001130:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001134:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001138:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001142:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8001146:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800114a:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001154:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8001158:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800115c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001166:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800116a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800116e:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001178:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800117c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001180:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800118a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 800118e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001192:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a42      	ldr	r2, [pc, #264]	@ (80012a4 <set_initial_conditions+0x1dc>)
 800119a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 800119e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80011a2:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80011ac:	4a3d      	ldr	r2, [pc, #244]	@ (80012a4 <set_initial_conditions+0x1dc>)
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80011b4:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 80011be:	4a39      	ldr	r2, [pc, #228]	@ (80012a4 <set_initial_conditions+0x1dc>)
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80011c6:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80011d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80011da:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80011e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80011ee:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 80011f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001202:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800120c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001216:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8001220:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <set_initial_conditions+0x1e0>)
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001228:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
 8001232:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <set_initial_conditions+0x1e0>)
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800123a:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <set_initial_conditions+0x1e0>)
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800124c:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001256:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001260:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 800126a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001274:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f203 5324 	addw	r3, r3, #1316	@ 0x524
 800127e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8001288:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8001292:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001296:	601a      	str	r2, [r3, #0]
        .Rp = {{1}},
        .Rg = {{1, 0, 0},
               {0, 1, 0},
               {0, 0, 1}}
    };
}
 8001298:	bf00      	nop
 800129a:	f507 579d 	add.w	r7, r7, #5024	@ 0x13a0
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	3c20ac12 	.word	0x3c20ac12
 80012a8:	3c71021b 	.word	0x3c71021b

080012ac <SM_ctor>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void SM_ctor(StateMachine * const sm)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    // Set initial conditions for state machine.
    set_initial_conditions(sm);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff07 	bl	80010c8 <set_initial_conditions>

    // Initialize fundamental matrices for matrix computations.
    arm_mat_init_f32(&sm->x_instance, dim_x, 1, sm->x[0]);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 80012c0:	3008      	adds	r0, #8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	2109      	movs	r1, #9
 80012c8:	f002 ff18 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->F_instance, dim_x, dim_x, sm->F[0]);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 80012d2:	3010      	adds	r0, #16
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3324      	adds	r3, #36	@ 0x24
 80012d8:	2209      	movs	r2, #9
 80012da:	2109      	movs	r1, #9
 80012dc:	f002 ff0e 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->P_instance, dim_x, dim_x, sm->P[0]);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 80012e6:	3018      	adds	r0, #24
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80012ee:	2209      	movs	r2, #9
 80012f0:	2109      	movs	r1, #9
 80012f2:	f002 ff03 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Q_instance, dim_x, dim_x, sm->Q[0]);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8001302:	2209      	movs	r2, #9
 8001304:	2109      	movs	r1, #9
 8001306:	f002 fef9 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Ha_instance, dim_za, dim_x, sm->Ha[0]);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001310:	3008      	adds	r0, #8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8001318:	2209      	movs	r2, #9
 800131a:	2103      	movs	r1, #3
 800131c:	f002 feee 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hp_instance, dim_zp, dim_x, sm->Hp[0]);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001326:	3010      	adds	r0, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f203 435c 	addw	r3, r3, #1116	@ 0x45c
 800132e:	2209      	movs	r2, #9
 8001330:	2101      	movs	r1, #1
 8001332:	f002 fee3 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hg_instance, dim_zg, dim_x, sm->Hg[0]);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 800133c:	3018      	adds	r0, #24
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8001344:	2209      	movs	r2, #9
 8001346:	2103      	movs	r1, #3
 8001348:	f002 fed8 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Ra_instance, dim_za, dim_za, sm->Ra[0]);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8001358:	2203      	movs	r2, #3
 800135a:	2103      	movs	r1, #3
 800135c:	f002 fece 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Rp_instance, dim_zp, dim_zp, sm->Rp[0]);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001366:	3008      	adds	r0, #8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800136e:	2201      	movs	r2, #1
 8001370:	2101      	movs	r1, #1
 8001372:	f002 fec3 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Rg_instance, dim_zg, dim_zg, sm->Rg[0]);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 800137c:	3010      	adds	r0, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8001384:	2203      	movs	r2, #3
 8001386:	2103      	movs	r1, #3
 8001388:	f002 feb8 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->ya_instance, dim_za, 1, sm->ya[0]);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001392:	3018      	adds	r0, #24
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f503 63a7 	add.w	r3, r3, #1336	@ 0x538
 800139a:	2201      	movs	r2, #1
 800139c:	2103      	movs	r1, #3
 800139e:	f002 fead 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->yp_instance, dim_zp, 1, sm->yp[0]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80013ae:	2201      	movs	r2, #1
 80013b0:	2101      	movs	r1, #1
 80013b2:	f002 fea3 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->yg_instance, dim_zg, 1, sm->yg[0]);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 80013bc:	3008      	adds	r0, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f503 63a9 	add.w	r3, r3, #1352	@ 0x548
 80013c4:	2201      	movs	r2, #1
 80013c6:	2103      	movs	r1, #3
 80013c8:	f002 fe98 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Ka_instance, dim_x, dim_za, sm->Ka[0]);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 80013d2:	3010      	adds	r0, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f203 5354 	addw	r3, r3, #1364	@ 0x554
 80013da:	2203      	movs	r2, #3
 80013dc:	2109      	movs	r1, #9
 80013de:	f002 fe8d 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Kp_instance, dim_x, dim_zp, sm->Kp[0]);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 80013e8:	3018      	adds	r0, #24
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80013f0:	2201      	movs	r2, #1
 80013f2:	2109      	movs	r1, #9
 80013f4:	f002 fe82 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Kg_instance, dim_x, dim_zg, sm->Kg[0]);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f203 53e4 	addw	r3, r3, #1508	@ 0x5e4
 8001404:	2203      	movs	r2, #3
 8001406:	2109      	movs	r1, #9
 8001408:	f002 fe78 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->I_instance, dim_x, dim_x, sm->I[0]);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001412:	3008      	adds	r0, #8
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 800141a:	2209      	movs	r2, #9
 800141c:	2109      	movs	r1, #9
 800141e:	f002 fe6d 	bl	80040fc <arm_mat_init_f32>

    // Initialize matrices to store intermediate products.
    arm_mat_init_f32(&sm->Ft_instance, dim_x, dim_x, sm->Ft[0]);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001428:	3010      	adds	r0, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f203 7394 	addw	r3, r3, #1940	@ 0x794
 8001430:	2209      	movs	r2, #9
 8001432:	2109      	movs	r1, #9
 8001434:	f002 fe62 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->FP_instance, dim_x, dim_x, sm->FP[0]);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 800143e:	3018      	adds	r0, #24
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f603 03d8 	addw	r3, r3, #2264	@ 0x8d8
 8001446:	2209      	movs	r2, #9
 8001448:	2109      	movs	r1, #9
 800144a:	f002 fe57 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->FPFt_instance, dim_x, dim_x, sm->FPFt[0]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f603 231c 	addw	r3, r3, #2588	@ 0xa1c
 800145a:	2209      	movs	r2, #9
 800145c:	2109      	movs	r1, #9
 800145e:	f002 fe4d 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hxa_instance, dim_za, 1, sm->Hxa[0]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001468:	3008      	adds	r0, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f503 6336 	add.w	r3, r3, #2912	@ 0xb60
 8001470:	2201      	movs	r2, #1
 8001472:	2103      	movs	r1, #3
 8001474:	f002 fe42 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hxp_instance, dim_zp, 1, sm->Hxp[0]);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 800147e:	3010      	adds	r0, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f603 336c 	addw	r3, r3, #2924	@ 0xb6c
 8001486:	2201      	movs	r2, #1
 8001488:	2101      	movs	r1, #1
 800148a:	f002 fe37 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hxg_instance, dim_zg, 1, sm->Hxg[0]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001494:	3018      	adds	r0, #24
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 6337 	add.w	r3, r3, #2928	@ 0xb70
 800149c:	2201      	movs	r2, #1
 800149e:	2103      	movs	r1, #3
 80014a0:	f002 fe2c 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Hta_instance, dim_x, dim_za, sm->Hta[0]);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f603 337c 	addw	r3, r3, #2940	@ 0xb7c
 80014b0:	2203      	movs	r2, #3
 80014b2:	2109      	movs	r1, #9
 80014b4:	f002 fe22 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Htp_instance, dim_x, dim_zp, sm->Htp[0]);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 80014be:	3008      	adds	r0, #8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 80014c6:	2201      	movs	r2, #1
 80014c8:	2109      	movs	r1, #9
 80014ca:	f002 fe17 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Htg_instance, dim_x, dim_zg, sm->Htg[0]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 80014d4:	3010      	adds	r0, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f603 430c 	addw	r3, r3, #3084	@ 0xc0c
 80014dc:	2203      	movs	r2, #3
 80014de:	2109      	movs	r1, #9
 80014e0:	f002 fe0c 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->PHta_instance, dim_x, dim_za, sm->PHta[0]);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 80014ea:	3018      	adds	r0, #24
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f603 4378 	addw	r3, r3, #3192	@ 0xc78
 80014f2:	2203      	movs	r2, #3
 80014f4:	2109      	movs	r1, #9
 80014f6:	f002 fe01 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->PHtp_instance, dim_x, dim_zp, sm->PHtp[0]);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8001506:	2201      	movs	r2, #1
 8001508:	2109      	movs	r1, #9
 800150a:	f002 fdf7 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->PHtg_instance, dim_x, dim_zg, sm->PHtg[0]);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001514:	3008      	adds	r0, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800151c:	2203      	movs	r2, #3
 800151e:	2109      	movs	r1, #9
 8001520:	f002 fdec 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->HPHta_instance, dim_za, dim_za, sm->HPHta[0]);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 800152a:	3010      	adds	r0, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f603 5374 	addw	r3, r3, #3444	@ 0xd74
 8001532:	2203      	movs	r2, #3
 8001534:	2103      	movs	r1, #3
 8001536:	f002 fde1 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->HPHtp_instance, dim_zp, dim_zp, sm->HPHtp[0]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001540:	3018      	adds	r0, #24
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f603 5398 	addw	r3, r3, #3480	@ 0xd98
 8001548:	2201      	movs	r2, #1
 800154a:	2101      	movs	r1, #1
 800154c:	f002 fdd6 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->HPHtg_instance, dim_zg, dim_zg, sm->HPHtg[0]);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f603 539c 	addw	r3, r3, #3484	@ 0xd9c
 800155c:	2203      	movs	r2, #3
 800155e:	2103      	movs	r1, #3
 8001560:	f002 fdcc 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sa_instance, dim_za, dim_za, sm->Sa[0]);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 800156a:	3008      	adds	r0, #8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 635c 	add.w	r3, r3, #3520	@ 0xdc0
 8001572:	2203      	movs	r2, #3
 8001574:	2103      	movs	r1, #3
 8001576:	f002 fdc1 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sp_instance, dim_zp, dim_zp, sm->Sp[0]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001580:	3010      	adds	r0, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f603 53e4 	addw	r3, r3, #3556	@ 0xde4
 8001588:	2201      	movs	r2, #1
 800158a:	2101      	movs	r1, #1
 800158c:	f002 fdb6 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sg_instance, dim_zg, dim_zg, sm->Sg[0]);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001596:	3018      	adds	r0, #24
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 800159e:	2203      	movs	r2, #3
 80015a0:	2103      	movs	r1, #3
 80015a2:	f002 fdab 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sia_instance, dim_za, dim_za, sm->Sia[0]);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f603 630c 	addw	r3, r3, #3596	@ 0xe0c
 80015b2:	2203      	movs	r2, #3
 80015b4:	2103      	movs	r1, #3
 80015b6:	f002 fda1 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sip_instance, dim_zp, dim_zp, sm->Sip[0]);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 80015c0:	3008      	adds	r0, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 80015c8:	2201      	movs	r2, #1
 80015ca:	2101      	movs	r1, #1
 80015cc:	f002 fd96 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Sig_instance, dim_zg, dim_zg, sm->Sig[0]);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 80015d6:	3010      	adds	r0, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 80015de:	2203      	movs	r2, #3
 80015e0:	2103      	movs	r1, #3
 80015e2:	f002 fd8b 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->Ky_instance, dim_x, 1, sm->Ky[0]);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 80015ec:	3018      	adds	r0, #24
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 80015f4:	2201      	movs	r2, #1
 80015f6:	2109      	movs	r1, #9
 80015f8:	f002 fd80 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->KH_instance, dim_x, dim_x, sm->KH[0]);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f603 637c 	addw	r3, r3, #3708	@ 0xe7c
 8001608:	2209      	movs	r2, #9
 800160a:	2109      	movs	r1, #9
 800160c:	f002 fd76 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->IKH_instance, dim_x, dim_x, sm->IKH[0]);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 8001616:	3008      	adds	r0, #8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f503 637c 	add.w	r3, r3, #4032	@ 0xfc0
 800161e:	2209      	movs	r2, #9
 8001620:	2109      	movs	r1, #9
 8001622:	f002 fd6b 	bl	80040fc <arm_mat_init_f32>
    arm_mat_init_f32(&sm->IKHP_instance, dim_x, dim_x, sm->IKHP[0]);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 800162c:	3010      	adds	r0, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8001634:	3304      	adds	r3, #4
 8001636:	2209      	movs	r2, #9
 8001638:	2109      	movs	r1, #9
 800163a:	f002 fd5f 	bl	80040fc <arm_mat_init_f32>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <SM_set_timestep>:

void SM_set_timestep(StateMachine * const sm,
                      float const dt)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	ed87 0a00 	vstr	s0, [r7]
    // Update process and noise matrices to reflect time step for
    //  most recent sensor update.
    sm->Q[2][2] = dt;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
    sm->Q[5][5] = dt;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374
    sm->Q[8][8] = dt;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    sm->F[0][1] = dt;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28
    sm->F[0][2] = 0.5 * dt * dt;
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <SM_set_timestep+0x110>)
 800167e:	f7fe ffdb 	bl	8000638 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f7fe ff7c 	bl	8000588 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7fe ffce 	bl	8000638 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff faa0 	bl	8000be8 <__aeabi_d2f>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    sm->F[1][2] = dt;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	651a      	str	r2, [r3, #80]	@ 0x50
    sm->F[3][4] = dt;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    sm->F[3][5] = 0.5 * dt * dt;
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f7fe ff63 	bl	8000588 <__aeabi_f2d>
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <SM_set_timestep+0x110>)
 80016c8:	f7fe ffb6 	bl	8000638 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f7fe ff57 	bl	8000588 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe ffa9 	bl	8000638 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa7b 	bl	8000be8 <__aeabi_d2f>
 80016f2:	4602      	mov	r2, r0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    sm->F[4][5] = dt;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    sm->F[6][7] = dt;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    sm->F[6][8] = 0.5 * dt * dt;
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f7fe ff3c 	bl	8000588 <__aeabi_f2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <SM_set_timestep+0x110>)
 8001716:	f7fe ff8f 	bl	8000638 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4614      	mov	r4, r2
 8001720:	461d      	mov	r5, r3
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f7fe ff30 	bl	8000588 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe ff82 	bl	8000638 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa54 	bl	8000be8 <__aeabi_d2f>
 8001740:	4602      	mov	r2, r0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    sm->F[7][8] = dt;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	3fe00000 	.word	0x3fe00000

0800175c <SM_predict>:

void SM_predict(StateMachine * const sm)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    // For clarity, create temporary shorthand variables for
    //  matrix computations.
    arm_matrix_instance_f32 * x    = &sm->x_instance;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 800176a:	3308      	adds	r3, #8
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
    arm_matrix_instance_f32 * F    = &sm->F_instance;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 8001774:	3310      	adds	r3, #16
 8001776:	623b      	str	r3, [r7, #32]
    arm_matrix_instance_f32 * Q    = &sm->Q_instance;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 800177e:	61fb      	str	r3, [r7, #28]
    arm_matrix_instance_f32 * P    = &sm->P_instance;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 8001786:	3318      	adds	r3, #24
 8001788:	61bb      	str	r3, [r7, #24]
    arm_matrix_instance_f32 * Ft   = &sm->Ft_instance;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 8001790:	3310      	adds	r3, #16
 8001792:	617b      	str	r3, [r7, #20]
    arm_matrix_instance_f32 * FP   = &sm->FP_instance;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 800179a:	3318      	adds	r3, #24
 800179c:	613b      	str	r3, [r7, #16]
    arm_matrix_instance_f32 * FPFt = &sm->FPFt_instance;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f503 5397 	add.w	r3, r3, #4832	@ 0x12e0
 80017a4:	60fb      	str	r3, [r7, #12]

    // Compute: x = Fx
    arm_mat_mult_f32(F, x, x);
 80017a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017aa:	6a38      	ldr	r0, [r7, #32]
 80017ac:	f002 fe87 	bl	80044be <arm_mat_mult_f32>

    // Compute: P = FPFt + Q
    arm_mat_trans_f32(F, Ft);
 80017b0:	6979      	ldr	r1, [r7, #20]
 80017b2:	6a38      	ldr	r0, [r7, #32]
 80017b4:	f002 ff38 	bl	8004628 <arm_mat_trans_f32>
    arm_mat_mult_f32(F, P, FP);
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	6a38      	ldr	r0, [r7, #32]
 80017be:	f002 fe7e 	bl	80044be <arm_mat_mult_f32>
    arm_mat_mult_f32(FP, Ft, FPFt);
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	6979      	ldr	r1, [r7, #20]
 80017c6:	6938      	ldr	r0, [r7, #16]
 80017c8:	f002 fe79 	bl	80044be <arm_mat_mult_f32>
    arm_mat_add_f32(FPFt, Q, P);
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	69f9      	ldr	r1, [r7, #28]
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f002 fc58 	bl	8004086 <arm_mat_add_f32>
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <SM_update>:

SM_STATUS SM_update(StateMachine * const sm,
                    arm_matrix_instance_f32 const z,
                    SM_UPDATE_TYPE const sm_update_type)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b096      	sub	sp, #88	@ 0x58
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	1d38      	adds	r0, r7, #4
 80017e8:	e880 0006 	stmia.w	r0, {r1, r2}
 80017ec:	70fb      	strb	r3, [r7, #3]
    // For clarity, create temporary shorthand variables for
    //  matrix computations. Dynamically assign a number of
    //  matrices based on whether the sensor update is an
    //  accelerometer, pressure, or GPS reading.
    arm_matrix_instance_f32 * x    = &sm->x_instance;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 80017f4:	3308      	adds	r3, #8
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    arm_matrix_instance_f32 * P    = &sm->P_instance;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 80017fe:	3318      	adds	r3, #24
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
    arm_matrix_instance_f32 * Ky   = &sm->Ky_instance;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8001808:	3318      	adds	r3, #24
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    arm_matrix_instance_f32 * KH   = &sm->KH_instance;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001812:	623b      	str	r3, [r7, #32]
    arm_matrix_instance_f32 * I    = &sm->I_instance;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 800181a:	3308      	adds	r3, #8
 800181c:	61fb      	str	r3, [r7, #28]
    arm_matrix_instance_f32 * IKH  = &sm->IKH_instance;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001824:	3308      	adds	r3, #8
 8001826:	61bb      	str	r3, [r7, #24]
    arm_matrix_instance_f32 * IKHP = &sm->IKHP_instance;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800182e:	3310      	adds	r3, #16
 8001830:	617b      	str	r3, [r7, #20]
    arm_matrix_instance_f32 * PHt;
    arm_matrix_instance_f32 * HPHt;
    arm_matrix_instance_f32 * S;
    arm_matrix_instance_f32 * Si;

    switch(sm_update_type) {
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d068      	beq.n	800190a <SM_update+0x12c>
 8001838:	2b02      	cmp	r3, #2
 800183a:	f300 8097 	bgt.w	800196c <SM_update+0x18e>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <SM_update+0x6a>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d030      	beq.n	80018a8 <SM_update+0xca>
 8001846:	e091      	b.n	800196c <SM_update+0x18e>
    // If update is due to an accelerometer measurement:
    case SM_ACCELEROMETER:
        H = &sm->Ha_instance;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 800184e:	3308      	adds	r3, #8
 8001850:	657b      	str	r3, [r7, #84]	@ 0x54
        R = &sm->Ra_instance;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 8001858:	653b      	str	r3, [r7, #80]	@ 0x50
        y = &sm->ya_instance;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 8001860:	3318      	adds	r3, #24
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
        K = &sm->Ka_instance;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f503 5395 	add.w	r3, r3, #4768	@ 0x12a0
 800186a:	3310      	adds	r3, #16
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
        Hx = &sm->Hxa_instance;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f503 5397 	add.w	r3, r3, #4832	@ 0x12e0
 8001874:	3308      	adds	r3, #8
 8001876:	647b      	str	r3, [r7, #68]	@ 0x44
        Ht = &sm->Hta_instance;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 800187e:	643b      	str	r3, [r7, #64]	@ 0x40
        PHt = &sm->PHta_instance;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 8001886:	3318      	adds	r3, #24
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HPHt = &sm->HPHta_instance;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 8001890:	3310      	adds	r3, #16
 8001892:	63bb      	str	r3, [r7, #56]	@ 0x38
        S = &sm->Sa_instance;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 800189a:	3308      	adds	r3, #8
 800189c:	637b      	str	r3, [r7, #52]	@ 0x34
        Si = &sm->Sia_instance;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 80018a6:	e063      	b.n	8001970 <SM_update+0x192>
    // If update is due to a pressure measurement:
    case SM_PRESSURE:
        H = &sm->Hp_instance;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80018ae:	3310      	adds	r3, #16
 80018b0:	657b      	str	r3, [r7, #84]	@ 0x54
        R = &sm->Rp_instance;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 80018b8:	3308      	adds	r3, #8
 80018ba:	653b      	str	r3, [r7, #80]	@ 0x50
        y = &sm->yp_instance;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f503 5395 	add.w	r3, r3, #4768	@ 0x12a0
 80018c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        K = &sm->Kp_instance;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f503 5395 	add.w	r3, r3, #4768	@ 0x12a0
 80018ca:	3318      	adds	r3, #24
 80018cc:	64bb      	str	r3, [r7, #72]	@ 0x48
        Hx = &sm->Hxp_instance;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f503 5397 	add.w	r3, r3, #4832	@ 0x12e0
 80018d4:	3310      	adds	r3, #16
 80018d6:	647b      	str	r3, [r7, #68]	@ 0x44
        Ht = &sm->Htp_instance;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 80018de:	3308      	adds	r3, #8
 80018e0:	643b      	str	r3, [r7, #64]	@ 0x40
        PHt = &sm->PHtp_instance;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 80018e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HPHt = &sm->HPHtp_instance;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 80018f0:	3318      	adds	r3, #24
 80018f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        S = &sm->Sp_instance;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 80018fa:	3310      	adds	r3, #16
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
        Si = &sm->Sip_instance;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8001904:	3308      	adds	r3, #8
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8001908:	e032      	b.n	8001970 <SM_update+0x192>
    // If update is due to a GPS measurement:
    case SM_GPS:
        H = &sm->Hg_instance;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 8001910:	3318      	adds	r3, #24
 8001912:	657b      	str	r3, [r7, #84]	@ 0x54
        R = &sm->Rg_instance;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f503 5394 	add.w	r3, r3, #4736	@ 0x1280
 800191a:	3310      	adds	r3, #16
 800191c:	653b      	str	r3, [r7, #80]	@ 0x50
        y = &sm->yg_instance;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f503 5395 	add.w	r3, r3, #4768	@ 0x12a0
 8001924:	3308      	adds	r3, #8
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c
        K = &sm->Kg_instance;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f503 5396 	add.w	r3, r3, #4800	@ 0x12c0
 800192e:	64bb      	str	r3, [r7, #72]	@ 0x48
        Hx = &sm->Hxg_instance;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f503 5397 	add.w	r3, r3, #4832	@ 0x12e0
 8001936:	3318      	adds	r3, #24
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
        Ht = &sm->Htg_instance;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 8001940:	3310      	adds	r3, #16
 8001942:	643b      	str	r3, [r7, #64]	@ 0x40
        PHt = &sm->PHtg_instance;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f503 5399 	add.w	r3, r3, #4896	@ 0x1320
 800194a:	3308      	adds	r3, #8
 800194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        HPHt = &sm->HPHtg_instance;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
        S = &sm->Sg_instance;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 800195c:	3318      	adds	r3, #24
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
        Si = &sm->Sig_instance;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f503 539b 	add.w	r3, r3, #4960	@ 0x1360
 8001966:	3310      	adds	r3, #16
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 800196a:	e001      	b.n	8001970 <SM_update+0x192>
    default:
        return SM_FAILURE;
 800196c:	2301      	movs	r3, #1
 800196e:	e045      	b.n	80019fc <SM_update+0x21e>
    }

    // Compute: y = z - Hx
    arm_mat_mult_f32(H, x, Hx);
 8001970:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001974:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001976:	f002 fda2 	bl	80044be <arm_mat_mult_f32>
    arm_mat_sub_f32(&z, Hx, y);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800197e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fe16 	bl	80045b2 <arm_mat_sub_f32>

    // Compute: K = PHt(HPHt + R)^(-1) = PHtS^(-1)
    arm_mat_trans_f32(H, Ht);
 8001986:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001988:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800198a:	f002 fe4d 	bl	8004628 <arm_mat_trans_f32>
    arm_mat_mult_f32(P, Ht, PHt);
 800198e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001994:	f002 fd93 	bl	80044be <arm_mat_mult_f32>
    arm_mat_mult_f32(H, PHt, HPHt);
 8001998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800199a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800199c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800199e:	f002 fd8e 	bl	80044be <arm_mat_mult_f32>
    arm_mat_add_f32(HPHt, R, S);
 80019a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019a8:	f002 fb6d 	bl	8004086 <arm_mat_add_f32>
    arm_mat_inverse_f32(S, Si);
 80019ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019b0:	f002 fbbc 	bl	800412c <arm_mat_inverse_f32>
    arm_mat_mult_f32(PHt, Si, K);
 80019b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80019ba:	f002 fd80 	bl	80044be <arm_mat_mult_f32>

    // Compute: x = x + Ky
    arm_mat_mult_f32(K, y, Ky);
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80019c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80019c4:	f002 fd7b 	bl	80044be <arm_mat_mult_f32>
    arm_mat_add_f32(x, Ky, x);
 80019c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80019ce:	f002 fb5a 	bl	8004086 <arm_mat_add_f32>

    // Compute: P = (I - KH)P
    arm_mat_mult_f32(K, H, KH);
 80019d2:	6a3a      	ldr	r2, [r7, #32]
 80019d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80019d8:	f002 fd71 	bl	80044be <arm_mat_mult_f32>
    arm_mat_sub_f32(I, KH, IKH);
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	6a39      	ldr	r1, [r7, #32]
 80019e0:	69f8      	ldr	r0, [r7, #28]
 80019e2:	f002 fde6 	bl	80045b2 <arm_mat_sub_f32>
    arm_mat_mult_f32(IKH, P, IKHP);
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ea:	69b8      	ldr	r0, [r7, #24]
 80019ec:	f002 fd67 	bl	80044be <arm_mat_mult_f32>
    arm_mat_mult_f32(IKHP, I, P);
 80019f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019f2:	69f9      	ldr	r1, [r7, #28]
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f002 fd62 	bl	80044be <arm_mat_mult_f32>

    return SM_SUCCESS;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3758      	adds	r7, #88	@ 0x58
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim11);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <configureTimerForRunTimeStats+0x10>)
 8001a0a:	f004 fd85 	bl	8006518 <HAL_TIM_Base_Start_IT>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002b4 	.word	0x200002b4

08001a18 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
    return ulHighFrequencyTimerTicks;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <getRunTimeCounterValue+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200017e0 	.word	0x200017e0

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a34:	f002 fe3a 	bl	80046ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a38:	f000 f8b8 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3c:	f000 f9f6 	bl	8001e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a40:	f000 f9ca 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001a44:	f000 f920 	bl	8001c88 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001a48:	f000 f954 	bl	8001cf4 <MX_TIM5_Init>
  MX_TIM11_Init();
 8001a4c:	f000 f9a0 	bl	8001d90 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  RingBuffer_ctor(&uart_rb, 64, uart_rb_buf);
 8001a50:	4a35      	ldr	r2, [pc, #212]	@ (8001b28 <main+0xf8>)
 8001a52:	2140      	movs	r1, #64	@ 0x40
 8001a54:	4835      	ldr	r0, [pc, #212]	@ (8001b2c <main+0xfc>)
 8001a56:	f7ff fa8f 	bl	8000f78 <RingBuffer_ctor>
  RingBuffer_ctor(&sm_rb, 64, sm_rb_buf);
 8001a5a:	4a35      	ldr	r2, [pc, #212]	@ (8001b30 <main+0x100>)
 8001a5c:	2140      	movs	r1, #64	@ 0x40
 8001a5e:	4835      	ldr	r0, [pc, #212]	@ (8001b34 <main+0x104>)
 8001a60:	f7ff fa8a 	bl	8000f78 <RingBuffer_ctor>
  HAL_Delay(100);
 8001a64:	2064      	movs	r0, #100	@ 0x64
 8001a66:	f002 fe63 	bl	8004730 <HAL_Delay>

  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001a6a:	4b33      	ldr	r3, [pc, #204]	@ (8001b38 <main+0x108>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	4a32      	ldr	r2, [pc, #200]	@ (8001b38 <main+0x108>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6413      	str	r3, [r2, #64]	@ 0x40
  TIM5->CR1 |= TIM_CR1_CEN;
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <main+0x10c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a30      	ldr	r2, [pc, #192]	@ (8001b3c <main+0x10c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a82:	f005 fdbf 	bl	8007604 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001a86:	482e      	ldr	r0, [pc, #184]	@ (8001b40 <main+0x110>)
 8001a88:	f005 feb3 	bl	80077f2 <osMutexNew>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <main+0x114>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* creation of smMutex */
  smMutexHandle = osMutexNew(&smMutex_attributes);
 8001a92:	482d      	ldr	r0, [pc, #180]	@ (8001b48 <main+0x118>)
 8001a94:	f005 fead 	bl	80077f2 <osMutexNew>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <main+0x11c>)
 8001a9c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSemaphore */
  uartSemaphoreHandle = osSemaphoreNew(64, 0, &uartSemaphore_attributes);
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b50 <main+0x120>)
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2040      	movs	r0, #64	@ 0x40
 8001aa4:	f005 ffb3 	bl	8007a0e <osSemaphoreNew>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <main+0x124>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* creation of smSemaphore */
  smSemaphoreHandle = osSemaphoreNew(64, 0, &smSemaphore_attributes);
 8001aae:	4a2a      	ldr	r2, [pc, #168]	@ (8001b58 <main+0x128>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2040      	movs	r0, #64	@ 0x40
 8001ab4:	f005 ffab 	bl	8007a0e <osSemaphoreNew>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a28      	ldr	r2, [pc, #160]	@ (8001b5c <main+0x12c>)
 8001abc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001abe:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <main+0x130>)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4828      	ldr	r0, [pc, #160]	@ (8001b64 <main+0x134>)
 8001ac4:	f005 fde8 	bl	8007698 <osThreadNew>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a27      	ldr	r2, [pc, #156]	@ (8001b68 <main+0x138>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* creation of RunUART */
  RunUARTHandle = osThreadNew(StartUART, (void*) &task_args, &RunUART_attributes);
 8001ace:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <main+0x13c>)
 8001ad0:	4927      	ldr	r1, [pc, #156]	@ (8001b70 <main+0x140>)
 8001ad2:	4828      	ldr	r0, [pc, #160]	@ (8001b74 <main+0x144>)
 8001ad4:	f005 fde0 	bl	8007698 <osThreadNew>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <main+0x148>)
 8001adc:	6013      	str	r3, [r2, #0]

  /* creation of RunBMP388 */
  RunBMP388Handle = osThreadNew(StartBMP388, (void*) &task_args, &RunBMP388_attributes);
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <main+0x14c>)
 8001ae0:	4923      	ldr	r1, [pc, #140]	@ (8001b70 <main+0x140>)
 8001ae2:	4827      	ldr	r0, [pc, #156]	@ (8001b80 <main+0x150>)
 8001ae4:	f005 fdd8 	bl	8007698 <osThreadNew>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a26      	ldr	r2, [pc, #152]	@ (8001b84 <main+0x154>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* creation of RunLIS2MDL */
  RunLIS2MDLHandle = osThreadNew(StartLIS2MDL, (void*) &task_args, &RunLIS2MDL_attributes);
 8001aee:	4a26      	ldr	r2, [pc, #152]	@ (8001b88 <main+0x158>)
 8001af0:	491f      	ldr	r1, [pc, #124]	@ (8001b70 <main+0x140>)
 8001af2:	4826      	ldr	r0, [pc, #152]	@ (8001b8c <main+0x15c>)
 8001af4:	f005 fdd0 	bl	8007698 <osThreadNew>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a25      	ldr	r2, [pc, #148]	@ (8001b90 <main+0x160>)
 8001afc:	6013      	str	r3, [r2, #0]

  /* creation of RunLSM6DSO32 */
  RunLSM6DSO32Handle = osThreadNew(StartLSM6DSO32, (void*) &task_args, &RunLSM6DSO32_attributes);
 8001afe:	4a25      	ldr	r2, [pc, #148]	@ (8001b94 <main+0x164>)
 8001b00:	491b      	ldr	r1, [pc, #108]	@ (8001b70 <main+0x140>)
 8001b02:	4825      	ldr	r0, [pc, #148]	@ (8001b98 <main+0x168>)
 8001b04:	f005 fdc8 	bl	8007698 <osThreadNew>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a24      	ldr	r2, [pc, #144]	@ (8001b9c <main+0x16c>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* creation of RunStateMachine */
  RunStateMachineHandle = osThreadNew(StartStateMachine, (void*) &task_args, &RunStateMachine_attributes);
 8001b0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ba0 <main+0x170>)
 8001b10:	4917      	ldr	r1, [pc, #92]	@ (8001b70 <main+0x140>)
 8001b12:	4824      	ldr	r0, [pc, #144]	@ (8001ba4 <main+0x174>)
 8001b14:	f005 fdc0 	bl	8007698 <osThreadNew>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ba8 <main+0x178>)
 8001b1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b1e:	f005 fd95 	bl	800764c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001b22:	bf00      	nop
 8001b24:	e7fd      	b.n	8001b22 <main+0xf2>
 8001b26:	bf00      	nop
 8001b28:	20000394 	.word	0x20000394
 8001b2c:	2000036c 	.word	0x2000036c
 8001b30:	20000d94 	.word	0x20000d94
 8001b34:	20000380 	.word	0x20000380
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40000c00 	.word	0x40000c00
 8001b40:	0800e9d8 	.word	0x0800e9d8
 8001b44:	2000035c 	.word	0x2000035c
 8001b48:	0800e9e8 	.word	0x0800e9e8
 8001b4c:	20000360 	.word	0x20000360
 8001b50:	0800e9f8 	.word	0x0800e9f8
 8001b54:	20000364 	.word	0x20000364
 8001b58:	0800ea08 	.word	0x0800ea08
 8001b5c:	20000368 	.word	0x20000368
 8001b60:	0800e900 	.word	0x0800e900
 8001b64:	08001f3d 	.word	0x08001f3d
 8001b68:	20000344 	.word	0x20000344
 8001b6c:	0800e924 	.word	0x0800e924
 8001b70:	20000000 	.word	0x20000000
 8001b74:	08003e6d 	.word	0x08003e6d
 8001b78:	20000348 	.word	0x20000348
 8001b7c:	0800e948 	.word	0x0800e948
 8001b80:	08003155 	.word	0x08003155
 8001b84:	2000034c 	.word	0x2000034c
 8001b88:	0800e96c 	.word	0x0800e96c
 8001b8c:	08003209 	.word	0x08003209
 8001b90:	20000350 	.word	0x20000350
 8001b94:	0800e990 	.word	0x0800e990
 8001b98:	080034a9 	.word	0x080034a9
 8001b9c:	20000354 	.word	0x20000354
 8001ba0:	0800e9b4 	.word	0x0800e9b4
 8001ba4:	080036b1 	.word	0x080036b1
 8001ba8:	20000358 	.word	0x20000358

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b094      	sub	sp, #80	@ 0x50
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	2234      	movs	r2, #52	@ 0x34
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f00a f8fb 	bl	800bdb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <SystemClock_Config+0xd4>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	4a29      	ldr	r2, [pc, #164]	@ (8001c80 <SystemClock_Config+0xd4>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be0:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <SystemClock_Config+0xd4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bec:	2300      	movs	r3, #0
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <SystemClock_Config+0xd8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bf8:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <SystemClock_Config+0xd8>)
 8001bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <SystemClock_Config+0xd8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c14:	2310      	movs	r3, #16
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c20:	2310      	movs	r3, #16
 8001c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c32:	2302      	movs	r3, #2
 8001c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fba8 	bl	8005390 <HAL_RCC_OscConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c46:	f000 f993 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 f816 	bl	8004c98 <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c72:	f000 f97d 	bl	8001f70 <Error_Handler>
  }
}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	@ 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_SPI1_Init+0x64>)
 8001cda:	f003 fdf7 	bl	80058cc <HAL_SPI_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f000 f944 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000214 	.word	0x20000214
 8001cf0:	40013000 	.word	0x40013000

08001cf4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d12:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <MX_TIM5_Init+0x98>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d36:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d38:	f004 fb9e 	bl	8006478 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001d42:	f000 f915 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	4619      	mov	r1, r3
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d54:	f004 fd40 	bl	80067d8 <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 f907 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <MX_TIM5_Init+0x94>)
 8001d70:	f004 ff68 	bl	8006c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001d7a:	f000 f8f9 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000026c 	.word	0x2000026c
 8001d8c:	40000c00 	.word	0x40000c00

08001d90 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <MX_TIM11_Init+0x44>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4199;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001da8:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001dac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_TIM11_Init+0x40>)
 8001dbc:	f004 fb5c 	bl	8006478 <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001dc6:	f000 f8d3 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002b4 	.word	0x200002b4
 8001dd4:	40014800 	.word	0x40014800

08001dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <MX_USART2_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2097152;
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2208      	movs	r2, #8
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f004 ffa8 	bl	8006d64 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f8a9 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200002fc 	.word	0x200002fc
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a38      	ldr	r2, [pc, #224]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a31      	ldr	r2, [pc, #196]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <MX_GPIO_Init+0x100>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001eb8:	481d      	ldr	r0, [pc, #116]	@ (8001f30 <MX_GPIO_Init+0x104>)
 8001eba:	f002 fed3 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec4:	481b      	ldr	r0, [pc, #108]	@ (8001f34 <MX_GPIO_Init+0x108>)
 8001ec6:	f002 fecd 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4815      	ldr	r0, [pc, #84]	@ (8001f38 <MX_GPIO_Init+0x10c>)
 8001ee2:	f002 fd2b 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001ee6:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <MX_GPIO_Init+0x104>)
 8001f00:	f002 fd1c 	bl	800493c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_GPIO_Init+0x108>)
 8001f1e:	f002 fd0d 	bl	800493c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	@ 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020800 	.word	0x40020800

08001f3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;) {
    osDelay(1);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f005 fc39 	bl	80077bc <osDelay>
 8001f4a:	e7fb      	b.n	8001f44 <StartDefaultTask+0x8>

08001f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f5e:	f002 fbc7 	bl	80046f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40001000 	.word	0x40001000

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <Error_Handler+0x8>

08001f7c <compute_compensations>:
/*      HELPER FUNCTIONS      */
/******************************/

static void compute_compensations(BMP388_COMP * const bmp388_comp,
                                  uint8_t const * const DATA)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
    // Compute hard-iron compensations according to BMP388 datasheet.
    bmp388_comp->T1 =  (float)((DATA[2] << 8) | DATA[1]) * 256.f;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	3201      	adds	r2, #1
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9e:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8002170 <compute_compensations+0x1f4>
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
    bmp388_comp->T2 =  (float)((DATA[4] << 8) | DATA[3]) / 1073741824.f;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	3203      	adds	r2, #3
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc4:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8002174 <compute_compensations+0x1f8>
 8001fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	edc3 7a01 	vstr	s15, [r3, #4]
    bmp388_comp->T3 =  (float)(DATA[5]) / 281474976710656.f;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	3305      	adds	r3, #5
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fe0:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8002178 <compute_compensations+0x1fc>
 8001fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a02 	vstr	s15, [r3, #8]
    bmp388_comp->P1 = ((float)((DATA[7] << 8) | DATA[6]) - 16384.f) / 1048576.f;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	3206      	adds	r2, #6
 8001ffa:	7812      	ldrb	r2, [r2, #0]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002006:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800217c <compute_compensations+0x200>
 800200a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800200e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8002180 <compute_compensations+0x204>
 8002012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	edc3 7a03 	vstr	s15, [r3, #12]
    bmp388_comp->P2 = ((float)((DATA[9] << 8) | DATA[8]) - 16384.f) / 536870912.f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3309      	adds	r3, #9
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	3208      	adds	r2, #8
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800217c <compute_compensations+0x200>
 8002038:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800203c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002184 <compute_compensations+0x208>
 8002040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edc3 7a04 	vstr	s15, [r3, #16]
    bmp388_comp->P3 =  (float)(DATA[10]) / 4294967296.f;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	330a      	adds	r3, #10
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002058:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8002188 <compute_compensations+0x20c>
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	edc3 7a05 	vstr	s15, [r3, #20]
    bmp388_comp->P4 =  (float)(DATA[11]) / 137438953472.f;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	330b      	adds	r3, #11
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002074:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800218c <compute_compensations+0x210>
 8002078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edc3 7a06 	vstr	s15, [r3, #24]
    bmp388_comp->P5 =  (float)((DATA[13] << 8) | DATA[12]) * 8.f;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	330d      	adds	r3, #13
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	320c      	adds	r2, #12
 800208e:	7812      	ldrb	r2, [r2, #0]
 8002090:	4313      	orrs	r3, r2
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800209e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	edc3 7a07 	vstr	s15, [r3, #28]
    bmp388_comp->P6 =  (float)((DATA[15] << 8) | DATA[14]) / 64.f;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	330f      	adds	r3, #15
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	320e      	adds	r2, #14
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c0:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002190 <compute_compensations+0x214>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edc3 7a08 	vstr	s15, [r3, #32]
    bmp388_comp->P7 =  (float)(DATA[16]) / 256.f;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	3310      	adds	r3, #16
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020dc:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002170 <compute_compensations+0x1f4>
 80020e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bmp388_comp->P8 =  (float)(DATA[17]) / 32768.f;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	3311      	adds	r3, #17
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002194 <compute_compensations+0x218>
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    bmp388_comp->P9 =  (float)((DATA[19] << 8) | DATA[18]) / 281474976710656.f;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3313      	adds	r3, #19
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	3212      	adds	r2, #18
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211e:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002178 <compute_compensations+0x1fc>
 8002122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    bmp388_comp->P10 = (float)(DATA[20]) / 281474976710656.f;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	3314      	adds	r3, #20
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002178 <compute_compensations+0x1fc>
 800213e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    bmp388_comp->P11 = (float)(DATA[21]) / 36893488147419103232.f;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3315      	adds	r3, #21
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002156:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8002198 <compute_compensations+0x21c>
 800215a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	43800000 	.word	0x43800000
 8002174:	4e800000 	.word	0x4e800000
 8002178:	57800000 	.word	0x57800000
 800217c:	46800000 	.word	0x46800000
 8002180:	49800000 	.word	0x49800000
 8002184:	4e000000 	.word	0x4e000000
 8002188:	4f800000 	.word	0x4f800000
 800218c:	52000000 	.word	0x52000000
 8002190:	42800000 	.word	0x42800000
 8002194:	47000000 	.word	0x47000000
 8002198:	60000000 	.word	0x60000000

0800219c <compensate_temperature>:

static void compensate_temperature(BMP388 * const bmp388,
                                   BMP388_COMP const * const bmp388_comp,
                                   float const uncomp_temp)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Compute temperature using hard-iron compensations, as detailed
    //  in the BMP388 datasheet.
    float const partial_data1 = uncomp_temp - bmp388_comp->T1;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80021b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b8:	edc7 7a05 	vstr	s15, [r7, #20]
    bmp388->temperature = \
        (partial_data1 * bmp388_comp->T2) + \
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	ed93 7a01 	vldr	s14, [r3, #4]
 80021c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
        (partial_data1 * partial_data1) * bmp388_comp->T3;
 80021ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ce:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (partial_data1 * bmp388_comp->T2) + \
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
    bmp388->temperature = \
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <compensate_pressure>:

static void compensate_pressure(BMP388 * const bmp388,
                                BMP388_COMP const * const bmp388_comp)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    // Compute pressure using hard-iron compensations and temperature,
    //  as detailed in the BMP388 datasheet.
    float const temperature = global_temperature;
 80021fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002330 <compensate_pressure+0x13c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61fb      	str	r3, [r7, #28]
    float const uncomp_pres = bmp388->pressure;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	61bb      	str	r3, [r7, #24]
    float const partial_out1 = \
        (bmp388_comp->P5) + \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	ed93 7a07 	vldr	s14, [r3, #28]
        (bmp388_comp->P6 * temperature) + \
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	edd3 6a08 	vldr	s13, [r3, #32]
 8002216:	edd7 7a07 	vldr	s15, [r7, #28]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P5) + \
 800221e:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P7 * temperature * temperature) + \
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002228:	edd7 7a07 	vldr	s15, [r7, #28]
 800222c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002230:	edd7 7a07 	vldr	s15, [r7, #28]
 8002234:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P6 * temperature) + \
 8002238:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P8 * temperature * temperature * temperature);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002242:	edd7 7a07 	vldr	s15, [r7, #28]
 8002246:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800224a:	edd7 7a07 	vldr	s15, [r7, #28]
 800224e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002252:	edd7 7a07 	vldr	s15, [r7, #28]
 8002256:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out1 = \
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	edc7 7a05 	vstr	s15, [r7, #20]
    float const partial_out2 = uncomp_pres * \
        (bmp388_comp->P1 + \
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	ed93 7a03 	vldr	s14, [r3, #12]
        (bmp388_comp->P2 * temperature) + \
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	edd3 6a04 	vldr	s13, [r3, #16]
 800226e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002272:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P1 + \
 8002276:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002280:	edd7 7a07 	vldr	s15, [r7, #28]
 8002284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002288:	edd7 7a07 	vldr	s15, [r7, #28]
 800228c:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P2 * temperature) + \
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P4 * temperature * temperature * temperature));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	edd3 6a06 	vldr	s13, [r3, #24]
 800229a:	edd7 7a07 	vldr	s15, [r7, #28]
 800229e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
    float const partial_out2 = uncomp_pres * \
 80022b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80022ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022be:	edc7 7a04 	vstr	s15, [r7, #16]
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 80022c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
        (bmp388_comp->P9 + bmp388_comp->P10 * temperature) + \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022de:	ee76 7aa7 	vadd.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 80022e2:	ee27 7a27 	vmul.f32	s14, s14, s15
        (uncomp_pres * uncomp_pres * uncomp_pres * bmp388_comp->P11);
 80022e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80022ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8002300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002304:	edc7 7a03 	vstr	s15, [r7, #12]
    bmp388->pressure = partial_out1 + partial_out2 + partial_out3;
 8002308:	ed97 7a05 	vldr	s14, [r7, #20]
 800230c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002314:	edd7 7a03 	vldr	s15, [r7, #12]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002322:	bf00      	nop
 8002324:	3724      	adds	r7, #36	@ 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20001794 	.word	0x20001794

08002334 <BMP388_Setup>:
/*       CORE FUNCTIONS       */
/******************************/

BMP388_STATUS BMP388_Setup(BMP388_COMP * const bmp388_comp,
                           SPI_HandleTypeDef * const hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	@ 0x38
 8002338:	af04      	add	r7, sp, #16
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t RX[22] = {0};
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	821a      	strh	r2, [r3, #16]

    // Conduct SPI transaction to retrieve constant WHO_AM_I
    //  BMP388 register value (0x50).
    if(sensor_tx_rx(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002364:	9302      	str	r3, [sp, #8]
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <BMP388_Setup+0xa8>)
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2316      	movs	r3, #22
 8002370:	2101      	movs	r1, #1
 8002372:	f000 fb1f 	bl	80029b4 <sensor_tx_rx>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <BMP388_Setup+0x4c>
                    RX,  sizeof(RX)  / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return BMP388_FAILURE;
 800237c:	2301      	movs	r3, #1
 800237e:	e028      	b.n	80023d2 <BMP388_Setup+0x9e>
    }

    // If expected value is not received, return failure.
    if(RX[1] != 0x50) {
 8002380:	7b7b      	ldrb	r3, [r7, #13]
 8002382:	2b50      	cmp	r3, #80	@ 0x50
 8002384:	d001      	beq.n	800238a <BMP388_Setup+0x56>
        return BMP388_WHOAMI_FAILURE;
 8002386:	2304      	movs	r3, #4
 8002388:	e023      	b.n	80023d2 <BMP388_Setup+0x9e>
    }

    // Otherwise, configure the BMP388 sensor and retrieve hard-iron
    //  offset values for compensating pressure and temperature.
    uint8_t const TX2[] = {
 800238a:	4a15      	ldr	r2, [pc, #84]	@ (80023e0 <BMP388_Setup+0xac>)
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	4611      	mov	r1, r2
 8002394:	8019      	strh	r1, [r3, #0]
 8002396:	3302      	adds	r3, #2
 8002398:	0c12      	lsrs	r2, r2, #16
 800239a:	701a      	strb	r2, [r3, #0]
        WRITE | ENABLE_PRESSURE | ENABLE_TEMPERATURE | NORMAL_MODE,
        READ  | REG_CALIBRATION
    };

    // Conduct SPI transaction.
    if(sensor_tx_rx(TX2, sizeof(TX2) / sizeof(TX2[0]),
 800239c:	f107 020c 	add.w	r2, r7, #12
 80023a0:	f107 0008 	add.w	r0, r7, #8
 80023a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a8:	9302      	str	r3, [sp, #8]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <BMP388_Setup+0xa8>)
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2316      	movs	r3, #22
 80023b4:	2103      	movs	r1, #3
 80023b6:	f000 fafd 	bl	80029b4 <sensor_tx_rx>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <BMP388_Setup+0x90>
                    RX,  sizeof(RX)  / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return BMP388_FAILURE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e006      	b.n	80023d2 <BMP388_Setup+0x9e>
    }

    // Translate raw hard-iron offsets to compensation values,
    //  according to the BMP388 datasheet.
    compute_compensations(bmp388_comp, RX);
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fdd6 	bl	8001f7c <compute_compensations>

    return BMP388_SUCCESS;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3728      	adds	r7, #40	@ 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40020400 	.word	0x40020400
 80023e0:	0800e384 	.word	0x0800e384

080023e4 <BMP388_ReadTemp>:

BMP388_STATUS BMP388_ReadTemp(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	@ 0x30
 80023e8:	af04      	add	r7, sp, #16
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_TEMPERATURE };
 80023f4:	2387      	movs	r3, #135	@ 0x87
 80023f6:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

    // Conduct SPI transaction to read BMP388 temperature data
    //  output registers.
    if(sensor_tx_rx(TX, sizeof(TX) / sizeof(TX[0]),
 80023fc:	f107 0214 	add.w	r2, r7, #20
 8002400:	f107 0018 	add.w	r0, r7, #24
 8002404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <BMP388_ReadTemp+0x8c>)
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2304      	movs	r3, #4
 8002414:	2101      	movs	r1, #1
 8002416:	f000 facd 	bl	80029b4 <sensor_tx_rx>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <BMP388_ReadTemp+0x40>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return BMP388_FAILURE;
 8002420:	2301      	movs	r3, #1
 8002422:	e021      	b.n	8002468 <BMP388_ReadTemp+0x84>
    }

    // Save time stamp to compute time steps for state machine.
    bmp388->timestamp = TIM5->CNT;
 8002424:	4b13      	ldr	r3, [pc, #76]	@ (8002474 <BMP388_ReadTemp+0x90>)
 8002426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]

    // Compute uncompensated temperature.
    float const uncomp_temp = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	7dbb      	ldrb	r3, [r7, #22]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	4313      	orrs	r3, r2
 8002436:	7d7a      	ldrb	r2, [r7, #21]
 8002438:	4313      	orrs	r3, r2
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002442:	edc7 7a07 	vstr	s15, [r7, #28]

    // Compute compensated temperature and set the global temperature.
    compensate_temperature(bmp388, bmp388_comp, uncomp_temp);
 8002446:	ed97 0a07 	vldr	s0, [r7, #28]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff fea5 	bl	800219c <compensate_temperature>
    global_temperature = bmp388->temperature;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <BMP388_ReadTemp+0x94>)
 8002458:	6013      	str	r3, [r2, #0]

    // If reporting raw values instead of compensated values, set
    //  temperature to the uncompensated temperature.
    if(data_type == BMP388_RAW) {
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <BMP388_ReadTemp+0x82>
        bmp388->temperature = uncomp_temp;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	609a      	str	r2, [r3, #8]
    }

    return BMP388_SUCCESS;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40020400 	.word	0x40020400
 8002474:	40000c00 	.word	0x40000c00
 8002478:	20001794 	.word	0x20001794

0800247c <BMP388_ReadPres>:

BMP388_STATUS BMP388_ReadPres(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af04      	add	r7, sp, #16
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_PRESSURE };
 800248c:	2384      	movs	r3, #132	@ 0x84
 800248e:	753b      	strb	r3, [r7, #20]
    uint8_t RX[4] = {0};
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]

    // Conduct SPI transaction to read BMP388 pressure data
    //  output registers.
    if(sensor_tx_rx(TX, sizeof(TX) / sizeof(TX[0]),
 8002494:	f107 0210 	add.w	r2, r7, #16
 8002498:	f107 0014 	add.w	r0, r7, #20
 800249c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <BMP388_ReadPres+0x7c>)
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2304      	movs	r3, #4
 80024ac:	2101      	movs	r1, #1
 80024ae:	f000 fa81 	bl	80029b4 <sensor_tx_rx>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <BMP388_ReadPres+0x40>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return BMP388_FAILURE;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e019      	b.n	80024f0 <BMP388_ReadPres+0x74>
    }

    // Save time stamp to compute time steps for state machine.
    bmp388->timestamp = TIM5->CNT;
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <BMP388_ReadPres+0x80>)
 80024be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]

    // Compute uncompensated pressure.
    bmp388->pressure = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	7cbb      	ldrb	r3, [r7, #18]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4313      	orrs	r3, r2
 80024ce:	7c7a      	ldrb	r2, [r7, #17]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	edc3 7a02 	vstr	s15, [r3, #8]

    // If compensating pressure, run the pressure compensation function.
    if(data_type == BMP388_COMPENSATED) {
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d103      	bne.n	80024ee <BMP388_ReadPres+0x72>
        compensate_pressure(bmp388, bmp388_comp);
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff fe83 	bl	80021f4 <compensate_pressure>
    }

    return BMP388_SUCCESS;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40000c00 	.word	0x40000c00

08002500 <LIS2MDL_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LIS2MDL_STATUS LIS2MDL_Setup(SPI_HandleTypeDef * const hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	@ 0x28
 8002504:	af04      	add	r7, sp, #16
 8002506:	6078      	str	r0, [r7, #4]
    // Configure LIS2MDL sensor. Importantly, set the SPI
    //  transaction mode to 4-wire.
    uint8_t const TX1[] = {
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <LIS2MDL_Setup+0x68>)
 800250a:	617b      	str	r3, [r7, #20]
        WRITE | ENABLE_OFFSET,
        WRITE | SET_SPI_4WIRE
    };

    // Conduct SPI transaction to configure LIS2MDL sensor.
    if(sensor_tx(TX1, sizeof(TX1) / sizeof(TX1[0]),
 800250c:	f107 0014 	add.w	r0, r7, #20
 8002510:	2310      	movs	r3, #16
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4b15      	ldr	r3, [pc, #84]	@ (800256c <LIS2MDL_Setup+0x6c>)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	2104      	movs	r1, #4
 800251a:	f000 fa83 	bl	8002a24 <sensor_tx>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <LIS2MDL_Setup+0x28>
                 hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS){
        return LIS2MDL_FAILURE;
 8002524:	2301      	movs	r3, #1
 8002526:	e01a      	b.n	800255e <LIS2MDL_Setup+0x5e>
    }

    uint8_t const TX2[] = { READ | REG_WHO_AM_I };
 8002528:	23cf      	movs	r3, #207	@ 0xcf
 800252a:	743b      	strb	r3, [r7, #16]
    uint8_t RX[1];

    // Conduct SPI transaction to read WHO_AM_I register.
    if(sensor_tx_rx(TX2, sizeof(TX2) / sizeof(TX2[0]),
 800252c:	f107 020c 	add.w	r2, r7, #12
 8002530:	f107 0010 	add.w	r0, r7, #16
 8002534:	2310      	movs	r3, #16
 8002536:	9302      	str	r3, [sp, #8]
 8002538:	4b0c      	ldr	r3, [pc, #48]	@ (800256c <LIS2MDL_Setup+0x6c>)
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	2101      	movs	r1, #1
 8002544:	f000 fa36 	bl	80029b4 <sensor_tx_rx>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <LIS2MDL_Setup+0x52>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LIS2MDL_FAILURE;
 800254e:	2301      	movs	r3, #1
 8002550:	e005      	b.n	800255e <LIS2MDL_Setup+0x5e>
    }

    // If expected WHO_AM_I value is not received, return failure.
    if(RX[0] != 0x40) {
 8002552:	7b3b      	ldrb	r3, [r7, #12]
 8002554:	2b40      	cmp	r3, #64	@ 0x40
 8002556:	d001      	beq.n	800255c <LIS2MDL_Setup+0x5c>
        return LIS2MDL_FAILURE;
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LIS2MDL_Setup+0x5e>
    }

    return LIS2MDL_SUCCESS;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	04028060 	.word	0x04028060
 800256c:	40020400 	.word	0x40020400

08002570 <LIS2MDL_Read>:

LIS2MDL_STATUS LIS2MDL_Read(LIS2MDL * const lis2mdl,
                            SPI_HandleTypeDef * const hspi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	@ 0x28
 8002574:	af04      	add	r7, sp, #16
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
    uint8_t const TX[] = { READ | REG_OUTPUTS };
 800257a:	23e8      	movs	r3, #232	@ 0xe8
 800257c:	753b      	strb	r3, [r7, #20]
    uint8_t RX[6] = {0};
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	2300      	movs	r3, #0
 8002584:	823b      	strh	r3, [r7, #16]

    // Conduct SPI transaction to read LIS2MDL data
    //  register outputs.
    if(sensor_tx_rx(TX, sizeof(TX) / sizeof(TX[0]),
 8002586:	f107 020c 	add.w	r2, r7, #12
 800258a:	f107 0014 	add.w	r0, r7, #20
 800258e:	2310      	movs	r3, #16
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <LIS2MDL_Read+0xb8>)
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2306      	movs	r3, #6
 800259c:	2101      	movs	r1, #1
 800259e:	f000 fa09 	bl	80029b4 <sensor_tx_rx>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <LIS2MDL_Read+0x3c>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LIS2MDL_FAILURE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e038      	b.n	800261e <LIS2MDL_Read+0xae>
    }

    // Save time stamp to compute time steps for state machine.
    lis2mdl->timestamp = TIM5->CNT;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <LIS2MDL_Read+0xbc>)
 80025ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]

    // Translate raw readings into signed integers and a degree heading.
    lis2mdl->X = (int16_t)(((uint16_t)RX[1] << 8) | RX[0]);
 80025b4:	7b7b      	ldrb	r3, [r7, #13]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	b21b      	sxth	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	b21a      	sxth	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	801a      	strh	r2, [r3, #0]
    lis2mdl->Y = (int16_t)(((uint16_t)RX[3] << 8) | RX[2]);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	805a      	strh	r2, [r3, #2]
    lis2mdl->Z = (int16_t)(((uint16_t)RX[5] << 8) | RX[4]);
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	b21a      	sxth	r2, r3
 80025de:	7c3b      	ldrb	r3, [r7, #16]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21a      	sxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	809a      	strh	r2, [r3, #4]
    lis2mdl->heading = atan2f((float)lis2mdl->Y, (float)lis2mdl->X);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fe:	ee07 3a10 	vmov	s14, r3
 8002602:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002606:	eef0 0a47 	vmov.f32	s1, s14
 800260a:	eeb0 0a67 	vmov.f32	s0, s15
 800260e:	f00b fcf1 	bl	800dff4 <atan2f>
 8002612:	eef0 7a40 	vmov.f32	s15, s0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	edc3 7a03 	vstr	s15, [r3, #12]

    return LIS2MDL_SUCCESS;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40020400 	.word	0x40020400
 800262c:	40000c00 	.word	0x40000c00

08002630 <LSM6DSO32_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LSM6DSO32_STATUS LSM6DSO32_Setup(SPI_HandleTypeDef * const hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af04      	add	r7, sp, #16
 8002636:	6078      	str	r0, [r7, #4]
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 8002638:	238f      	movs	r3, #143	@ 0x8f
 800263a:	753b      	strb	r3, [r7, #20]
    uint8_t RX[1] = {0};
 800263c:	2300      	movs	r3, #0
 800263e:	743b      	strb	r3, [r7, #16]

    // Conduct SPI transaction to retrieve WHO_AM_I register value.
    if(sensor_tx_rx(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8002640:	f107 0210 	add.w	r2, r7, #16
 8002644:	f107 0014 	add.w	r0, r7, #20
 8002648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <LSM6DSO32_Setup+0x78>)
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2301      	movs	r3, #1
 8002658:	2101      	movs	r1, #1
 800265a:	f000 f9ab 	bl	80029b4 <sensor_tx_rx>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <LSM6DSO32_Setup+0x38>
                    RX,  sizeof(RX)  / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LSM6DSO32_FAILURE;
 8002664:	2301      	movs	r3, #1
 8002666:	e01b      	b.n	80026a0 <LSM6DSO32_Setup+0x70>
    }

    // If expected WHO_AM_I value is not retrieved, return failure.
    if(RX[0] != 0x6C) return LSM6DSO32_FAILURE;
 8002668:	7c3b      	ldrb	r3, [r7, #16]
 800266a:	2b6c      	cmp	r3, #108	@ 0x6c
 800266c:	d001      	beq.n	8002672 <LSM6DSO32_Setup+0x42>
 800266e:	2301      	movs	r3, #1
 8002670:	e016      	b.n	80026a0 <LSM6DSO32_Setup+0x70>

    // Configure the LSM6DSO32 sensor.
    uint8_t const TX2[] = {
 8002672:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <LSM6DSO32_Setup+0x7c>)
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800267c:	e883 0003 	stmia.w	r3, {r0, r1}
        WRITE | SET_REG_CTRL6_DEFAULT,                     // REG CTRL 6 C
        WRITE | EN_GYROSCOPE_HPFILTER                      // REG CTRL 7 G
    };

    // Conduct SPI transaction to setup the LSM6DSO32 sensor.
    if(sensor_tx(TX2, sizeof(TX2) / sizeof(TX2[0]),
 8002680:	f107 0008 	add.w	r0, r7, #8
 8002684:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4b07      	ldr	r3, [pc, #28]	@ (80026a8 <LSM6DSO32_Setup+0x78>)
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	2108      	movs	r1, #8
 8002690:	f000 f9c8 	bl	8002a24 <sensor_tx>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <LSM6DSO32_Setup+0x6e>
                 hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LSM6DSO32_FAILURE;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LSM6DSO32_Setup+0x70>
    }

    return LSM6DSO32_SUCCESS;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40020000 	.word	0x40020000
 80026ac:	0800e388 	.word	0x0800e388

080026b0 <LSM6DSO32_ReadGyro>:

LSM6DSO32_STATUS LSM6DSO32_ReadGyro(LSM6DSO32 * const lsm6dso32_gyro,
                                    SPI_HandleTypeDef * const hspi,
                                    LSM6DSO32_DATA_TYPE const data_type)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	@ 0x30
 80026b4:	af04      	add	r7, sp, #16
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	71fb      	strb	r3, [r7, #7]
    const uint8_t TX[] = { READ  | REG_GYROSCOPE };
 80026be:	23a2      	movs	r3, #162	@ 0xa2
 80026c0:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	2300      	movs	r3, #0
 80026c8:	82bb      	strh	r3, [r7, #20]

    // Conduct SPI transaction to read the gyroscope data
    //  output registers.
    if(sensor_tx_rx(TX, sizeof(TX) / sizeof(TX[0]),
 80026ca:	f107 0210 	add.w	r2, r7, #16
 80026ce:	f107 0018 	add.w	r0, r7, #24
 80026d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <LSM6DSO32_ReadGyro+0xdc>)
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2306      	movs	r3, #6
 80026e2:	2101      	movs	r1, #1
 80026e4:	f000 f966 	bl	80029b4 <sensor_tx_rx>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <LSM6DSO32_ReadGyro+0x42>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e048      	b.n	8002784 <LSM6DSO32_ReadGyro+0xd4>
    }

    // Save time stamp to compute time steps for state machine.
    lsm6dso32_gyro->timestamp = TIM5->CNT;
 80026f2:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <LSM6DSO32_ReadGyro+0xe0>)
 80026f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]

    // Set scaling factor if compensating the raw readings.
    float const sensitivity = (data_type == LSM6DSO32_RAW) ? 1.f : 4.375f;
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <LSM6DSO32_ReadGyro+0x56>
 8002700:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002704:	e000      	b.n	8002708 <LSM6DSO32_ReadGyro+0x58>
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <LSM6DSO32_ReadGyro+0xe4>)
 8002708:	61fb      	str	r3, [r7, #28]

    // Translate raw gyroscope readings into degrees per second floats.
    int16_t temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 800270a:	7c7b      	ldrb	r3, [r7, #17]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b29b      	uxth	r3, r3
 8002710:	7c3a      	ldrb	r2, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->X = (float)temporary * sensitivity;
 8002718:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	edd7 7a07 	vldr	s15, [r7, #28]
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	b29b      	uxth	r3, r3
 8002738:	7cba      	ldrb	r2, [r7, #18]
 800273a:	4413      	add	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Y = (float)temporary * sensitivity;
 8002740:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	edc3 7a03 	vstr	s15, [r3, #12]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 800275a:	7d7b      	ldrb	r3, [r7, #21]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b29b      	uxth	r3, r3
 8002760:	7d3a      	ldrb	r2, [r7, #20]
 8002762:	4413      	add	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Z = (float)temporary * sensitivity;
 8002768:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002774:	edd7 7a07 	vldr	s15, [r7, #28]
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	edc3 7a04 	vstr	s15, [r3, #16]

    return LSM6DSO32_SUCCESS;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40020000 	.word	0x40020000
 8002790:	40000c00 	.word	0x40000c00
 8002794:	408c0000 	.word	0x408c0000

08002798 <LSM6DSO32_ReadAccel>:

LSM6DSO32_STATUS LSM6DSO32_ReadAccel(LSM6DSO32 * const lsm6dso32_accel,
                                     SPI_HandleTypeDef * const hspi,
                                     LSM6DSO32_DATA_TYPE const data_type)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	@ 0x30
 800279c:	af04      	add	r7, sp, #16
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ  | REG_ACCELEROMETER };
 80027a6:	23a8      	movs	r3, #168	@ 0xa8
 80027a8:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	2300      	movs	r3, #0
 80027b0:	82bb      	strh	r3, [r7, #20]

    // Conduct SPI transaction to read the accelerometer data
    //  output registers.
    if(sensor_tx_rx(TX, sizeof(TX) / sizeof(TX[0]),
 80027b2:	f107 0210 	add.w	r2, r7, #16
 80027b6:	f107 0018 	add.w	r0, r7, #24
 80027ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <LSM6DSO32_ReadAccel+0xdc>)
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2306      	movs	r3, #6
 80027ca:	2101      	movs	r1, #1
 80027cc:	f000 f8f2 	bl	80029b4 <sensor_tx_rx>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <LSM6DSO32_ReadAccel+0x42>
                    RX, sizeof(RX) / sizeof(RX[0]),
                    hspi, GPIOx, GPIO_PINx)
            != SENSOR_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e048      	b.n	800286c <LSM6DSO32_ReadAccel+0xd4>
    }

    // Save time stamp to compute time steps for state machine.
    lsm6dso32_accel->timestamp = TIM5->CNT;
 80027da:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <LSM6DSO32_ReadAccel+0xe0>)
 80027dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]

    // Set scaling factor if compensating the raw readings.
    float const sensitivity = (data_type == LSM6DSO32_RAW) ? 1.f : 0.122f;
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <LSM6DSO32_ReadAccel+0x56>
 80027e8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027ec:	e000      	b.n	80027f0 <LSM6DSO32_ReadAccel+0x58>
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <LSM6DSO32_ReadAccel+0xe4>)
 80027f0:	61fb      	str	r3, [r7, #28]

    // Translate raw accelerometer readings into meters per second^2 floats.
    int16_t temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 80027f2:	7c7b      	ldrb	r3, [r7, #17]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	7c3a      	ldrb	r2, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->X = (float)temporary * sensitivity;
 8002800:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	b29b      	uxth	r3, r3
 8002820:	7cba      	ldrb	r2, [r7, #18]
 8002822:	4413      	add	r3, r2
 8002824:	b29b      	uxth	r3, r3
 8002826:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Y = (float)temporary * sensitivity;
 8002828:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	edd7 7a07 	vldr	s15, [r7, #28]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	edc3 7a03 	vstr	s15, [r3, #12]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 8002842:	7d7b      	ldrb	r3, [r7, #21]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	b29b      	uxth	r3, r3
 8002848:	7d3a      	ldrb	r2, [r7, #20]
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Z = (float)temporary * sensitivity;
 8002850:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	edc3 7a04 	vstr	s15, [r3, #16]

    return LSM6DSO32_SUCCESS;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020000 	.word	0x40020000
 8002878:	40000c00 	.word	0x40000c00
 800287c:	3df9db23 	.word	0x3df9db23

08002880 <LSM6DSO32_CalibrateOffset>:

LSM6DSO32_STATUS LSM6DSO32_CalibrateOffset(LSM6DSO32 * const lsm6dso32,
                                           LSM6DSO32_OFFSET * const offset,
                                           SPI_HandleTypeDef * const hspi,
                                           LSM6DSO32_DATA_TYPE const data_type)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	70fb      	strb	r3, [r7, #3]
    LSM6DSO32_STATUS (*readSensor)(LSM6DSO32 * const,
                                   SPI_HandleTypeDef * const,
                                   LSM6DSO32_DATA_TYPE const);

    // Assign LSM6SDO32 read function based on calling type.
    if(lsm6dso32->sensor == LSM6DSO32_GYROSCOPE) {
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <LSM6DSO32_CalibrateOffset+0x1c>
        readSensor = LSM6DSO32_ReadGyro;
 8002896:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <LSM6DSO32_CalibrateOffset+0xd4>)
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	e001      	b.n	80028a0 <LSM6DSO32_CalibrateOffset+0x20>
    } else {
        readSensor = LSM6DSO32_ReadAccel;
 800289c:	4b2e      	ldr	r3, [pc, #184]	@ (8002958 <LSM6DSO32_CalibrateOffset+0xd8>)
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Accumulate X-, Y-, and Z-direction readings.
    uint8_t const iterations = 100;
 80028a0:	2364      	movs	r3, #100	@ 0x64
 80028a2:	74fb      	strb	r3, [r7, #19]
    float X, Y, Z;
    for(int i = 0; i < iterations; i++) {
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e027      	b.n	80028fa <LSM6DSO32_CalibrateOffset+0x7a>
        if(readSensor(lsm6dso32, hspi, data_type) != LSM6DSO32_SUCCESS) {
 80028aa:	78fa      	ldrb	r2, [r7, #3]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	4798      	blx	r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <LSM6DSO32_CalibrateOffset+0x3e>
            return LSM6DSO32_FAILURE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e046      	b.n	800294c <LSM6DSO32_CalibrateOffset+0xcc>
        }

        X += lsm6dso32->X;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	edc7 7a08 	vstr	s15, [r7, #32]
        Y += lsm6dso32->Y;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80028d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	edc7 7a07 	vstr	s15, [r7, #28]
        Z += lsm6dso32->Z;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	edd3 7a04 	vldr	s15, [r3, #16]
 80028e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	edc7 7a06 	vstr	s15, [r7, #24]
    for(int i = 0; i < iterations; i++) {
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3301      	adds	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	429a      	cmp	r2, r3
 8002900:	dbd3      	blt.n	80028aa <LSM6DSO32_CalibrateOffset+0x2a>
    }

    // Set the offset to the average of the readings.
    offset->X = X / iterations;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	ee07 3a90 	vmov	s15, r3
 8002908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	edc3 7a00 	vstr	s15, [r3]
    offset->Y = Y / iterations;
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002924:	edd7 6a07 	vldr	s13, [r7, #28]
 8002928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	edc3 7a01 	vstr	s15, [r3, #4]
    offset->Z = Z / iterations;
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	edc3 7a02 	vstr	s15, [r3, #8]

    return LSM6DSO32_SUCCESS;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3728      	adds	r7, #40	@ 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	080026b1 	.word	0x080026b1
 8002958:	08002799 	.word	0x08002799

0800295c <LSM6DSO32_UseOffset>:

void LSM6DSO32_UseOffset(LSM6DSO32 * const lsm6dso32,
                         LSM6DSO32_OFFSET * const offset)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
    lsm6dso32->X -= offset->X;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	ed93 7a02 	vldr	s14, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	edc3 7a02 	vstr	s15, [r3, #8]
    lsm6dso32->Y -= offset->Y;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	edd3 7a01 	vldr	s15, [r3, #4]
 8002988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	edc3 7a03 	vstr	s15, [r3, #12]
    lsm6dso32->Z -= offset->Z;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	ed93 7a04 	vldr	s14, [r3, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	edd3 7a02 	vldr	s15, [r3, #8]
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <sensor_tx_rx>:
                           uint8_t * const RX,
                           uint8_t const NUM_RX,
                           SPI_HandleTypeDef * const hspi,
                           GPIO_TypeDef * const GPIOx,
                           uint16_t const GPIO_PINx)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	460b      	mov	r3, r1
 80029c2:	72fb      	strb	r3, [r7, #11]
 80029c4:	4613      	mov	r3, r2
 80029c6:	72bb      	strb	r3, [r7, #10]
    SENSOR_STATUS status = SENSOR_SUCCESS;
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]

    // Enter a "critical" section to make sure we don't get
    //  preempted in the middle of a SPI transaction.
    taskENTER_CRITICAL();
 80029cc:	f008 f964 	bl	800ac98 <vPortEnterCritical>

    // Drive the correct Chip Select low (ready).
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 80029d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	619a      	str	r2, [r3, #24]

    // Perform the SPI transaction.
    if(HAL_SPI_Transmit(hspi,
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <sensor_tx_rx+0x6c>)
 80029de:	68f9      	ldr	r1, [r7, #12]
 80029e0:	6a38      	ldr	r0, [r7, #32]
 80029e2:	f002 fffc 	bl	80059de <HAL_SPI_Transmit>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <sensor_tx_rx+0x3e>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = SENSOR_FAILURE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
 80029f0:	e00b      	b.n	8002a0a <sensor_tx_rx+0x56>
    } else {
        if(HAL_SPI_Receive(hspi,
 80029f2:	7abb      	ldrb	r3, [r7, #10]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <sensor_tx_rx+0x6c>)
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6a38      	ldr	r0, [r7, #32]
 80029fc:	f003 f932 	bl	8005c64 <HAL_SPI_Receive>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <sensor_tx_rx+0x56>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = SENSOR_FAILURE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
        }
    }

    // Drive the correct Chip Select high again.
    GPIOx->BSRR = GPIO_PINx;
 8002a0a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	619a      	str	r2, [r3, #24]

    // Exit the critical section to allow other tasks
    //  to preempt again.
    taskEXIT_CRITICAL();
 8002a10:	f008 f974 	bl	800acfc <vPortExitCritical>

    return status;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00186a00 	.word	0x00186a00

08002a24 <sensor_tx>:
SENSOR_STATUS sensor_tx(uint8_t const * TX,
                        uint8_t const NUM_TX,
                        SPI_HandleTypeDef * const hspi,
                        GPIO_TypeDef * const GPIOx,
                        uint16_t const GPIO_PINx)
{
 8002a24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8002a28:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	4606      	mov	r6, r0
 8002a30:	4689      	mov	r9, r1
 8002a32:	4615      	mov	r5, r2
    SENSOR_STATUS status = SENSOR_SUCCESS;

    // Enter a "critical" section to make sure we don't get
    //  preempted in the middle of a SPI transaction.
    taskENTER_CRITICAL();
 8002a34:	f008 f930 	bl	800ac98 <vPortEnterCritical>

    // Drive the correct Chip Select low (ready).
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 8002a38:	ea4f 4308 	mov.w	r3, r8, lsl #16

    // Perform the SPI transaction.
    if(HAL_SPI_Transmit(hspi,
 8002a3c:	464a      	mov	r2, r9
 8002a3e:	4631      	mov	r1, r6
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 8002a40:	61a3      	str	r3, [r4, #24]
    if(HAL_SPI_Transmit(hspi,
 8002a42:	4628      	mov	r0, r5
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <sensor_tx+0x3c>)
 8002a46:	f002 ffca 	bl	80059de <HAL_SPI_Transmit>
                        != HAL_OK) {
        status = SENSOR_FAILURE;
    }

    // Drive the correct Chip Select high again.
    GPIOx->BSRR = GPIO_PINx;
 8002a4a:	f8c4 8018 	str.w	r8, [r4, #24]
    if(HAL_SPI_Transmit(hspi,
 8002a4e:	4605      	mov	r5, r0

    // Exit the critical section to allow other tasks
    //  to preempt again.
    taskEXIT_CRITICAL();
 8002a50:	f008 f954 	bl	800acfc <vPortExitCritical>

    return status;
}
 8002a54:	1e28      	subs	r0, r5, #0
 8002a56:	bf18      	it	ne
 8002a58:	2001      	movne	r0, #1
 8002a5a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002a5e:	bf00      	nop
 8002a60:	00186a00 	.word	0x00186a00

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_MspInit+0x54>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	f06f 0001 	mvn.w	r0, #1
 8002aaa:	f001 ff1d 	bl	80048e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_SPI_MspInit+0x84>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12b      	bne.n	8002b36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_SPI_MspInit+0x88>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b16:	23e0      	movs	r3, #224	@ 0xe0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b26:	2305      	movs	r3, #5
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <HAL_SPI_MspInit+0x8c>)
 8002b32:	f001 ff03 	bl	800493c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	@ 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40013000 	.word	0x40013000
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020000 	.word	0x40020000

08002b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_TIM_Base_MspInit+0x70>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a16      	ldr	r2, [pc, #88]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002b7a:	e01a      	b.n	8002bb2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a10      	ldr	r2, [pc, #64]	@ (8002bc4 <HAL_TIM_Base_MspInit+0x78>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d115      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x74>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	201a      	movs	r0, #26
 8002ba8:	f001 fe9e 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002bac:	201a      	movs	r0, #26
 8002bae:	f001 feb7 	bl	8004920 <HAL_NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40014800 	.word	0x40014800

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12b      	bne.n	8002c42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a10      	ldr	r2, [pc, #64]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_UART_MspInit+0x88>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c22:	230c      	movs	r3, #12
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c32:	2307      	movs	r3, #7
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	@ (8002c54 <HAL_UART_MspInit+0x8c>)
 8002c3e:	f001 fe7d 	bl	800493c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c42:	bf00      	nop
 8002c44:	3728      	adds	r7, #40	@ 0x28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40004400 	.word	0x40004400
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40020000 	.word	0x40020000

08002c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	@ 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <HAL_InitTick+0xe4>)
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	4a32      	ldr	r2, [pc, #200]	@ (8002d3c <HAL_InitTick+0xe4>)
 8002c72:	f043 0310 	orr.w	r3, r3, #16
 8002c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c78:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <HAL_InitTick+0xe4>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c84:	f107 0210 	add.w	r2, r7, #16
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 f91c 	bl	8004ecc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d103      	bne.n	8002ca6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c9e:	f002 f8ed 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8002ca2:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ca4:	e004      	b.n	8002cb0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ca6:	f002 f8e9 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8002caa:	4603      	mov	r3, r0
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb2:	4a23      	ldr	r2, [pc, #140]	@ (8002d40 <HAL_InitTick+0xe8>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cc0:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <HAL_InitTick+0xf0>)
 8002cc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cde:	4b19      	ldr	r3, [pc, #100]	@ (8002d44 <HAL_InitTick+0xec>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ce4:	4817      	ldr	r0, [pc, #92]	@ (8002d44 <HAL_InitTick+0xec>)
 8002ce6:	f003 fbc7 	bl	8006478 <HAL_TIM_Base_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11b      	bne.n	8002d30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cf8:	4812      	ldr	r0, [pc, #72]	@ (8002d44 <HAL_InitTick+0xec>)
 8002cfa:	f003 fc0d 	bl	8006518 <HAL_TIM_Base_Start_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d0c:	2036      	movs	r0, #54	@ 0x36
 8002d0e:	f001 fe07 	bl	8004920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d808      	bhi.n	8002d2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	2036      	movs	r0, #54	@ 0x36
 8002d1e:	f001 fde3 	bl	80048e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <HAL_InitTick+0xf4>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	e002      	b.n	8002d30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3738      	adds	r7, #56	@ 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	20001798 	.word	0x20001798
 8002d48:	40001000 	.word	0x40001000
 8002d4c:	20000024 	.word	0x20000024

08002d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <NMI_Handler+0x4>

08002d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <HardFault_Handler+0x4>

08002d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <MemManage_Handler+0x4>

08002d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002d8c:	4804      	ldr	r0, [pc, #16]	@ (8002da0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002d8e:	f003 fc33 	bl	80065f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	4a02      	ldr	r2, [pc, #8]	@ (8002da4 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8002d9a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200002b4 	.word	0x200002b4
 8002da4:	200017e0 	.word	0x200017e0

08002da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dac:	4802      	ldr	r0, [pc, #8]	@ (8002db8 <TIM6_DAC_IRQHandler+0x10>)
 8002dae:	f003 fc23 	bl	80065f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20001798 	.word	0x20001798

08002dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_kill>:

int _kill(int pid, int sig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dd6:	f009 f897 	bl	800bf08 <__errno>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2216      	movs	r2, #22
 8002dde:	601a      	str	r2, [r3, #0]
  return -1;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_exit>:

void _exit (int status)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe7 	bl	8002dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <_exit+0x12>

08002e02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e00a      	b.n	8002e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e14:	f3af 8000 	nop.w
 8002e18:	4601      	mov	r1, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	60ba      	str	r2, [r7, #8]
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	dbf0      	blt.n	8002e14 <_read+0x12>
  }

  return len;
 8002e32:	687b      	ldr	r3, [r7, #4]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e009      	b.n	8002e62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	60ba      	str	r2, [r7, #8]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	dbf1      	blt.n	8002e4e <_write+0x12>
  }
  return len;
 8002e6a:	687b      	ldr	r3, [r7, #4]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_close>:

int _close(int file)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_isatty>:

int _isatty(int file)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb4:	2301      	movs	r3, #1
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee4:	4a14      	ldr	r2, [pc, #80]	@ (8002f38 <_sbrk+0x5c>)
 8002ee6:	4b15      	ldr	r3, [pc, #84]	@ (8002f3c <_sbrk+0x60>)
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef0:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <_sbrk+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <_sbrk+0x64>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <_sbrk+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <_sbrk+0x64>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f0c:	f008 fffc 	bl	800bf08 <__errno>
 8002f10:	4603      	mov	r3, r0
 8002f12:	220c      	movs	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e009      	b.n	8002f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <_sbrk+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f22:	4b07      	ldr	r3, [pc, #28]	@ (8002f40 <_sbrk+0x64>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <_sbrk+0x64>)
 8002f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20020000 	.word	0x20020000
 8002f3c:	00000400 	.word	0x00000400
 8002f40:	200017e4 	.word	0x200017e4
 8002f44:	2001ac20 	.word	0x2001ac20

08002f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <SystemInit+0x20>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	4a05      	ldr	r2, [pc, #20]	@ (8002f68 <SystemInit+0x20>)
 8002f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <StartTemperature>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTemperature(void *argument)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b0a6      	sub	sp, #152	@ 0x98
 8002f70:	af0e      	add	r7, sp, #56	@ 0x38
 8002f72:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BMP388 bmp388 = {.sensor = BMP388_TEMPERATURE};
 8002f88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]

    // Initial temperature read to update global temperature variable
    //  in bmp388.c for pressure compensations.
    if(BMP388_ReadTemp(&bmp388, &bmp388_comp, T_DATA_TYPE, args.hspi)
 8002f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f96:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4933      	ldr	r1, [pc, #204]	@ (800306c <StartTemperature+0x100>)
 8002f9e:	f7ff fa21 	bl	80023e4 <BMP388_ReadTemp>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00f      	beq.n	8002fc8 <StartTemperature+0x5c>
            != BMP388_SUCCESS) {
        task_report_error(args, "TEMPERATURE READ ERROR");
 8002fa8:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <StartTemperature+0x104>)
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	466c      	mov	r4, sp
 8002fae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002fb8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fbe:	f000 fabd 	bl	800353c <task_report_error>
        vTaskSuspend(NULL);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f006 faf8 	bl	80095b8 <vTaskSuspend>
    }

    // Let pressure task know it can start, because initial temperature
    //  is received and available for pressure compensation.
    osSemaphoreRelease(bmp388SemaphoreHandle);
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <StartTemperature+0x108>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fdf9 	bl	8007bc4 <osSemaphoreRelease>
    // Update temperature reading once per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002fd2:	f006 fc85 	bl	80098e0 <xTaskGetTickCount>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	633b      	str	r3, [r7, #48]	@ 0x30

        // Read temperature from BMP388 sensor.
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, T_DATA_TYPE, args.hspi)
 8002fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fdc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4922      	ldr	r1, [pc, #136]	@ (800306c <StartTemperature+0x100>)
 8002fe4:	f7ff f9fe 	bl	80023e4 <BMP388_ReadTemp>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00f      	beq.n	800300e <StartTemperature+0xa2>
                != BMP388_SUCCESS) {
            task_report_error(args, "TEMPERATURE READ ERROR");
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <StartTemperature+0x104>)
 8002ff0:	9304      	str	r3, [sp, #16]
 8002ff2:	466c      	mov	r4, sp
 8002ff4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ffa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ffe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003004:	f000 fa9a 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003008:	2000      	movs	r0, #0
 800300a:	f006 fad5 	bl	80095b8 <vTaskSuspend>
        }

        // Send latest temperature reading to UART RingBuffer.
        RingBuffer_t const update = {.type = RB_TEMPERATURE, .bmp388 = bmp388};
 800300e:	f107 0308 	add.w	r3, r7, #8
 8003012:	2228      	movs	r2, #40	@ 0x28
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f008 fecd 	bl	800bdb6 <memset>
 800301c:	2301      	movs	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003028:	ca07      	ldmia	r2, {r0, r1, r2}
 800302a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        task_send_update_log(args, update);
 800302e:	ad04      	add	r5, sp, #16
 8003030:	f107 0408 	add.w	r4, r7, #8
 8003034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003040:	e885 0003 	stmia.w	r5, {r0, r1}
 8003044:	466c      	mov	r4, sp
 8003046:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800304a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003050:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003056:	f000 fafb 	bl	8003650 <task_send_update_log>

        // Delay 1 second from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 1000);
 800305a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800305e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003062:	4618      	mov	r0, r3
 8003064:	f006 f9f2 	bl	800944c <vTaskDelayUntil>
    for(;;) {
 8003068:	e7b3      	b.n	8002fd2 <StartTemperature+0x66>
 800306a:	bf00      	nop
 800306c:	200017f0 	.word	0x200017f0
 8003070:	0800e3b0 	.word	0x0800e3b0
 8003074:	20001828 	.word	0x20001828

08003078 <StartPressure>:
    }
}

static void StartPressure(void *argument)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b0a6      	sub	sp, #152	@ 0x98
 800307c:	af0e      	add	r7, sp, #56	@ 0x38
 800307e:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8003086:	461d      	mov	r5, r3
 8003088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Wait for temperature task to run once and provide a value for
    //  compensate_pressure function to work.
    osSemaphoreAcquire(bmp388SemaphoreHandle, osWaitForever);
 8003094:	4b2c      	ldr	r3, [pc, #176]	@ (8003148 <StartPressure+0xd0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f04f 31ff 	mov.w	r1, #4294967295
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fd3f 	bl	8007b20 <osSemaphoreAcquire>

    // Update pressure reading 10 times per second.
    BMP388 bmp388 = {.sensor = BMP388_PRESSURE};
 80030a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 80030b4:	f006 fc14 	bl	80098e0 <xTaskGetTickCount>
 80030b8:	4603      	mov	r3, r0
 80030ba:	633b      	str	r3, [r7, #48]	@ 0x30

        // Read pressure from BMP388 sensor.
        if(BMP388_ReadPres(&bmp388, &bmp388_comp, P_DATA_TYPE, args.hspi)
 80030bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030be:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80030c2:	2201      	movs	r2, #1
 80030c4:	4921      	ldr	r1, [pc, #132]	@ (800314c <StartPressure+0xd4>)
 80030c6:	f7ff f9d9 	bl	800247c <BMP388_ReadPres>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00f      	beq.n	80030f0 <StartPressure+0x78>
                != BMP388_SUCCESS) {
            task_report_error(args, "PRESURE READ ERROR");
 80030d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003150 <StartPressure+0xd8>)
 80030d2:	9304      	str	r3, [sp, #16]
 80030d4:	466c      	mov	r4, sp
 80030d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80030da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e6:	f000 fa29 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f006 fa64 	bl	80095b8 <vTaskSuspend>
        }

        // Send latest pressure reading to UART and State Machine ring buffers.
        RingBuffer_t const update = {.type = RB_PRESSURE, .bmp388 = bmp388};
 80030f0:	f107 0308 	add.w	r3, r7, #8
 80030f4:	2228      	movs	r2, #40	@ 0x28
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f008 fe5c 	bl	800bdb6 <memset>
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003106:	ca07      	ldmia	r2, {r0, r1, r2}
 8003108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        task_send_update_all(args, update);
 800310c:	ad04      	add	r5, sp, #16
 800310e:	f107 0408 	add.w	r4, r7, #8
 8003112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003122:	466c      	mov	r4, sp
 8003124:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800312a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800312e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003134:	f000 fa3b 	bl	80035ae <task_send_update_all>

        // Delay 40 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 100);
 8003138:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800313c:	2164      	movs	r1, #100	@ 0x64
 800313e:	4618      	mov	r0, r3
 8003140:	f006 f984 	bl	800944c <vTaskDelayUntil>
    for(;;) {
 8003144:	e7b6      	b.n	80030b4 <StartPressure+0x3c>
 8003146:	bf00      	nop
 8003148:	20001828 	.word	0x20001828
 800314c:	200017f0 	.word	0x200017f0
 8003150:	0800e3c8 	.word	0x0800e3c8

08003154 <StartBMP388>:
    }
}

void StartBMP388(void *argument)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b090      	sub	sp, #64	@ 0x40
 8003158:	af06      	add	r7, sp, #24
 800315a:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f107 0408 	add.w	r4, r7, #8
 8003162:	461d      	mov	r5, r3
 8003164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003168:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800316c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Run BMP388 setup routine before starting pressure or temperature
    //  tasks. On failure, suspend before starting subtasks.
    if(BMP388_Setup(&bmp388_comp, args.hspi) != BMP388_SUCCESS) {
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4619      	mov	r1, r3
 8003174:	481a      	ldr	r0, [pc, #104]	@ (80031e0 <StartBMP388+0x8c>)
 8003176:	f7ff f8dd 	bl	8002334 <BMP388_Setup>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <StartBMP388+0x4c>
        task_report_error(args, "BMP388 SETUP ERROR");
 8003180:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <StartBMP388+0x90>)
 8003182:	9304      	str	r3, [sp, #16]
 8003184:	466c      	mov	r4, sp
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800318c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003196:	f000 f9d1 	bl	800353c <task_report_error>
        vTaskSuspend(NULL);
 800319a:	2000      	movs	r0, #0
 800319c:	f006 fa0c 	bl	80095b8 <vTaskSuspend>
    }

    // Create the private BMP388 semaphore which will allow the temperature
    //  task to notify the pressure task that it can start.
    bmp388SemaphoreHandle = osSemaphoreNew(1, 0, &bmp388Semaphore_attributes);
 80031a0:	4a11      	ldr	r2, [pc, #68]	@ (80031e8 <StartBMP388+0x94>)
 80031a2:	2100      	movs	r1, #0
 80031a4:	2001      	movs	r0, #1
 80031a6:	f004 fc32 	bl	8007a0e <osSemaphoreNew>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4a0f      	ldr	r2, [pc, #60]	@ (80031ec <StartBMP388+0x98>)
 80031ae:	6013      	str	r3, [r2, #0]

    // Create and start temperature and pressure tasks.
    RunTemperatureHandle = osThreadNew(StartTemperature,
 80031b0:	4a0f      	ldr	r2, [pc, #60]	@ (80031f0 <StartBMP388+0x9c>)
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	480f      	ldr	r0, [pc, #60]	@ (80031f4 <StartBMP388+0xa0>)
 80031b6:	f004 fa6f 	bl	8007698 <osThreadNew>
 80031ba:	4603      	mov	r3, r0
 80031bc:	4a0e      	ldr	r2, [pc, #56]	@ (80031f8 <StartBMP388+0xa4>)
 80031be:	6013      	str	r3, [r2, #0]
                                       (void*) argument,
                                       &RunTemp_attributes);
    RunPressureHandle    = osThreadNew(StartPressure,
 80031c0:	4a0e      	ldr	r2, [pc, #56]	@ (80031fc <StartBMP388+0xa8>)
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	480e      	ldr	r0, [pc, #56]	@ (8003200 <StartBMP388+0xac>)
 80031c6:	f004 fa67 	bl	8007698 <osThreadNew>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003204 <StartBMP388+0xb0>)
 80031ce:	6013      	str	r3, [r2, #0]
                                       (void*) argument,
                                       &RunPres_attributes);

    // Since this task is only used for setup and to start the temperature
    //  and pressure tasks, delete this task from the FreeRTOS kernel.
    vTaskDelete(NULL);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f006 f8c7 	bl	8009364 <vTaskDelete>
}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	@ 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}
 80031de:	bf00      	nop
 80031e0:	200017f0 	.word	0x200017f0
 80031e4:	0800e3dc 	.word	0x0800e3dc
 80031e8:	0800ea78 	.word	0x0800ea78
 80031ec:	20001828 	.word	0x20001828
 80031f0:	0800ea30 	.word	0x0800ea30
 80031f4:	08002f6d 	.word	0x08002f6d
 80031f8:	200017e8 	.word	0x200017e8
 80031fc:	0800ea54 	.word	0x0800ea54
 8003200:	08003079 	.word	0x08003079
 8003204:	200017ec 	.word	0x200017ec

08003208 <StartLIS2MDL>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartLIS2MDL(void *argument)
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b0a8      	sub	sp, #160	@ 0xa0
 800320c:	af0e      	add	r7, sp, #56	@ 0x38
 800320e:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8003216:	461d      	mov	r5, r3
 8003218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800321a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800321c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Run LIS2MDL setup routine. On failure, suspend this task.
    if(LIS2MDL_Setup(args.hspi) != LIS2MDL_SUCCESS) {
 8003224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f96a 	bl	8002500 <LIS2MDL_Setup>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00f      	beq.n	8003252 <StartLIS2MDL+0x4a>
        task_report_error(args, "LIS2MDL SETUP ERROR");
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <StartLIS2MDL+0xe0>)
 8003234:	9304      	str	r3, [sp, #16]
 8003236:	466c      	mov	r4, sp
 8003238:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800323c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800323e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003242:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003248:	f000 f978 	bl	800353c <task_report_error>
        vTaskSuspend(NULL);
 800324c:	2000      	movs	r0, #0
 800324e:	f006 f9b3 	bl	80095b8 <vTaskSuspend>
    LIS2MDL lis2mdl;
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8003252:	f006 fb45 	bl	80098e0 <xTaskGetTickCount>
 8003256:	4603      	mov	r3, r0
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34

        // Read magnetometer from LIS2MDL sensor.
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 800325a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800325c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f984 	bl	8002570 <LIS2MDL_Read>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00f      	beq.n	800328e <StartLIS2MDL+0x86>
            task_report_error(args, "LIS2MDL READ ERROR");
 800326e:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <StartLIS2MDL+0xe4>)
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	466c      	mov	r4, sp
 8003274:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800327a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800327e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003284:	f000 f95a 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003288:	2000      	movs	r0, #0
 800328a:	f006 f995 	bl	80095b8 <vTaskSuspend>
        }

        // Send latest magnetometer reading to UART RingBuffer.
        RingBuffer_t const update = {.type = RB_MAGNETOMETER, .lis2mdl = lis2mdl};
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	2228      	movs	r2, #40	@ 0x28
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f008 fd8d 	bl	800bdb6 <memset>
 800329c:	2302      	movs	r3, #2
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	f107 0410 	add.w	r4, r7, #16
 80032a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        task_send_update_all(args, update);
 80032ae:	ad04      	add	r5, sp, #16
 80032b0:	f107 040c 	add.w	r4, r7, #12
 80032b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c4:	466c      	mov	r4, sp
 80032c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80032ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d6:	f000 f96a 	bl	80035ae <task_send_update_all>

        // Delay 125 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 125);
 80032da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032de:	217d      	movs	r1, #125	@ 0x7d
 80032e0:	4618      	mov	r0, r3
 80032e2:	f006 f8b3 	bl	800944c <vTaskDelayUntil>
    for(;;) {
 80032e6:	e7b4      	b.n	8003252 <StartLIS2MDL+0x4a>
 80032e8:	0800e3f0 	.word	0x0800e3f0
 80032ec:	0800e404 	.word	0x0800e404

080032f0 <StartGyroscope>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartGyroscope(void *argument)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b0a8      	sub	sp, #160	@ 0xa0
 80032f4:	af0e      	add	r7, sp, #56	@ 0x38
 80032f6:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80032fe:	461d      	mov	r5, r3
 8003300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Update gyroscope reading 10 times per second.
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_GYROSCOPE};
 800330c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 800331c:	f006 fae0 	bl	80098e0 <xTaskGetTickCount>
 8003320:	4603      	mov	r3, r0
 8003322:	633b      	str	r3, [r7, #48]	@ 0x30

        // Read gyroscope tilt from LSM6DSO32 sensor.
        if(LSM6DSO32_ReadGyro(&lsm6dso32, args.hspi, G_DATA_TYPE)
 8003324:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003326:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800332a:	2201      	movs	r2, #1
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff f9bf 	bl	80026b0 <LSM6DSO32_ReadGyro>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00f      	beq.n	8003358 <StartGyroscope+0x68>
                != LSM6DSO32_SUCCESS) {
            task_report_error(args, "GYROSCOPE READ ERROR");
 8003338:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <StartGyroscope+0xc4>)
 800333a:	9304      	str	r3, [sp, #16]
 800333c:	466c      	mov	r4, sp
 800333e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003348:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800334c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334e:	f000 f8f5 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003352:	2000      	movs	r0, #0
 8003354:	f006 f930 	bl	80095b8 <vTaskSuspend>
        }

        // Send latest gyroscope reading to UART RingBuffer.
        RingBuffer_t const update = {.type = RB_GYROSCOPE, .lsm6dso32 = lsm6dso32};
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	2228      	movs	r2, #40	@ 0x28
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f008 fd28 	bl	800bdb6 <memset>
 8003366:	2303      	movs	r3, #3
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	f107 040c 	add.w	r4, r7, #12
 800336e:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8003372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003376:	682b      	ldr	r3, [r5, #0]
 8003378:	6023      	str	r3, [r4, #0]
        task_send_update_all(args, update);
 800337a:	ad04      	add	r5, sp, #16
 800337c:	f107 0408 	add.w	r4, r7, #8
 8003380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800338c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003390:	466c      	mov	r4, sp
 8003392:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800339c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80033a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033a2:	f000 f904 	bl	80035ae <task_send_update_all>

        // Delay 100 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 100);
 80033a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033aa:	2164      	movs	r1, #100	@ 0x64
 80033ac:	4618      	mov	r0, r3
 80033ae:	f006 f84d 	bl	800944c <vTaskDelayUntil>
    for(;;) {
 80033b2:	e7b3      	b.n	800331c <StartGyroscope+0x2c>
 80033b4:	0800e42c 	.word	0x0800e42c

080033b8 <StartAccelerometer>:
    }
}

static void StartAccelerometer(void *argument)
{
 80033b8:	b5b0      	push	{r4, r5, r7, lr}
 80033ba:	b0ac      	sub	sp, #176	@ 0xb0
 80033bc:	af0e      	add	r7, sp, #56	@ 0x38
 80033be:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80033c6:	461d      	mov	r5, r3
 80033c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_ACCELEROMETER};
 80033d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    LSM6DSO32_OFFSET offset;

    // Take 100 readings from the accelerometer, compute the average
    //  on all axes, and then save these averages to be used as a
    //  software offset (see LSM6DSO32_UseOffset below).
    LSM6DSO32_CalibrateOffset(&lsm6dso32, &offset, args.hspi, A_DATA_TYPE);
 80033ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ec:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80033f0:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80033f4:	2301      	movs	r3, #1
 80033f6:	f7ff fa43 	bl	8002880 <LSM6DSO32_CalibrateOffset>
    // Update accelerometer reading 25 times per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 80033fa:	f006 fa71 	bl	80098e0 <xTaskGetTickCount>
 80033fe:	4603      	mov	r3, r0
 8003400:	637b      	str	r3, [r7, #52]	@ 0x34

        // Read accelerometer from LSM6DSO32 sensor.
        if(LSM6DSO32_ReadAccel(&lsm6dso32, args.hspi, A_DATA_TYPE)
 8003402:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003404:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003408:	2201      	movs	r2, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f9c4 	bl	8002798 <LSM6DSO32_ReadAccel>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00f      	beq.n	8003436 <StartAccelerometer+0x7e>
                != LSM6DSO32_SUCCESS) {
            task_report_error(args, "ACCELEROMETER READ ERROR");
 8003416:	4b23      	ldr	r3, [pc, #140]	@ (80034a4 <StartAccelerometer+0xec>)
 8003418:	9304      	str	r3, [sp, #16]
 800341a:	466c      	mov	r4, sp
 800341c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003426:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800342a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800342c:	f000 f886 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003430:	2000      	movs	r0, #0
 8003432:	f006 f8c1 	bl	80095b8 <vTaskSuspend>
        }

        // Incorporate computed offset in x, y, and z directions.
        LSM6DSO32_UseOffset(&lsm6dso32, &offset);
 8003436:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800343a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fa8b 	bl	800295c <LSM6DSO32_UseOffset>

        // Send latest accelerometer reading to UART RingBuffer.
        RingBuffer_t const update = {.type = RB_ACCELEROMETER, .lsm6dso32 = lsm6dso32};
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2228      	movs	r2, #40	@ 0x28
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f008 fcb1 	bl	800bdb6 <memset>
 8003454:	2304      	movs	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	f107 0410 	add.w	r4, r7, #16
 800345c:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 8003460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	6023      	str	r3, [r4, #0]
        task_send_update_all(args, update);
 8003468:	ad04      	add	r5, sp, #16
 800346a:	f107 040c 	add.w	r4, r7, #12
 800346e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800347a:	e885 0003 	stmia.w	r5, {r0, r1}
 800347e:	466c      	mov	r4, sp
 8003480:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800348a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800348e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003490:	f000 f88d 	bl	80035ae <task_send_update_all>

        // Delay 100 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 40);
 8003494:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003498:	2128      	movs	r1, #40	@ 0x28
 800349a:	4618      	mov	r0, r3
 800349c:	f005 ffd6 	bl	800944c <vTaskDelayUntil>
    for(;;) {
 80034a0:	e7ab      	b.n	80033fa <StartAccelerometer+0x42>
 80034a2:	bf00      	nop
 80034a4:	0800e444 	.word	0x0800e444

080034a8 <StartLSM6DSO32>:
    }
}

void StartLSM6DSO32(void *argument)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b090      	sub	sp, #64	@ 0x40
 80034ac:	af06      	add	r7, sp, #24
 80034ae:	6078      	str	r0, [r7, #4]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f107 0408 	add.w	r4, r7, #8
 80034b6:	461d      	mov	r5, r3
 80034b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Run LSM6DSO32 setup routine before starting gyroscope or accelerometer
    //  tasks. On failure, suspend before starting subtasks.
    if(LSM6DSO32_Setup(args.hspi) != LSM6DSO32_SUCCESS) {
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f8b2 	bl	8002630 <LSM6DSO32_Setup>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <StartLSM6DSO32+0x4a>
        task_report_error(args, "LSM6DSO32 SETUP ERROR");
 80034d2:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <StartLSM6DSO32+0x78>)
 80034d4:	9304      	str	r3, [sp, #16]
 80034d6:	466c      	mov	r4, sp
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e8:	f000 f828 	bl	800353c <task_report_error>
        vTaskSuspend(NULL);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f006 f863 	bl	80095b8 <vTaskSuspend>
    }

    // Create and start gyroscope and acceleromter tasks.
    RunGyroscopeHandle     = osThreadNew(StartGyroscope,
 80034f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003524 <StartLSM6DSO32+0x7c>)
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	480c      	ldr	r0, [pc, #48]	@ (8003528 <StartLSM6DSO32+0x80>)
 80034f8:	f004 f8ce 	bl	8007698 <osThreadNew>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <StartLSM6DSO32+0x84>)
 8003500:	6013      	str	r3, [r2, #0]
                                         (void*) argument,
                                         &RunGyro_attributes);
    RunAccelerometerHandle = osThreadNew(StartAccelerometer,
 8003502:	4a0b      	ldr	r2, [pc, #44]	@ (8003530 <StartLSM6DSO32+0x88>)
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	480b      	ldr	r0, [pc, #44]	@ (8003534 <StartLSM6DSO32+0x8c>)
 8003508:	f004 f8c6 	bl	8007698 <osThreadNew>
 800350c:	4603      	mov	r3, r0
 800350e:	4a0a      	ldr	r2, [pc, #40]	@ (8003538 <StartLSM6DSO32+0x90>)
 8003510:	6013      	str	r3, [r2, #0]
                                         (void*) argument,
                                         &RunAccel_attributes);

    // Since this task is only used for setup and to start the gyroscope
    //  and accelerometer tasks, delete this task from the FreeRTOS kernel.
    vTaskDelete(NULL);
 8003512:	2000      	movs	r0, #0
 8003514:	f005 ff26 	bl	8009364 <vTaskDelete>
}
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	@ 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bdb0      	pop	{r4, r5, r7, pc}
 8003520:	0800e460 	.word	0x0800e460
 8003524:	0800ea88 	.word	0x0800ea88
 8003528:	080032f1 	.word	0x080032f1
 800352c:	2000182c 	.word	0x2000182c
 8003530:	0800eaac 	.word	0x0800eaac
 8003534:	080033b9 	.word	0x080033b9
 8003538:	20001830 	.word	0x20001830

0800353c <task_report_error>:
/*       CORE FUNCTIONS       */
/******************************/

void task_report_error(TASK_ARGS const args,
                       char * const message)
{
 800353c:	b084      	sub	sp, #16
 800353e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003540:	b093      	sub	sp, #76	@ 0x4c
 8003542:	af08      	add	r7, sp, #32
 8003544:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8003548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBuffer_t const tmp = {.type = RB_ERROR,
 800354c:	463b      	mov	r3, r7
 800354e:	2228      	movs	r2, #40	@ 0x28
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f008 fc2f 	bl	800bdb6 <memset>
 8003558:	2306      	movs	r3, #6
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800355e:	607b      	str	r3, [r7, #4]
                              .error_buf = message};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8003560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	4618      	mov	r0, r3
 800356a:	f004 f9c8 	bl	80078fe <osMutexAcquire>
    RingBuffer_enqueue(args.uart_rb, tmp);
 800356e:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 8003570:	466d      	mov	r5, sp
 8003572:	f107 040c 	add.w	r4, r7, #12
 8003576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800357e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003582:	463b      	mov	r3, r7
 8003584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003586:	4630      	mov	r0, r6
 8003588:	f7fd fd1a 	bl	8000fc0 <RingBuffer_enqueue>
    osMutexRelease(*args.uartMutex);
 800358c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f004 f9ff 	bl	8007994 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8003596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f004 fb12 	bl	8007bc4 <osSemaphoreRelease>
}
 80035a0:	bf00      	nop
 80035a2:	372c      	adds	r7, #44	@ 0x2c
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80035aa:	b004      	add	sp, #16
 80035ac:	4770      	bx	lr

080035ae <task_send_update_all>:

void task_send_update_all(TASK_ARGS const args,
                          RingBuffer_t const update)
{
 80035ae:	b084      	sub	sp, #16
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	b089      	sub	sp, #36	@ 0x24
 80035b4:	af08      	add	r7, sp, #32
 80035b6:	f107 0418 	add.w	r4, r7, #24
 80035ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.smMutex, osWaitForever);
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f04f 31ff 	mov.w	r1, #4294967295
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f999 	bl	80078fe <osMutexAcquire>
    RingBuffer_enqueue(args.sm_rb, update);
 80035cc:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 80035ce:	466d      	mov	r5, sp
 80035d0:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80035d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80035dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80035e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7fd fcea 	bl	8000fc0 <RingBuffer_enqueue>
    osMutexRelease(*args.smMutex);
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 f9cf 	bl	8007994 <osMutexRelease>

    // Notify the State Machine task that a RingBuffer_t object
    //  has been enqueued.
    osSemaphoreRelease(*args.smSemaphore);
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fae2 	bl	8007bc4 <osSemaphoreRelease>

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f04f 31ff 	mov.w	r1, #4294967295
 8003608:	4618      	mov	r0, r3
 800360a:	f004 f978 	bl	80078fe <osMutexAcquire>
    RingBuffer_enqueue(args.uart_rb, update);
 800360e:	6a3e      	ldr	r6, [r7, #32]
 8003610:	466d      	mov	r5, sp
 8003612:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800361a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800361e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003628:	4630      	mov	r0, r6
 800362a:	f7fd fcc9 	bl	8000fc0 <RingBuffer_enqueue>
    osMutexRelease(*args.uartMutex);
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f004 f9ae 	bl	8007994 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f004 fac1 	bl	8007bc4 <osSemaphoreRelease>
}
 8003642:	bf00      	nop
 8003644:	3704      	adds	r7, #4
 8003646:	46bd      	mov	sp, r7
 8003648:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800364c:	b004      	add	sp, #16
 800364e:	4770      	bx	lr

08003650 <task_send_update_log>:

void task_send_update_log(TASK_ARGS const args,
                          RingBuffer_t const update)
{
 8003650:	b084      	sub	sp, #16
 8003652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003654:	b089      	sub	sp, #36	@ 0x24
 8003656:	af08      	add	r7, sp, #32
 8003658:	f107 0418 	add.w	r4, r7, #24
 800365c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8003660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	4618      	mov	r0, r3
 800366a:	f004 f948 	bl	80078fe <osMutexAcquire>
    RingBuffer_enqueue(args.uart_rb, update);
 800366e:	6a3e      	ldr	r6, [r7, #32]
 8003670:	466d      	mov	r5, sp
 8003672:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800367e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003682:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003688:	4630      	mov	r0, r6
 800368a:	f7fd fc99 	bl	8000fc0 <RingBuffer_enqueue>
    osMutexRelease(*args.uartMutex);
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f97e 	bl	8007994 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f004 fa91 	bl	8007bc4 <osSemaphoreRelease>
}
 80036a2:	bf00      	nop
 80036a4:	3704      	adds	r7, #4
 80036a6:	46bd      	mov	sp, r7
 80036a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80036ac:	b004      	add	sp, #16
 80036ae:	4770      	bx	lr

080036b0 <StartStateMachine>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartStateMachine(void *argument)
{
 80036b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b4:	f5ad 5da5 	sub.w	sp, sp, #5280	@ 0x14a0
 80036b8:	b086      	sub	sp, #24
 80036ba:	af0e      	add	r7, sp, #56	@ 0x38
 80036bc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80036c0:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80036c4:	6018      	str	r0, [r3, #0]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 80036c6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80036ca:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f507 54a2 	add.w	r4, r7, #5184	@ 0x1440
 80036d4:	f104 0410 	add.w	r4, r4, #16
 80036d8:	461d      	mov	r5, r3
 80036da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80036e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Initialize and perform basic state machine setup. NOTE: The state
    //  machine is implemented using a Kalman Filter.
    StateMachine stateMachine;
    SM_ctor(&stateMachine);
 80036e6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80036ea:	3b08      	subs	r3, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fddd 	bl	80012ac <SM_ctor>

    // Update the state machine indefinitely.
    for(;;) {
        // Wait for a producer task to read from a sensor, place the data
        //  in the State Machine ring buffer, and post a semaphore.
        osSemaphoreAcquire(*args.smSemaphore, osWaitForever);
 80036f2:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80036f6:	f103 0304 	add.w	r3, r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003702:	4618      	mov	r0, r3
 8003704:	f004 fa0c 	bl	8007b20 <osSemaphoreAcquire>

        // Retrieve an update from the State Machine ring buffer.
        osMutexAcquire(*args.smMutex, osWaitForever);
 8003708:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 800370c:	f103 030c 	add.w	r3, r3, #12
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	4618      	mov	r0, r3
 800371a:	f004 f8f0 	bl	80078fe <osMutexAcquire>
        status = RingBuffer_dequeue(args.sm_rb, &update);
 800371e:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8003722:	f103 031c 	add.w	r3, r3, #28
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800372c:	3b10      	subs	r3, #16
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fd fc91 	bl	8001058 <RingBuffer_dequeue>
 8003736:	4603      	mov	r3, r0
 8003738:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 800373c:	f102 0217 	add.w	r2, r2, #23
 8003740:	7013      	strb	r3, [r2, #0]
        osMutexRelease(*args.smMutex);
 8003742:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8003746:	f103 030c 	add.w	r3, r3, #12
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f004 f920 	bl	8007994 <osMutexRelease>

        // If ring buffer dequeue returns a failure, report the error
        //  via the UART ring buffer and then suspend the State Machine task.
        if(status != RB_SUCCESS) {
 8003754:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8003758:	f103 0317 	add.w	r3, r3, #23
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <StartStateMachine+0xd6>
            task_report_error(args, "STATE MACHINE DEQUEUE ERROR");
 8003762:	4b9f      	ldr	r3, [pc, #636]	@ (80039e0 <StartStateMachine+0x330>)
 8003764:	9304      	str	r3, [sp, #16]
 8003766:	466c      	mov	r4, sp
 8003768:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 800376c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800376e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003772:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8003776:	f103 0310 	add.w	r3, r3, #16
 800377a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800377c:	f7ff fede 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003780:	2000      	movs	r0, #0
 8003782:	f005 ff19 	bl	80095b8 <vTaskSuspend>
        }

        switch(update.type) {
 8003786:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800378a:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d849      	bhi.n	8003828 <StartStateMachine+0x178>
 8003794:	a201      	add	r2, pc, #4	@ (adr r2, 800379c <StartStateMachine+0xec>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	0800384f 	.word	0x0800384f
 80037a0:	08003829 	.word	0x08003829
 80037a4:	0800384f 	.word	0x0800384f
 80037a8:	0800384f 	.word	0x0800384f
 80037ac:	080037b1 	.word	0x080037b1
        case RB_GYROSCOPE:
            break;
        // If receiving an accelerometer measurement:
        case RB_ACCELEROMETER:
            // Set matrix values and initialize ARM math structure.
            z[0][0] = update.lsm6dso32.X;
 80037b0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037b4:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037be:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80037c2:	601a      	str	r2, [r3, #0]
            z[1][0] = update.lsm6dso32.Y;
 80037c4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037c8:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037d2:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80037d6:	605a      	str	r2, [r3, #4]
            z[2][0] = update.lsm6dso32.Z;
 80037d8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037dc:	f5a3 737c 	sub.w	r3, r3, #1008	@ 0x3f0
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80037e6:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80037ea:	609a      	str	r2, [r3, #8]
            arm_mat_init_f32(&z_instance, 3, 1, &z[0][0]);
 80037ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037f0:	3b10      	subs	r3, #16
 80037f2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80037f6:	3804      	subs	r0, #4
 80037f8:	2201      	movs	r2, #1
 80037fa:	2103      	movs	r1, #3
 80037fc:	f000 fc7e 	bl	80040fc <arm_mat_init_f32>
            // Compute time step.
            timestamp = TIM5->CNT;
 8003800:	4b78      	ldr	r3, [pc, #480]	@ (80039e4 <StartStateMachine+0x334>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 8003808:	f102 0210 	add.w	r2, r2, #16
 800380c:	6013      	str	r3, [r2, #0]
            dt = 0.025;
 800380e:	4b76      	ldr	r3, [pc, #472]	@ (80039e8 <StartStateMachine+0x338>)
 8003810:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 8003814:	f102 0218 	add.w	r2, r2, #24
 8003818:	6013      	str	r3, [r2, #0]
            // Set update flag.
            update_type = SM_ACCELEROMETER;
 800381a:	2300      	movs	r3, #0
 800381c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 8003820:	f102 021f 	add.w	r2, r2, #31
 8003824:	7013      	strb	r3, [r2, #0]
            break;
 8003826:	e013      	b.n	8003850 <StartStateMachine+0x1a0>
        // Otherwise, notify of a State Machine error and suspend task.
        default:
            task_report_error(args, "STATE MACHINE UPDATE TYPE ERROR");
 8003828:	4b70      	ldr	r3, [pc, #448]	@ (80039ec <StartStateMachine+0x33c>)
 800382a:	9304      	str	r3, [sp, #16]
 800382c:	466c      	mov	r4, sp
 800382e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8003832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003838:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800383c:	f103 0310 	add.w	r3, r3, #16
 8003840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003842:	f7ff fe7b 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 8003846:	2000      	movs	r0, #0
 8003848:	f005 feb6 	bl	80095b8 <vTaskSuspend>
 800384c:	e000      	b.n	8003850 <StartStateMachine+0x1a0>
            break;
 800384e:	bf00      	nop
        }

        // Update state machine.
        SM_set_timestep(&stateMachine, dt);
 8003850:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003854:	3b08      	subs	r3, #8
 8003856:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 800385a:	f102 0218 	add.w	r2, r2, #24
 800385e:	ed92 0a00 	vldr	s0, [r2]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fef0 	bl	8001648 <SM_set_timestep>
        SM_predict(&stateMachine);
 8003868:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800386c:	3b08      	subs	r3, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd ff74 	bl	800175c <SM_predict>
        if(SM_update(&stateMachine, z_instance, update_type) != SM_SUCCESS) {
 8003874:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8003878:	f103 031f 	add.w	r3, r3, #31
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8003882:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8003886:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800388a:	3808      	subs	r0, #8
 800388c:	ca06      	ldmia	r2, {r1, r2}
 800388e:	f7fd ffa6 	bl	80017de <SM_update>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d011      	beq.n	80038bc <StartStateMachine+0x20c>
            task_report_error(args, "STATE MACHINE FILTER TYPE ERROR");
 8003898:	4b55      	ldr	r3, [pc, #340]	@ (80039f0 <StartStateMachine+0x340>)
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	466c      	mov	r4, sp
 800389e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80038a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80038a8:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 80038ac:	f103 0310 	add.w	r3, r3, #16
 80038b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b2:	f7ff fe43 	bl	800353c <task_report_error>
            vTaskSuspend(NULL);
 80038b6:	2000      	movs	r0, #0
 80038b8:	f005 fe7e 	bl	80095b8 <vTaskSuspend>
        }

        // Update state machine object to pass to UART ring buffer.
        state = (StateMachine_t){
            .pos_x = stateMachine.x[0][0],
 80038bc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038c0:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038c4:	f8d3 8000 	ldr.w	r8, [r3]
            .vel_x = stateMachine.x[1][0],
 80038c8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038cc:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038d0:	f8d3 e004 	ldr.w	lr, [r3, #4]
            .acc_x = stateMachine.x[2][0],
 80038d4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038d8:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038dc:	f8d3 c008 	ldr.w	ip, [r3, #8]
            .pos_y = stateMachine.x[3][0],
 80038e0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038e4:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038e8:	68de      	ldr	r6, [r3, #12]
            .vel_y = stateMachine.x[4][0],
 80038ea:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038ee:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038f2:	691d      	ldr	r5, [r3, #16]
            .acc_y = stateMachine.x[5][0],
 80038f4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80038f8:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 80038fc:	695c      	ldr	r4, [r3, #20]
            .pos_z = stateMachine.x[6][0],
 80038fe:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003902:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8003906:	6998      	ldr	r0, [r3, #24]
            .vel_z = stateMachine.x[7][0],
 8003908:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800390c:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8003910:	69d9      	ldr	r1, [r3, #28]
            .acc_z = stateMachine.x[8][0]
 8003912:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003916:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 800391a:	6a1a      	ldr	r2, [r3, #32]
        state = (StateMachine_t){
 800391c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003920:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003924:	f8c3 8000 	str.w	r8, [r3]
 8003928:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800392c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003930:	f8c3 e004 	str.w	lr, [r3, #4]
 8003934:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003938:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800393c:	f8c3 c008 	str.w	ip, [r3, #8]
 8003940:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003944:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003948:	60de      	str	r6, [r3, #12]
 800394a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800394e:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003952:	611d      	str	r5, [r3, #16]
 8003954:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003958:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800395c:	615c      	str	r4, [r3, #20]
 800395e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003962:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003966:	6198      	str	r0, [r3, #24]
 8003968:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800396c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8003970:	61d9      	str	r1, [r3, #28]
 8003972:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003976:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 800397a:	621a      	str	r2, [r3, #32]
        };

        // Send update to UART ring buffer.
        sm_update = (RingBuffer_t){.type = RB_STATEMACHINE, .state = state};
 800397c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8003980:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8003984:	2205      	movs	r2, #5
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800398c:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8003990:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8003994:	f2a2 423c 	subw	r2, r2, #1084	@ 0x43c
 8003998:	1d1c      	adds	r4, r3, #4
 800399a:	4615      	mov	r5, r2
 800399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	6023      	str	r3, [r4, #0]
        task_send_update_log(args, sm_update);
 80039a8:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80039ac:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80039b0:	ac04      	add	r4, sp, #16
 80039b2:	461d      	mov	r5, r3
 80039b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039c0:	e884 0003 	stmia.w	r4, {r0, r1}
 80039c4:	466c      	mov	r4, sp
 80039c6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80039ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80039d0:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 80039d4:	f103 0310 	add.w	r3, r3, #16
 80039d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039da:	f7ff fe39 	bl	8003650 <task_send_update_log>
    for(;;) {
 80039de:	e688      	b.n	80036f2 <StartStateMachine+0x42>
 80039e0:	0800e478 	.word	0x0800e478
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	3ccccccd 	.word	0x3ccccccd
 80039ec:	0800e494 	.word	0x0800e494
 80039f0:	0800e4b4 	.word	0x0800e4b4

080039f4 <transmit>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline UART_STATUS transmit(UART_HandleTypeDef * const huart,
                                   char * const buf)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
    UART_STATUS status = UART_SUCCESS;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]

    // Conduct UART transaction to send message.
    if(HAL_UART_Transmit(huart, (uint8_t*)buf, strlen(buf), HAL_TIMEOUT)
 8003a02:	6838      	ldr	r0, [r7, #0]
 8003a04:	f7fc fc54 	bl	80002b0 <strlen>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <transmit+0x38>)
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f003 f9f7 	bl	8006e04 <HAL_UART_Transmit>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <transmit+0x2c>
            != HAL_OK) {
        status = UART_FAILURE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	00186a00 	.word	0x00186a00

08003a30 <define_template>:

static inline UART_STATUS define_template(char * const buf)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = UART_SUCCESS;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

    // Place UART terminal template in buffer.
    if(sprintf(buf, "%c[0;0H\n"
 8003a3c:	221b      	movs	r2, #27
 8003a3e:	4907      	ldr	r1, [pc, #28]	@ (8003a5c <define_template+0x2c>)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f008 f955 	bl	800bcf0 <siprintf>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da01      	bge.n	8003a50 <define_template+0x20>
                 "\tpos_z:\t\t\tm\r\n"
                 "\tvel_z:\t\t\tm/s\r\n"
                 "\tacc_z:\t\t\tm/s^2\r\n",
                 0x1b)
            < 0) {
        status = UART_FAILURE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	0800e4d4 	.word	0x0800e4d4

08003a60 <set_pressure_reading>:

static inline void set_pressure_reading(char * const buf,
                                        BMP388 const * const bmp388)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
    sprintf(buf, "%c[0;0H"
                 "\n\n"
                 "\t\t%5.2f   \t\t\t%3.2f sec     ",
                 0x1b,
                 bmp388->pressure,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
    sprintf(buf, "%c[0;0H"
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd8a 	bl	8000588 <__aeabi_f2d>
 8003a74:	4604      	mov	r4, r0
 8003a76:	460d      	mov	r5, r1
                 bmp388->timestamp / TIM5_CLK_SPEED);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
    sprintf(buf, "%c[0;0H"
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fc fd61 	bl	8000544 <__aeabi_ui2d>
 8003a82:	a30c      	add	r3, pc, #48	@ (adr r3, 8003ab4 <set_pressure_reading+0x54>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f7fc ff00 	bl	800088c <__aeabi_ddiv>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a94:	e9cd 4500 	strd	r4, r5, [sp]
 8003a98:	221b      	movs	r2, #27
 8003a9a:	4905      	ldr	r1, [pc, #20]	@ (8003ab0 <set_pressure_reading+0x50>)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f008 f927 	bl	800bcf0 <siprintf>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	f3af 8000 	nop.w
 8003ab0:	0800e640 	.word	0x0800e640
 8003ab4:	00000000 	.word	0x00000000
 8003ab8:	419312d0 	.word	0x419312d0
 8003abc:	00000000 	.word	0x00000000

08003ac0 <set_temperature_reading>:

static inline void set_temperature_reading(char * const buf,
                                           BMP388 const * const bmp388)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af04      	add	r7, sp, #16
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
    sprintf(buf, "%c[0;0H"
                 "\n"
                 "\t\t%5.2f   \t\t\t%3.2f sec     ",
                 0x1b,
                 bmp388->temperature,
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
    sprintf(buf, "%c[0;0H"
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd5a 	bl	8000588 <__aeabi_f2d>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	460d      	mov	r5, r1
                 bmp388->timestamp / TIM5_CLK_SPEED);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
    sprintf(buf, "%c[0;0H"
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd31 	bl	8000544 <__aeabi_ui2d>
 8003ae2:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b14 <set_temperature_reading+0x54>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fed0 	bl	800088c <__aeabi_ddiv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003af4:	e9cd 4500 	strd	r4, r5, [sp]
 8003af8:	221b      	movs	r2, #27
 8003afa:	4905      	ldr	r1, [pc, #20]	@ (8003b10 <set_temperature_reading+0x50>)
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f008 f8f7 	bl	800bcf0 <siprintf>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	0800e668 	.word	0x0800e668
 8003b14:	00000000 	.word	0x00000000
 8003b18:	419312d0 	.word	0x419312d0
 8003b1c:	00000000 	.word	0x00000000

08003b20 <set_magnetometer_reading>:

static inline void set_magnetometer_reading(char * const buf,
                                            LIS2MDL const * const lis2mdl)
{
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	b093      	sub	sp, #76	@ 0x4c
 8003b26:	af0c      	add	r7, sp, #48	@ 0x30
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
    float const timestamp = lis2mdl->timestamp / TIM5_CLK_SPEED;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fd07 	bl	8000544 <__aeabi_ui2d>
 8003b36:	a323      	add	r3, pc, #140	@ (adr r3, 8003bc4 <set_magnetometer_reading+0xa4>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fea6 	bl	800088c <__aeabi_ddiv>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fd f84e 	bl	8000be8 <__aeabi_d2f>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	617b      	str	r3, [r7, #20]
                 "\t\t%hd    \t\t\t\t%3.2f sec      \r\n"
                 "\t\t%hd    \t\t\t\t%3.2f sec      \r\n"
                 "\t\t%hd    \t\t\t%3.2f sec      \r\n"
                 "\t\t%5.2f    ",
                 0x1b,
                 lis2mdl->X,
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f9b3 3000 	ldrsh.w	r3, [r3]
    sprintf(buf, "%c[0;0H"
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f7fc fd15 	bl	8000588 <__aeabi_f2d>
 8003b5e:	4604      	mov	r4, r0
 8003b60:	460d      	mov	r5, r1
                 timestamp,
                 lis2mdl->Y,
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    sprintf(buf, "%c[0;0H"
 8003b68:	461e      	mov	r6, r3
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7fc fd0c 	bl	8000588 <__aeabi_f2d>
 8003b70:	4680      	mov	r8, r0
 8003b72:	4689      	mov	r9, r1
                 timestamp,
                 lis2mdl->Z,
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    sprintf(buf, "%c[0;0H"
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7fc fd03 	bl	8000588 <__aeabi_f2d>
 8003b82:	4682      	mov	sl, r0
 8003b84:	468b      	mov	fp, r1
                 timestamp,
                 lis2mdl->heading);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	68db      	ldr	r3, [r3, #12]
    sprintf(buf, "%c[0;0H"
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fcfc 	bl	8000588 <__aeabi_f2d>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003b98:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	9206      	str	r2, [sp, #24]
 8003ba0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003ba4:	9602      	str	r6, [sp, #8]
 8003ba6:	e9cd 4500 	strd	r4, r5, [sp]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	221b      	movs	r2, #27
 8003bae:	4904      	ldr	r1, [pc, #16]	@ (8003bc0 <set_magnetometer_reading+0xa0>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f008 f89d 	bl	800bcf0 <siprintf>
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc0:	0800e68c 	.word	0x0800e68c
 8003bc4:	00000000 	.word	0x00000000
 8003bc8:	419312d0 	.word	0x419312d0
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <set_gyroscope_reading>:

static inline void set_gyroscope_reading(char * const buf,
                                         LSM6DSO32 const * const lsm6dso32)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b094      	sub	sp, #80	@ 0x50
 8003bd6:	af0c      	add	r7, sp, #48	@ 0x30
 8003bd8:	6178      	str	r0, [r7, #20]
 8003bda:	6139      	str	r1, [r7, #16]
    float const timestamp = lsm6dso32->timestamp / TIM5_CLK_SPEED;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fcaf 	bl	8000544 <__aeabi_ui2d>
 8003be6:	a327      	add	r3, pc, #156	@ (adr r3, 8003c84 <set_gyroscope_reading+0xb4>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fe4e 	bl	800088c <__aeabi_ddiv>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7fc fff6 	bl	8000be8 <__aeabi_d2f>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	61fb      	str	r3, [r7, #28]
                 "\n\n\n\n\n\n\n\n\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     ",
                 0x1b,
                 lsm6dso32->X,
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	689b      	ldr	r3, [r3, #8]
    sprintf(buf, "%c[0;0H"
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fc fcbf 	bl	8000588 <__aeabi_f2d>
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	460d      	mov	r5, r1
 8003c0e:	69f8      	ldr	r0, [r7, #28]
 8003c10:	f7fc fcba 	bl	8000588 <__aeabi_f2d>
 8003c14:	4680      	mov	r8, r0
 8003c16:	4689      	mov	r9, r1
                 timestamp,
                 lsm6dso32->Y,
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	68db      	ldr	r3, [r3, #12]
    sprintf(buf, "%c[0;0H"
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fcb3 	bl	8000588 <__aeabi_f2d>
 8003c22:	4682      	mov	sl, r0
 8003c24:	468b      	mov	fp, r1
 8003c26:	69f8      	ldr	r0, [r7, #28]
 8003c28:	f7fc fcae 	bl	8000588 <__aeabi_f2d>
 8003c2c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 timestamp,
                 lsm6dso32->Z,
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	691b      	ldr	r3, [r3, #16]
    sprintf(buf, "%c[0;0H"
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fca7 	bl	8000588 <__aeabi_f2d>
 8003c3a:	e9c7 0100 	strd	r0, r1, [r7]
 8003c3e:	69f8      	ldr	r0, [r7, #28]
 8003c40:	f7fc fca2 	bl	8000588 <__aeabi_f2d>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003c4c:	ed97 7b00 	vldr	d7, [r7]
 8003c50:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003c54:	ed97 7b02 	vldr	d7, [r7, #8]
 8003c58:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c5c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003c60:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003c64:	e9cd 4500 	strd	r4, r5, [sp]
 8003c68:	221b      	movs	r2, #27
 8003c6a:	4905      	ldr	r1, [pc, #20]	@ (8003c80 <set_gyroscope_reading+0xb0>)
 8003c6c:	6978      	ldr	r0, [r7, #20]
 8003c6e:	f008 f83f 	bl	800bcf0 <siprintf>
                 timestamp);
}
 8003c72:	bf00      	nop
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7c:	f3af 8000 	nop.w
 8003c80:	0800e6fc 	.word	0x0800e6fc
 8003c84:	00000000 	.word	0x00000000
 8003c88:	419312d0 	.word	0x419312d0
 8003c8c:	00000000 	.word	0x00000000

08003c90 <set_accelerometer_reading>:

static inline void set_accelerometer_reading(char * const buf,
                                             LSM6DSO32 const * const lsm6dso32)
{
 8003c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c94:	b094      	sub	sp, #80	@ 0x50
 8003c96:	af0c      	add	r7, sp, #48	@ 0x30
 8003c98:	6178      	str	r0, [r7, #20]
 8003c9a:	6139      	str	r1, [r7, #16]
    float const timestamp = lsm6dso32->timestamp / TIM5_CLK_SPEED;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fc4f 	bl	8000544 <__aeabi_ui2d>
 8003ca6:	a327      	add	r3, pc, #156	@ (adr r3, 8003d44 <set_accelerometer_reading+0xb4>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fdee 	bl	800088c <__aeabi_ddiv>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f7fc ff96 	bl	8000be8 <__aeabi_d2f>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	61fb      	str	r3, [r7, #28]
                 "\n\n\n\n\n\n\n\n\n\n\n\n\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                 "\t\t%5.2f    \t\t\t%3.2f sec     ",
                 0x1b,
                 lsm6dso32->X,
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	689b      	ldr	r3, [r3, #8]
    sprintf(buf, "%c[0;0H"
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc5f 	bl	8000588 <__aeabi_f2d>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	460d      	mov	r5, r1
 8003cce:	69f8      	ldr	r0, [r7, #28]
 8003cd0:	f7fc fc5a 	bl	8000588 <__aeabi_f2d>
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
                 timestamp,
                 lsm6dso32->Y,
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	68db      	ldr	r3, [r3, #12]
    sprintf(buf, "%c[0;0H"
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fc53 	bl	8000588 <__aeabi_f2d>
 8003ce2:	4682      	mov	sl, r0
 8003ce4:	468b      	mov	fp, r1
 8003ce6:	69f8      	ldr	r0, [r7, #28]
 8003ce8:	f7fc fc4e 	bl	8000588 <__aeabi_f2d>
 8003cec:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 timestamp,
                 lsm6dso32->Z,
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	691b      	ldr	r3, [r3, #16]
    sprintf(buf, "%c[0;0H"
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fc47 	bl	8000588 <__aeabi_f2d>
 8003cfa:	e9c7 0100 	strd	r0, r1, [r7]
 8003cfe:	69f8      	ldr	r0, [r7, #28]
 8003d00:	f7fc fc42 	bl	8000588 <__aeabi_f2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003d0c:	ed97 7b00 	vldr	d7, [r7]
 8003d10:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003d14:	ed97 7b02 	vldr	d7, [r7, #8]
 8003d18:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d1c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003d20:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003d24:	e9cd 4500 	strd	r4, r5, [sp]
 8003d28:	221b      	movs	r2, #27
 8003d2a:	4905      	ldr	r1, [pc, #20]	@ (8003d40 <set_accelerometer_reading+0xb0>)
 8003d2c:	6978      	ldr	r0, [r7, #20]
 8003d2e:	f007 ffdf 	bl	800bcf0 <siprintf>
                 timestamp);
}
 8003d32:	bf00      	nop
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3c:	f3af 8000 	nop.w
 8003d40:	0800e768 	.word	0x0800e768
 8003d44:	00000000 	.word	0x00000000
 8003d48:	419312d0 	.word	0x419312d0

08003d4c <set_sm_output>:

static inline void set_sm_output(char * const buf,
                                 StateMachine_t const * const state)
{
 8003d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d50:	b09e      	sub	sp, #120	@ 0x78
 8003d52:	af12      	add	r7, sp, #72	@ 0x48
 8003d54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003d56:	62b9      	str	r1, [r7, #40]	@ 0x28
                 "\t\t%5.2f\r\n"
                 "\t\t%5.2f\r\n"
                 "\t\t%5.2f\r\n"
                 "\t\t%5.2f",
                 0x1b,
                 state->pos_x,
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	681b      	ldr	r3, [r3, #0]
    sprintf(buf, "%c[0;0H"
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fc13 	bl	8000588 <__aeabi_f2d>
 8003d62:	e9c7 0108 	strd	r0, r1, [r7, #32]
                 state->vel_x,
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	685b      	ldr	r3, [r3, #4]
    sprintf(buf, "%c[0;0H"
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fc0c 	bl	8000588 <__aeabi_f2d>
 8003d70:	e9c7 0106 	strd	r0, r1, [r7, #24]
                 state->acc_x,
 8003d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d76:	689b      	ldr	r3, [r3, #8]
    sprintf(buf, "%c[0;0H"
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc fc05 	bl	8000588 <__aeabi_f2d>
 8003d7e:	e9c7 0104 	strd	r0, r1, [r7, #16]
                 state->pos_y,
 8003d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d84:	68db      	ldr	r3, [r3, #12]
    sprintf(buf, "%c[0;0H"
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fbfe 	bl	8000588 <__aeabi_f2d>
 8003d8c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 state->vel_y,
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	691b      	ldr	r3, [r3, #16]
    sprintf(buf, "%c[0;0H"
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fbf7 	bl	8000588 <__aeabi_f2d>
 8003d9a:	e9c7 0100 	strd	r0, r1, [r7]
                 state->acc_y,
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	695b      	ldr	r3, [r3, #20]
    sprintf(buf, "%c[0;0H"
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc fbf0 	bl	8000588 <__aeabi_f2d>
 8003da8:	4682      	mov	sl, r0
 8003daa:	468b      	mov	fp, r1
                 state->pos_z,
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	699b      	ldr	r3, [r3, #24]
    sprintf(buf, "%c[0;0H"
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc fbe9 	bl	8000588 <__aeabi_f2d>
 8003db6:	4680      	mov	r8, r0
 8003db8:	4689      	mov	r9, r1
                 state->vel_z,
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	69db      	ldr	r3, [r3, #28]
    sprintf(buf, "%c[0;0H"
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc fbe2 	bl	8000588 <__aeabi_f2d>
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	460d      	mov	r5, r1
                 state->acc_z);
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	6a1b      	ldr	r3, [r3, #32]
    sprintf(buf, "%c[0;0H"
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fbdb 	bl	8000588 <__aeabi_f2d>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003dda:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8003dde:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8003de2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003de6:	ed97 7b00 	vldr	d7, [r7]
 8003dea:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003dee:	ed97 7b02 	vldr	d7, [r7, #8]
 8003df2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003df6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003dfa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003dfe:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e06:	ed97 7b08 	vldr	d7, [r7, #32]
 8003e0a:	ed8d 7b00 	vstr	d7, [sp]
 8003e0e:	221b      	movs	r2, #27
 8003e10:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <set_sm_output+0xd8>)
 8003e12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e14:	f007 ff6c 	bl	800bcf0 <siprintf>
}
 8003e18:	bf00      	nop
 8003e1a:	3730      	adds	r7, #48	@ 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e22:	bf00      	nop
 8003e24:	0800e7d8 	.word	0x0800e7d8

08003e28 <set_rb_error_notification>:

static inline void set_rb_error_notification(char * const buf,
                                             char const * const error_buf)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
    sprintf(buf, "%c[0;0H"
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	221b      	movs	r2, #27
 8003e36:	4904      	ldr	r1, [pc, #16]	@ (8003e48 <set_rb_error_notification+0x20>)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f007 ff59 	bl	800bcf0 <siprintf>
                 "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                 "%s    ",
                 0x1b,
                 error_buf);
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	0800e840 	.word	0x0800e840

08003e4c <set_type_error_notification>:

static inline void set_type_error_notification(char * const buf,
                                               char const * const error_buf)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    sprintf(buf, "%c[0;0H"
 8003e56:	221b      	movs	r2, #27
 8003e58:	4903      	ldr	r1, [pc, #12]	@ (8003e68 <set_type_error_notification+0x1c>)
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f007 ff48 	bl	800bcf0 <siprintf>
                 "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                 "UART RECEIVED INVALID RB TYPE   ",
                 0x1b);
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	0800e860 	.word	0x0800e860

08003e6c <StartUART>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartUART(void *argument)
{
 8003e6c:	b5b0      	push	{r4, r5, r7, lr}
 8003e6e:	b0f0      	sub	sp, #448	@ 0x1c0
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003e76:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e7a:	6018      	str	r0, [r3, #0]
    TASK_ARGS const args = *(TASK_ARGS*)argument;
 8003e7c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003e80:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f507 74ce 	add.w	r4, r7, #412	@ 0x19c
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    char buf[360];

    // Set character buffer to hold UART template.
    if(define_template(buf) != UART_SUCCESS) {
 8003e98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fdc7 	bl	8003a30 <define_template>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <StartUART+0x42>
        vTaskSuspend(NULL);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f005 fb85 	bl	80095b8 <vTaskSuspend>
    }

    // Transmit template to terminal using UART.
    if(transmit(args.huart, buf) != UART_SUCCESS) {
 8003eae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003eb2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fd9b 	bl	80039f4 <transmit>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <StartUART+0x5e>
        vTaskSuspend(NULL);
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f005 fb77 	bl	80095b8 <vTaskSuspend>
    RB_STATUS status;
    // Run UART task indefinitely.
    for(;;) {
        // Wait for producer or state machine task to send an update
        //  to the UART ring buffer and post a semaphore.
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 8003eca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 fe23 	bl	8007b20 <osSemaphoreAcquire>

        // Retrieve latest update from UART ring buffer with mutex
        //  to prevent race conditions possibly corrupting data.
        osMutexAcquire(*args.uartMutex, osWaitForever);
 8003eda:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 fd0a 	bl	80078fe <osMutexAcquire>
        status = RingBuffer_dequeue(args.uart_rb, &update);
 8003eea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003eee:	f107 020c 	add.w	r2, r7, #12
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd f8af 	bl	8001058 <RingBuffer_dequeue>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
        osMutexRelease(*args.uartMutex);
 8003f00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 fd44 	bl	8007994 <osMutexRelease>

        // If unsuccessful retrieving an update, print error to the
        //  terminal and suspend UART task.
        if(status != RB_SUCCESS) {
 8003f0c:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <StartUART+0xcc>
            sprintf(buf, "%c[0;0H RINGBUFFER DEQUEUE ERROR", 0x1b);
 8003f14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f18:	221b      	movs	r2, #27
 8003f1a:	4945      	ldr	r1, [pc, #276]	@ (8004030 <StartUART+0x1c4>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f007 fee7 	bl	800bcf0 <siprintf>
            transmit(args.huart, buf);
 8003f22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fd61 	bl	80039f4 <transmit>
            vTaskSuspend(NULL);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f005 fb40 	bl	80095b8 <vTaskSuspend>
        }

        switch(update.type) {
 8003f38:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003f3c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d858      	bhi.n	8003ff8 <StartUART+0x18c>
 8003f46:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <StartUART+0xe0>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f91 	.word	0x08003f91
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003fb9 	.word	0x08003fb9
 8003f60:	08003fcd 	.word	0x08003fcd
 8003f64:	08003fe1 	.word	0x08003fe1
        // If updating pressure reading on the terminal:
        case RB_PRESSURE:
            set_pressure_reading(buf, &update.bmp388);
 8003f68:	f107 030c 	add.w	r3, r7, #12
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fd73 	bl	8003a60 <set_pressure_reading>
            break;
 8003f7a:	e049      	b.n	8004010 <StartUART+0x1a4>
        // If updating temperature reading on the terminal:
        case RB_TEMPERATURE:
            set_temperature_reading(buf, &update.bmp388);
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	1d1a      	adds	r2, r3, #4
 8003f82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fd99 	bl	8003ac0 <set_temperature_reading>
            break;
 8003f8e:	e03f      	b.n	8004010 <StartUART+0x1a4>
        // If updating magnetometer reading on the terminal:
        case RB_MAGNETOMETER:
            set_magnetometer_reading(buf, &update.lis2mdl);
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fdbf 	bl	8003b20 <set_magnetometer_reading>
            break;
 8003fa2:	e035      	b.n	8004010 <StartUART+0x1a4>
        // If updating gyroscope reading on the terminal:
        case RB_GYROSCOPE:
            set_gyroscope_reading(buf, &update.lsm6dso32);
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	1d1a      	adds	r2, r3, #4
 8003faa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fe0d 	bl	8003bd0 <set_gyroscope_reading>
            break;
 8003fb6:	e02b      	b.n	8004010 <StartUART+0x1a4>
        // If updating accelerometer reading on the terminal:
        case RB_ACCELEROMETER:
            set_accelerometer_reading(buf, &update.lsm6dso32);
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fe63 	bl	8003c90 <set_accelerometer_reading>
            break;
 8003fca:	e021      	b.n	8004010 <StartUART+0x1a4>
        // If updating the state machine output on the terminal:
        case RB_STATEMACHINE:
            set_sm_output(buf, &update.state);
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff feb7 	bl	8003d4c <set_sm_output>
            break;
 8003fde:	e017      	b.n	8004010 <StartUART+0x1a4>
        // If notifying user of an error via the terminal:
        case RB_ERROR:
            set_rb_error_notification(buf, update.error_buf);
 8003fe0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003fe4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff ff19 	bl	8003e28 <set_rb_error_notification>
            break;
 8003ff6:	e00b      	b.n	8004010 <StartUART+0x1a4>
        // Otherwise, notify user of invalid type error:
        default:
            set_type_error_notification(buf, update.error_buf);
 8003ff8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003ffc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff1f 	bl	8003e4c <set_type_error_notification>
            break;
 800400e:	bf00      	nop
        }

        // Display the contents of buf on the terminal screen.
        if(transmit(args.huart, buf) != UART_SUCCESS) {
 8004010:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004014:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fcea 	bl	80039f4 <transmit>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	f43f af51 	beq.w	8003eca <StartUART+0x5e>
            vTaskSuspend(NULL);
 8004028:	2000      	movs	r0, #0
 800402a:	f005 fac5 	bl	80095b8 <vTaskSuspend>
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 800402e:	e74c      	b.n	8003eca <StartUART+0x5e>
 8004030:	0800e89c 	.word	0x0800e89c

08004034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800406c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004038:	f7fe ff86 	bl	8002f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800403c:	480c      	ldr	r0, [pc, #48]	@ (8004070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800403e:	490d      	ldr	r1, [pc, #52]	@ (8004074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004040:	4a0d      	ldr	r2, [pc, #52]	@ (8004078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004044:	e002      	b.n	800404c <LoopCopyDataInit>

08004046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800404a:	3304      	adds	r3, #4

0800404c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800404c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800404e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004050:	d3f9      	bcc.n	8004046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004052:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004054:	4c0a      	ldr	r4, [pc, #40]	@ (8004080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004058:	e001      	b.n	800405e <LoopFillZerobss>

0800405a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800405a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800405c:	3204      	adds	r2, #4

0800405e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800405e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004060:	d3fb      	bcc.n	800405a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004062:	f007 ff57 	bl	800bf14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004066:	f7fd fce3 	bl	8001a30 <main>
  bx  lr    
 800406a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800406c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004074:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004078:	0800ee88 	.word	0x0800ee88
  ldr r2, =_sbss
 800407c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004080:	2001ac1c 	.word	0x2001ac1c

08004084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004084:	e7fe      	b.n	8004084 <ADC_IRQHandler>

08004086 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8004086:	b480      	push	{r7}
 8004088:	b08b      	sub	sp, #44	@ 0x2c
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	885b      	ldrh	r3, [r3, #2]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80040b8:	e013      	b.n	80040e2 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	1d1a      	adds	r2, r3, #4
 80040be:	627a      	str	r2, [r7, #36]	@ 0x24
 80040c0:	ed93 7a00 	vldr	s14, [r3]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	1d1a      	adds	r2, r3, #4
 80040c8:	623a      	str	r2, [r7, #32]
 80040ca:	edd3 7a00 	vldr	s15, [r3]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	61fa      	str	r2, [r7, #28]
 80040d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3b01      	subs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e8      	bne.n	80040ba <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80040e8:	2300      	movs	r3, #0
 80040ea:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80040ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	372c      	adds	r7, #44	@ 0x2c
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	817b      	strh	r3, [r7, #10]
 800410a:	4613      	mov	r3, r2
 800410c:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	897a      	ldrh	r2, [r7, #10]
 8004112:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	893a      	ldrh	r2, [r7, #8]
 8004118:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	605a      	str	r2, [r3, #4]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <arm_mat_inverse_f32>:
}
#else
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800412c:	b480      	push	{r7}
 800412e:	b09b      	sub	sp, #108	@ 0x6c
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	623b      	str	r3, [r7, #32]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	885b      	ldrh	r3, [r3, #2]
 800414c:	61fb      	str	r3, [r7, #28]

#if defined (ARM_MATH_DSP)

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k,l;      /* loop counters */
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	@ 0x3c
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8004160:	e029      	b.n	80041b6 <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8004162:	6a3a      	ldr	r2, [r7, #32]
 8004164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800416a:	e008      	b.n	800417e <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 800416c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800416e:	1d1a      	adds	r2, r3, #4
 8004170:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
        j--;
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	3b01      	subs	r3, #1
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f3      	bne.n	800416c <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 8004184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	65ba      	str	r2, [r7, #88]	@ 0x58
 800418a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800418e:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8004190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004192:	3b01      	subs	r3, #1
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 8004196:	e008      	b.n	80041aa <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 8004198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
        j--;
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	3b01      	subs	r3, #1
 80041a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f3      	bne.n	8004198 <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement loop counter */
      rowCnt--;
 80041b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b2:	3b01      	subs	r3, #1
 80041b4:	643b      	str	r3, [r7, #64]	@ 0x40
    while (rowCnt > 0U)
 80041b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1d2      	bne.n	8004162 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Index modifier to navigate through the columns */
    l = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (loopCnt > 0U)
 80041c4:	e13b      	b.n	800443e <arm_mat_inverse_f32+0x312>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041d2:	4413      	add	r3, r2
 80041d4:	663b      	str	r3, [r7, #96]	@ 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80041d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	4413      	add	r3, r2
 80041e4:	65bb      	str	r3, [r7, #88]	@ 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 80041e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48

    

      /* Check if the pivot element is zero */
      if (*pInT1 == 0.0f)
 80041ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fa:	d156      	bne.n	80042aa <arm_mat_inverse_f32+0x17e>
      {
        /* Loop over the number rows present below */

        for (i = 1U; i < numRows - l; i++)
 80041fc:	2301      	movs	r3, #1
 80041fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004200:	e04d      	b.n	800429e <arm_mat_inverse_f32+0x172>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * i);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800420e:	4413      	add	r3, r2
 8004210:	65fb      	str	r3, [r7, #92]	@ 0x5c
          pOutT2 = pOutT1 + (numCols * i);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800421e:	4413      	add	r3, r2
 8004220:	657b      	str	r3, [r7, #84]	@ 0x54

          /* Check if there is a non zero pivot element to
           * replace in the rows below */
          if (*pInT2 != 0.0f)
 8004222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	eef5 7a40 	vcmp.f32	s15, #0.0
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	d032      	beq.n	8004298 <arm_mat_inverse_f32+0x16c>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 800423a:	e010      	b.n	800425e <arm_mat_inverse_f32+0x132>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800423c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61bb      	str	r3, [r7, #24]
              *pInT2++ = *pInT1;
 8004242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004248:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 800424e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004250:	1d1a      	adds	r2, r3, #4
 8004252:	663a      	str	r2, [r7, #96]	@ 0x60
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	3b01      	subs	r3, #1
 800425c:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800425e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1eb      	bne.n	800423c <arm_mat_inverse_f32+0x110>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	63bb      	str	r3, [r7, #56]	@ 0x38

            while (j > 0U)
 8004268:	e010      	b.n	800428c <arm_mat_inverse_f32+0x160>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
              *pOutT2++ = *pOutT1;
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	657a      	str	r2, [r7, #84]	@ 0x54
 8004276:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800427c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800427e:	1d1a      	adds	r2, r3, #4
 8004280:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	601a      	str	r2, [r3, #0]

              /* Decrement loop counter */
              j--;
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	3b01      	subs	r3, #1
 800428a:	63bb      	str	r3, [r7, #56]	@ 0x38
            while (j > 0U)
 800428c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1eb      	bne.n	800426a <arm_mat_inverse_f32+0x13e>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8004292:	2301      	movs	r3, #1
 8004294:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Break after exchange is done */
            break;
 8004296:	e008      	b.n	80042aa <arm_mat_inverse_f32+0x17e>
        for (i = 1U; i < numRows - l; i++)
 8004298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429a:	3301      	adds	r3, #1
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
 800429e:	6a3a      	ldr	r2, [r7, #32]
 80042a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d3ab      	bcc.n	8004202 <arm_mat_inverse_f32+0xd6>
          /* Decrement loop counter */
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80042aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d009      	beq.n	80042c4 <arm_mat_inverse_f32+0x198>
 80042b0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80042b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	d102      	bne.n	80042c4 <arm_mat_inverse_f32+0x198>
      {
        return ARM_MATH_SINGULAR;
 80042be:	f06f 0304 	mvn.w	r3, #4
 80042c2:	e0f6      	b.n	80044b2 <arm_mat_inverse_f32+0x386>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80042c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
      pPivotRowDst = pOut + (l * numCols);
 80042d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	4413      	add	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pPivotRowDst;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 80042fa:	e010      	b.n	800431e <arm_mat_inverse_f32+0x1f2>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80042fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
        *pInT1++ = in1 / in;
 8004302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004304:	1d1a      	adds	r2, r3, #4
 8004306:	663a      	str	r2, [r7, #96]	@ 0x60
 8004308:	edd7 6a03 	vldr	s13, [r7, #12]
 800430c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004314:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8004318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431a:	3b01      	subs	r3, #1
 800431c:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1eb      	bne.n	80042fc <arm_mat_inverse_f32+0x1d0>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38

      while (j > 0U)
 8004328:	e010      	b.n	800434c <arm_mat_inverse_f32+0x220>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 800432a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
        *pInT2++ = in1 / in;
 8004330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004336:	edd7 6a03 	vldr	s13, [r7, #12]
 800433a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800433e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004342:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8004346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004348:	3b01      	subs	r3, #1
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (j > 0U)
 800434c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1eb      	bne.n	800432a <arm_mat_inverse_f32+0x1fe>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8004352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004354:	663b      	str	r3, [r7, #96]	@ 0x60
      pInT2 = pOut;
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	65fb      	str	r3, [r7, #92]	@ 0x5c

      /* index used to check for pivot element */
      i = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30

      while (k > 0U)
 8004362:	e060      	b.n	8004426 <arm_mat_inverse_f32+0x2fa>
      {
        /* Check for the pivot element */
        if (i == l)
 8004364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d10c      	bne.n	8004386 <arm_mat_inverse_f32+0x25a>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 800436c:	69fa      	ldr	r2, [r7, #28]
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004376:	4413      	add	r3, r2
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60

          pInT2 += numCols;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004380:	4413      	add	r3, r2
 8004382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004384:	e044      	b.n	8004410 <arm_mat_inverse_f32+0x2e4>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8004386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
          pPRT_pDst = pPivotRowDst;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 800439c:	e017      	b.n	80043ce <arm_mat_inverse_f32+0x2a2>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 800439e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
            *pInT1++ = in1 - (in * *pPRT_in++);
 80043a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a6:	1d1a      	adds	r2, r3, #4
 80043a8:	653a      	str	r2, [r7, #80]	@ 0x50
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	663a      	str	r2, [r7, #96]	@ 0x60
 80043bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80043c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c4:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 80043c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ca:	3b01      	subs	r3, #1
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e4      	bne.n	800439e <arm_mat_inverse_f32+0x272>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	63bb      	str	r3, [r7, #56]	@ 0x38

          while (j > 0U)
 80043d8:	e017      	b.n	800440a <arm_mat_inverse_f32+0x2de>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 80043da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 80043e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e2:	1d1a      	adds	r2, r3, #4
 80043e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043e6:	ed93 7a00 	vldr	s14, [r3]
 80043ea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80043ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043f4:	1d1a      	adds	r2, r3, #4
 80043f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80043f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80043fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004400:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement loop counter */
            j--;
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	3b01      	subs	r3, #1
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
          while (j > 0U)
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e4      	bne.n	80043da <arm_mat_inverse_f32+0x2ae>
          }

        }

        /* Increment temporary input pointer */
        pInT1 = pInT1 + l;
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004416:	4413      	add	r3, r2
 8004418:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Decrement loop counter */
        k--;
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	3b01      	subs	r3, #1
 800441e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment pivot index */
        i++;
 8004420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004422:	3301      	adds	r3, #1
 8004424:	647b      	str	r3, [r7, #68]	@ 0x44
      while (k > 0U)
 8004426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d19b      	bne.n	8004364 <arm_mat_inverse_f32+0x238>
      }

      /* Increment the input pointer */
      pIn++;
 800442c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800442e:	3304      	adds	r3, #4
 8004430:	667b      	str	r3, [r7, #100]	@ 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	3b01      	subs	r3, #1
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Increment the index modifier */
      l++;
 8004438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443a:	3301      	adds	r3, #1
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (loopCnt > 0U)
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f aec0 	bne.w	80041c6 <arm_mat_inverse_f32+0x9a>
    }

#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if ((flag != 1U) && (in == 0.0f))
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d02d      	beq.n	80044ae <arm_mat_inverse_f32+0x382>
 8004452:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004456:	eef5 7a40 	vcmp.f32	s15, #0.0
 800445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800445e:	d126      	bne.n	80044ae <arm_mat_inverse_f32+0x382>
    {
      pIn = pSrc->pData;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8004466:	2300      	movs	r3, #0
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	e00d      	b.n	8004488 <arm_mat_inverse_f32+0x35c>
      {
        if (pIn[i] != 0.0f)
 800446c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004472:	4413      	add	r3, r2
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	eef5 7a40 	vcmp.f32	s15, #0.0
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	d10a      	bne.n	8004498 <arm_mat_inverse_f32+0x36c>
      for (i = 0; i < numRows * numCols; i++)
 8004482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004484:	3301      	adds	r3, #1
 8004486:	647b      	str	r3, [r7, #68]	@ 0x44
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004492:	429a      	cmp	r2, r3
 8004494:	d3ea      	bcc.n	800446c <arm_mat_inverse_f32+0x340>
 8004496:	e000      	b.n	800449a <arm_mat_inverse_f32+0x36e>
            break;
 8004498:	bf00      	nop
      }

      if (i == numRows * numCols)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d102      	bne.n	80044ae <arm_mat_inverse_f32+0x382>
        status = ARM_MATH_SINGULAR;
 80044a8:	23fb      	movs	r3, #251	@ 0xfb
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
  }

  /* Return to application */
  return (status);
 80044ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	376c      	adds	r7, #108	@ 0x6c
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80044be:	b480      	push	{r7}
 80044c0:	b093      	sub	sp, #76	@ 0x4c
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	885b      	ldrh	r3, [r3, #2]
 80044f2:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	885b      	ldrh	r3, [r3, #2]
 80044f8:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fe:	8b7b      	ldrh	r3, [r7, #26]
 8004500:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800450c:	8b3b      	ldrh	r3, [r7, #24]
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451e:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8004520:	8afb      	ldrh	r3, [r7, #22]
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8004524:	e017      	b.n	8004556 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8004526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004528:	1d1a      	adds	r2, r3, #4
 800452a:	647a      	str	r2, [r7, #68]	@ 0x44
 800452c:	ed93 7a00 	vldr	s14, [r3]
 8004530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800453e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004542:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8004546:	8b3b      	ldrh	r3, [r7, #24]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800454c:	4413      	add	r3, r2
 800454e:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e4      	bne.n	8004526 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004564:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	3b01      	subs	r3, #1
 800456a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800456c:	8b3a      	ldrh	r2, [r7, #24]
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	4413      	add	r3, r2
 8004578:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ca      	bne.n	8004516 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8004580:	8b3b      	ldrh	r3, [r7, #24]
 8004582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004584:	4413      	add	r3, r2
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8004588:	8afb      	ldrh	r3, [r7, #22]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800458e:	4413      	add	r3, r2
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1b1      	bne.n	8004502 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800459e:	2300      	movs	r3, #0
 80045a0:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 80045a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	374c      	adds	r7, #76	@ 0x4c
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b08b      	sub	sp, #44	@ 0x2c
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	885b      	ldrh	r3, [r3, #2]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80045e4:	e013      	b.n	800460e <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80045ec:	ed93 7a00 	vldr	s14, [r3]
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	623a      	str	r2, [r7, #32]
 80045f6:	edd3 7a00 	vldr	s15, [r3]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	61fa      	str	r2, [r7, #28]
 8004600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004604:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	3b01      	subs	r3, #1
 800460c:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e8      	bne.n	80045e6 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004614:	2300      	movs	r3, #0
 8004616:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8004618:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800461c:	4618      	mov	r0, r3
 800461e:	372c      	adds	r7, #44	@ 0x2c
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8004628:	b480      	push	{r7}
 800462a:	b08b      	sub	sp, #44	@ 0x2c
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	885b      	ldrh	r3, [r3, #2]
 8004648:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800465c:	89bb      	ldrh	r3, [r7, #12]
 800465e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8004660:	e00d      	b.n	800467e <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	1d1a      	adds	r2, r3, #4
 8004666:	627a      	str	r2, [r7, #36]	@ 0x24
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800466e:	89fb      	ldrh	r3, [r7, #14]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	4413      	add	r3, r2
 8004676:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3b01      	subs	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ee      	bne.n	8004662 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	3b01      	subs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1dd      	bne.n	8004652 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8004696:	2300      	movs	r3, #0
 8004698:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800469a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	372c      	adds	r7, #44	@ 0x2c
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046b0:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_Init+0x40>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0d      	ldr	r2, [pc, #52]	@ (80046ec <HAL_Init+0x40>)
 80046b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046bc:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <HAL_Init+0x40>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0a      	ldr	r2, [pc, #40]	@ (80046ec <HAL_Init+0x40>)
 80046c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046c8:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <HAL_Init+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a07      	ldr	r2, [pc, #28]	@ (80046ec <HAL_Init+0x40>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046d4:	2003      	movs	r0, #3
 80046d6:	f000 f8fc 	bl	80048d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046da:	200f      	movs	r0, #15
 80046dc:	f7fe fabc 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046e0:	f7fe f9c0 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00

080046f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_IncTick+0x20>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_IncTick+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_IncTick+0x24>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000028 	.word	0x20000028
 8004714:	20001834 	.word	0x20001834

08004718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_GetTick+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20001834 	.word	0x20001834

08004730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff ffee 	bl	8004718 <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d005      	beq.n	8004756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800474a:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <HAL_Delay+0x44>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004756:	bf00      	nop
 8004758:	f7ff ffde 	bl	8004718 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d8f7      	bhi.n	8004758 <HAL_Delay+0x28>
  {
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000028 	.word	0x20000028

08004778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004788:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047aa:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	60d3      	str	r3, [r2, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <__NVIC_GetPriorityGrouping+0x18>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	f003 0307 	and.w	r3, r3, #7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db0b      	blt.n	8004806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4907      	ldr	r1, [pc, #28]	@ (8004814 <__NVIC_EnableIRQ+0x38>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100

08004818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db0a      	blt.n	8004842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	490c      	ldr	r1, [pc, #48]	@ (8004864 <__NVIC_SetPriority+0x4c>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	440b      	add	r3, r1
 800483c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004840:	e00a      	b.n	8004858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4908      	ldr	r1, [pc, #32]	@ (8004868 <__NVIC_SetPriority+0x50>)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3b04      	subs	r3, #4
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	440b      	add	r3, r1
 8004856:	761a      	strb	r2, [r3, #24]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	@ 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f1c3 0307 	rsb	r3, r3, #7
 8004886:	2b04      	cmp	r3, #4
 8004888:	bf28      	it	cs
 800488a:	2304      	movcs	r3, #4
 800488c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3304      	adds	r3, #4
 8004892:	2b06      	cmp	r3, #6
 8004894:	d902      	bls.n	800489c <NVIC_EncodePriority+0x30>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3b03      	subs	r3, #3
 800489a:	e000      	b.n	800489e <NVIC_EncodePriority+0x32>
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	401a      	ands	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	43d9      	mvns	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c4:	4313      	orrs	r3, r2
         );
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	@ 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff4c 	bl	8004778 <__NVIC_SetPriorityGrouping>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048fa:	f7ff ff61 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 80048fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7ff ffb1 	bl	800486c <NVIC_EncodePriority>
 800490a:	4602      	mov	r2, r0
 800490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff80 	bl	8004818 <__NVIC_SetPriority>
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff54 	bl	80047dc <__NVIC_EnableIRQ>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	@ 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e165      	b.n	8004c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004958:	2201      	movs	r2, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4013      	ands	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	f040 8154 	bne.w	8004c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d005      	beq.n	800498e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498a:	2b02      	cmp	r3, #2
 800498c:	d130      	bne.n	80049f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049c4:	2201      	movs	r2, #1
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 0201 	and.w	r2, r3, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d017      	beq.n	8004a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2203      	movs	r2, #3
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d123      	bne.n	8004a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	08da      	lsrs	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3208      	adds	r2, #8
 8004a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	220f      	movs	r2, #15
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	08da      	lsrs	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3208      	adds	r2, #8
 8004a7a:	69b9      	ldr	r1, [r7, #24]
 8004a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	4013      	ands	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0203 	and.w	r2, r3, #3
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80ae 	beq.w	8004c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c3c <HAL_GPIO_Init+0x300>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <HAL_GPIO_Init+0x300>)
 8004acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c3c <HAL_GPIO_Init+0x300>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ade:	4a58      	ldr	r2, [pc, #352]	@ (8004c40 <HAL_GPIO_Init+0x304>)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	220f      	movs	r2, #15
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a4f      	ldr	r2, [pc, #316]	@ (8004c44 <HAL_GPIO_Init+0x308>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d025      	beq.n	8004b56 <HAL_GPIO_Init+0x21a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c48 <HAL_GPIO_Init+0x30c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01f      	beq.n	8004b52 <HAL_GPIO_Init+0x216>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a4d      	ldr	r2, [pc, #308]	@ (8004c4c <HAL_GPIO_Init+0x310>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d019      	beq.n	8004b4e <HAL_GPIO_Init+0x212>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a4c      	ldr	r2, [pc, #304]	@ (8004c50 <HAL_GPIO_Init+0x314>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <HAL_GPIO_Init+0x20e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a4b      	ldr	r2, [pc, #300]	@ (8004c54 <HAL_GPIO_Init+0x318>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00d      	beq.n	8004b46 <HAL_GPIO_Init+0x20a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_GPIO_Init+0x31c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <HAL_GPIO_Init+0x206>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a49      	ldr	r2, [pc, #292]	@ (8004c5c <HAL_GPIO_Init+0x320>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_GPIO_Init+0x202>
 8004b3a:	2306      	movs	r3, #6
 8004b3c:	e00c      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b3e:	2307      	movs	r3, #7
 8004b40:	e00a      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e008      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b46:	2304      	movs	r3, #4
 8004b48:	e006      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e004      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e002      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_GPIO_Init+0x21c>
 8004b56:	2300      	movs	r3, #0
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f002 0203 	and.w	r2, r2, #3
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	4093      	lsls	r3, r2
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b68:	4935      	ldr	r1, [pc, #212]	@ (8004c40 <HAL_GPIO_Init+0x304>)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	3302      	adds	r3, #2
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b76:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b9a:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bc4:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bca:	4b25      	ldr	r3, [pc, #148]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bee:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c18:	4a11      	ldr	r2, [pc, #68]	@ (8004c60 <HAL_GPIO_Init+0x324>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	f67f ae96 	bls.w	8004958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40013800 	.word	0x40013800
 8004c44:	40020000 	.word	0x40020000
 8004c48:	40020400 	.word	0x40020400
 8004c4c:	40020800 	.word	0x40020800
 8004c50:	40020c00 	.word	0x40020c00
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40021400 	.word	0x40021400
 8004c5c:	40021800 	.word	0x40021800
 8004c60:	40013c00 	.word	0x40013c00

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c80:	e003      	b.n	8004c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b68      	ldr	r3, [pc, #416]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b65      	ldr	r3, [pc, #404]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d119      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b3f      	ldr	r3, [pc, #252]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e067      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b37      	ldr	r3, [pc, #220]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4934      	ldr	r1, [pc, #208]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d88:	f7ff fcc6 	bl	8004718 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7ff fcc2 	bl	8004718 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d20c      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b22      	ldr	r3, [pc, #136]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f887 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd ff0a 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800ea18 	.word	0x0800ea18
 8004e5c:	20000020 	.word	0x20000020
 8004e60:	20000024 	.word	0x20000024

08004e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e68:	4b03      	ldr	r3, [pc, #12]	@ (8004e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000020 	.word	0x20000020

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e80:	f7ff fff0 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0a9b      	lsrs	r3, r3, #10
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4903      	ldr	r1, [pc, #12]	@ (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	0800ea28 	.word	0x0800ea28

08004ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ea8:	f7ff ffdc 	bl	8004e64 <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0b5b      	lsrs	r3, r3, #13
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4903      	ldr	r1, [pc, #12]	@ (8004ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	0800ea28 	.word	0x0800ea28

08004ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	220f      	movs	r2, #15
 8004eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004edc:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <HAL_RCC_GetClockConfig+0x5c>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0203 	and.w	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f28 <HAL_RCC_GetClockConfig+0x5c>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f00:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_GetClockConfig+0x5c>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f0e:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <HAL_RCC_GetClockConfig+0x60>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 020f 	and.w	r2, r3, #15
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	40023c00 	.word	0x40023c00

08004f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f34:	b0ae      	sub	sp, #184	@ 0xb8
 8004f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f56:	4bcb      	ldr	r3, [pc, #812]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	f200 8206 	bhi.w	8005370 <HAL_RCC_GetSysClockFreq+0x440>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08005371 	.word	0x08005371
 8004f74:	08005371 	.word	0x08005371
 8004f78:	08005371 	.word	0x08005371
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08005371 	.word	0x08005371
 8004f84:	08005371 	.word	0x08005371
 8004f88:	08005371 	.word	0x08005371
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08005371 	.word	0x08005371
 8004f94:	08005371 	.word	0x08005371
 8004f98:	08005371 	.word	0x08005371
 8004f9c:	080051a1 	.word	0x080051a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4bb9      	ldr	r3, [pc, #740]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004fa6:	e1e7      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa8:	4bb8      	ldr	r3, [pc, #736]	@ (800528c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fae:	e1e3      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4bb4      	ldr	r3, [pc, #720]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fbc:	4bb1      	ldr	r3, [pc, #708]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d071      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc8:	4bae      	ldr	r3, [pc, #696]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	099b      	lsrs	r3, r3, #6
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fd4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	0159      	lsls	r1, r3, #5
 8004ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005000:	0150      	lsls	r0, r2, #5
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4621      	mov	r1, r4
 8005008:	1a51      	subs	r1, r2, r1
 800500a:	6439      	str	r1, [r7, #64]	@ 0x40
 800500c:	4629      	mov	r1, r5
 800500e:	eb63 0301 	sbc.w	r3, r3, r1
 8005012:	647b      	str	r3, [r7, #68]	@ 0x44
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005020:	4649      	mov	r1, r9
 8005022:	018b      	lsls	r3, r1, #6
 8005024:	4641      	mov	r1, r8
 8005026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800502a:	4641      	mov	r1, r8
 800502c:	018a      	lsls	r2, r1, #6
 800502e:	4641      	mov	r1, r8
 8005030:	1a51      	subs	r1, r2, r1
 8005032:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005034:	4649      	mov	r1, r9
 8005036:	eb63 0301 	sbc.w	r3, r3, r1
 800503a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005048:	4649      	mov	r1, r9
 800504a:	00cb      	lsls	r3, r1, #3
 800504c:	4641      	mov	r1, r8
 800504e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005052:	4641      	mov	r1, r8
 8005054:	00ca      	lsls	r2, r1, #3
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	4603      	mov	r3, r0
 800505c:	4622      	mov	r2, r4
 800505e:	189b      	adds	r3, r3, r2
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
 8005062:	462b      	mov	r3, r5
 8005064:	460a      	mov	r2, r1
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	637b      	str	r3, [r7, #52]	@ 0x34
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005078:	4629      	mov	r1, r5
 800507a:	024b      	lsls	r3, r1, #9
 800507c:	4621      	mov	r1, r4
 800507e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005082:	4621      	mov	r1, r4
 8005084:	024a      	lsls	r2, r1, #9
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800508e:	2200      	movs	r2, #0
 8005090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005094:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005098:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800509c:	f7fb fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050aa:	e067      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ac:	4b75      	ldr	r3, [pc, #468]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	099b      	lsrs	r3, r3, #6
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80050bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80050c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050c6:	2300      	movs	r3, #0
 80050c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80050ce:	4622      	mov	r2, r4
 80050d0:	462b      	mov	r3, r5
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f04f 0100 	mov.w	r1, #0
 80050da:	0159      	lsls	r1, r3, #5
 80050dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e0:	0150      	lsls	r0, r2, #5
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4621      	mov	r1, r4
 80050e8:	1a51      	subs	r1, r2, r1
 80050ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80050ec:	4629      	mov	r1, r5
 80050ee:	eb63 0301 	sbc.w	r3, r3, r1
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005100:	4649      	mov	r1, r9
 8005102:	018b      	lsls	r3, r1, #6
 8005104:	4641      	mov	r1, r8
 8005106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800510a:	4641      	mov	r1, r8
 800510c:	018a      	lsls	r2, r1, #6
 800510e:	4641      	mov	r1, r8
 8005110:	ebb2 0a01 	subs.w	sl, r2, r1
 8005114:	4649      	mov	r1, r9
 8005116:	eb63 0b01 	sbc.w	fp, r3, r1
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005126:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800512a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512e:	4692      	mov	sl, r2
 8005130:	469b      	mov	fp, r3
 8005132:	4623      	mov	r3, r4
 8005134:	eb1a 0303 	adds.w	r3, sl, r3
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	462b      	mov	r3, r5
 800513c:	eb4b 0303 	adc.w	r3, fp, r3
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800514e:	4629      	mov	r1, r5
 8005150:	028b      	lsls	r3, r1, #10
 8005152:	4621      	mov	r1, r4
 8005154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005158:	4621      	mov	r1, r4
 800515a:	028a      	lsls	r2, r1, #10
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005164:	2200      	movs	r2, #0
 8005166:	673b      	str	r3, [r7, #112]	@ 0x70
 8005168:	677a      	str	r2, [r7, #116]	@ 0x74
 800516a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800516e:	f7fb fd8b 	bl	8000c88 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4613      	mov	r3, r2
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800517c:	4b41      	ldr	r3, [pc, #260]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	0c1b      	lsrs	r3, r3, #16
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	3301      	adds	r3, #1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800518e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800519e:	e0eb      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a0:	4b38      	ldr	r3, [pc, #224]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ac:	4b35      	ldr	r3, [pc, #212]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d06b      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b8:	4b32      	ldr	r3, [pc, #200]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	099b      	lsrs	r3, r3, #6
 80051be:	2200      	movs	r2, #0
 80051c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80051cc:	2300      	movs	r3, #0
 80051ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80051d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	f04f 0000 	mov.w	r0, #0
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	0159      	lsls	r1, r3, #5
 80051e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e6:	0150      	lsls	r0, r2, #5
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4621      	mov	r1, r4
 80051ee:	1a51      	subs	r1, r2, r1
 80051f0:	61b9      	str	r1, [r7, #24]
 80051f2:	4629      	mov	r1, r5
 80051f4:	eb63 0301 	sbc.w	r3, r3, r1
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005206:	4659      	mov	r1, fp
 8005208:	018b      	lsls	r3, r1, #6
 800520a:	4651      	mov	r1, sl
 800520c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005210:	4651      	mov	r1, sl
 8005212:	018a      	lsls	r2, r1, #6
 8005214:	4651      	mov	r1, sl
 8005216:	ebb2 0801 	subs.w	r8, r2, r1
 800521a:	4659      	mov	r1, fp
 800521c:	eb63 0901 	sbc.w	r9, r3, r1
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800522c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005230:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005234:	4690      	mov	r8, r2
 8005236:	4699      	mov	r9, r3
 8005238:	4623      	mov	r3, r4
 800523a:	eb18 0303 	adds.w	r3, r8, r3
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	462b      	mov	r3, r5
 8005242:	eb49 0303 	adc.w	r3, r9, r3
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005254:	4629      	mov	r1, r5
 8005256:	024b      	lsls	r3, r1, #9
 8005258:	4621      	mov	r1, r4
 800525a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800525e:	4621      	mov	r1, r4
 8005260:	024a      	lsls	r2, r1, #9
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800526a:	2200      	movs	r2, #0
 800526c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800526e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005274:	f7fb fd08 	bl	8000c88 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4613      	mov	r3, r2
 800527e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005282:	e065      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x420>
 8005284:	40023800 	.word	0x40023800
 8005288:	00f42400 	.word	0x00f42400
 800528c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005290:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x458>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	099b      	lsrs	r3, r3, #6
 8005296:	2200      	movs	r2, #0
 8005298:	4618      	mov	r0, r3
 800529a:	4611      	mov	r1, r2
 800529c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a2:	2300      	movs	r3, #0
 80052a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80052a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80052aa:	4642      	mov	r2, r8
 80052ac:	464b      	mov	r3, r9
 80052ae:	f04f 0000 	mov.w	r0, #0
 80052b2:	f04f 0100 	mov.w	r1, #0
 80052b6:	0159      	lsls	r1, r3, #5
 80052b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052bc:	0150      	lsls	r0, r2, #5
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4641      	mov	r1, r8
 80052c4:	1a51      	subs	r1, r2, r1
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	4649      	mov	r1, r9
 80052ca:	eb63 0301 	sbc.w	r3, r3, r1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80052dc:	4659      	mov	r1, fp
 80052de:	018b      	lsls	r3, r1, #6
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052e6:	4651      	mov	r1, sl
 80052e8:	018a      	lsls	r2, r1, #6
 80052ea:	4651      	mov	r1, sl
 80052ec:	1a54      	subs	r4, r2, r1
 80052ee:	4659      	mov	r1, fp
 80052f0:	eb63 0501 	sbc.w	r5, r3, r1
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	00eb      	lsls	r3, r5, #3
 80052fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005302:	00e2      	lsls	r2, r4, #3
 8005304:	4614      	mov	r4, r2
 8005306:	461d      	mov	r5, r3
 8005308:	4643      	mov	r3, r8
 800530a:	18e3      	adds	r3, r4, r3
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	464b      	mov	r3, r9
 8005310:	eb45 0303 	adc.w	r3, r5, r3
 8005314:	607b      	str	r3, [r7, #4]
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005322:	4629      	mov	r1, r5
 8005324:	028b      	lsls	r3, r1, #10
 8005326:	4621      	mov	r1, r4
 8005328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800532c:	4621      	mov	r1, r4
 800532e:	028a      	lsls	r2, r1, #10
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005338:	2200      	movs	r2, #0
 800533a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800533c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800533e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005342:	f7fb fca1 	bl	8000c88 <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4613      	mov	r3, r2
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005350:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x458>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0f1b      	lsrs	r3, r3, #28
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800535e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800536e:	e003      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005376:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800537c:	4618      	mov	r0, r3
 800537e:	37b8      	adds	r7, #184	@ 0xb8
 8005380:	46bd      	mov	sp, r7
 8005382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005386:	bf00      	nop
 8005388:	40023800 	.word	0x40023800
 800538c:	00f42400 	.word	0x00f42400

08005390 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e28d      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8083 	beq.w	80054b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053b0:	4b94      	ldr	r3, [pc, #592]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d019      	beq.n	80053f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053bc:	4b91      	ldr	r3, [pc, #580]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d106      	bne.n	80053d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053d4:	d00c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80053de:	2b0c      	cmp	r3, #12
 80053e0:	d112      	bne.n	8005408 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e2:	4b88      	ldr	r3, [pc, #544]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ee:	d10b      	bne.n	8005408 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	4b84      	ldr	r3, [pc, #528]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05b      	beq.n	80054b4 <HAL_RCC_OscConfig+0x124>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d157      	bne.n	80054b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e25a      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005410:	d106      	bne.n	8005420 <HAL_RCC_OscConfig+0x90>
 8005412:	4b7c      	ldr	r3, [pc, #496]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a7b      	ldr	r2, [pc, #492]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e01d      	b.n	800545c <HAL_RCC_OscConfig+0xcc>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005428:	d10c      	bne.n	8005444 <HAL_RCC_OscConfig+0xb4>
 800542a:	4b76      	ldr	r3, [pc, #472]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a75      	ldr	r2, [pc, #468]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b73      	ldr	r3, [pc, #460]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a72      	ldr	r2, [pc, #456]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e00b      	b.n	800545c <HAL_RCC_OscConfig+0xcc>
 8005444:	4b6f      	ldr	r3, [pc, #444]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6e      	ldr	r2, [pc, #440]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 800544a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	4b6c      	ldr	r3, [pc, #432]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a6b      	ldr	r2, [pc, #428]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005456:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7ff f958 	bl	8004718 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800546c:	f7ff f954 	bl	8004718 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	@ 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e21f      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547e:	4b61      	ldr	r3, [pc, #388]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0xdc>
 800548a:	e014      	b.n	80054b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548c:	f7ff f944 	bl	8004718 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005494:	f7ff f940 	bl	8004718 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	@ 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e20b      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a6:	4b57      	ldr	r3, [pc, #348]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1f0      	bne.n	8005494 <HAL_RCC_OscConfig+0x104>
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d06f      	beq.n	80055a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054c2:	4b50      	ldr	r3, [pc, #320]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d017      	beq.n	80054fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80054d6:	2b08      	cmp	r3, #8
 80054d8:	d105      	bne.n	80054e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054da:	4b4a      	ldr	r3, [pc, #296]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e6:	4b47      	ldr	r3, [pc, #284]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d11c      	bne.n	800552c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054f2:	4b44      	ldr	r3, [pc, #272]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	4b41      	ldr	r3, [pc, #260]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_RCC_OscConfig+0x186>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1d3      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b3b      	ldr	r3, [pc, #236]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4937      	ldr	r1, [pc, #220]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	e03a      	b.n	80055a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005534:	4b34      	ldr	r3, [pc, #208]	@ (8005608 <HAL_RCC_OscConfig+0x278>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7ff f8ed 	bl	8004718 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005542:	f7ff f8e9 	bl	8004718 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e1b4      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	4b2b      	ldr	r3, [pc, #172]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4b28      	ldr	r3, [pc, #160]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4925      	ldr	r1, [pc, #148]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005576:	4b24      	ldr	r3, [pc, #144]	@ (8005608 <HAL_RCC_OscConfig+0x278>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7ff f8cc 	bl	8004718 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005584:	f7ff f8c8 	bl	8004718 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e193      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	4b1b      	ldr	r3, [pc, #108]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d036      	beq.n	800561c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b6:	4b15      	ldr	r3, [pc, #84]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7ff f8ac 	bl	8004718 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c4:	f7ff f8a8 	bl	8004718 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e173      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_OscConfig+0x274>)
 80055d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x234>
 80055e2:	e01b      	b.n	800561c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e4:	4b09      	ldr	r3, [pc, #36]	@ (800560c <HAL_RCC_OscConfig+0x27c>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ea:	f7ff f895 	bl	8004718 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	e00e      	b.n	8005610 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f2:	f7ff f891 	bl	8004718 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d907      	bls.n	8005610 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e15c      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
 8005604:	40023800 	.word	0x40023800
 8005608:	42470000 	.word	0x42470000
 800560c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005610:	4b8a      	ldr	r3, [pc, #552]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ea      	bne.n	80055f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8097 	beq.w	8005758 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562e:	4b83      	ldr	r3, [pc, #524]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10f      	bne.n	800565a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	4b7f      	ldr	r3, [pc, #508]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	4a7e      	ldr	r2, [pc, #504]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005648:	6413      	str	r3, [r2, #64]	@ 0x40
 800564a:	4b7c      	ldr	r3, [pc, #496]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005652:	60bb      	str	r3, [r7, #8]
 8005654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCC_OscConfig+0x4b0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d118      	bne.n	8005698 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005666:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <HAL_RCC_OscConfig+0x4b0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a75      	ldr	r2, [pc, #468]	@ (8005840 <HAL_RCC_OscConfig+0x4b0>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005672:	f7ff f851 	bl	8004718 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567a:	f7ff f84d 	bl	8004718 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e118      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568c:	4b6c      	ldr	r3, [pc, #432]	@ (8005840 <HAL_RCC_OscConfig+0x4b0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d106      	bne.n	80056ae <HAL_RCC_OscConfig+0x31e>
 80056a0:	4b66      	ldr	r3, [pc, #408]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	4a65      	ldr	r2, [pc, #404]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ac:	e01c      	b.n	80056e8 <HAL_RCC_OscConfig+0x358>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCC_OscConfig+0x340>
 80056b6:	4b61      	ldr	r3, [pc, #388]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ba:	4a60      	ldr	r2, [pc, #384]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c2:	4b5e      	ldr	r3, [pc, #376]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	4a5d      	ldr	r2, [pc, #372]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ce:	e00b      	b.n	80056e8 <HAL_RCC_OscConfig+0x358>
 80056d0:	4b5a      	ldr	r3, [pc, #360]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d4:	4a59      	ldr	r2, [pc, #356]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	6713      	str	r3, [r2, #112]	@ 0x70
 80056dc:	4b57      	ldr	r3, [pc, #348]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e0:	4a56      	ldr	r2, [pc, #344]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80056e2:	f023 0304 	bic.w	r3, r3, #4
 80056e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7ff f812 	bl	8004718 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f8:	f7ff f80e 	bl	8004718 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0d7      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	4b4b      	ldr	r3, [pc, #300]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0ee      	beq.n	80056f8 <HAL_RCC_OscConfig+0x368>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fe fffc 	bl	8004718 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fe fff8 	bl	8004718 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0c1      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573a:	4b40      	ldr	r3, [pc, #256]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1ee      	bne.n	8005724 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005746:	7dfb      	ldrb	r3, [r7, #23]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800574c:	4b3b      	ldr	r3, [pc, #236]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	4a3a      	ldr	r2, [pc, #232]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80ad 	beq.w	80058bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005762:	4b36      	ldr	r3, [pc, #216]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b08      	cmp	r3, #8
 800576c:	d060      	beq.n	8005830 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d145      	bne.n	8005802 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005776:	4b33      	ldr	r3, [pc, #204]	@ (8005844 <HAL_RCC_OscConfig+0x4b4>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fe ffcc 	bl	8004718 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fe ffc8 	bl	8004718 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e093      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	4b29      	ldr	r3, [pc, #164]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	3b01      	subs	r3, #1
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057cc:	071b      	lsls	r3, r3, #28
 80057ce:	491b      	ldr	r1, [pc, #108]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <HAL_RCC_OscConfig+0x4b4>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fe ff9d 	bl	8004718 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fe ff99 	bl	8004718 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e064      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f4:	4b11      	ldr	r3, [pc, #68]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x452>
 8005800:	e05c      	b.n	80058bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <HAL_RCC_OscConfig+0x4b4>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fe ff86 	bl	8004718 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fe ff82 	bl	8004718 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e04d      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_RCC_OscConfig+0x4ac>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x480>
 800582e:	e045      	b.n	80058bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d107      	bne.n	8005848 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e040      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
 800583c:	40023800 	.word	0x40023800
 8005840:	40007000 	.word	0x40007000
 8005844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005848:	4b1f      	ldr	r3, [pc, #124]	@ (80058c8 <HAL_RCC_OscConfig+0x538>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d030      	beq.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d129      	bne.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d122      	bne.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005878:	4013      	ands	r3, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800587e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005880:	4293      	cmp	r3, r2
 8005882:	d119      	bne.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	3b01      	subs	r3, #1
 8005892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d10f      	bne.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800

080058cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07b      	b.n	80059d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ee:	d009      	beq.n	8005904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]
 80058f6:	e005      	b.n	8005904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d106      	bne.n	8005924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fd f8cc 	bl	8002abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800593a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005988:	ea42 0103 	orr.w	r1, r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0104 	and.w	r1, r3, #4
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	f003 0210 	and.w	r2, r3, #16
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69da      	ldr	r2, [r3, #28]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_SPI_Transmit+0x22>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e12d      	b.n	8005c5c <HAL_SPI_Transmit+0x27e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a08:	f7fe fe86 	bl	8004718 <HAL_GetTick>
 8005a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a22:	e116      	b.n	8005c52 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Transmit+0x52>
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a34:	e10d      	b.n	8005c52 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	88fa      	ldrh	r2, [r7, #6]
 8005a4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a7c:	d10f      	bne.n	8005a9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d007      	beq.n	8005abc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ac4:	d14f      	bne.n	8005b66 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_Transmit+0xf6>
 8005ace:	8afb      	ldrh	r3, [r7, #22]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d142      	bne.n	8005b5a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	881a      	ldrh	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	1c9a      	adds	r2, r3, #2
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	3b01      	subs	r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005af8:	e02f      	b.n	8005b5a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d112      	bne.n	8005b2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	881a      	ldrh	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b2c:	e015      	b.n	8005b5a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2e:	f7fe fdf3 	bl	8004718 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d803      	bhi.n	8005b46 <HAL_SPI_Transmit+0x168>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d102      	bne.n	8005b4c <HAL_SPI_Transmit+0x16e>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005b58:	e07b      	b.n	8005c52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1ca      	bne.n	8005afa <HAL_SPI_Transmit+0x11c>
 8005b64:	e050      	b.n	8005c08 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x196>
 8005b6e:	8afb      	ldrh	r3, [r7, #22]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d144      	bne.n	8005bfe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	7812      	ldrb	r2, [r2, #0]
 8005b80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b9a:	e030      	b.n	8005bfe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d113      	bne.n	8005bd2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bd0:	e015      	b.n	8005bfe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd2:	f7fe fda1 	bl	8004718 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d803      	bhi.n	8005bea <HAL_SPI_Transmit+0x20c>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_Transmit+0x212>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005bfc:	e029      	b.n	8005c52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1c9      	bne.n	8005b9c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fbdf 	bl	80063d0 <SPI_EndRxTxTransaction>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e003      	b.n	8005c52 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d002      	beq.n	8005c8a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
 8005c86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c88:	e0fb      	b.n	8005e82 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c92:	d112      	bne.n	8005cba <HAL_SPI_Receive+0x56>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10e      	bne.n	8005cba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	4613      	mov	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f8ef 	bl	8005e94 <HAL_SPI_TransmitReceive>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	e0e8      	b.n	8005e8c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_SPI_Receive+0x64>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e0e1      	b.n	8005e8c <HAL_SPI_Receive+0x228>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cd0:	f7fe fd22 	bl	8004718 <HAL_GetTick>
 8005cd4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Receive+0x7e>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ce6:	e0cc      	b.n	8005e82 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2204      	movs	r2, #4
 8005cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d2e:	d10f      	bne.n	8005d50 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5a:	2b40      	cmp	r3, #64	@ 0x40
 8005d5c:	d007      	beq.n	8005d6e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d16a      	bne.n	8005e4c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d76:	e032      	b.n	8005dde <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d115      	bne.n	8005db2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f103 020c 	add.w	r2, r3, #12
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005db0:	e015      	b.n	8005dde <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db2:	f7fe fcb1 	bl	8004718 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d803      	bhi.n	8005dca <HAL_SPI_Receive+0x166>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d102      	bne.n	8005dd0 <HAL_SPI_Receive+0x16c>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005ddc:	e051      	b.n	8005e82 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1c7      	bne.n	8005d78 <HAL_SPI_Receive+0x114>
 8005de8:	e035      	b.n	8005e56 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d113      	bne.n	8005e20 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	b292      	uxth	r2, r2
 8005e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e1e:	e015      	b.n	8005e4c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e20:	f7fe fc7a 	bl	8004718 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d803      	bhi.n	8005e38 <HAL_SPI_Receive+0x1d4>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d102      	bne.n	8005e3e <HAL_SPI_Receive+0x1da>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e4a:	e01a      	b.n	8005e82 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1c9      	bne.n	8005dea <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fa52 	bl	8006304 <SPI_EndRxTransaction>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	75fb      	strb	r3, [r7, #23]
 8005e78:	e003      	b.n	8005e82 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08c      	sub	sp, #48	@ 0x30
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_SPI_TransmitReceive+0x26>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e198      	b.n	80061ec <HAL_SPI_TransmitReceive+0x358>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ec2:	f7fe fc29 	bl	8004718 <HAL_GetTick>
 8005ec6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d00f      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x70>
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eea:	d107      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x68>
 8005ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d003      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005f02:	e16d      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x82>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x82>
 8005f10:	887b      	ldrh	r3, [r7, #2]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005f1c:	e160      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d003      	beq.n	8005f32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	887a      	ldrh	r2, [r7, #2]
 8005f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	887a      	ldrh	r2, [r7, #2]
 8005f48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	887a      	ldrh	r2, [r7, #2]
 8005f54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	887a      	ldrh	r2, [r7, #2]
 8005f5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b40      	cmp	r3, #64	@ 0x40
 8005f74:	d007      	beq.n	8005f86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8e:	d17c      	bne.n	800608a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x10a>
 8005f98:	8b7b      	ldrh	r3, [r7, #26]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d16a      	bne.n	8006074 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc2:	e057      	b.n	8006074 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d11b      	bne.n	800600a <HAL_SPI_TransmitReceive+0x176>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <HAL_SPI_TransmitReceive+0x176>
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d113      	bne.n	800600a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	881a      	ldrh	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff2:	1c9a      	adds	r2, r3, #2
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d119      	bne.n	800604c <HAL_SPI_TransmitReceive+0x1b8>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d014      	beq.n	800604c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	b292      	uxth	r2, r2
 800602e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006048:	2301      	movs	r3, #1
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800604c:	f7fe fb64 	bl	8004718 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006058:	429a      	cmp	r2, r3
 800605a:	d80b      	bhi.n	8006074 <HAL_SPI_TransmitReceive+0x1e0>
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d007      	beq.n	8006074 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006072:	e0b5      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1a2      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x130>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d19d      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x130>
 8006088:	e080      	b.n	800618c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_SPI_TransmitReceive+0x204>
 8006092:	8b7b      	ldrh	r3, [r7, #26]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d16f      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060be:	e05b      	b.n	8006178 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d11c      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x274>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d017      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x274>
 80060d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d114      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d119      	bne.n	800614a <HAL_SPI_TransmitReceive+0x2b6>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d014      	beq.n	800614a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	b2d2      	uxtb	r2, r2
 800612c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006146:	2301      	movs	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800614a:	f7fe fae5 	bl	8004718 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006156:	429a      	cmp	r2, r3
 8006158:	d803      	bhi.n	8006162 <HAL_SPI_TransmitReceive+0x2ce>
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d102      	bne.n	8006168 <HAL_SPI_TransmitReceive+0x2d4>
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006176:	e033      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d19e      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x22c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d199      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800618c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f91d 	bl	80063d0 <SPI_EndRxTxTransaction>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80061a8:	e01a      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d6:	e003      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80061e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3730      	adds	r7, #48	@ 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	4613      	mov	r3, r2
 8006202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006204:	f7fe fa88 	bl	8004718 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	4413      	add	r3, r2
 8006212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006214:	f7fe fa80 	bl	8004718 <HAL_GetTick>
 8006218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800621a:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	0d1b      	lsrs	r3, r3, #20
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	fb02 f303 	mul.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800622a:	e054      	b.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d050      	beq.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006234:	f7fe fa70 	bl	8004718 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	429a      	cmp	r2, r3
 8006242:	d902      	bls.n	800624a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d13d      	bne.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006262:	d111      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800626c:	d004      	beq.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006276:	d107      	bne.n	8006288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006290:	d10f      	bne.n	80062b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e017      	b.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	bf0c      	ite	eq
 80062e6:	2301      	moveq	r3, #1
 80062e8:	2300      	movne	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d19b      	bne.n	800622c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000020 	.word	0x20000020

08006304 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af02      	add	r7, sp, #8
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006318:	d111      	bne.n	800633e <SPI_EndRxTransaction+0x3a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006322:	d004      	beq.n	800632e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632c:	d107      	bne.n	800633e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800633c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006346:	d12a      	bne.n	800639e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006350:	d012      	beq.n	8006378 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	2180      	movs	r1, #128	@ 0x80
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff ff49 	bl	80061f4 <SPI_WaitFlagStateUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02d      	beq.n	80063c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e026      	b.n	80063c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2200      	movs	r2, #0
 8006380:	2101      	movs	r1, #1
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ff36 	bl	80061f4 <SPI_WaitFlagStateUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01a      	beq.n	80063c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	f043 0220 	orr.w	r2, r3, #32
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e013      	b.n	80063c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	2101      	movs	r1, #1
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff ff23 	bl	80061f4 <SPI_WaitFlagStateUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d007      	beq.n	80063c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b8:	f043 0220 	orr.w	r2, r3, #32
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e000      	b.n	80063c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2201      	movs	r2, #1
 80063e4:	2102      	movs	r1, #2
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f7ff ff04 	bl	80061f4 <SPI_WaitFlagStateUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e032      	b.n	8006468 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006402:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <SPI_EndRxTxTransaction+0xa0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1b      	ldr	r2, [pc, #108]	@ (8006474 <SPI_EndRxTxTransaction+0xa4>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	0d5b      	lsrs	r3, r3, #21
 800640e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006420:	d112      	bne.n	8006448 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	@ 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fee1 	bl	80061f4 <SPI_WaitFlagStateUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e00f      	b.n	8006468 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	3b01      	subs	r3, #1
 8006452:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645e:	2b80      	cmp	r3, #128	@ 0x80
 8006460:	d0f2      	beq.n	8006448 <SPI_EndRxTxTransaction+0x78>
 8006462:	e000      	b.n	8006466 <SPI_EndRxTxTransaction+0x96>
        break;
 8006464:	bf00      	nop
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20000020 	.word	0x20000020
 8006474:	165e9f81 	.word	0x165e9f81

08006478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e041      	b.n	800650e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fc fb54 	bl	8002b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f000 fa7e 	bl	80069b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	d001      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e04e      	b.n	80065ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a23      	ldr	r2, [pc, #140]	@ (80065dc <HAL_TIM_Base_Start_IT+0xc4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d022      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800655a:	d01d      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1f      	ldr	r2, [pc, #124]	@ (80065e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d018      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1e      	ldr	r2, [pc, #120]	@ (80065e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d013      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1c      	ldr	r2, [pc, #112]	@ (80065e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00e      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d009      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a19      	ldr	r2, [pc, #100]	@ (80065f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d004      	beq.n	8006598 <HAL_TIM_Base_Start_IT+0x80>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a18      	ldr	r2, [pc, #96]	@ (80065f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d111      	bne.n	80065bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d010      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	e007      	b.n	80065cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40010000 	.word	0x40010000
 80065e0:	40000400 	.word	0x40000400
 80065e4:	40000800 	.word	0x40000800
 80065e8:	40000c00 	.word	0x40000c00
 80065ec:	40010400 	.word	0x40010400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40001800 	.word	0x40001800

080065f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d020      	beq.n	800665c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0202 	mvn.w	r2, #2
 800662c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f999 	bl	800697a <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f98b 	bl	8006966 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f99c 	bl	800698e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d020      	beq.n	80066a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01b      	beq.n	80066a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0204 	mvn.w	r2, #4
 8006678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f973 	bl	800697a <HAL_TIM_IC_CaptureCallback>
 8006694:	e005      	b.n	80066a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f965 	bl	8006966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f976 	bl	800698e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d020      	beq.n	80066f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01b      	beq.n	80066f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0208 	mvn.w	r2, #8
 80066c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f94d 	bl	800697a <HAL_TIM_IC_CaptureCallback>
 80066e0:	e005      	b.n	80066ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f93f 	bl	8006966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f950 	bl	800698e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0310 	and.w	r3, r3, #16
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d020      	beq.n	8006740 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01b      	beq.n	8006740 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0210 	mvn.w	r2, #16
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2208      	movs	r2, #8
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f927 	bl	800697a <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f919 	bl	8006966 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f92a 	bl	800698e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0201 	mvn.w	r2, #1
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fb fbf4 	bl	8001f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00c      	beq.n	8006788 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fae4 	bl	8006d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00c      	beq.n	80067ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8fb 	bl	80069a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0220 	mvn.w	r2, #32
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fab6 	bl	8006d3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_ConfigClockSource+0x1c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e0b4      	b.n	800695e <HAL_TIM_ConfigClockSource+0x186>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800681a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682c:	d03e      	beq.n	80068ac <HAL_TIM_ConfigClockSource+0xd4>
 800682e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006832:	f200 8087 	bhi.w	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800683a:	f000 8086 	beq.w	800694a <HAL_TIM_ConfigClockSource+0x172>
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006842:	d87f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b70      	cmp	r3, #112	@ 0x70
 8006846:	d01a      	beq.n	800687e <HAL_TIM_ConfigClockSource+0xa6>
 8006848:	2b70      	cmp	r3, #112	@ 0x70
 800684a:	d87b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b60      	cmp	r3, #96	@ 0x60
 800684e:	d050      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006850:	2b60      	cmp	r3, #96	@ 0x60
 8006852:	d877      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b50      	cmp	r3, #80	@ 0x50
 8006856:	d03c      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006858:	2b50      	cmp	r3, #80	@ 0x50
 800685a:	d873      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b40      	cmp	r3, #64	@ 0x40
 800685e:	d058      	beq.n	8006912 <HAL_TIM_ConfigClockSource+0x13a>
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d86f      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d064      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006868:	2b30      	cmp	r3, #48	@ 0x30
 800686a:	d86b      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d060      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006870:	2b20      	cmp	r3, #32
 8006872:	d867      	bhi.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d05c      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 8006878:	2b10      	cmp	r3, #16
 800687a:	d05a      	beq.n	8006932 <HAL_TIM_ConfigClockSource+0x15a>
 800687c:	e062      	b.n	8006944 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800688e:	f000 f9b9 	bl	8006c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	609a      	str	r2, [r3, #8]
      break;
 80068aa:	e04f      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068bc:	f000 f9a2 	bl	8006c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689a      	ldr	r2, [r3, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ce:	609a      	str	r2, [r3, #8]
      break;
 80068d0:	e03c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 f916 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2150      	movs	r1, #80	@ 0x50
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f96f 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 80068f0:	e02c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068fe:	461a      	mov	r2, r3
 8006900:	f000 f935 	bl	8006b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2160      	movs	r1, #96	@ 0x60
 800690a:	4618      	mov	r0, r3
 800690c:	f000 f95f 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006910:	e01c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800691e:	461a      	mov	r2, r3
 8006920:	f000 f8f6 	bl	8006b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2140      	movs	r1, #64	@ 0x40
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f94f 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006930:	e00c      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	4610      	mov	r0, r2
 800693e:	f000 f946 	bl	8006bce <TIM_ITRx_SetConfig>
      break;
 8006942:	e003      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e000      	b.n	800694c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800694a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800698e:	b480      	push	{r7}
 8006990:	b083      	sub	sp, #12
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
	...

080069b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a46      	ldr	r2, [pc, #280]	@ (8006ae4 <TIM_Base_SetConfig+0x12c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d6:	d00f      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a43      	ldr	r2, [pc, #268]	@ (8006ae8 <TIM_Base_SetConfig+0x130>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00b      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a42      	ldr	r2, [pc, #264]	@ (8006aec <TIM_Base_SetConfig+0x134>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a41      	ldr	r2, [pc, #260]	@ (8006af0 <TIM_Base_SetConfig+0x138>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_Base_SetConfig+0x40>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a40      	ldr	r2, [pc, #256]	@ (8006af4 <TIM_Base_SetConfig+0x13c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d108      	bne.n	8006a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a35      	ldr	r2, [pc, #212]	@ (8006ae4 <TIM_Base_SetConfig+0x12c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d02b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a18:	d027      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a32      	ldr	r2, [pc, #200]	@ (8006ae8 <TIM_Base_SetConfig+0x130>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d023      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a31      	ldr	r2, [pc, #196]	@ (8006aec <TIM_Base_SetConfig+0x134>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01f      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	@ (8006af0 <TIM_Base_SetConfig+0x138>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a2f      	ldr	r2, [pc, #188]	@ (8006af4 <TIM_Base_SetConfig+0x13c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d017      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006af8 <TIM_Base_SetConfig+0x140>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a2d      	ldr	r2, [pc, #180]	@ (8006afc <TIM_Base_SetConfig+0x144>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00f      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b00 <TIM_Base_SetConfig+0x148>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2b      	ldr	r2, [pc, #172]	@ (8006b04 <TIM_Base_SetConfig+0x14c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d007      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8006b08 <TIM_Base_SetConfig+0x150>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a29      	ldr	r2, [pc, #164]	@ (8006b0c <TIM_Base_SetConfig+0x154>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d108      	bne.n	8006a7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a10      	ldr	r2, [pc, #64]	@ (8006ae4 <TIM_Base_SetConfig+0x12c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_Base_SetConfig+0xf8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a12      	ldr	r2, [pc, #72]	@ (8006af4 <TIM_Base_SetConfig+0x13c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d103      	bne.n	8006ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f023 0201 	bic.w	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	611a      	str	r2, [r3, #16]
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800
 8006b04:	40001800 	.word	0x40001800
 8006b08:	40001c00 	.word	0x40001c00
 8006b0c:	40002000 	.word	0x40002000

08006b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	f023 0201 	bic.w	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 030a 	bic.w	r3, r3, #10
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f023 0210 	bic.w	r2, r3, #16
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	031b      	lsls	r3, r3, #12
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f043 0307 	orr.w	r3, r3, #7
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e05a      	b.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a21      	ldr	r2, [pc, #132]	@ (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8006d2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a18      	ldr	r2, [pc, #96]	@ (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	@ (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d10c      	bne.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40010000 	.word	0x40010000
 8006d24:	40000400 	.word	0x40000400
 8006d28:	40000800 	.word	0x40000800
 8006d2c:	40000c00 	.word	0x40000c00
 8006d30:	40010400 	.word	0x40010400
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40001800 	.word	0x40001800

08006d3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e042      	b.n	8006dfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fb ff1c 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	@ 0x24
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f973 	bl	8007094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	@ 0x28
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4613      	mov	r3, r2
 8006e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d175      	bne.n	8006f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_UART_Transmit+0x2c>
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e06e      	b.n	8006f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2221      	movs	r2, #33	@ 0x21
 8006e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e42:	f7fd fc69 	bl	8004718 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5c:	d108      	bne.n	8006e70 <HAL_UART_Transmit+0x6c>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d104      	bne.n	8006e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e003      	b.n	8006e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e78:	e02e      	b.n	8006ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	2180      	movs	r1, #128	@ 0x80
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f848 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e03a      	b.n	8006f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	3302      	adds	r3, #2
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	e007      	b.n	8006eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	781a      	ldrb	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1cb      	bne.n	8006e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2140      	movs	r1, #64	@ 0x40
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f814 	bl	8006f1a <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2a:	e03b      	b.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d037      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f34:	f7fd fbf0 	bl	8004718 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	6a3a      	ldr	r2, [r7, #32]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d302      	bcc.n	8006f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e03a      	b.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d023      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b80      	cmp	r3, #128	@ 0x80
 8006f60:	d020      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b40      	cmp	r3, #64	@ 0x40
 8006f66:	d01d      	beq.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d116      	bne.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81d 	bl	8006fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2208      	movs	r2, #8
 8006f96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e00f      	b.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d0b4      	beq.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b095      	sub	sp, #84	@ 0x54
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e5      	bne.n	8006fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	61fb      	str	r3, [r7, #28]
   return(result);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800702e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007040:	2b01      	cmp	r3, #1
 8007042:	d119      	bne.n	8007078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f023 0310 	bic.w	r3, r3, #16
 800705a:	647b      	str	r3, [r7, #68]	@ 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007064:	61ba      	str	r2, [r7, #24]
 8007066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e5      	bne.n	8007044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007086:	bf00      	nop
 8007088:	3754      	adds	r7, #84	@ 0x54
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007098:	b0c0      	sub	sp, #256	@ 0x100
 800709a:	af00      	add	r7, sp, #0
 800709c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b0:	68d9      	ldr	r1, [r3, #12]
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	ea40 0301 	orr.w	r3, r0, r1
 80070bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070ec:	f021 010c 	bic.w	r1, r1, #12
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070fa:	430b      	orrs	r3, r1
 80070fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710e:	6999      	ldr	r1, [r3, #24]
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	ea40 0301 	orr.w	r3, r0, r1
 800711a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b8f      	ldr	r3, [pc, #572]	@ (8007360 <UART_SetConfig+0x2cc>)
 8007124:	429a      	cmp	r2, r3
 8007126:	d005      	beq.n	8007134 <UART_SetConfig+0xa0>
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b8d      	ldr	r3, [pc, #564]	@ (8007364 <UART_SetConfig+0x2d0>)
 8007130:	429a      	cmp	r2, r3
 8007132:	d104      	bne.n	800713e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007134:	f7fd feb6 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 8007138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800713c:	e003      	b.n	8007146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800713e:	f7fd fe9d 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8007142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007150:	f040 810c 	bne.w	800736c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800715e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	1891      	adds	r1, r2, r2
 800716c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800716e:	415b      	adcs	r3, r3
 8007170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007176:	4621      	mov	r1, r4
 8007178:	eb12 0801 	adds.w	r8, r2, r1
 800717c:	4629      	mov	r1, r5
 800717e:	eb43 0901 	adc.w	r9, r3, r1
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800718e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007196:	4690      	mov	r8, r2
 8007198:	4699      	mov	r9, r3
 800719a:	4623      	mov	r3, r4
 800719c:	eb18 0303 	adds.w	r3, r8, r3
 80071a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071a4:	462b      	mov	r3, r5
 80071a6:	eb49 0303 	adc.w	r3, r9, r3
 80071aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071c2:	460b      	mov	r3, r1
 80071c4:	18db      	adds	r3, r3, r3
 80071c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c8:	4613      	mov	r3, r2
 80071ca:	eb42 0303 	adc.w	r3, r2, r3
 80071ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80071d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071d8:	f7f9 fd56 	bl	8000c88 <__aeabi_uldivmod>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <UART_SetConfig+0x2d4>)
 80071e2:	fba3 2302 	umull	r2, r3, r3, r2
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	011c      	lsls	r4, r3, #4
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	1891      	adds	r1, r2, r2
 8007202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007204:	415b      	adcs	r3, r3
 8007206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800720c:	4641      	mov	r1, r8
 800720e:	eb12 0a01 	adds.w	sl, r2, r1
 8007212:	4649      	mov	r1, r9
 8007214:	eb43 0b01 	adc.w	fp, r3, r1
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800722c:	4692      	mov	sl, r2
 800722e:	469b      	mov	fp, r3
 8007230:	4643      	mov	r3, r8
 8007232:	eb1a 0303 	adds.w	r3, sl, r3
 8007236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800723a:	464b      	mov	r3, r9
 800723c:	eb4b 0303 	adc.w	r3, fp, r3
 8007240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007258:	460b      	mov	r3, r1
 800725a:	18db      	adds	r3, r3, r3
 800725c:	643b      	str	r3, [r7, #64]	@ 0x40
 800725e:	4613      	mov	r3, r2
 8007260:	eb42 0303 	adc.w	r3, r2, r3
 8007264:	647b      	str	r3, [r7, #68]	@ 0x44
 8007266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800726a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800726e:	f7f9 fd0b 	bl	8000c88 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4611      	mov	r1, r2
 8007278:	4b3b      	ldr	r3, [pc, #236]	@ (8007368 <UART_SetConfig+0x2d4>)
 800727a:	fba3 2301 	umull	r2, r3, r3, r1
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	2264      	movs	r2, #100	@ 0x64
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	1acb      	subs	r3, r1, r3
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800728e:	4b36      	ldr	r3, [pc, #216]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007290:	fba3 2302 	umull	r2, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800729c:	441c      	add	r4, r3
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072b8:	415b      	adcs	r3, r3
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072c0:	4641      	mov	r1, r8
 80072c2:	1851      	adds	r1, r2, r1
 80072c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80072c6:	4649      	mov	r1, r9
 80072c8:	414b      	adcs	r3, r1
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072d8:	4659      	mov	r1, fp
 80072da:	00cb      	lsls	r3, r1, #3
 80072dc:	4651      	mov	r1, sl
 80072de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e2:	4651      	mov	r1, sl
 80072e4:	00ca      	lsls	r2, r1, #3
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	4642      	mov	r2, r8
 80072ee:	189b      	adds	r3, r3, r2
 80072f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f4:	464b      	mov	r3, r9
 80072f6:	460a      	mov	r2, r1
 80072f8:	eb42 0303 	adc.w	r3, r2, r3
 80072fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800730c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007314:	460b      	mov	r3, r1
 8007316:	18db      	adds	r3, r3, r3
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800731a:	4613      	mov	r3, r2
 800731c:	eb42 0303 	adc.w	r3, r2, r3
 8007320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800732a:	f7f9 fcad 	bl	8000c88 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007334:	fba3 1302 	umull	r1, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	2164      	movs	r1, #100	@ 0x64
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	3332      	adds	r3, #50	@ 0x32
 8007346:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 0207 	and.w	r2, r3, #7
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4422      	add	r2, r4
 800735a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800735c:	e106      	b.n	800756c <UART_SetConfig+0x4d8>
 800735e:	bf00      	nop
 8007360:	40011000 	.word	0x40011000
 8007364:	40011400 	.word	0x40011400
 8007368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800736c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007370:	2200      	movs	r2, #0
 8007372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800737a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	1891      	adds	r1, r2, r2
 8007384:	6239      	str	r1, [r7, #32]
 8007386:	415b      	adcs	r3, r3
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
 800738a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800738e:	4641      	mov	r1, r8
 8007390:	1854      	adds	r4, r2, r1
 8007392:	4649      	mov	r1, r9
 8007394:	eb43 0501 	adc.w	r5, r3, r1
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	00eb      	lsls	r3, r5, #3
 80073a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a6:	00e2      	lsls	r2, r4, #3
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	4643      	mov	r3, r8
 80073ae:	18e3      	adds	r3, r4, r3
 80073b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073b4:	464b      	mov	r3, r9
 80073b6:	eb45 0303 	adc.w	r3, r5, r3
 80073ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073da:	4629      	mov	r1, r5
 80073dc:	008b      	lsls	r3, r1, #2
 80073de:	4621      	mov	r1, r4
 80073e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e4:	4621      	mov	r1, r4
 80073e6:	008a      	lsls	r2, r1, #2
 80073e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073ec:	f7f9 fc4c 	bl	8000c88 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4b60      	ldr	r3, [pc, #384]	@ (8007578 <UART_SetConfig+0x4e4>)
 80073f6:	fba3 2302 	umull	r2, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	011c      	lsls	r4, r3, #4
 80073fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007402:	2200      	movs	r2, #0
 8007404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800740c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	1891      	adds	r1, r2, r2
 8007416:	61b9      	str	r1, [r7, #24]
 8007418:	415b      	adcs	r3, r3
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007420:	4641      	mov	r1, r8
 8007422:	1851      	adds	r1, r2, r1
 8007424:	6139      	str	r1, [r7, #16]
 8007426:	4649      	mov	r1, r9
 8007428:	414b      	adcs	r3, r1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007438:	4659      	mov	r1, fp
 800743a:	00cb      	lsls	r3, r1, #3
 800743c:	4651      	mov	r1, sl
 800743e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007442:	4651      	mov	r1, sl
 8007444:	00ca      	lsls	r2, r1, #3
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	4603      	mov	r3, r0
 800744c:	4642      	mov	r2, r8
 800744e:	189b      	adds	r3, r3, r2
 8007450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007454:	464b      	mov	r3, r9
 8007456:	460a      	mov	r2, r1
 8007458:	eb42 0303 	adc.w	r3, r2, r3
 800745c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800746a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007478:	4649      	mov	r1, r9
 800747a:	008b      	lsls	r3, r1, #2
 800747c:	4641      	mov	r1, r8
 800747e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007482:	4641      	mov	r1, r8
 8007484:	008a      	lsls	r2, r1, #2
 8007486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800748a:	f7f9 fbfd 	bl	8000c88 <__aeabi_uldivmod>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4611      	mov	r1, r2
 8007494:	4b38      	ldr	r3, [pc, #224]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007496:	fba3 2301 	umull	r2, r3, r3, r1
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2264      	movs	r2, #100	@ 0x64
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	3332      	adds	r3, #50	@ 0x32
 80074a8:	4a33      	ldr	r2, [pc, #204]	@ (8007578 <UART_SetConfig+0x4e4>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074b4:	441c      	add	r4, r3
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80074be:	677a      	str	r2, [r7, #116]	@ 0x74
 80074c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	415b      	adcs	r3, r3
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074d4:	4641      	mov	r1, r8
 80074d6:	1851      	adds	r1, r2, r1
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	4649      	mov	r1, r9
 80074dc:	414b      	adcs	r3, r1
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074ec:	4659      	mov	r1, fp
 80074ee:	00cb      	lsls	r3, r1, #3
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f6:	4651      	mov	r1, sl
 80074f8:	00ca      	lsls	r2, r1, #3
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	4642      	mov	r2, r8
 8007502:	189b      	adds	r3, r3, r2
 8007504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007506:	464b      	mov	r3, r9
 8007508:	460a      	mov	r2, r1
 800750a:	eb42 0303 	adc.w	r3, r2, r3
 800750e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	663b      	str	r3, [r7, #96]	@ 0x60
 800751a:	667a      	str	r2, [r7, #100]	@ 0x64
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007528:	4649      	mov	r1, r9
 800752a:	008b      	lsls	r3, r1, #2
 800752c:	4641      	mov	r1, r8
 800752e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007532:	4641      	mov	r1, r8
 8007534:	008a      	lsls	r2, r1, #2
 8007536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800753a:	f7f9 fba5 	bl	8000c88 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007544:	fba3 1302 	umull	r1, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	2164      	movs	r1, #100	@ 0x64
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	3332      	adds	r3, #50	@ 0x32
 8007556:	4a08      	ldr	r2, [pc, #32]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	f003 020f 	and.w	r2, r3, #15
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4422      	add	r2, r4
 800756a:	609a      	str	r2, [r3, #8]
}
 800756c:	bf00      	nop
 800756e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007572:	46bd      	mov	sp, r7
 8007574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007578:	51eb851f 	.word	0x51eb851f

0800757c <__NVIC_SetPriority>:
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	4603      	mov	r3, r0
 8007584:	6039      	str	r1, [r7, #0]
 8007586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	db0a      	blt.n	80075a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	b2da      	uxtb	r2, r3
 8007594:	490c      	ldr	r1, [pc, #48]	@ (80075c8 <__NVIC_SetPriority+0x4c>)
 8007596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800759a:	0112      	lsls	r2, r2, #4
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	440b      	add	r3, r1
 80075a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80075a4:	e00a      	b.n	80075bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	4908      	ldr	r1, [pc, #32]	@ (80075cc <__NVIC_SetPriority+0x50>)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	3b04      	subs	r3, #4
 80075b4:	0112      	lsls	r2, r2, #4
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	440b      	add	r3, r1
 80075ba:	761a      	strb	r2, [r3, #24]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	e000e100 	.word	0xe000e100
 80075cc:	e000ed00 	.word	0xe000ed00

080075d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <SysTick_Handler+0x1c>)
 80075d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80075d8:	f002 fcf4 	bl	8009fc4 <xTaskGetSchedulerState>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d001      	beq.n	80075e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80075e2:	f003 fbe9 	bl	800adb8 <xPortSysTickHandler>
  }
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	e000e010 	.word	0xe000e010

080075f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80075f4:	2100      	movs	r1, #0
 80075f6:	f06f 0004 	mvn.w	r0, #4
 80075fa:	f7ff ffbf 	bl	800757c <__NVIC_SetPriority>
#endif
}
 80075fe:	bf00      	nop
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800760a:	f3ef 8305 	mrs	r3, IPSR
 800760e:	603b      	str	r3, [r7, #0]
  return(result);
 8007610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007616:	f06f 0305 	mvn.w	r3, #5
 800761a:	607b      	str	r3, [r7, #4]
 800761c:	e00c      	b.n	8007638 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <osKernelInitialize+0x44>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <osKernelInitialize+0x44>)
 8007628:	2201      	movs	r2, #1
 800762a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800762c:	2300      	movs	r3, #0
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	e002      	b.n	8007638 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007638:	687b      	ldr	r3, [r7, #4]
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20001838 	.word	0x20001838

0800764c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007652:	f3ef 8305 	mrs	r3, IPSR
 8007656:	603b      	str	r3, [r7, #0]
  return(result);
 8007658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <osKernelStart+0x1a>
    stat = osErrorISR;
 800765e:	f06f 0305 	mvn.w	r3, #5
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	e010      	b.n	8007688 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007666:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <osKernelStart+0x48>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d109      	bne.n	8007682 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800766e:	f7ff ffbf 	bl	80075f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007672:	4b08      	ldr	r3, [pc, #32]	@ (8007694 <osKernelStart+0x48>)
 8007674:	2202      	movs	r2, #2
 8007676:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007678:	f002 f814 	bl	80096a4 <vTaskStartScheduler>
      stat = osOK;
 800767c:	2300      	movs	r3, #0
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	e002      	b.n	8007688 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007682:	f04f 33ff 	mov.w	r3, #4294967295
 8007686:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007688:	687b      	ldr	r3, [r7, #4]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20001838 	.word	0x20001838

08007698 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007698:	b580      	push	{r7, lr}
 800769a:	b08e      	sub	sp, #56	@ 0x38
 800769c:	af04      	add	r7, sp, #16
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a8:	f3ef 8305 	mrs	r3, IPSR
 80076ac:	617b      	str	r3, [r7, #20]
  return(result);
 80076ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d17e      	bne.n	80077b2 <osThreadNew+0x11a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d07b      	beq.n	80077b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80076ba:	2380      	movs	r3, #128	@ 0x80
 80076bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80076be:	2318      	movs	r3, #24
 80076c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d045      	beq.n	800775e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <osThreadNew+0x48>
        name = attr->name;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <osThreadNew+0x6e>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b38      	cmp	r3, #56	@ 0x38
 80076f8:	d805      	bhi.n	8007706 <osThreadNew+0x6e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <osThreadNew+0x72>
        return (NULL);
 8007706:	2300      	movs	r3, #0
 8007708:	e054      	b.n	80077b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <osThreadNew+0xa8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2bab      	cmp	r3, #171	@ 0xab
 8007728:	d90a      	bls.n	8007740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800772e:	2b00      	cmp	r3, #0
 8007730:	d006      	beq.n	8007740 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <osThreadNew+0xa8>
        mem = 1;
 800773a:	2301      	movs	r3, #1
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	e010      	b.n	8007762 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10c      	bne.n	8007762 <osThreadNew+0xca>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d108      	bne.n	8007762 <osThreadNew+0xca>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <osThreadNew+0xca>
          mem = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	e001      	b.n	8007762 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d110      	bne.n	800778a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6a3a      	ldr	r2, [r7, #32]
 800777c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f001 fc30 	bl	8008fe4 <xTaskCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	e013      	b.n	80077b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d110      	bne.n	80077b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	b29a      	uxth	r2, r3
 8007794:	f107 0310 	add.w	r3, r7, #16
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f001 fc7e 	bl	80090a4 <xTaskCreate>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d001      	beq.n	80077b2 <osThreadNew+0x11a>
            hTask = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077b2:	693b      	ldr	r3, [r7, #16]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3728      	adds	r7, #40	@ 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077c4:	f3ef 8305 	mrs	r3, IPSR
 80077c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <osDelay+0x1c>
    stat = osErrorISR;
 80077d0:	f06f 0305 	mvn.w	r3, #5
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	e007      	b.n	80077e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 feb2 	bl	800954c <vTaskDelay>
    }
  }

  return (stat);
 80077e8:	68fb      	ldr	r3, [r7, #12]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077fe:	f3ef 8305 	mrs	r3, IPSR
 8007802:	60bb      	str	r3, [r7, #8]
  return(result);
 8007804:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007806:	2b00      	cmp	r3, #0
 8007808:	d174      	bne.n	80078f4 <osMutexNew+0x102>
    if (attr != NULL) {
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	61bb      	str	r3, [r7, #24]
 8007816:	e001      	b.n	800781c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <osMutexNew+0x3a>
      rmtx = 1U;
 8007826:	2301      	movs	r3, #1
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e001      	b.n	8007830 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d15c      	bne.n	80078f4 <osMutexNew+0x102>
      mem = -1;
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d015      	beq.n	8007872 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d006      	beq.n	800785c <osMutexNew+0x6a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	2b4f      	cmp	r3, #79	@ 0x4f
 8007854:	d902      	bls.n	800785c <osMutexNew+0x6a>
          mem = 1;
 8007856:	2301      	movs	r3, #1
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	e00c      	b.n	8007876 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <osMutexNew+0x84>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <osMutexNew+0x84>
            mem = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	e001      	b.n	8007876 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d112      	bne.n	80078a2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	4619      	mov	r1, r3
 8007888:	2004      	movs	r0, #4
 800788a:	f000 fc3e 	bl	800810a <xQueueCreateMutexStatic>
 800788e:	61f8      	str	r0, [r7, #28]
 8007890:	e016      	b.n	80078c0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4619      	mov	r1, r3
 8007898:	2001      	movs	r0, #1
 800789a:	f000 fc36 	bl	800810a <xQueueCreateMutexStatic>
 800789e:	61f8      	str	r0, [r7, #28]
 80078a0:	e00e      	b.n	80078c0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10b      	bne.n	80078c0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80078ae:	2004      	movs	r0, #4
 80078b0:	f000 fc13 	bl	80080da <xQueueCreateMutex>
 80078b4:	61f8      	str	r0, [r7, #28]
 80078b6:	e003      	b.n	80078c0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80078b8:	2001      	movs	r0, #1
 80078ba:	f000 fc0e 	bl	80080da <xQueueCreateMutex>
 80078be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <osMutexNew+0xee>
        if (attr != NULL) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <osMutexNew+0xe2>
          name = attr->name;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	e001      	b.n	80078d8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80078d8:	68f9      	ldr	r1, [r7, #12]
 80078da:	69f8      	ldr	r0, [r7, #28]
 80078dc:	f001 fafa 	bl	8008ed4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d006      	beq.n	80078f4 <osMutexNew+0x102>
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f043 0301 	orr.w	r3, r3, #1
 80078f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80078f4:	69fb      	ldr	r3, [r7, #28]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3720      	adds	r7, #32
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791c:	f3ef 8305 	mrs	r3, IPSR
 8007920:	60bb      	str	r3, [r7, #8]
  return(result);
 8007922:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007928:	f06f 0305 	mvn.w	r3, #5
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e02c      	b.n	800798a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007936:	f06f 0303 	mvn.w	r3, #3
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	e025      	b.n	800798a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d011      	beq.n	8007968 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f000 fc2f 	bl	80081aa <xQueueTakeMutexRecursive>
 800794c:	4603      	mov	r3, r0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d01b      	beq.n	800798a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007958:	f06f 0301 	mvn.w	r3, #1
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e014      	b.n	800798a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007960:	f06f 0302 	mvn.w	r3, #2
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e010      	b.n	800798a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f000 ffd4 	bl	8008918 <xQueueSemaphoreTake>
 8007970:	4603      	mov	r3, r0
 8007972:	2b01      	cmp	r3, #1
 8007974:	d009      	beq.n	800798a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800797c:	f06f 0301 	mvn.w	r3, #1
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e002      	b.n	800798a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007984:	f06f 0302 	mvn.w	r3, #2
 8007988:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800798a:	697b      	ldr	r3, [r7, #20]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b0:	f3ef 8305 	mrs	r3, IPSR
 80079b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80079b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80079bc:	f06f 0305 	mvn.w	r3, #5
 80079c0:	617b      	str	r3, [r7, #20]
 80079c2:	e01f      	b.n	8007a04 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80079ca:	f06f 0303 	mvn.w	r3, #3
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e018      	b.n	8007a04 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80079d8:	6938      	ldr	r0, [r7, #16]
 80079da:	f000 fbb1 	bl	8008140 <xQueueGiveMutexRecursive>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d00f      	beq.n	8007a04 <osMutexRelease+0x70>
        stat = osErrorResource;
 80079e4:	f06f 0302 	mvn.w	r3, #2
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	e00b      	b.n	8007a04 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	6938      	ldr	r0, [r7, #16]
 80079f4:	f000 fc7e 	bl	80082f4 <xQueueGenericSend>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d002      	beq.n	8007a04 <osMutexRelease+0x70>
        stat = osErrorResource;
 80079fe:	f06f 0302 	mvn.w	r3, #2
 8007a02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007a04:	697b      	ldr	r3, [r7, #20]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b08a      	sub	sp, #40	@ 0x28
 8007a12:	af02      	add	r7, sp, #8
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	613b      	str	r3, [r7, #16]
  return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d175      	bne.n	8007b16 <osSemaphoreNew+0x108>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d072      	beq.n	8007b16 <osSemaphoreNew+0x108>
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d86e      	bhi.n	8007b16 <osSemaphoreNew+0x108>
    mem = -1;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d015      	beq.n	8007a70 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <osSemaphoreNew+0x4c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	2b4f      	cmp	r3, #79	@ 0x4f
 8007a52:	d902      	bls.n	8007a5a <osSemaphoreNew+0x4c>
        mem = 1;
 8007a54:	2301      	movs	r3, #1
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	e00c      	b.n	8007a74 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <osSemaphoreNew+0x66>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <osSemaphoreNew+0x66>
          mem = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	61bb      	str	r3, [r7, #24]
 8007a6e:	e001      	b.n	8007a74 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d04c      	beq.n	8007b16 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d128      	bne.n	8007ad4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10a      	bne.n	8007a9e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	9200      	str	r2, [sp, #0]
 8007a90:	2200      	movs	r2, #0
 8007a92:	2100      	movs	r1, #0
 8007a94:	2001      	movs	r0, #1
 8007a96:	f000 fa2b 	bl	8007ef0 <xQueueGenericCreateStatic>
 8007a9a:	61f8      	str	r0, [r7, #28]
 8007a9c:	e005      	b.n	8007aaa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	f000 faa1 	bl	8007fea <xQueueGenericCreate>
 8007aa8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d022      	beq.n	8007af6 <osSemaphoreNew+0xe8>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01f      	beq.n	8007af6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	69f8      	ldr	r0, [r7, #28]
 8007abe:	f000 fc19 	bl	80082f4 <xQueueGenericSend>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d016      	beq.n	8007af6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007ac8:	69f8      	ldr	r0, [r7, #28]
 8007aca:	f001 f8b7 	bl	8008c3c <vQueueDelete>
            hSemaphore = NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	e010      	b.n	8007af6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d108      	bne.n	8007aec <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fb98 	bl	8008218 <xQueueCreateCountingSemaphoreStatic>
 8007ae8:	61f8      	str	r0, [r7, #28]
 8007aea:	e004      	b.n	8007af6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fbcb 	bl	800828a <xQueueCreateCountingSemaphore>
 8007af4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00c      	beq.n	8007b16 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <osSemaphoreNew+0xfc>
          name = attr->name;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	e001      	b.n	8007b0e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b0e:	6979      	ldr	r1, [r7, #20]
 8007b10:	69f8      	ldr	r0, [r7, #28]
 8007b12:	f001 f9df 	bl	8008ed4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007b16:	69fb      	ldr	r3, [r7, #28]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007b38:	f06f 0303 	mvn.w	r3, #3
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	e039      	b.n	8007bb4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b40:	f3ef 8305 	mrs	r3, IPSR
 8007b44:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b46:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d022      	beq.n	8007b92 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007b52:	f06f 0303 	mvn.w	r3, #3
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e02c      	b.n	8007bb4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007b5e:	f107 0308 	add.w	r3, r7, #8
 8007b62:	461a      	mov	r2, r3
 8007b64:	2100      	movs	r1, #0
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f000 ffe6 	bl	8008b38 <xQueueReceiveFromISR>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d003      	beq.n	8007b7a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007b72:	f06f 0302 	mvn.w	r3, #2
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e01c      	b.n	8007bb4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d019      	beq.n	8007bb4 <osSemaphoreAcquire+0x94>
 8007b80:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc0 <osSemaphoreAcquire+0xa0>)
 8007b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	e010      	b.n	8007bb4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6938      	ldr	r0, [r7, #16]
 8007b96:	f000 febf 	bl	8008918 <xQueueSemaphoreTake>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d009      	beq.n	8007bb4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007ba6:	f06f 0301 	mvn.w	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e002      	b.n	8007bb4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007bae:	f06f 0302 	mvn.w	r3, #2
 8007bb2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007bb4:	697b      	ldr	r3, [r7, #20]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007bda:	f06f 0303 	mvn.w	r3, #3
 8007bde:	617b      	str	r3, [r7, #20]
 8007be0:	e02c      	b.n	8007c3c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007be2:	f3ef 8305 	mrs	r3, IPSR
 8007be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007be8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01a      	beq.n	8007c24 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6938      	ldr	r0, [r7, #16]
 8007bfa:	f000 fd1b 	bl	8008634 <xQueueGiveFromISR>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d003      	beq.n	8007c0c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007c04:	f06f 0302 	mvn.w	r3, #2
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e017      	b.n	8007c3c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d014      	beq.n	8007c3c <osSemaphoreRelease+0x78>
 8007c12:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <osSemaphoreRelease+0x84>)
 8007c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	e00b      	b.n	8007c3c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c24:	2300      	movs	r3, #0
 8007c26:	2200      	movs	r2, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6938      	ldr	r0, [r7, #16]
 8007c2c:	f000 fb62 	bl	80082f4 <xQueueGenericSend>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d002      	beq.n	8007c3c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007c36:	f06f 0302 	mvn.w	r3, #2
 8007c3a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007c3c:	697b      	ldr	r3, [r7, #20]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a07      	ldr	r2, [pc, #28]	@ (8007c78 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	4a06      	ldr	r2, [pc, #24]	@ (8007c7c <vApplicationGetIdleTaskMemory+0x30>)
 8007c62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2280      	movs	r2, #128	@ 0x80
 8007c68:	601a      	str	r2, [r3, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	2000183c 	.word	0x2000183c
 8007c7c:	200018e8 	.word	0x200018e8

08007c80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a07      	ldr	r2, [pc, #28]	@ (8007cac <vApplicationGetTimerTaskMemory+0x2c>)
 8007c90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a06      	ldr	r2, [pc, #24]	@ (8007cb0 <vApplicationGetTimerTaskMemory+0x30>)
 8007c96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2280      	movs	r2, #128	@ 0x80
 8007c9c:	601a      	str	r2, [r3, #0]
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20001ae8 	.word	0x20001ae8
 8007cb0:	20001b94 	.word	0x20001b94

08007cb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f103 0208 	add.w	r2, r3, #8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f103 0208 	add.w	r2, r3, #8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 0208 	add.w	r2, r3, #8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	683a      	ldr	r2, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	601a      	str	r2, [r3, #0]
}
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d103      	bne.n	8007d76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e00c      	b.n	8007d90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e002      	b.n	8007d84 <vListInsert+0x2e>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d2f6      	bcs.n	8007d7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	601a      	str	r2, [r3, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6892      	ldr	r2, [r2, #8]
 8007dde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6852      	ldr	r2, [r2, #4]
 8007de8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d103      	bne.n	8007dfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e48:	f002 ff26 	bl	800ac98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e54:	68f9      	ldr	r1, [r7, #12]
 8007e56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e58:	fb01 f303 	mul.w	r3, r1, r3
 8007e5c:	441a      	add	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	441a      	add	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	22ff      	movs	r2, #255	@ 0xff
 8007e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	22ff      	movs	r2, #255	@ 0xff
 8007e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01a      	beq.n	8007edc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 feb4 	bl	8009c18 <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d012      	beq.n	8007edc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007eec <xQueueGenericReset+0xd0>)
 8007eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	e009      	b.n	8007edc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3310      	adds	r3, #16
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7ff fef1 	bl	8007cb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3324      	adds	r3, #36	@ 0x24
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff feec 	bl	8007cb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007edc:	f002 ff0e 	bl	800acfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ee0:	2301      	movs	r3, #1
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08e      	sub	sp, #56	@ 0x38
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10b      	bne.n	8007f1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	e7fd      	b.n	8007f36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <xQueueGenericCreateStatic+0x56>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <xQueueGenericCreateStatic+0x5a>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericCreateStatic+0x5c>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	623b      	str	r3, [r7, #32]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <xQueueGenericCreateStatic+0x84>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <xQueueGenericCreateStatic+0x88>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <xQueueGenericCreateStatic+0x8a>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10b      	bne.n	8007f96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	61fb      	str	r3, [r7, #28]
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f96:	2350      	movs	r3, #80	@ 0x50
 8007f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b50      	cmp	r3, #80	@ 0x50
 8007f9e:	d00b      	beq.n	8007fb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	61bb      	str	r3, [r7, #24]
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	e7fd      	b.n	8007fb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007fb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00d      	beq.n	8007fe0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fcc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f840 	bl	8008060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3730      	adds	r7, #48	@ 0x30
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08a      	sub	sp, #40	@ 0x28
 8007fee:	af02      	add	r7, sp, #8
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	613b      	str	r3, [r7, #16]
}
 8008010:	bf00      	nop
 8008012:	bf00      	nop
 8008014:	e7fd      	b.n	8008012 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3350      	adds	r3, #80	@ 0x50
 8008024:	4618      	mov	r0, r3
 8008026:	f002 ff59 	bl	800aedc <pvPortMalloc>
 800802a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d011      	beq.n	8008056 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	3350      	adds	r3, #80	@ 0x50
 800803a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008044:	79fa      	ldrb	r2, [r7, #7]
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f805 	bl	8008060 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008056:	69bb      	ldr	r3, [r7, #24]
	}
 8008058:	4618      	mov	r0, r3
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	e002      	b.n	8008082 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800808e:	2101      	movs	r1, #1
 8008090:	69b8      	ldr	r0, [r7, #24]
 8008092:	f7ff fec3 	bl	8007e1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	78fa      	ldrb	r2, [r7, #3]
 800809a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080c6:	2300      	movs	r3, #0
 80080c8:	2200      	movs	r2, #0
 80080ca:	2100      	movs	r1, #0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f911 	bl	80082f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	4603      	mov	r3, r0
 80080e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080e4:	2301      	movs	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	2300      	movs	r3, #0
 80080ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6939      	ldr	r1, [r7, #16]
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	f7ff ff79 	bl	8007fea <xQueueGenericCreate>
 80080f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff ffd3 	bl	80080a6 <prvInitialiseMutex>

		return xNewQueue;
 8008100:	68fb      	ldr	r3, [r7, #12]
	}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800810a:	b580      	push	{r7, lr}
 800810c:	b088      	sub	sp, #32
 800810e:	af02      	add	r7, sp, #8
 8008110:	4603      	mov	r3, r0
 8008112:	6039      	str	r1, [r7, #0]
 8008114:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008116:	2301      	movs	r3, #1
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2200      	movs	r2, #0
 8008126:	6939      	ldr	r1, [r7, #16]
 8008128:	6978      	ldr	r0, [r7, #20]
 800812a:	f7ff fee1 	bl	8007ef0 <xQueueGenericCreateStatic>
 800812e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff ffb8 	bl	80080a6 <prvInitialiseMutex>

		return xNewQueue;
 8008136:	68fb      	ldr	r3, [r7, #12]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10b      	bne.n	800816a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	689c      	ldr	r4, [r3, #8]
 800816e:	f001 ff19 	bl	8009fa4 <xTaskGetCurrentTaskHandle>
 8008172:	4603      	mov	r3, r0
 8008174:	429c      	cmp	r4, r3
 8008176:	d111      	bne.n	800819c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	6938      	ldr	r0, [r7, #16]
 8008192:	f000 f8af 	bl	80082f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008196:	2301      	movs	r3, #1
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	e001      	b.n	80081a0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80081a0:	697b      	ldr	r3, [r7, #20]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd90      	pop	{r4, r7, pc}

080081aa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80081aa:	b590      	push	{r4, r7, lr}
 80081ac:	b087      	sub	sp, #28
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	60fb      	str	r3, [r7, #12]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	689c      	ldr	r4, [r3, #8]
 80081da:	f001 fee3 	bl	8009fa4 <xTaskGetCurrentTaskHandle>
 80081de:	4603      	mov	r3, r0
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d107      	bne.n	80081f4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80081ee:	2301      	movs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	e00c      	b.n	800820e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6938      	ldr	r0, [r7, #16]
 80081f8:	f000 fb8e 	bl	8008918 <xQueueSemaphoreTake>
 80081fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800820e:	697b      	ldr	r3, [r7, #20]
	}
 8008210:	4618      	mov	r0, r3
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	bd90      	pop	{r4, r7, pc}

08008218 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08a      	sub	sp, #40	@ 0x28
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	61bb      	str	r3, [r7, #24]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	429a      	cmp	r2, r3
 8008248:	d90b      	bls.n	8008262 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	617b      	str	r3, [r7, #20]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008262:	2302      	movs	r3, #2
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	2100      	movs	r1, #0
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff fe3f 	bl	8007ef0 <xQueueGenericCreateStatic>
 8008272:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008280:	69fb      	ldr	r3, [r7, #28]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	613b      	str	r3, [r7, #16]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d90b      	bls.n	80082d2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	60fb      	str	r3, [r7, #12]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082d2:	2202      	movs	r2, #2
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff fe87 	bl	8007fea <xQueueGenericCreate>
 80082dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082ea:	697b      	ldr	r3, [r7, #20]
	}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	@ 0x38
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008302:	2300      	movs	r3, #0
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <xQueueGenericSend+0x34>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d103      	bne.n	8008336 <xQueueGenericSend+0x42>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <xQueueGenericSend+0x46>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericSend+0x48>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10b      	bne.n	8008358 <xQueueGenericSend+0x64>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <xQueueGenericSend+0x72>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <xQueueGenericSend+0x76>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSend+0x78>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <xQueueGenericSend+0x94>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	623b      	str	r3, [r7, #32]
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008388:	f001 fe1c 	bl	8009fc4 <xTaskGetSchedulerState>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <xQueueGenericSend+0xa4>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <xQueueGenericSend+0xa8>
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <xQueueGenericSend+0xaa>
 800839c:	2300      	movs	r3, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10b      	bne.n	80083ba <xQueueGenericSend+0xc6>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	61fb      	str	r3, [r7, #28]
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	e7fd      	b.n	80083b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ba:	f002 fc6d 	bl	800ac98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d302      	bcc.n	80083d0 <xQueueGenericSend+0xdc>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d129      	bne.n	8008424 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083d6:	f000 fc6d 	bl	8008cb4 <prvCopyDataToQueue>
 80083da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	3324      	adds	r3, #36	@ 0x24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fc15 	bl	8009c18 <xTaskRemoveFromEventList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d013      	beq.n	800841c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083f4:	4b3f      	ldr	r3, [pc, #252]	@ (80084f4 <xQueueGenericSend+0x200>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	e00a      	b.n	800841c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800840c:	4b39      	ldr	r3, [pc, #228]	@ (80084f4 <xQueueGenericSend+0x200>)
 800840e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800841c:	f002 fc6e 	bl	800acfc <vPortExitCritical>
				return pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	e063      	b.n	80084ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800842a:	f002 fc67 	bl	800acfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800842e:	2300      	movs	r3, #0
 8008430:	e05c      	b.n	80084ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	4618      	mov	r0, r3
 800843e:	f001 fc4f 	bl	8009ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008446:	f002 fc59 	bl	800acfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800844a:	f001 f99d 	bl	8009788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844e:	f002 fc23 	bl	800ac98 <vPortEnterCritical>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008458:	b25b      	sxtb	r3, r3
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d103      	bne.n	8008468 <xQueueGenericSend+0x174>
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800846e:	b25b      	sxtb	r3, r3
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008474:	d103      	bne.n	800847e <xQueueGenericSend+0x18a>
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800847e:	f002 fc3d 	bl	800acfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008482:	1d3a      	adds	r2, r7, #4
 8008484:	f107 0314 	add.w	r3, r7, #20
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fc3e 	bl	8009d0c <xTaskCheckForTimeOut>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d124      	bne.n	80084e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008496:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008498:	f000 fd04 	bl	8008ea4 <prvIsQueueFull>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	3310      	adds	r3, #16
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fb62 	bl	8009b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084b2:	f000 fc8f 	bl	8008dd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084b6:	f001 f975 	bl	80097a4 <xTaskResumeAll>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f47f af7c 	bne.w	80083ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80084c2:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <xQueueGenericSend+0x200>)
 80084c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	e772      	b.n	80083ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084d6:	f000 fc7d 	bl	8008dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084da:	f001 f963 	bl	80097a4 <xTaskResumeAll>
 80084de:	e76c      	b.n	80083ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084e2:	f000 fc77 	bl	8008dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e6:	f001 f95d 	bl	80097a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3738      	adds	r7, #56	@ 0x38
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b090      	sub	sp, #64	@ 0x40
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10b      	bne.n	8008528 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <xQueueGenericSendFromISR+0x3e>
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <xQueueGenericSendFromISR+0x42>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueGenericSendFromISR+0x44>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10b      	bne.n	8008558 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d103      	bne.n	8008566 <xQueueGenericSendFromISR+0x6e>
 800855e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <xQueueGenericSendFromISR+0x72>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueGenericSendFromISR+0x74>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	623b      	str	r3, [r7, #32]
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008588:	f002 fc66 	bl	800ae58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800858c:	f3ef 8211 	mrs	r2, BASEPRI
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	61fa      	str	r2, [r7, #28]
 80085a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80085a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d302      	bcc.n	80085ba <xQueueGenericSendFromISR+0xc2>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d12f      	bne.n	800861a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80085d0:	f000 fb70 	bl	8008cb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80085d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085dc:	d112      	bne.n	8008604 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d016      	beq.n	8008614 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	3324      	adds	r3, #36	@ 0x24
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 fb14 	bl	8009c18 <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e007      	b.n	8008614 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008604:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008608:	3301      	adds	r3, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	b25a      	sxtb	r2, r3
 800860e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008614:	2301      	movs	r3, #1
 8008616:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008618:	e001      	b.n	800861e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800861a:	2300      	movs	r3, #0
 800861c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800862c:	4618      	mov	r0, r3
 800862e:	3740      	adds	r7, #64	@ 0x40
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08e      	sub	sp, #56	@ 0x38
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10b      	bne.n	8008660 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	623b      	str	r3, [r7, #32]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	61fb      	str	r3, [r7, #28]
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <xQueueGiveFromISR+0x5c>
 8008688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <xQueueGiveFromISR+0x60>
 8008690:	2301      	movs	r3, #1
 8008692:	e000      	b.n	8008696 <xQueueGiveFromISR+0x62>
 8008694:	2300      	movs	r3, #0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61bb      	str	r3, [r7, #24]
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	e7fd      	b.n	80086ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086b2:	f002 fbd1 	bl	800ae58 <vPortValidateInterruptPriority>
	__asm volatile
 80086b6:	f3ef 8211 	mrs	r2, BASEPRI
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	617a      	str	r2, [r7, #20]
 80086cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80086d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086de:	429a      	cmp	r2, r3
 80086e0:	d22b      	bcs.n	800873a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	1c5a      	adds	r2, r3, #1
 80086f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80086f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fc:	d112      	bne.n	8008724 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008702:	2b00      	cmp	r3, #0
 8008704:	d016      	beq.n	8008734 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	3324      	adds	r3, #36	@ 0x24
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fa84 	bl	8009c18 <xTaskRemoveFromEventList>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00e      	beq.n	8008734 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e007      	b.n	8008734 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008728:	3301      	adds	r3, #1
 800872a:	b2db      	uxtb	r3, r3
 800872c:	b25a      	sxtb	r2, r3
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008734:	2301      	movs	r3, #1
 8008736:	637b      	str	r3, [r7, #52]	@ 0x34
 8008738:	e001      	b.n	800873e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800873a:	2300      	movs	r3, #0
 800873c:	637b      	str	r3, [r7, #52]	@ 0x34
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f383 8811 	msr	BASEPRI, r3
}
 8008748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800874a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800874c:	4618      	mov	r0, r3
 800874e:	3738      	adds	r7, #56	@ 0x38
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08c      	sub	sp, #48	@ 0x30
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <xQueueReceive+0x32>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	623b      	str	r3, [r7, #32]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <xQueueReceive+0x40>
 800878c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <xQueueReceive+0x44>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <xQueueReceive+0x46>
 8008798:	2300      	movs	r3, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <xQueueReceive+0x62>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61fb      	str	r3, [r7, #28]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b6:	f001 fc05 	bl	8009fc4 <xTaskGetSchedulerState>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <xQueueReceive+0x72>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <xQueueReceive+0x76>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueReceive+0x78>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <xQueueReceive+0x94>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	61bb      	str	r3, [r7, #24]
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e8:	f002 fa56 	bl	800ac98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01f      	beq.n	8008838 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087f8:	68b9      	ldr	r1, [r7, #8]
 80087fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087fc:	f000 fac4 	bl	8008d88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	1e5a      	subs	r2, r3, #1
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00f      	beq.n	8008830 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	3310      	adds	r3, #16
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f9ff 	bl	8009c18 <xTaskRemoveFromEventList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b3c      	ldr	r3, [pc, #240]	@ (8008914 <xQueueReceive+0x1c0>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008830:	f002 fa64 	bl	800acfc <vPortExitCritical>
				return pdPASS;
 8008834:	2301      	movs	r3, #1
 8008836:	e069      	b.n	800890c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d103      	bne.n	8008846 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800883e:	f002 fa5d 	bl	800acfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008842:	2300      	movs	r3, #0
 8008844:	e062      	b.n	800890c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800884c:	f107 0310 	add.w	r3, r7, #16
 8008850:	4618      	mov	r0, r3
 8008852:	f001 fa45 	bl	8009ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800885a:	f002 fa4f 	bl	800acfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800885e:	f000 ff93 	bl	8009788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008862:	f002 fa19 	bl	800ac98 <vPortEnterCritical>
 8008866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800886c:	b25b      	sxtb	r3, r3
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d103      	bne.n	800887c <xQueueReceive+0x128>
 8008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <xQueueReceive+0x13e>
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008892:	f002 fa33 	bl	800acfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008896:	1d3a      	adds	r2, r7, #4
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fa34 	bl	8009d0c <xTaskCheckForTimeOut>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d123      	bne.n	80088f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088ac:	f000 fae4 	bl	8008e78 <prvIsQueueEmpty>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d017      	beq.n	80088e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	3324      	adds	r3, #36	@ 0x24
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 f958 	bl	8009b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c6:	f000 fa85 	bl	8008dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088ca:	f000 ff6b 	bl	80097a4 <xTaskResumeAll>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d189      	bne.n	80087e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80088d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <xQueueReceive+0x1c0>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	e780      	b.n	80087e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e8:	f000 fa74 	bl	8008dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ec:	f000 ff5a 	bl	80097a4 <xTaskResumeAll>
 80088f0:	e77a      	b.n	80087e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f4:	f000 fa6e 	bl	8008dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088f8:	f000 ff54 	bl	80097a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088fe:	f000 fabb 	bl	8008e78 <prvIsQueueEmpty>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	f43f af6f 	beq.w	80087e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800890a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800890c:	4618      	mov	r0, r3
 800890e:	3730      	adds	r7, #48	@ 0x30
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08e      	sub	sp, #56	@ 0x38
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008922:	2300      	movs	r3, #0
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800892e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10b      	bne.n	800894c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	623b      	str	r3, [r7, #32]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	61fb      	str	r3, [r7, #28]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800896c:	f001 fb2a 	bl	8009fc4 <xTaskGetSchedulerState>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <xQueueSemaphoreTake+0x64>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <xQueueSemaphoreTake+0x68>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <xQueueSemaphoreTake+0x6a>
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	61bb      	str	r3, [r7, #24]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800899e:	f002 f97b 	bl	800ac98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d024      	beq.n	80089f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	1e5a      	subs	r2, r3, #1
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089be:	f001 fc7b 	bl	800a2b8 <pvTaskIncrementMutexHeldCount>
 80089c2:	4602      	mov	r2, r0
 80089c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00f      	beq.n	80089f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	3310      	adds	r3, #16
 80089d4:	4618      	mov	r0, r3
 80089d6:	f001 f91f 	bl	8009c18 <xTaskRemoveFromEventList>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e0:	4b54      	ldr	r3, [pc, #336]	@ (8008b34 <xQueueSemaphoreTake+0x21c>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f0:	f002 f984 	bl	800acfc <vPortExitCritical>
				return pdPASS;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e098      	b.n	8008b2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d112      	bne.n	8008a24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	617b      	str	r3, [r7, #20]
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a1c:	f002 f96e 	bl	800acfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a20:	2300      	movs	r3, #0
 8008a22:	e082      	b.n	8008b2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a2a:	f107 030c 	add.w	r3, r7, #12
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f956 	bl	8009ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a34:	2301      	movs	r3, #1
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a38:	f002 f960 	bl	800acfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a3c:	f000 fea4 	bl	8009788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a40:	f002 f92a 	bl	800ac98 <vPortEnterCritical>
 8008a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a4a:	b25b      	sxtb	r3, r3
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d103      	bne.n	8008a5a <xQueueSemaphoreTake+0x142>
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d103      	bne.n	8008a70 <xQueueSemaphoreTake+0x158>
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a70:	f002 f944 	bl	800acfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a74:	463a      	mov	r2, r7
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 f945 	bl	8009d0c <xTaskCheckForTimeOut>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d132      	bne.n	8008aee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a8a:	f000 f9f5 	bl	8008e78 <prvIsQueueEmpty>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d026      	beq.n	8008ae2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d109      	bne.n	8008ab0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008a9c:	f002 f8fc 	bl	800ac98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f001 faab 	bl	800a000 <xTaskPriorityInherit>
 8008aaa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008aac:	f002 f926 	bl	800acfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab2:	3324      	adds	r3, #36	@ 0x24
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 f85b 	bl	8009b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ac0:	f000 f988 	bl	8008dd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ac4:	f000 fe6e 	bl	80097a4 <xTaskResumeAll>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f47f af67 	bne.w	800899e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008ad0:	4b18      	ldr	r3, [pc, #96]	@ (8008b34 <xQueueSemaphoreTake+0x21c>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	e75d      	b.n	800899e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ae4:	f000 f976 	bl	8008dd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ae8:	f000 fe5c 	bl	80097a4 <xTaskResumeAll>
 8008aec:	e757      	b.n	800899e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008aee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008af0:	f000 f970 	bl	8008dd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008af4:	f000 fe56 	bl	80097a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008af8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008afa:	f000 f9bd 	bl	8008e78 <prvIsQueueEmpty>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f43f af4c 	beq.w	800899e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008b0c:	f002 f8c4 	bl	800ac98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b12:	f000 f8b7 	bl	8008c84 <prvGetDisinheritPriorityAfterTimeout>
 8008b16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 fb46 	bl	800a1b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b24:	f002 f8ea 	bl	800acfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3738      	adds	r7, #56	@ 0x38
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	e000ed04 	.word	0xe000ed04

08008b38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08e      	sub	sp, #56	@ 0x38
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10b      	bne.n	8008b66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	623b      	str	r3, [r7, #32]
}
 8008b60:	bf00      	nop
 8008b62:	bf00      	nop
 8008b64:	e7fd      	b.n	8008b62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <xQueueReceiveFromISR+0x3c>
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <xQueueReceiveFromISR+0x40>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <xQueueReceiveFromISR+0x42>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10b      	bne.n	8008b96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61fb      	str	r3, [r7, #28]
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	e7fd      	b.n	8008b92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b96:	f002 f95f 	bl	800ae58 <vPortValidateInterruptPriority>
	__asm volatile
 8008b9a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	61ba      	str	r2, [r7, #24]
 8008bb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008bb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02f      	beq.n	8008c22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd0:	f000 f8da 	bl	8008d88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd6:	1e5a      	subs	r2, r3, #1
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d112      	bne.n	8008c0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f810 	bl	8009c18 <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00e      	beq.n	8008c1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e007      	b.n	8008c1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	b25a      	sxtb	r2, r3
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c20:	e001      	b.n	8008c26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f383 8811 	msr	BASEPRI, r3
}
 8008c30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3738      	adds	r7, #56	@ 0x38
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <vQueueDelete+0x2a>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	60bb      	str	r3, [r7, #8]
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	e7fd      	b.n	8008c62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 f95e 	bl	8008f28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f002 f9fe 	bl	800b078 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e001      	b.n	8008ca6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10d      	bne.n	8008cee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d14d      	bne.n	8008d76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 f9f6 	bl	800a0d0 <xTaskPriorityDisinherit>
 8008ce4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	609a      	str	r2, [r3, #8]
 8008cec:	e043      	b.n	8008d76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d119      	bne.n	8008d28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6858      	ldr	r0, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68b9      	ldr	r1, [r7, #8]
 8008d00:	f003 f92f 	bl	800bf62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	441a      	add	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d32b      	bcc.n	8008d76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	e026      	b.n	8008d76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68d8      	ldr	r0, [r3, #12]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d30:	461a      	mov	r2, r3
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	f003 f915 	bl	800bf62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d40:	425b      	negs	r3, r3
 8008d42:	441a      	add	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d207      	bcs.n	8008d64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5c:	425b      	negs	r3, r3
 8008d5e:	441a      	add	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d105      	bne.n	8008d76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d7e:	697b      	ldr	r3, [r7, #20]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d018      	beq.n	8008dcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da2:	441a      	add	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d303      	bcc.n	8008dbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68d9      	ldr	r1, [r3, #12]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6838      	ldr	r0, [r7, #0]
 8008dc8:	f003 f8cb 	bl	800bf62 <memcpy>
	}
}
 8008dcc:	bf00      	nop
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ddc:	f001 ff5c 	bl	800ac98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008de6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008de8:	e011      	b.n	8008e0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d012      	beq.n	8008e18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	3324      	adds	r3, #36	@ 0x24
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 ff0e 	bl	8009c18 <xTaskRemoveFromEventList>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e02:	f000 ffe7 	bl	8009dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dce9      	bgt.n	8008dea <prvUnlockQueue+0x16>
 8008e16:	e000      	b.n	8008e1a <prvUnlockQueue+0x46>
					break;
 8008e18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	22ff      	movs	r2, #255	@ 0xff
 8008e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008e22:	f001 ff6b 	bl	800acfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e26:	f001 ff37 	bl	800ac98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e32:	e011      	b.n	8008e58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d012      	beq.n	8008e62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3310      	adds	r3, #16
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fee9 	bl	8009c18 <xTaskRemoveFromEventList>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e4c:	f000 ffc2 	bl	8009dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dce9      	bgt.n	8008e34 <prvUnlockQueue+0x60>
 8008e60:	e000      	b.n	8008e64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	22ff      	movs	r2, #255	@ 0xff
 8008e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e6c:	f001 ff46 	bl	800acfc <vPortExitCritical>
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e80:	f001 ff0a 	bl	800ac98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e001      	b.n	8008e96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e96:	f001 ff31 	bl	800acfc <vPortExitCritical>

	return xReturn;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eac:	f001 fef4 	bl	800ac98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d102      	bne.n	8008ec2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	e001      	b.n	8008ec6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ec6:	f001 ff19 	bl	800acfc <vPortExitCritical>

	return xReturn;
 8008eca:	68fb      	ldr	r3, [r7, #12]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	e014      	b.n	8008f0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8008f24 <vQueueAddToRegistry+0x50>)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ef0:	490c      	ldr	r1, [pc, #48]	@ (8008f24 <vQueueAddToRegistry+0x50>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008efa:	4a0a      	ldr	r2, [pc, #40]	@ (8008f24 <vQueueAddToRegistry+0x50>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4413      	add	r3, r2
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f06:	e006      	b.n	8008f16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	d9e7      	bls.n	8008ee4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20001d94 	.word	0x20001d94

08008f28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	e016      	b.n	8008f64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f36:	4a10      	ldr	r2, [pc, #64]	@ (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d10b      	bne.n	8008f5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f46:	4a0c      	ldr	r2, [pc, #48]	@ (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f50:	4a09      	ldr	r2, [pc, #36]	@ (8008f78 <vQueueUnregisterQueue+0x50>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	00db      	lsls	r3, r3, #3
 8008f56:	4413      	add	r3, r2
 8008f58:	2200      	movs	r2, #0
 8008f5a:	605a      	str	r2, [r3, #4]
				break;
 8008f5c:	e006      	b.n	8008f6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	d9e5      	bls.n	8008f36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20001d94 	.word	0x20001d94

08008f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f8c:	f001 fe84 	bl	800ac98 <vPortEnterCritical>
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f96:	b25b      	sxtb	r3, r3
 8008f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9c:	d103      	bne.n	8008fa6 <vQueueWaitForMessageRestricted+0x2a>
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d103      	bne.n	8008fbc <vQueueWaitForMessageRestricted+0x40>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fbc:	f001 fe9e 	bl	800acfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	3324      	adds	r3, #36	@ 0x24
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68b9      	ldr	r1, [r7, #8]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fdf5 	bl	8009bc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fd6:	6978      	ldr	r0, [r7, #20]
 8008fd8:	f7ff fefc 	bl	8008dd4 <prvUnlockQueue>
	}
 8008fdc:	bf00      	nop
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	@ 0x38
 8008fe8:	af04      	add	r7, sp, #16
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	623b      	str	r3, [r7, #32]
}
 800900a:	bf00      	nop
 800900c:	bf00      	nop
 800900e:	e7fd      	b.n	800900c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10b      	bne.n	800902e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	61fb      	str	r3, [r7, #28]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800902e:	23ac      	movs	r3, #172	@ 0xac
 8009030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2bac      	cmp	r3, #172	@ 0xac
 8009036:	d00b      	beq.n	8009050 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	61bb      	str	r3, [r7, #24]
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	e7fd      	b.n	800904c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01e      	beq.n	8009096 <xTaskCreateStatic+0xb2>
 8009058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01b      	beq.n	8009096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009066:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	2202      	movs	r2, #2
 800906c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009070:	2300      	movs	r3, #0
 8009072:	9303      	str	r3, [sp, #12]
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	9302      	str	r3, [sp, #8]
 8009078:	f107 0314 	add.w	r3, r7, #20
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f851 	bl	8009130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800908e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009090:	f000 f8f8 	bl	8009284 <prvAddNewTaskToReadyList>
 8009094:	e001      	b.n	800909a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800909a:	697b      	ldr	r3, [r7, #20]
	}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	@ 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08c      	sub	sp, #48	@ 0x30
 80090a8:	af04      	add	r7, sp, #16
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4613      	mov	r3, r2
 80090b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090b4:	88fb      	ldrh	r3, [r7, #6]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 ff0f 	bl	800aedc <pvPortMalloc>
 80090be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00e      	beq.n	80090e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090c6:	20ac      	movs	r0, #172	@ 0xac
 80090c8:	f001 ff08 	bl	800aedc <pvPortMalloc>
 80090cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80090da:	e005      	b.n	80090e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090dc:	6978      	ldr	r0, [r7, #20]
 80090de:	f001 ffcb 	bl	800b078 <vPortFree>
 80090e2:	e001      	b.n	80090e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d017      	beq.n	800911e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	2300      	movs	r3, #0
 80090fa:	9303      	str	r3, [sp, #12]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	9302      	str	r3, [sp, #8]
 8009100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 f80f 	bl	8009130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009112:	69f8      	ldr	r0, [r7, #28]
 8009114:	f000 f8b6 	bl	8009284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009118:	2301      	movs	r3, #1
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e002      	b.n	8009124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800911e:	f04f 33ff 	mov.w	r3, #4294967295
 8009122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009124:	69bb      	ldr	r3, [r7, #24]
	}
 8009126:	4618      	mov	r0, r3
 8009128:	3720      	adds	r7, #32
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
	...

08009130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	461a      	mov	r2, r3
 8009148:	21a5      	movs	r1, #165	@ 0xa5
 800914a:	f002 fe34 	bl	800bdb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009158:	3b01      	subs	r3, #1
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f023 0307 	bic.w	r3, r3, #7
 8009166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f003 0307 	and.w	r3, r3, #7
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	617b      	str	r3, [r7, #20]
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	e7fd      	b.n	8009186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01f      	beq.n	80091d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009190:	2300      	movs	r3, #0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	e012      	b.n	80091bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	7819      	ldrb	r1, [r3, #0]
 800919e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	3334      	adds	r3, #52	@ 0x34
 80091a6:	460a      	mov	r2, r1
 80091a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d006      	beq.n	80091c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	3301      	adds	r3, #1
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	2b0f      	cmp	r3, #15
 80091c0:	d9e9      	bls.n	8009196 <prvInitialiseNewTask+0x66>
 80091c2:	e000      	b.n	80091c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80091c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091ce:	e003      	b.n	80091d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	2b37      	cmp	r3, #55	@ 0x37
 80091dc:	d901      	bls.n	80091e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091de:	2337      	movs	r3, #55	@ 0x37
 80091e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2200      	movs	r2, #0
 80091f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	3304      	adds	r3, #4
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fd7b 	bl	8007cf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	3318      	adds	r3, #24
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd76 	bl	8007cf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800920c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800921c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800921e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009220:	2200      	movs	r2, #0
 8009222:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	2200      	movs	r2, #0
 8009230:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	3358      	adds	r3, #88	@ 0x58
 8009238:	224c      	movs	r2, #76	@ 0x4c
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f002 fdba 	bl	800bdb6 <memset>
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	4a0c      	ldr	r2, [pc, #48]	@ (8009278 <prvInitialiseNewTask+0x148>)
 8009246:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	4a0c      	ldr	r2, [pc, #48]	@ (800927c <prvInitialiseNewTask+0x14c>)
 800924c:	661a      	str	r2, [r3, #96]	@ 0x60
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	4a0b      	ldr	r2, [pc, #44]	@ (8009280 <prvInitialiseNewTask+0x150>)
 8009252:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	69b8      	ldr	r0, [r7, #24]
 800925a:	f001 fbef 	bl	800aa3c <pxPortInitialiseStack>
 800925e:	4602      	mov	r2, r0
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800926a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800926e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009270:	bf00      	nop
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	2001aad0 	.word	0x2001aad0
 800927c:	2001ab38 	.word	0x2001ab38
 8009280:	2001aba0 	.word	0x2001aba0

08009284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800928c:	f001 fd04 	bl	800ac98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009290:	4b2d      	ldr	r3, [pc, #180]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a2c      	ldr	r2, [pc, #176]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800929a:	4b2c      	ldr	r3, [pc, #176]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092a2:	4a2a      	ldr	r2, [pc, #168]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092a8:	4b27      	ldr	r3, [pc, #156]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d110      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092b0:	f000 fdb4 	bl	8009e1c <prvInitialiseTaskLists>
 80092b4:	e00d      	b.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092b6:	4b26      	ldr	r3, [pc, #152]	@ (8009350 <prvAddNewTaskToReadyList+0xcc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092be:	4b23      	ldr	r3, [pc, #140]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d802      	bhi.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092d2:	4b20      	ldr	r3, [pc, #128]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d903      	bls.n	80092f8 <prvAddNewTaskToReadyList+0x74>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	4a18      	ldr	r2, [pc, #96]	@ (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a15      	ldr	r2, [pc, #84]	@ (800935c <prvAddNewTaskToReadyList+0xd8>)
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7fe fcfd 	bl	8007d0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009314:	f001 fcf2 	bl	800acfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009318:	4b0d      	ldr	r3, [pc, #52]	@ (8009350 <prvAddNewTaskToReadyList+0xcc>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00e      	beq.n	800933e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	429a      	cmp	r2, r3
 800932c:	d207      	bcs.n	800933e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800932e:	4b0c      	ldr	r3, [pc, #48]	@ (8009360 <prvAddNewTaskToReadyList+0xdc>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200022a8 	.word	0x200022a8
 800934c:	20001dd4 	.word	0x20001dd4
 8009350:	200022b4 	.word	0x200022b4
 8009354:	200022c4 	.word	0x200022c4
 8009358:	200022b0 	.word	0x200022b0
 800935c:	20001dd8 	.word	0x20001dd8
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800936c:	f001 fc94 	bl	800ac98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <vTaskDelete+0x18>
 8009376:	4b2d      	ldr	r3, [pc, #180]	@ (800942c <vTaskDelete+0xc8>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	e000      	b.n	800937e <vTaskDelete+0x1a>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3304      	adds	r3, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fd1f 	bl	8007dc8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3318      	adds	r3, #24
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fd16 	bl	8007dc8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800939c:	4b24      	ldr	r3, [pc, #144]	@ (8009430 <vTaskDelete+0xcc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a23      	ldr	r2, [pc, #140]	@ (8009430 <vTaskDelete+0xcc>)
 80093a4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80093a6:	4b21      	ldr	r3, [pc, #132]	@ (800942c <vTaskDelete+0xc8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d10b      	bne.n	80093c8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3304      	adds	r3, #4
 80093b4:	4619      	mov	r1, r3
 80093b6:	481f      	ldr	r0, [pc, #124]	@ (8009434 <vTaskDelete+0xd0>)
 80093b8:	f7fe fca9 	bl	8007d0e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80093bc:	4b1e      	ldr	r3, [pc, #120]	@ (8009438 <vTaskDelete+0xd4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3301      	adds	r3, #1
 80093c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009438 <vTaskDelete+0xd4>)
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	e009      	b.n	80093dc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80093c8:	4b1c      	ldr	r3, [pc, #112]	@ (800943c <vTaskDelete+0xd8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	4a1b      	ldr	r2, [pc, #108]	@ (800943c <vTaskDelete+0xd8>)
 80093d0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fd90 	bl	8009ef8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80093d8:	f000 fdc4 	bl	8009f64 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80093dc:	f001 fc8e 	bl	800acfc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80093e0:	4b17      	ldr	r3, [pc, #92]	@ (8009440 <vTaskDelete+0xdc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01c      	beq.n	8009422 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80093e8:	4b10      	ldr	r3, [pc, #64]	@ (800942c <vTaskDelete+0xc8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d117      	bne.n	8009422 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80093f2:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <vTaskDelete+0xe0>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <vTaskDelete+0xae>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60bb      	str	r3, [r7, #8]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <vTaskDelete+0xe4>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	20001dd4 	.word	0x20001dd4
 8009430:	200022c4 	.word	0x200022c4
 8009434:	2000227c 	.word	0x2000227c
 8009438:	20002290 	.word	0x20002290
 800943c:	200022a8 	.word	0x200022a8
 8009440:	200022b4 	.word	0x200022b4
 8009444:	200022d0 	.word	0x200022d0
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	@ 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10b      	bne.n	8009478 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	617b      	str	r3, [r7, #20]
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	e7fd      	b.n	8009474 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <vTaskDelayUntil+0x4a>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	613b      	str	r3, [r7, #16]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8009496:	4b2a      	ldr	r3, [pc, #168]	@ (8009540 <vTaskDelayUntil+0xf4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <vTaskDelayUntil+0x6a>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	60fb      	str	r3, [r7, #12]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80094b6:	f000 f967 	bl	8009788 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80094ba:	4b22      	ldr	r3, [pc, #136]	@ (8009544 <vTaskDelayUntil+0xf8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	4413      	add	r3, r2
 80094c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d20b      	bcs.n	80094ec <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d211      	bcs.n	8009502 <vTaskDelayUntil+0xb6>
 80094de:	69fa      	ldr	r2, [r7, #28]
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d90d      	bls.n	8009502 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80094e6:	2301      	movs	r3, #1
 80094e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80094ea:	e00a      	b.n	8009502 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69fa      	ldr	r2, [r7, #28]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d303      	bcc.n	80094fe <vTaskDelayUntil+0xb2>
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d901      	bls.n	8009502 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80094fe:	2301      	movs	r3, #1
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	2b00      	cmp	r3, #0
 800950c:	d006      	beq.n	800951c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	1ad3      	subs	r3, r2, r3
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fee2 	bl	800a2e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800951c:	f000 f942 	bl	80097a4 <xTaskResumeAll>
 8009520:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d107      	bne.n	8009538 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8009528:	4b07      	ldr	r3, [pc, #28]	@ (8009548 <vTaskDelayUntil+0xfc>)
 800952a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009538:	bf00      	nop
 800953a:	3728      	adds	r7, #40	@ 0x28
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200022d0 	.word	0x200022d0
 8009544:	200022ac 	.word	0x200022ac
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d018      	beq.n	8009590 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <vTaskDelay+0x64>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <vTaskDelay+0x32>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	60bb      	str	r3, [r7, #8]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800957e:	f000 f903 	bl	8009788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009582:	2100      	movs	r1, #0
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 feab 	bl	800a2e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800958a:	f000 f90b 	bl	80097a4 <xTaskResumeAll>
 800958e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d107      	bne.n	80095a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009596:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <vTaskDelay+0x68>)
 8009598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200022d0 	.word	0x200022d0
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80095c0:	f001 fb6a 	bl	800ac98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <vTaskSuspend+0x18>
 80095ca:	4b30      	ldr	r3, [pc, #192]	@ (800968c <vTaskSuspend+0xd4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	e000      	b.n	80095d2 <vTaskSuspend+0x1a>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe fbf5 	bl	8007dc8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3318      	adds	r3, #24
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fbec 	bl	8007dc8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4619      	mov	r1, r3
 80095f6:	4826      	ldr	r0, [pc, #152]	@ (8009690 <vTaskSuspend+0xd8>)
 80095f8:	f7fe fb89 	bl	8007d0e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d103      	bne.n	8009610 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009610:	f001 fb74 	bl	800acfc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009614:	4b1f      	ldr	r3, [pc, #124]	@ (8009694 <vTaskSuspend+0xdc>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800961c:	f001 fb3c 	bl	800ac98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009620:	f000 fca0 	bl	8009f64 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009624:	f001 fb6a 	bl	800acfc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009628:	4b18      	ldr	r3, [pc, #96]	@ (800968c <vTaskSuspend+0xd4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	429a      	cmp	r2, r3
 8009630:	d128      	bne.n	8009684 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8009632:	4b18      	ldr	r3, [pc, #96]	@ (8009694 <vTaskSuspend+0xdc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d018      	beq.n	800966c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800963a:	4b17      	ldr	r3, [pc, #92]	@ (8009698 <vTaskSuspend+0xe0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00b      	beq.n	800965a <vTaskSuspend+0xa2>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800965a:	4b10      	ldr	r3, [pc, #64]	@ (800969c <vTaskSuspend+0xe4>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800966a:	e00b      	b.n	8009684 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800966c:	4b08      	ldr	r3, [pc, #32]	@ (8009690 <vTaskSuspend+0xd8>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <vTaskSuspend+0xe8>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d103      	bne.n	8009680 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8009678:	4b04      	ldr	r3, [pc, #16]	@ (800968c <vTaskSuspend+0xd4>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
	}
 800967e:	e001      	b.n	8009684 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8009680:	f000 f9f8 	bl	8009a74 <vTaskSwitchContext>
	}
 8009684:	bf00      	nop
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20001dd4 	.word	0x20001dd4
 8009690:	20002294 	.word	0x20002294
 8009694:	200022b4 	.word	0x200022b4
 8009698:	200022d0 	.word	0x200022d0
 800969c:	e000ed04 	.word	0xe000ed04
 80096a0:	200022a8 	.word	0x200022a8

080096a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	@ 0x28
 80096a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096b2:	463a      	mov	r2, r7
 80096b4:	1d39      	adds	r1, r7, #4
 80096b6:	f107 0308 	add.w	r3, r7, #8
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fac6 	bl	8007c4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	9202      	str	r2, [sp, #8]
 80096c8:	9301      	str	r3, [sp, #4]
 80096ca:	2300      	movs	r3, #0
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	460a      	mov	r2, r1
 80096d2:	4925      	ldr	r1, [pc, #148]	@ (8009768 <vTaskStartScheduler+0xc4>)
 80096d4:	4825      	ldr	r0, [pc, #148]	@ (800976c <vTaskStartScheduler+0xc8>)
 80096d6:	f7ff fc85 	bl	8008fe4 <xTaskCreateStatic>
 80096da:	4603      	mov	r3, r0
 80096dc:	4a24      	ldr	r2, [pc, #144]	@ (8009770 <vTaskStartScheduler+0xcc>)
 80096de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096e0:	4b23      	ldr	r3, [pc, #140]	@ (8009770 <vTaskStartScheduler+0xcc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e001      	b.n	80096f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d102      	bne.n	80096fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096f8:	f000 fe46 	bl	800a388 <xTimerCreateTimerTask>
 80096fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d11d      	bne.n	8009740 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	613b      	str	r3, [r7, #16]
}
 8009716:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009718:	4b16      	ldr	r3, [pc, #88]	@ (8009774 <vTaskStartScheduler+0xd0>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3358      	adds	r3, #88	@ 0x58
 800971e:	4a16      	ldr	r2, [pc, #88]	@ (8009778 <vTaskStartScheduler+0xd4>)
 8009720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009722:	4b16      	ldr	r3, [pc, #88]	@ (800977c <vTaskStartScheduler+0xd8>)
 8009724:	f04f 32ff 	mov.w	r2, #4294967295
 8009728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800972a:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <vTaskStartScheduler+0xdc>)
 800972c:	2201      	movs	r2, #1
 800972e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009730:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <vTaskStartScheduler+0xe0>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009736:	f7f8 f965 	bl	8001a04 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800973a:	f001 fa09 	bl	800ab50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800973e:	e00f      	b.n	8009760 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009746:	d10b      	bne.n	8009760 <vTaskStartScheduler+0xbc>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	60fb      	str	r3, [r7, #12]
}
 800975a:	bf00      	nop
 800975c:	bf00      	nop
 800975e:	e7fd      	b.n	800975c <vTaskStartScheduler+0xb8>
}
 8009760:	bf00      	nop
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	0800e8c0 	.word	0x0800e8c0
 800976c:	08009ded 	.word	0x08009ded
 8009770:	200022cc 	.word	0x200022cc
 8009774:	20001dd4 	.word	0x20001dd4
 8009778:	2000003c 	.word	0x2000003c
 800977c:	200022c8 	.word	0x200022c8
 8009780:	200022b4 	.word	0x200022b4
 8009784:	200022ac 	.word	0x200022ac

08009788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800978c:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <vTaskSuspendAll+0x18>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	4a03      	ldr	r2, [pc, #12]	@ (80097a0 <vTaskSuspendAll+0x18>)
 8009794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	200022d0 	.word	0x200022d0

080097a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097b2:	4b42      	ldr	r3, [pc, #264]	@ (80098bc <xTaskResumeAll+0x118>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097d2:	f001 fa61 	bl	800ac98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097d6:	4b39      	ldr	r3, [pc, #228]	@ (80098bc <xTaskResumeAll+0x118>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a37      	ldr	r2, [pc, #220]	@ (80098bc <xTaskResumeAll+0x118>)
 80097de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097e0:	4b36      	ldr	r3, [pc, #216]	@ (80098bc <xTaskResumeAll+0x118>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d162      	bne.n	80098ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097e8:	4b35      	ldr	r3, [pc, #212]	@ (80098c0 <xTaskResumeAll+0x11c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d05e      	beq.n	80098ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097f0:	e02f      	b.n	8009852 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f2:	4b34      	ldr	r3, [pc, #208]	@ (80098c4 <xTaskResumeAll+0x120>)
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3318      	adds	r3, #24
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fae2 	bl	8007dc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3304      	adds	r3, #4
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe fadd 	bl	8007dc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009812:	4b2d      	ldr	r3, [pc, #180]	@ (80098c8 <xTaskResumeAll+0x124>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	429a      	cmp	r2, r3
 8009818:	d903      	bls.n	8009822 <xTaskResumeAll+0x7e>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4a2a      	ldr	r2, [pc, #168]	@ (80098c8 <xTaskResumeAll+0x124>)
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4a27      	ldr	r2, [pc, #156]	@ (80098cc <xTaskResumeAll+0x128>)
 8009830:	441a      	add	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3304      	adds	r3, #4
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f7fe fa68 	bl	8007d0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009842:	4b23      	ldr	r3, [pc, #140]	@ (80098d0 <xTaskResumeAll+0x12c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	429a      	cmp	r2, r3
 800984a:	d302      	bcc.n	8009852 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800984c:	4b21      	ldr	r3, [pc, #132]	@ (80098d4 <xTaskResumeAll+0x130>)
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009852:	4b1c      	ldr	r3, [pc, #112]	@ (80098c4 <xTaskResumeAll+0x120>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1cb      	bne.n	80097f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009860:	f000 fb80 	bl	8009f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009864:	4b1c      	ldr	r3, [pc, #112]	@ (80098d8 <xTaskResumeAll+0x134>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d010      	beq.n	8009892 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009870:	f000 f846 	bl	8009900 <xTaskIncrementTick>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800987a:	4b16      	ldr	r3, [pc, #88]	@ (80098d4 <xTaskResumeAll+0x130>)
 800987c:	2201      	movs	r2, #1
 800987e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3b01      	subs	r3, #1
 8009884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f1      	bne.n	8009870 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800988c:	4b12      	ldr	r3, [pc, #72]	@ (80098d8 <xTaskResumeAll+0x134>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009892:	4b10      	ldr	r3, [pc, #64]	@ (80098d4 <xTaskResumeAll+0x130>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d009      	beq.n	80098ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800989a:	2301      	movs	r3, #1
 800989c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800989e:	4b0f      	ldr	r3, [pc, #60]	@ (80098dc <xTaskResumeAll+0x138>)
 80098a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098ae:	f001 fa25 	bl	800acfc <vPortExitCritical>

	return xAlreadyYielded;
 80098b2:	68bb      	ldr	r3, [r7, #8]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	200022d0 	.word	0x200022d0
 80098c0:	200022a8 	.word	0x200022a8
 80098c4:	20002268 	.word	0x20002268
 80098c8:	200022b0 	.word	0x200022b0
 80098cc:	20001dd8 	.word	0x20001dd8
 80098d0:	20001dd4 	.word	0x20001dd4
 80098d4:	200022bc 	.word	0x200022bc
 80098d8:	200022b8 	.word	0x200022b8
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098e6:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <xTaskGetTickCount+0x1c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098ec:	687b      	ldr	r3, [r7, #4]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	200022ac 	.word	0x200022ac

08009900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a48 <xTaskIncrementTick+0x148>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 8090 	bne.w	8009a34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009914:	4b4d      	ldr	r3, [pc, #308]	@ (8009a4c <xTaskIncrementTick+0x14c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3301      	adds	r3, #1
 800991a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800991c:	4a4b      	ldr	r2, [pc, #300]	@ (8009a4c <xTaskIncrementTick+0x14c>)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d121      	bne.n	800996c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009928:	4b49      	ldr	r3, [pc, #292]	@ (8009a50 <xTaskIncrementTick+0x150>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	603b      	str	r3, [r7, #0]
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop
 8009948:	e7fd      	b.n	8009946 <xTaskIncrementTick+0x46>
 800994a:	4b41      	ldr	r3, [pc, #260]	@ (8009a50 <xTaskIncrementTick+0x150>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	4b40      	ldr	r3, [pc, #256]	@ (8009a54 <xTaskIncrementTick+0x154>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a3e      	ldr	r2, [pc, #248]	@ (8009a50 <xTaskIncrementTick+0x150>)
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	4a3e      	ldr	r2, [pc, #248]	@ (8009a54 <xTaskIncrementTick+0x154>)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a58 <xTaskIncrementTick+0x158>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	4a3c      	ldr	r2, [pc, #240]	@ (8009a58 <xTaskIncrementTick+0x158>)
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	f000 fafc 	bl	8009f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800996c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a5c <xTaskIncrementTick+0x15c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	429a      	cmp	r2, r3
 8009974:	d349      	bcc.n	8009a0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009976:	4b36      	ldr	r3, [pc, #216]	@ (8009a50 <xTaskIncrementTick+0x150>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d104      	bne.n	800998a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	4b36      	ldr	r3, [pc, #216]	@ (8009a5c <xTaskIncrementTick+0x15c>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	601a      	str	r2, [r3, #0]
					break;
 8009988:	e03f      	b.n	8009a0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998a:	4b31      	ldr	r3, [pc, #196]	@ (8009a50 <xTaskIncrementTick+0x150>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d203      	bcs.n	80099aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099a2:	4a2e      	ldr	r2, [pc, #184]	@ (8009a5c <xTaskIncrementTick+0x15c>)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099a8:	e02f      	b.n	8009a0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	3304      	adds	r3, #4
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fa0a 	bl	8007dc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d004      	beq.n	80099c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	3318      	adds	r3, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fe fa01 	bl	8007dc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ca:	4b25      	ldr	r3, [pc, #148]	@ (8009a60 <xTaskIncrementTick+0x160>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d903      	bls.n	80099da <xTaskIncrementTick+0xda>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d6:	4a22      	ldr	r2, [pc, #136]	@ (8009a60 <xTaskIncrementTick+0x160>)
 80099d8:	6013      	str	r3, [r2, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009a64 <xTaskIncrementTick+0x164>)
 80099e8:	441a      	add	r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7fe f98c 	bl	8007d0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099fa:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <xTaskIncrementTick+0x168>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d3b8      	bcc.n	8009976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a04:	2301      	movs	r3, #1
 8009a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a08:	e7b5      	b.n	8009976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a0a:	4b17      	ldr	r3, [pc, #92]	@ (8009a68 <xTaskIncrementTick+0x168>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a10:	4914      	ldr	r1, [pc, #80]	@ (8009a64 <xTaskIncrementTick+0x164>)
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d901      	bls.n	8009a26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009a22:	2301      	movs	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a26:	4b11      	ldr	r3, [pc, #68]	@ (8009a6c <xTaskIncrementTick+0x16c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	617b      	str	r3, [r7, #20]
 8009a32:	e004      	b.n	8009a3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a34:	4b0e      	ldr	r3, [pc, #56]	@ (8009a70 <xTaskIncrementTick+0x170>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a70 <xTaskIncrementTick+0x170>)
 8009a3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a3e:	697b      	ldr	r3, [r7, #20]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3718      	adds	r7, #24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	200022d0 	.word	0x200022d0
 8009a4c:	200022ac 	.word	0x200022ac
 8009a50:	20002260 	.word	0x20002260
 8009a54:	20002264 	.word	0x20002264
 8009a58:	200022c0 	.word	0x200022c0
 8009a5c:	200022c8 	.word	0x200022c8
 8009a60:	200022b0 	.word	0x200022b0
 8009a64:	20001dd8 	.word	0x20001dd8
 8009a68:	20001dd4 	.word	0x20001dd4
 8009a6c:	200022bc 	.word	0x200022bc
 8009a70:	200022b8 	.word	0x200022b8

08009a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a7a:	4b36      	ldr	r3, [pc, #216]	@ (8009b54 <vTaskSwitchContext+0xe0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a82:	4b35      	ldr	r3, [pc, #212]	@ (8009b58 <vTaskSwitchContext+0xe4>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a88:	e060      	b.n	8009b4c <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8009a8a:	4b33      	ldr	r3, [pc, #204]	@ (8009b58 <vTaskSwitchContext+0xe4>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009a90:	f7f7 ffc2 	bl	8001a18 <getRunTimeCounterValue>
 8009a94:	4603      	mov	r3, r0
 8009a96:	4a31      	ldr	r2, [pc, #196]	@ (8009b5c <vTaskSwitchContext+0xe8>)
 8009a98:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009a9a:	4b30      	ldr	r3, [pc, #192]	@ (8009b5c <vTaskSwitchContext+0xe8>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b30      	ldr	r3, [pc, #192]	@ (8009b60 <vTaskSwitchContext+0xec>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d909      	bls.n	8009aba <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8009b64 <vTaskSwitchContext+0xf0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009aac:	4a2b      	ldr	r2, [pc, #172]	@ (8009b5c <vTaskSwitchContext+0xe8>)
 8009aae:	6810      	ldr	r0, [r2, #0]
 8009ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8009b60 <vTaskSwitchContext+0xec>)
 8009ab2:	6812      	ldr	r2, [r2, #0]
 8009ab4:	1a82      	subs	r2, r0, r2
 8009ab6:	440a      	add	r2, r1
 8009ab8:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009aba:	4b28      	ldr	r3, [pc, #160]	@ (8009b5c <vTaskSwitchContext+0xe8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a28      	ldr	r2, [pc, #160]	@ (8009b60 <vTaskSwitchContext+0xec>)
 8009ac0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac2:	4b29      	ldr	r3, [pc, #164]	@ (8009b68 <vTaskSwitchContext+0xf4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60fb      	str	r3, [r7, #12]
 8009ac8:	e011      	b.n	8009aee <vTaskSwitchContext+0x7a>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <vTaskSwitchContext+0x74>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	607b      	str	r3, [r7, #4]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <vTaskSwitchContext+0x70>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	491f      	ldr	r1, [pc, #124]	@ (8009b6c <vTaskSwitchContext+0xf8>)
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	440b      	add	r3, r1
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0e3      	beq.n	8009aca <vTaskSwitchContext+0x56>
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4a17      	ldr	r2, [pc, #92]	@ (8009b6c <vTaskSwitchContext+0xf8>)
 8009b0e:	4413      	add	r3, r2
 8009b10:	60bb      	str	r3, [r7, #8]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	605a      	str	r2, [r3, #4]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3308      	adds	r3, #8
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d104      	bne.n	8009b32 <vTaskSwitchContext+0xbe>
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	4a0a      	ldr	r2, [pc, #40]	@ (8009b64 <vTaskSwitchContext+0xf0>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009b68 <vTaskSwitchContext+0xf4>)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b42:	4b08      	ldr	r3, [pc, #32]	@ (8009b64 <vTaskSwitchContext+0xf0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3358      	adds	r3, #88	@ 0x58
 8009b48:	4a09      	ldr	r2, [pc, #36]	@ (8009b70 <vTaskSwitchContext+0xfc>)
 8009b4a:	6013      	str	r3, [r2, #0]
}
 8009b4c:	bf00      	nop
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	200022d0 	.word	0x200022d0
 8009b58:	200022bc 	.word	0x200022bc
 8009b5c:	200022d8 	.word	0x200022d8
 8009b60:	200022d4 	.word	0x200022d4
 8009b64:	20001dd4 	.word	0x20001dd4
 8009b68:	200022b0 	.word	0x200022b0
 8009b6c:	20001dd8 	.word	0x20001dd8
 8009b70:	2000003c 	.word	0x2000003c

08009b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	60fb      	str	r3, [r7, #12]
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	e7fd      	b.n	8009b98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b9c:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <vTaskPlaceOnEventList+0x48>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fe f8d6 	bl	8007d56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009baa:	2101      	movs	r1, #1
 8009bac:	6838      	ldr	r0, [r7, #0]
 8009bae:	f000 fb97 	bl	800a2e0 <prvAddCurrentTaskToDelayedList>
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20001dd4 	.word	0x20001dd4

08009bc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	617b      	str	r3, [r7, #20]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bea:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7fe f88b 	bl	8007d0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009c02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	68b8      	ldr	r0, [r7, #8]
 8009c08:	f000 fb6a 	bl	800a2e0 <prvAddCurrentTaskToDelayedList>
	}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20001dd4 	.word	0x20001dd4

08009c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3318      	adds	r3, #24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe f8bc 	bl	8007dc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c50:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc8 <xTaskRemoveFromEventList+0xb0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11d      	bne.n	8009c94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe f8b3 	bl	8007dc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c66:	4b19      	ldr	r3, [pc, #100]	@ (8009ccc <xTaskRemoveFromEventList+0xb4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d903      	bls.n	8009c76 <xTaskRemoveFromEventList+0x5e>
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c72:	4a16      	ldr	r2, [pc, #88]	@ (8009ccc <xTaskRemoveFromEventList+0xb4>)
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4a13      	ldr	r2, [pc, #76]	@ (8009cd0 <xTaskRemoveFromEventList+0xb8>)
 8009c84:	441a      	add	r2, r3
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	f7fe f83e 	bl	8007d0e <vListInsertEnd>
 8009c92:	e005      	b.n	8009ca0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3318      	adds	r3, #24
 8009c98:	4619      	mov	r1, r3
 8009c9a:	480e      	ldr	r0, [pc, #56]	@ (8009cd4 <xTaskRemoveFromEventList+0xbc>)
 8009c9c:	f7fe f837 	bl	8007d0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd8 <xTaskRemoveFromEventList+0xc0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d905      	bls.n	8009cba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009cdc <xTaskRemoveFromEventList+0xc4>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e001      	b.n	8009cbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	200022d0 	.word	0x200022d0
 8009ccc:	200022b0 	.word	0x200022b0
 8009cd0:	20001dd8 	.word	0x20001dd8
 8009cd4:	20002268 	.word	0x20002268
 8009cd8:	20001dd4 	.word	0x20001dd4
 8009cdc:	200022bc 	.word	0x200022bc

08009ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ce8:	4b06      	ldr	r3, [pc, #24]	@ (8009d04 <vTaskInternalSetTimeOutState+0x24>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cf0:	4b05      	ldr	r3, [pc, #20]	@ (8009d08 <vTaskInternalSetTimeOutState+0x28>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	605a      	str	r2, [r3, #4]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	200022c0 	.word	0x200022c0
 8009d08:	200022ac 	.word	0x200022ac

08009d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	613b      	str	r3, [r7, #16]
}
 8009d2e:	bf00      	nop
 8009d30:	bf00      	nop
 8009d32:	e7fd      	b.n	8009d30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	60fb      	str	r3, [r7, #12]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009d52:	f000 ffa1 	bl	800ac98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d56:	4b1d      	ldr	r3, [pc, #116]	@ (8009dcc <xTaskCheckForTimeOut+0xc0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d102      	bne.n	8009d76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e023      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b15      	ldr	r3, [pc, #84]	@ (8009dd0 <xTaskCheckForTimeOut+0xc4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d007      	beq.n	8009d92 <xTaskCheckForTimeOut+0x86>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d302      	bcc.n	8009d92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e015      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d20b      	bcs.n	8009db4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ff99 	bl	8009ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e004      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dbe:	f000 ff9d 	bl	800acfc <vPortExitCritical>

	return xReturn;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	200022ac 	.word	0x200022ac
 8009dd0:	200022c0 	.word	0x200022c0

08009dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dd8:	4b03      	ldr	r3, [pc, #12]	@ (8009de8 <vTaskMissedYield+0x14>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	200022bc 	.word	0x200022bc

08009dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009df4:	f000 f852 	bl	8009e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b06      	ldr	r3, [pc, #24]	@ (8009e14 <prvIdleTask+0x28>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d9f9      	bls.n	8009df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e00:	4b05      	ldr	r3, [pc, #20]	@ (8009e18 <prvIdleTask+0x2c>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e10:	e7f0      	b.n	8009df4 <prvIdleTask+0x8>
 8009e12:	bf00      	nop
 8009e14:	20001dd8 	.word	0x20001dd8
 8009e18:	e000ed04 	.word	0xe000ed04

08009e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
 8009e26:	e00c      	b.n	8009e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a12      	ldr	r2, [pc, #72]	@ (8009e7c <prvInitialiseTaskLists+0x60>)
 8009e34:	4413      	add	r3, r2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fd ff3c 	bl	8007cb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b37      	cmp	r3, #55	@ 0x37
 8009e46:	d9ef      	bls.n	8009e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e48:	480d      	ldr	r0, [pc, #52]	@ (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e4a:	f7fd ff33 	bl	8007cb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e4e:	480d      	ldr	r0, [pc, #52]	@ (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e50:	f7fd ff30 	bl	8007cb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e54:	480c      	ldr	r0, [pc, #48]	@ (8009e88 <prvInitialiseTaskLists+0x6c>)
 8009e56:	f7fd ff2d 	bl	8007cb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e5a:	480c      	ldr	r0, [pc, #48]	@ (8009e8c <prvInitialiseTaskLists+0x70>)
 8009e5c:	f7fd ff2a 	bl	8007cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e60:	480b      	ldr	r0, [pc, #44]	@ (8009e90 <prvInitialiseTaskLists+0x74>)
 8009e62:	f7fd ff27 	bl	8007cb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e66:	4b0b      	ldr	r3, [pc, #44]	@ (8009e94 <prvInitialiseTaskLists+0x78>)
 8009e68:	4a05      	ldr	r2, [pc, #20]	@ (8009e80 <prvInitialiseTaskLists+0x64>)
 8009e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvInitialiseTaskLists+0x7c>)
 8009e6e:	4a05      	ldr	r2, [pc, #20]	@ (8009e84 <prvInitialiseTaskLists+0x68>)
 8009e70:	601a      	str	r2, [r3, #0]
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20001dd8 	.word	0x20001dd8
 8009e80:	20002238 	.word	0x20002238
 8009e84:	2000224c 	.word	0x2000224c
 8009e88:	20002268 	.word	0x20002268
 8009e8c:	2000227c 	.word	0x2000227c
 8009e90:	20002294 	.word	0x20002294
 8009e94:	20002260 	.word	0x20002260
 8009e98:	20002264 	.word	0x20002264

08009e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea2:	e019      	b.n	8009ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ea4:	f000 fef8 	bl	800ac98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea8:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <prvCheckTasksWaitingTermination+0x50>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fd ff87 	bl	8007dc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009eba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ef0 <prvCheckTasksWaitingTermination+0x54>)
 8009ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	4a0a      	ldr	r2, [pc, #40]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ece:	f000 ff15 	bl	800acfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f810 	bl	8009ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ed8:	4b06      	ldr	r3, [pc, #24]	@ (8009ef4 <prvCheckTasksWaitingTermination+0x58>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e1      	bne.n	8009ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	2000227c 	.word	0x2000227c
 8009ef0:	200022a8 	.word	0x200022a8
 8009ef4:	20002290 	.word	0x20002290

08009ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3358      	adds	r3, #88	@ 0x58
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 ff73 	bl	800bdf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d108      	bne.n	8009f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 f8ad 	bl	800b078 <vPortFree>
				vPortFree( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 f8aa 	bl	800b078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f24:	e019      	b.n	8009f5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d103      	bne.n	8009f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 f8a1 	bl	800b078 <vPortFree>
	}
 8009f36:	e010      	b.n	8009f5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d00b      	beq.n	8009f5a <prvDeleteTCB+0x62>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <prvDeleteTCB+0x5e>
	}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f74:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f7c:	e008      	b.n	8009f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7e:	4b07      	ldr	r3, [pc, #28]	@ (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	4a04      	ldr	r2, [pc, #16]	@ (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20002260 	.word	0x20002260
 8009fa0:	200022c8 	.word	0x200022c8

08009fa4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009faa:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009fb0:	687b      	ldr	r3, [r7, #4]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	20001dd4 	.word	0x20001dd4

08009fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fca:	4b0b      	ldr	r3, [pc, #44]	@ (8009ff8 <xTaskGetSchedulerState+0x34>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e008      	b.n	8009fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd8:	4b08      	ldr	r3, [pc, #32]	@ (8009ffc <xTaskGetSchedulerState+0x38>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	607b      	str	r3, [r7, #4]
 8009fe4:	e001      	b.n	8009fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fea:	687b      	ldr	r3, [r7, #4]
	}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	200022b4 	.word	0x200022b4
 8009ffc:	200022d0 	.word	0x200022d0

0800a000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d051      	beq.n	800a0ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01a:	4b2a      	ldr	r3, [pc, #168]	@ (800a0c4 <xTaskPriorityInherit+0xc4>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	429a      	cmp	r2, r3
 800a022:	d241      	bcs.n	800a0a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	db06      	blt.n	800a03a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a02c:	4b25      	ldr	r3, [pc, #148]	@ (800a0c4 <xTaskPriorityInherit+0xc4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a032:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	6959      	ldr	r1, [r3, #20]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4a1f      	ldr	r2, [pc, #124]	@ (800a0c8 <xTaskPriorityInherit+0xc8>)
 800a04c:	4413      	add	r3, r2
 800a04e:	4299      	cmp	r1, r3
 800a050:	d122      	bne.n	800a098 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	3304      	adds	r3, #4
 800a056:	4618      	mov	r0, r3
 800a058:	f7fd feb6 	bl	8007dc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a05c:	4b19      	ldr	r3, [pc, #100]	@ (800a0c4 <xTaskPriorityInherit+0xc4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06a:	4b18      	ldr	r3, [pc, #96]	@ (800a0cc <xTaskPriorityInherit+0xcc>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d903      	bls.n	800a07a <xTaskPriorityInherit+0x7a>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a076:	4a15      	ldr	r2, [pc, #84]	@ (800a0cc <xTaskPriorityInherit+0xcc>)
 800a078:	6013      	str	r3, [r2, #0]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07e:	4613      	mov	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4a10      	ldr	r2, [pc, #64]	@ (800a0c8 <xTaskPriorityInherit+0xc8>)
 800a088:	441a      	add	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	3304      	adds	r3, #4
 800a08e:	4619      	mov	r1, r3
 800a090:	4610      	mov	r0, r2
 800a092:	f7fd fe3c 	bl	8007d0e <vListInsertEnd>
 800a096:	e004      	b.n	800a0a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a098:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c4 <xTaskPriorityInherit+0xc4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	e008      	b.n	800a0ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <xTaskPriorityInherit+0xc4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d201      	bcs.n	800a0ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
	}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20001dd4 	.word	0x20001dd4
 800a0c8:	20001dd8 	.word	0x20001dd8
 800a0cc:	200022b0 	.word	0x200022b0

0800a0d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d058      	beq.n	800a198 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0e6:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a4 <xTaskPriorityDisinherit+0xd4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d00b      	beq.n	800a108 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	60fb      	str	r3, [r7, #12]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10b      	bne.n	800a128 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	60bb      	str	r3, [r7, #8]
}
 800a122:	bf00      	nop
 800a124:	bf00      	nop
 800a126:	e7fd      	b.n	800a124 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a12c:	1e5a      	subs	r2, r3, #1
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d02c      	beq.n	800a198 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a142:	2b00      	cmp	r3, #0
 800a144:	d128      	bne.n	800a198 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	3304      	adds	r3, #4
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fe3c 	bl	8007dc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a168:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <xTaskPriorityDisinherit+0xd8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d903      	bls.n	800a178 <xTaskPriorityDisinherit+0xa8>
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a174:	4a0c      	ldr	r2, [pc, #48]	@ (800a1a8 <xTaskPriorityDisinherit+0xd8>)
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4a09      	ldr	r2, [pc, #36]	@ (800a1ac <xTaskPriorityDisinherit+0xdc>)
 800a186:	441a      	add	r2, r3
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4619      	mov	r1, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	f7fd fdbd 	bl	8007d0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a194:	2301      	movs	r3, #1
 800a196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a198:	697b      	ldr	r3, [r7, #20]
	}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20001dd4 	.word	0x20001dd4
 800a1a8:	200022b0 	.word	0x200022b0
 800a1ac:	20001dd8 	.word	0x20001dd8

0800a1b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d06c      	beq.n	800a2a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10b      	bne.n	800a1e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	60fb      	str	r3, [r7, #12]
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d902      	bls.n	800a1f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	61fb      	str	r3, [r7, #28]
 800a1f6:	e002      	b.n	800a1fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	429a      	cmp	r2, r3
 800a206:	d04c      	beq.n	800a2a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d147      	bne.n	800a2a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a212:	4b26      	ldr	r3, [pc, #152]	@ (800a2ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d10b      	bne.n	800a234 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60bb      	str	r3, [r7, #8]
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	e7fd      	b.n	800a230 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	db04      	blt.n	800a252 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	6959      	ldr	r1, [r3, #20]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4a13      	ldr	r2, [pc, #76]	@ (800a2b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a262:	4413      	add	r3, r2
 800a264:	4299      	cmp	r1, r3
 800a266:	d11c      	bne.n	800a2a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fd fdab 	bl	8007dc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a276:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d903      	bls.n	800a286 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a282:	4a0c      	ldr	r2, [pc, #48]	@ (800a2b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a284:	6013      	str	r3, [r2, #0]
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4a07      	ldr	r2, [pc, #28]	@ (800a2b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a294:	441a      	add	r2, r3
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	4610      	mov	r0, r2
 800a29e:	f7fd fd36 	bl	8007d0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2a2:	bf00      	nop
 800a2a4:	3720      	adds	r7, #32
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20001dd4 	.word	0x20001dd4
 800a2b0:	20001dd8 	.word	0x20001dd8
 800a2b4:	200022b0 	.word	0x200022b0

0800a2b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a2b8:	b480      	push	{r7}
 800a2ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a2bc:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a2c4:	4b05      	ldr	r3, [pc, #20]	@ (800a2dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a2ce:	4b03      	ldr	r3, [pc, #12]	@ (800a2dc <pvTaskIncrementMutexHeldCount+0x24>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
	}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20001dd4 	.word	0x20001dd4

0800a2e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2ea:	4b21      	ldr	r3, [pc, #132]	@ (800a370 <prvAddCurrentTaskToDelayedList+0x90>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2f0:	4b20      	ldr	r3, [pc, #128]	@ (800a374 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fd fd66 	bl	8007dc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d10a      	bne.n	800a31a <prvAddCurrentTaskToDelayedList+0x3a>
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d007      	beq.n	800a31a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a30a:	4b1a      	ldr	r3, [pc, #104]	@ (800a374 <prvAddCurrentTaskToDelayedList+0x94>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3304      	adds	r3, #4
 800a310:	4619      	mov	r1, r3
 800a312:	4819      	ldr	r0, [pc, #100]	@ (800a378 <prvAddCurrentTaskToDelayedList+0x98>)
 800a314:	f7fd fcfb 	bl	8007d0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a318:	e026      	b.n	800a368 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4413      	add	r3, r2
 800a320:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a322:	4b14      	ldr	r3, [pc, #80]	@ (800a374 <prvAddCurrentTaskToDelayedList+0x94>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d209      	bcs.n	800a346 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a332:	4b12      	ldr	r3, [pc, #72]	@ (800a37c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <prvAddCurrentTaskToDelayedList+0x94>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7fd fd09 	bl	8007d56 <vListInsert>
}
 800a344:	e010      	b.n	800a368 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a346:	4b0e      	ldr	r3, [pc, #56]	@ (800a380 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <prvAddCurrentTaskToDelayedList+0x94>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3304      	adds	r3, #4
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fd fcff 	bl	8007d56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a358:	4b0a      	ldr	r3, [pc, #40]	@ (800a384 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d202      	bcs.n	800a368 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a362:	4a08      	ldr	r2, [pc, #32]	@ (800a384 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6013      	str	r3, [r2, #0]
}
 800a368:	bf00      	nop
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200022ac 	.word	0x200022ac
 800a374:	20001dd4 	.word	0x20001dd4
 800a378:	20002294 	.word	0x20002294
 800a37c:	20002264 	.word	0x20002264
 800a380:	20002260 	.word	0x20002260
 800a384:	200022c8 	.word	0x200022c8

0800a388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b08a      	sub	sp, #40	@ 0x28
 800a38c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a392:	f000 fb13 	bl	800a9bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a396:	4b1d      	ldr	r3, [pc, #116]	@ (800a40c <xTimerCreateTimerTask+0x84>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d021      	beq.n	800a3e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3a6:	1d3a      	adds	r2, r7, #4
 800a3a8:	f107 0108 	add.w	r1, r7, #8
 800a3ac:	f107 030c 	add.w	r3, r7, #12
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fd fc65 	bl	8007c80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	9202      	str	r2, [sp, #8]
 800a3be:	9301      	str	r3, [sp, #4]
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	460a      	mov	r2, r1
 800a3c8:	4911      	ldr	r1, [pc, #68]	@ (800a410 <xTimerCreateTimerTask+0x88>)
 800a3ca:	4812      	ldr	r0, [pc, #72]	@ (800a414 <xTimerCreateTimerTask+0x8c>)
 800a3cc:	f7fe fe0a 	bl	8008fe4 <xTaskCreateStatic>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	4a11      	ldr	r2, [pc, #68]	@ (800a418 <xTimerCreateTimerTask+0x90>)
 800a3d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3d6:	4b10      	ldr	r3, [pc, #64]	@ (800a418 <xTimerCreateTimerTask+0x90>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10b      	bne.n	800a400 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	613b      	str	r3, [r7, #16]
}
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a400:	697b      	ldr	r3, [r7, #20]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	2000230c 	.word	0x2000230c
 800a410:	0800e8f0 	.word	0x0800e8f0
 800a414:	0800a555 	.word	0x0800a555
 800a418:	20002310 	.word	0x20002310

0800a41c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	@ 0x28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <xTimerGenericCommand+0x30>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	623b      	str	r3, [r7, #32]
}
 800a446:	bf00      	nop
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a44c:	4b19      	ldr	r3, [pc, #100]	@ (800a4b4 <xTimerGenericCommand+0x98>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d02a      	beq.n	800a4aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b05      	cmp	r3, #5
 800a464:	dc18      	bgt.n	800a498 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a466:	f7ff fdad 	bl	8009fc4 <xTaskGetSchedulerState>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d109      	bne.n	800a484 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a470:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <xTimerGenericCommand+0x98>)
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	f107 0110 	add.w	r1, r7, #16
 800a478:	2300      	movs	r3, #0
 800a47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a47c:	f7fd ff3a 	bl	80082f4 <xQueueGenericSend>
 800a480:	6278      	str	r0, [r7, #36]	@ 0x24
 800a482:	e012      	b.n	800a4aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a484:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <xTimerGenericCommand+0x98>)
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	f107 0110 	add.w	r1, r7, #16
 800a48c:	2300      	movs	r3, #0
 800a48e:	2200      	movs	r2, #0
 800a490:	f7fd ff30 	bl	80082f4 <xQueueGenericSend>
 800a494:	6278      	str	r0, [r7, #36]	@ 0x24
 800a496:	e008      	b.n	800a4aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a498:	4b06      	ldr	r3, [pc, #24]	@ (800a4b4 <xTimerGenericCommand+0x98>)
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	f107 0110 	add.w	r1, r7, #16
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	f7fe f828 	bl	80084f8 <xQueueGenericSendFromISR>
 800a4a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	@ 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000230c 	.word	0x2000230c

0800a4b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c2:	4b23      	ldr	r3, [pc, #140]	@ (800a550 <prvProcessExpiredTimer+0x98>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fd fc79 	bl	8007dc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d023      	beq.n	800a52c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	699a      	ldr	r2, [r3, #24]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	18d1      	adds	r1, r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	6978      	ldr	r0, [r7, #20]
 800a4f2:	f000 f8d5 	bl	800a6a0 <prvInsertTimerInActiveList>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d020      	beq.n	800a53e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2300      	movs	r3, #0
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	2100      	movs	r1, #0
 800a506:	6978      	ldr	r0, [r7, #20]
 800a508:	f7ff ff88 	bl	800a41c <xTimerGenericCommand>
 800a50c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d114      	bne.n	800a53e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	60fb      	str	r3, [r7, #12]
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a532:	f023 0301 	bic.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	6978      	ldr	r0, [r7, #20]
 800a544:	4798      	blx	r3
}
 800a546:	bf00      	nop
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20002304 	.word	0x20002304

0800a554 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a55c:	f107 0308 	add.w	r3, r7, #8
 800a560:	4618      	mov	r0, r3
 800a562:	f000 f859 	bl	800a618 <prvGetNextExpireTime>
 800a566:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	4619      	mov	r1, r3
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f000 f805 	bl	800a57c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a572:	f000 f8d7 	bl	800a724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a576:	bf00      	nop
 800a578:	e7f0      	b.n	800a55c <prvTimerTask+0x8>
	...

0800a57c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a586:	f7ff f8ff 	bl	8009788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a58a:	f107 0308 	add.w	r3, r7, #8
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f866 	bl	800a660 <prvSampleTimeNow>
 800a594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d130      	bne.n	800a5fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <prvProcessTimerOrBlockTask+0x3c>
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d806      	bhi.n	800a5b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5aa:	f7ff f8fb 	bl	80097a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff ff81 	bl	800a4b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5b6:	e024      	b.n	800a602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5be:	4b13      	ldr	r3, [pc, #76]	@ (800a60c <prvProcessTimerOrBlockTask+0x90>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <prvProcessTimerOrBlockTask+0x50>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e000      	b.n	800a5ce <prvProcessTimerOrBlockTask+0x52>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a610 <prvProcessTimerOrBlockTask+0x94>)
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	f7fe fccd 	bl	8008f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5e2:	f7ff f8df 	bl	80097a4 <xTaskResumeAll>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5ec:	4b09      	ldr	r3, [pc, #36]	@ (800a614 <prvProcessTimerOrBlockTask+0x98>)
 800a5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	f3bf 8f6f 	isb	sy
}
 800a5fc:	e001      	b.n	800a602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5fe:	f7ff f8d1 	bl	80097a4 <xTaskResumeAll>
}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20002308 	.word	0x20002308
 800a610:	2000230c 	.word	0x2000230c
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a620:	4b0e      	ldr	r3, [pc, #56]	@ (800a65c <prvGetNextExpireTime+0x44>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <prvGetNextExpireTime+0x16>
 800a62a:	2201      	movs	r2, #1
 800a62c:	e000      	b.n	800a630 <prvGetNextExpireTime+0x18>
 800a62e:	2200      	movs	r2, #0
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a63c:	4b07      	ldr	r3, [pc, #28]	@ (800a65c <prvGetNextExpireTime+0x44>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	e001      	b.n	800a64c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a64c:	68fb      	ldr	r3, [r7, #12]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20002304 	.word	0x20002304

0800a660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a668:	f7ff f93a 	bl	80098e0 <xTaskGetTickCount>
 800a66c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a66e:	4b0b      	ldr	r3, [pc, #44]	@ (800a69c <prvSampleTimeNow+0x3c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	429a      	cmp	r2, r3
 800a676:	d205      	bcs.n	800a684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a678:	f000 f93a 	bl	800a8f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	e002      	b.n	800a68a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a68a:	4a04      	ldr	r2, [pc, #16]	@ (800a69c <prvSampleTimeNow+0x3c>)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a690:	68fb      	ldr	r3, [r7, #12]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20002314 	.word	0x20002314

0800a6a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6be:	68ba      	ldr	r2, [r7, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d812      	bhi.n	800a6ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	1ad2      	subs	r2, r2, r3
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d302      	bcc.n	800a6da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	e01b      	b.n	800a712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6da:	4b10      	ldr	r3, [pc, #64]	@ (800a71c <prvInsertTimerInActiveList+0x7c>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	f7fd fb36 	bl	8007d56 <vListInsert>
 800a6ea:	e012      	b.n	800a712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d206      	bcs.n	800a702 <prvInsertTimerInActiveList+0x62>
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d302      	bcc.n	800a702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e007      	b.n	800a712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a702:	4b07      	ldr	r3, [pc, #28]	@ (800a720 <prvInsertTimerInActiveList+0x80>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7fd fb22 	bl	8007d56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a712:	697b      	ldr	r3, [r7, #20]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	20002308 	.word	0x20002308
 800a720:	20002304 	.word	0x20002304

0800a724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08e      	sub	sp, #56	@ 0x38
 800a728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a72a:	e0ce      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	da19      	bge.n	800a766 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a732:	1d3b      	adds	r3, r7, #4
 800a734:	3304      	adds	r3, #4
 800a736:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	61fb      	str	r3, [r7, #28]
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	e7fd      	b.n	800a752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a75c:	6850      	ldr	r0, [r2, #4]
 800a75e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a760:	6892      	ldr	r2, [r2, #8]
 800a762:	4611      	mov	r1, r2
 800a764:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f2c0 80ae 	blt.w	800a8ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	3304      	adds	r3, #4
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fd fb22 	bl	8007dc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a784:	463b      	mov	r3, r7
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff ff6a 	bl	800a660 <prvSampleTimeNow>
 800a78c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b09      	cmp	r3, #9
 800a792:	f200 8097 	bhi.w	800a8c4 <prvProcessReceivedCommands+0x1a0>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <prvProcessReceivedCommands+0x78>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7c5 	.word	0x0800a7c5
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7c5 	.word	0x0800a7c5
 800a7a8:	0800a83b 	.word	0x0800a83b
 800a7ac:	0800a84f 	.word	0x0800a84f
 800a7b0:	0800a89b 	.word	0x0800a89b
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7c5 	.word	0x0800a7c5
 800a7bc:	0800a83b 	.word	0x0800a83b
 800a7c0:	0800a84f 	.word	0x0800a84f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	18d1      	adds	r1, r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e4:	f7ff ff5c 	bl	800a6a0 <prvInsertTimerInActiveList>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d06c      	beq.n	800a8c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7fc:	f003 0304 	and.w	r3, r3, #4
 800a800:	2b00      	cmp	r3, #0
 800a802:	d061      	beq.n	800a8c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	441a      	add	r2, r3
 800a80c:	2300      	movs	r3, #0
 800a80e:	9300      	str	r3, [sp, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	2100      	movs	r1, #0
 800a814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a816:	f7ff fe01 	bl	800a41c <xTimerGenericCommand>
 800a81a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d152      	bne.n	800a8c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	61bb      	str	r3, [r7, #24]
}
 800a834:	bf00      	nop
 800a836:	bf00      	nop
 800a838:	e7fd      	b.n	800a836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a840:	f023 0301 	bic.w	r3, r3, #1
 800a844:	b2da      	uxtb	r2, r3
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a84c:	e03d      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a854:	f043 0301 	orr.w	r3, r3, #1
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10b      	bne.n	800a886 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	617b      	str	r3, [r7, #20]
}
 800a880:	bf00      	nop
 800a882:	bf00      	nop
 800a884:	e7fd      	b.n	800a882 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	18d1      	adds	r1, r2, r3
 800a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a894:	f7ff ff04 	bl	800a6a0 <prvInsertTimerInActiveList>
					break;
 800a898:	e017      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8aa:	f000 fbe5 	bl	800b078 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8ae:	e00c      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b6:	f023 0301 	bic.w	r3, r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8c2:	e002      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a8c4:	bf00      	nop
 800a8c6:	e000      	b.n	800a8ca <prvProcessReceivedCommands+0x1a6>
					break;
 800a8c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ca:	4b08      	ldr	r3, [pc, #32]	@ (800a8ec <prvProcessReceivedCommands+0x1c8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	1d39      	adds	r1, r7, #4
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fd ff3e 	bl	8008754 <xQueueReceive>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f47f af26 	bne.w	800a72c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	3730      	adds	r7, #48	@ 0x30
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	2000230c 	.word	0x2000230c

0800a8f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8f6:	e049      	b.n	800a98c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f8:	4b2e      	ldr	r3, [pc, #184]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a902:	4b2c      	ldr	r3, [pc, #176]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3304      	adds	r3, #4
 800a910:	4618      	mov	r0, r3
 800a912:	f7fd fa59 	bl	8007dc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d02f      	beq.n	800a98c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d90e      	bls.n	800a95c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a94a:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3304      	adds	r3, #4
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f7fd f9fe 	bl	8007d56 <vListInsert>
 800a95a:	e017      	b.n	800a98c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a95c:	2300      	movs	r3, #0
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	2100      	movs	r1, #0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fd58 	bl	800a41c <xTimerGenericCommand>
 800a96c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	603b      	str	r3, [r7, #0]
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a98c:	4b09      	ldr	r3, [pc, #36]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1b0      	bne.n	800a8f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a996:	4b07      	ldr	r3, [pc, #28]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a99c:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <prvSwitchTimerLists+0xc8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a04      	ldr	r2, [pc, #16]	@ (800a9b4 <prvSwitchTimerLists+0xc4>)
 800a9a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9a4:	4a04      	ldr	r2, [pc, #16]	@ (800a9b8 <prvSwitchTimerLists+0xc8>)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	6013      	str	r3, [r2, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20002304 	.word	0x20002304
 800a9b8:	20002308 	.word	0x20002308

0800a9bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9c2:	f000 f969 	bl	800ac98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9c6:	4b15      	ldr	r3, [pc, #84]	@ (800aa1c <prvCheckForValidListAndQueue+0x60>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d120      	bne.n	800aa10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9ce:	4814      	ldr	r0, [pc, #80]	@ (800aa20 <prvCheckForValidListAndQueue+0x64>)
 800a9d0:	f7fd f970 	bl	8007cb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9d4:	4813      	ldr	r0, [pc, #76]	@ (800aa24 <prvCheckForValidListAndQueue+0x68>)
 800a9d6:	f7fd f96d 	bl	8007cb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9da:	4b13      	ldr	r3, [pc, #76]	@ (800aa28 <prvCheckForValidListAndQueue+0x6c>)
 800a9dc:	4a10      	ldr	r2, [pc, #64]	@ (800aa20 <prvCheckForValidListAndQueue+0x64>)
 800a9de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9e0:	4b12      	ldr	r3, [pc, #72]	@ (800aa2c <prvCheckForValidListAndQueue+0x70>)
 800a9e2:	4a10      	ldr	r2, [pc, #64]	@ (800aa24 <prvCheckForValidListAndQueue+0x68>)
 800a9e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <prvCheckForValidListAndQueue+0x74>)
 800a9ec:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <prvCheckForValidListAndQueue+0x78>)
 800a9ee:	2110      	movs	r1, #16
 800a9f0:	200a      	movs	r0, #10
 800a9f2:	f7fd fa7d 	bl	8007ef0 <xQueueGenericCreateStatic>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4a08      	ldr	r2, [pc, #32]	@ (800aa1c <prvCheckForValidListAndQueue+0x60>)
 800a9fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9fc:	4b07      	ldr	r3, [pc, #28]	@ (800aa1c <prvCheckForValidListAndQueue+0x60>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa04:	4b05      	ldr	r3, [pc, #20]	@ (800aa1c <prvCheckForValidListAndQueue+0x60>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	490b      	ldr	r1, [pc, #44]	@ (800aa38 <prvCheckForValidListAndQueue+0x7c>)
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fa62 	bl	8008ed4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa10:	f000 f974 	bl	800acfc <vPortExitCritical>
}
 800aa14:	bf00      	nop
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	2000230c 	.word	0x2000230c
 800aa20:	200022dc 	.word	0x200022dc
 800aa24:	200022f0 	.word	0x200022f0
 800aa28:	20002304 	.word	0x20002304
 800aa2c:	20002308 	.word	0x20002308
 800aa30:	200023b8 	.word	0x200023b8
 800aa34:	20002318 	.word	0x20002318
 800aa38:	0800e8f8 	.word	0x0800e8f8

0800aa3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	3b04      	subs	r3, #4
 800aa4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aa54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f023 0201 	bic.w	r2, r3, #1
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3b04      	subs	r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa6c:	4a0c      	ldr	r2, [pc, #48]	@ (800aaa0 <pxPortInitialiseStack+0x64>)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	3b14      	subs	r3, #20
 800aa76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3b04      	subs	r3, #4
 800aa82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f06f 0202 	mvn.w	r2, #2
 800aa8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3b20      	subs	r3, #32
 800aa90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa92:	68fb      	ldr	r3, [r7, #12]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	0800aaa5 	.word	0x0800aaa5

0800aaa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aaae:	4b13      	ldr	r3, [pc, #76]	@ (800aafc <prvTaskExitError+0x58>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab6:	d00b      	beq.n	800aad0 <prvTaskExitError+0x2c>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	60fb      	str	r3, [r7, #12]
}
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
 800aace:	e7fd      	b.n	800aacc <prvTaskExitError+0x28>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60bb      	str	r3, [r7, #8]
}
 800aae2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aae4:	bf00      	nop
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0fc      	beq.n	800aae6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	2000002c 	.word	0x2000002c

0800ab00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab00:	4b07      	ldr	r3, [pc, #28]	@ (800ab20 <pxCurrentTCBConst2>)
 800ab02:	6819      	ldr	r1, [r3, #0]
 800ab04:	6808      	ldr	r0, [r1, #0]
 800ab06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0a:	f380 8809 	msr	PSP, r0
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f04f 0000 	mov.w	r0, #0
 800ab16:	f380 8811 	msr	BASEPRI, r0
 800ab1a:	4770      	bx	lr
 800ab1c:	f3af 8000 	nop.w

0800ab20 <pxCurrentTCBConst2>:
 800ab20:	20001dd4 	.word	0x20001dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop

0800ab28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab28:	4808      	ldr	r0, [pc, #32]	@ (800ab4c <prvPortStartFirstTask+0x24>)
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	f380 8808 	msr	MSP, r0
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8814 	msr	CONTROL, r0
 800ab3a:	b662      	cpsie	i
 800ab3c:	b661      	cpsie	f
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	df00      	svc	0
 800ab48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab4a:	bf00      	nop
 800ab4c:	e000ed08 	.word	0xe000ed08

0800ab50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab56:	4b47      	ldr	r3, [pc, #284]	@ (800ac74 <xPortStartScheduler+0x124>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a47      	ldr	r2, [pc, #284]	@ (800ac78 <xPortStartScheduler+0x128>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d10b      	bne.n	800ab78 <xPortStartScheduler+0x28>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	613b      	str	r3, [r7, #16]
}
 800ab72:	bf00      	nop
 800ab74:	bf00      	nop
 800ab76:	e7fd      	b.n	800ab74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab78:	4b3e      	ldr	r3, [pc, #248]	@ (800ac74 <xPortStartScheduler+0x124>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a3f      	ldr	r2, [pc, #252]	@ (800ac7c <xPortStartScheduler+0x12c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d10b      	bne.n	800ab9a <xPortStartScheduler+0x4a>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	60fb      	str	r3, [r7, #12]
}
 800ab94:	bf00      	nop
 800ab96:	bf00      	nop
 800ab98:	e7fd      	b.n	800ab96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab9a:	4b39      	ldr	r3, [pc, #228]	@ (800ac80 <xPortStartScheduler+0x130>)
 800ab9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	22ff      	movs	r2, #255	@ 0xff
 800abaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	4b31      	ldr	r3, [pc, #196]	@ (800ac84 <xPortStartScheduler+0x134>)
 800abc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abc2:	4b31      	ldr	r3, [pc, #196]	@ (800ac88 <xPortStartScheduler+0x138>)
 800abc4:	2207      	movs	r2, #7
 800abc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abc8:	e009      	b.n	800abde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800abca:	4b2f      	ldr	r3, [pc, #188]	@ (800ac88 <xPortStartScheduler+0x138>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3b01      	subs	r3, #1
 800abd0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac88 <xPortStartScheduler+0x138>)
 800abd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abe6:	2b80      	cmp	r3, #128	@ 0x80
 800abe8:	d0ef      	beq.n	800abca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abea:	4b27      	ldr	r3, [pc, #156]	@ (800ac88 <xPortStartScheduler+0x138>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f1c3 0307 	rsb	r3, r3, #7
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d00b      	beq.n	800ac0e <xPortStartScheduler+0xbe>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	60bb      	str	r3, [r7, #8]
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	e7fd      	b.n	800ac0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ac88 <xPortStartScheduler+0x138>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	4a1c      	ldr	r2, [pc, #112]	@ (800ac88 <xPortStartScheduler+0x138>)
 800ac16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac18:	4b1b      	ldr	r3, [pc, #108]	@ (800ac88 <xPortStartScheduler+0x138>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac20:	4a19      	ldr	r2, [pc, #100]	@ (800ac88 <xPortStartScheduler+0x138>)
 800ac22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac2c:	4b17      	ldr	r3, [pc, #92]	@ (800ac8c <xPortStartScheduler+0x13c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a16      	ldr	r2, [pc, #88]	@ (800ac8c <xPortStartScheduler+0x13c>)
 800ac32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ac36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac38:	4b14      	ldr	r3, [pc, #80]	@ (800ac8c <xPortStartScheduler+0x13c>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a13      	ldr	r2, [pc, #76]	@ (800ac8c <xPortStartScheduler+0x13c>)
 800ac3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ac42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac44:	f000 f8da 	bl	800adfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac48:	4b11      	ldr	r3, [pc, #68]	@ (800ac90 <xPortStartScheduler+0x140>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac4e:	f000 f8f9 	bl	800ae44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac52:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <xPortStartScheduler+0x144>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a0f      	ldr	r2, [pc, #60]	@ (800ac94 <xPortStartScheduler+0x144>)
 800ac58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ac5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac5e:	f7ff ff63 	bl	800ab28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac62:	f7fe ff07 	bl	8009a74 <vTaskSwitchContext>
	prvTaskExitError();
 800ac66:	f7ff ff1d 	bl	800aaa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	e000ed00 	.word	0xe000ed00
 800ac78:	410fc271 	.word	0x410fc271
 800ac7c:	410fc270 	.word	0x410fc270
 800ac80:	e000e400 	.word	0xe000e400
 800ac84:	20002408 	.word	0x20002408
 800ac88:	2000240c 	.word	0x2000240c
 800ac8c:	e000ed20 	.word	0xe000ed20
 800ac90:	2000002c 	.word	0x2000002c
 800ac94:	e000ef34 	.word	0xe000ef34

0800ac98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acb2:	4b10      	ldr	r3, [pc, #64]	@ (800acf4 <vPortEnterCritical+0x5c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3301      	adds	r3, #1
 800acb8:	4a0e      	ldr	r2, [pc, #56]	@ (800acf4 <vPortEnterCritical+0x5c>)
 800acba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acbc:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <vPortEnterCritical+0x5c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d110      	bne.n	800ace6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acc4:	4b0c      	ldr	r3, [pc, #48]	@ (800acf8 <vPortEnterCritical+0x60>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00b      	beq.n	800ace6 <vPortEnterCritical+0x4e>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	603b      	str	r3, [r7, #0]
}
 800ace0:	bf00      	nop
 800ace2:	bf00      	nop
 800ace4:	e7fd      	b.n	800ace2 <vPortEnterCritical+0x4a>
	}
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	2000002c 	.word	0x2000002c
 800acf8:	e000ed04 	.word	0xe000ed04

0800acfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad02:	4b12      	ldr	r3, [pc, #72]	@ (800ad4c <vPortExitCritical+0x50>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10b      	bne.n	800ad22 <vPortExitCritical+0x26>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	607b      	str	r3, [r7, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	bf00      	nop
 800ad20:	e7fd      	b.n	800ad1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad22:	4b0a      	ldr	r3, [pc, #40]	@ (800ad4c <vPortExitCritical+0x50>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	4a08      	ldr	r2, [pc, #32]	@ (800ad4c <vPortExitCritical+0x50>)
 800ad2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad2c:	4b07      	ldr	r3, [pc, #28]	@ (800ad4c <vPortExitCritical+0x50>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d105      	bne.n	800ad40 <vPortExitCritical+0x44>
 800ad34:	2300      	movs	r3, #0
 800ad36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	f383 8811 	msr	BASEPRI, r3
}
 800ad3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	2000002c 	.word	0x2000002c

0800ad50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad50:	f3ef 8009 	mrs	r0, PSP
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4b15      	ldr	r3, [pc, #84]	@ (800adb0 <pxCurrentTCBConst>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	f01e 0f10 	tst.w	lr, #16
 800ad60:	bf08      	it	eq
 800ad62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ad74:	f380 8811 	msr	BASEPRI, r0
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f7fe fe78 	bl	8009a74 <vTaskSwitchContext>
 800ad84:	f04f 0000 	mov.w	r0, #0
 800ad88:	f380 8811 	msr	BASEPRI, r0
 800ad8c:	bc09      	pop	{r0, r3}
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	6808      	ldr	r0, [r1, #0]
 800ad92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad96:	f01e 0f10 	tst.w	lr, #16
 800ad9a:	bf08      	it	eq
 800ad9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ada0:	f380 8809 	msr	PSP, r0
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst>:
 800adb0:	20001dd4 	.word	0x20001dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	607b      	str	r3, [r7, #4]
}
 800add0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800add2:	f7fe fd95 	bl	8009900 <xTaskIncrementTick>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800addc:	4b06      	ldr	r3, [pc, #24]	@ (800adf8 <xPortSysTickHandler+0x40>)
 800adde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	2300      	movs	r3, #0
 800ade6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	f383 8811 	msr	BASEPRI, r3
}
 800adee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	e000ed04 	.word	0xe000ed04

0800adfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adfc:	b480      	push	{r7}
 800adfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae00:	4b0b      	ldr	r3, [pc, #44]	@ (800ae30 <vPortSetupTimerInterrupt+0x34>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae06:	4b0b      	ldr	r3, [pc, #44]	@ (800ae34 <vPortSetupTimerInterrupt+0x38>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae38 <vPortSetupTimerInterrupt+0x3c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a0a      	ldr	r2, [pc, #40]	@ (800ae3c <vPortSetupTimerInterrupt+0x40>)
 800ae12:	fba2 2303 	umull	r2, r3, r2, r3
 800ae16:	099b      	lsrs	r3, r3, #6
 800ae18:	4a09      	ldr	r2, [pc, #36]	@ (800ae40 <vPortSetupTimerInterrupt+0x44>)
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae1e:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <vPortSetupTimerInterrupt+0x34>)
 800ae20:	2207      	movs	r2, #7
 800ae22:	601a      	str	r2, [r3, #0]
}
 800ae24:	bf00      	nop
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	e000e010 	.word	0xe000e010
 800ae34:	e000e018 	.word	0xe000e018
 800ae38:	20000020 	.word	0x20000020
 800ae3c:	10624dd3 	.word	0x10624dd3
 800ae40:	e000e014 	.word	0xe000e014

0800ae44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ae54 <vPortEnableVFP+0x10>
 800ae48:	6801      	ldr	r1, [r0, #0]
 800ae4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ae4e:	6001      	str	r1, [r0, #0]
 800ae50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae52:	bf00      	nop
 800ae54:	e000ed88 	.word	0xe000ed88

0800ae58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae5e:	f3ef 8305 	mrs	r3, IPSR
 800ae62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2b0f      	cmp	r3, #15
 800ae68:	d915      	bls.n	800ae96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae6a:	4a18      	ldr	r2, [pc, #96]	@ (800aecc <vPortValidateInterruptPriority+0x74>)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae74:	4b16      	ldr	r3, [pc, #88]	@ (800aed0 <vPortValidateInterruptPriority+0x78>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	7afa      	ldrb	r2, [r7, #11]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d20b      	bcs.n	800ae96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	607b      	str	r3, [r7, #4]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae96:	4b0f      	ldr	r3, [pc, #60]	@ (800aed4 <vPortValidateInterruptPriority+0x7c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	@ (800aed8 <vPortValidateInterruptPriority+0x80>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d90b      	bls.n	800aebe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	603b      	str	r3, [r7, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	bf00      	nop
 800aebc:	e7fd      	b.n	800aeba <vPortValidateInterruptPriority+0x62>
	}
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	e000e3f0 	.word	0xe000e3f0
 800aed0:	20002408 	.word	0x20002408
 800aed4:	e000ed0c 	.word	0xe000ed0c
 800aed8:	2000240c 	.word	0x2000240c

0800aedc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	@ 0x28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aee8:	f7fe fc4e 	bl	8009788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aeec:	4b5c      	ldr	r3, [pc, #368]	@ (800b060 <pvPortMalloc+0x184>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aef4:	f000 f924 	bl	800b140 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aef8:	4b5a      	ldr	r3, [pc, #360]	@ (800b064 <pvPortMalloc+0x188>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4013      	ands	r3, r2
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 8095 	bne.w	800b030 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01e      	beq.n	800af4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af0c:	2208      	movs	r2, #8
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4413      	add	r3, r2
 800af12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d015      	beq.n	800af4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f023 0307 	bic.w	r3, r3, #7
 800af24:	3308      	adds	r3, #8
 800af26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f003 0307 	and.w	r3, r3, #7
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <pvPortMalloc+0x6e>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	617b      	str	r3, [r7, #20]
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	e7fd      	b.n	800af46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d06f      	beq.n	800b030 <pvPortMalloc+0x154>
 800af50:	4b45      	ldr	r3, [pc, #276]	@ (800b068 <pvPortMalloc+0x18c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d86a      	bhi.n	800b030 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af5a:	4b44      	ldr	r3, [pc, #272]	@ (800b06c <pvPortMalloc+0x190>)
 800af5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af5e:	4b43      	ldr	r3, [pc, #268]	@ (800b06c <pvPortMalloc+0x190>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af64:	e004      	b.n	800af70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	429a      	cmp	r2, r3
 800af78:	d903      	bls.n	800af82 <pvPortMalloc+0xa6>
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1f1      	bne.n	800af66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af82:	4b37      	ldr	r3, [pc, #220]	@ (800b060 <pvPortMalloc+0x184>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af88:	429a      	cmp	r2, r3
 800af8a:	d051      	beq.n	800b030 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2208      	movs	r2, #8
 800af92:	4413      	add	r3, r2
 800af94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	1ad2      	subs	r2, r2, r3
 800afa6:	2308      	movs	r3, #8
 800afa8:	005b      	lsls	r3, r3, #1
 800afaa:	429a      	cmp	r2, r3
 800afac:	d920      	bls.n	800aff0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800afae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4413      	add	r3, r2
 800afb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00b      	beq.n	800afd8 <pvPortMalloc+0xfc>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	613b      	str	r3, [r7, #16]
}
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	e7fd      	b.n	800afd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	1ad2      	subs	r2, r2, r3
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afea:	69b8      	ldr	r0, [r7, #24]
 800afec:	f000 f90c 	bl	800b208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aff0:	4b1d      	ldr	r3, [pc, #116]	@ (800b068 <pvPortMalloc+0x18c>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	4a1b      	ldr	r2, [pc, #108]	@ (800b068 <pvPortMalloc+0x18c>)
 800affc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800affe:	4b1a      	ldr	r3, [pc, #104]	@ (800b068 <pvPortMalloc+0x18c>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	4b1b      	ldr	r3, [pc, #108]	@ (800b070 <pvPortMalloc+0x194>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d203      	bcs.n	800b012 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b00a:	4b17      	ldr	r3, [pc, #92]	@ (800b068 <pvPortMalloc+0x18c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a18      	ldr	r2, [pc, #96]	@ (800b070 <pvPortMalloc+0x194>)
 800b010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	4b13      	ldr	r3, [pc, #76]	@ (800b064 <pvPortMalloc+0x188>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	431a      	orrs	r2, r3
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b026:	4b13      	ldr	r3, [pc, #76]	@ (800b074 <pvPortMalloc+0x198>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3301      	adds	r3, #1
 800b02c:	4a11      	ldr	r2, [pc, #68]	@ (800b074 <pvPortMalloc+0x198>)
 800b02e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b030:	f7fe fbb8 	bl	80097a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00b      	beq.n	800b056 <pvPortMalloc+0x17a>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	60fb      	str	r3, [r7, #12]
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	e7fd      	b.n	800b052 <pvPortMalloc+0x176>
	return pvReturn;
 800b056:	69fb      	ldr	r3, [r7, #28]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3728      	adds	r7, #40	@ 0x28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	2001aab8 	.word	0x2001aab8
 800b064:	2001aacc 	.word	0x2001aacc
 800b068:	2001aabc 	.word	0x2001aabc
 800b06c:	2001aab0 	.word	0x2001aab0
 800b070:	2001aac0 	.word	0x2001aac0
 800b074:	2001aac4 	.word	0x2001aac4

0800b078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b086      	sub	sp, #24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d04f      	beq.n	800b12a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b08a:	2308      	movs	r3, #8
 800b08c:	425b      	negs	r3, r3
 800b08e:	697a      	ldr	r2, [r7, #20]
 800b090:	4413      	add	r3, r2
 800b092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	4b25      	ldr	r3, [pc, #148]	@ (800b134 <vPortFree+0xbc>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10b      	bne.n	800b0be <vPortFree+0x46>
	__asm volatile
 800b0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0aa:	f383 8811 	msr	BASEPRI, r3
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f3bf 8f4f 	dsb	sy
 800b0b6:	60fb      	str	r3, [r7, #12]
}
 800b0b8:	bf00      	nop
 800b0ba:	bf00      	nop
 800b0bc:	e7fd      	b.n	800b0ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00b      	beq.n	800b0de <vPortFree+0x66>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	60bb      	str	r3, [r7, #8]
}
 800b0d8:	bf00      	nop
 800b0da:	bf00      	nop
 800b0dc:	e7fd      	b.n	800b0da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	4b14      	ldr	r3, [pc, #80]	@ (800b134 <vPortFree+0xbc>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d01e      	beq.n	800b12a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d11a      	bne.n	800b12a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b134 <vPortFree+0xbc>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	43db      	mvns	r3, r3
 800b0fe:	401a      	ands	r2, r3
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b104:	f7fe fb40 	bl	8009788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	4b0a      	ldr	r3, [pc, #40]	@ (800b138 <vPortFree+0xc0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4413      	add	r3, r2
 800b112:	4a09      	ldr	r2, [pc, #36]	@ (800b138 <vPortFree+0xc0>)
 800b114:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b116:	6938      	ldr	r0, [r7, #16]
 800b118:	f000 f876 	bl	800b208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b11c:	4b07      	ldr	r3, [pc, #28]	@ (800b13c <vPortFree+0xc4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3301      	adds	r3, #1
 800b122:	4a06      	ldr	r2, [pc, #24]	@ (800b13c <vPortFree+0xc4>)
 800b124:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b126:	f7fe fb3d 	bl	80097a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b12a:	bf00      	nop
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	2001aacc 	.word	0x2001aacc
 800b138:	2001aabc 	.word	0x2001aabc
 800b13c:	2001aac8 	.word	0x2001aac8

0800b140 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b146:	4b29      	ldr	r3, [pc, #164]	@ (800b1ec <prvHeapInit+0xac>)
 800b148:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b14a:	4b29      	ldr	r3, [pc, #164]	@ (800b1f0 <prvHeapInit+0xb0>)
 800b14c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f003 0307 	and.w	r3, r3, #7
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00c      	beq.n	800b172 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3307      	adds	r3, #7
 800b15c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f023 0307 	bic.w	r3, r3, #7
 800b164:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	4a20      	ldr	r2, [pc, #128]	@ (800b1f0 <prvHeapInit+0xb0>)
 800b16e:	4413      	add	r3, r2
 800b170:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b176:	4a1f      	ldr	r2, [pc, #124]	@ (800b1f4 <prvHeapInit+0xb4>)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b17c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f4 <prvHeapInit+0xb4>)
 800b17e:	2200      	movs	r2, #0
 800b180:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b18a:	2208      	movs	r2, #8
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	1a9b      	subs	r3, r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f023 0307 	bic.w	r3, r3, #7
 800b198:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	4a16      	ldr	r2, [pc, #88]	@ (800b1f8 <prvHeapInit+0xb8>)
 800b19e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1a0:	4b15      	ldr	r3, [pc, #84]	@ (800b1f8 <prvHeapInit+0xb8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1a8:	4b13      	ldr	r3, [pc, #76]	@ (800b1f8 <prvHeapInit+0xb8>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	1ad2      	subs	r2, r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1be:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f8 <prvHeapInit+0xb8>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b1fc <prvHeapInit+0xbc>)
 800b1cc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800b200 <prvHeapInit+0xc0>)
 800b1d4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b204 <prvHeapInit+0xc4>)
 800b1d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b1dc:	601a      	str	r2, [r3, #0]
}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	000186a0 	.word	0x000186a0
 800b1f0:	20002410 	.word	0x20002410
 800b1f4:	2001aab0 	.word	0x2001aab0
 800b1f8:	2001aab8 	.word	0x2001aab8
 800b1fc:	2001aac0 	.word	0x2001aac0
 800b200:	2001aabc 	.word	0x2001aabc
 800b204:	2001aacc 	.word	0x2001aacc

0800b208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b210:	4b28      	ldr	r3, [pc, #160]	@ (800b2b4 <prvInsertBlockIntoFreeList+0xac>)
 800b212:	60fb      	str	r3, [r7, #12]
 800b214:	e002      	b.n	800b21c <prvInsertBlockIntoFreeList+0x14>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	429a      	cmp	r2, r3
 800b224:	d8f7      	bhi.n	800b216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	4413      	add	r3, r2
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	429a      	cmp	r2, r3
 800b236:	d108      	bne.n	800b24a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	441a      	add	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	441a      	add	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d118      	bne.n	800b290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	4b15      	ldr	r3, [pc, #84]	@ (800b2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d00d      	beq.n	800b286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	441a      	add	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	e008      	b.n	800b298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b286:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	e003      	b.n	800b298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d002      	beq.n	800b2a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2a6:	bf00      	nop
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	2001aab0 	.word	0x2001aab0
 800b2b8:	2001aab8 	.word	0x2001aab8

0800b2bc <__cvt>:
 800b2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	ec57 6b10 	vmov	r6, r7, d0
 800b2c4:	2f00      	cmp	r7, #0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	bfbb      	ittet	lt
 800b2ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b2d2:	461f      	movlt	r7, r3
 800b2d4:	2300      	movge	r3, #0
 800b2d6:	232d      	movlt	r3, #45	@ 0x2d
 800b2d8:	700b      	strb	r3, [r1, #0]
 800b2da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b2e0:	4691      	mov	r9, r2
 800b2e2:	f023 0820 	bic.w	r8, r3, #32
 800b2e6:	bfbc      	itt	lt
 800b2e8:	4632      	movlt	r2, r6
 800b2ea:	4616      	movlt	r6, r2
 800b2ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2f0:	d005      	beq.n	800b2fe <__cvt+0x42>
 800b2f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2f6:	d100      	bne.n	800b2fa <__cvt+0x3e>
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	2102      	movs	r1, #2
 800b2fc:	e000      	b.n	800b300 <__cvt+0x44>
 800b2fe:	2103      	movs	r1, #3
 800b300:	ab03      	add	r3, sp, #12
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	ab02      	add	r3, sp, #8
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	ec47 6b10 	vmov	d0, r6, r7
 800b30c:	4653      	mov	r3, sl
 800b30e:	4622      	mov	r2, r4
 800b310:	f000 febe 	bl	800c090 <_dtoa_r>
 800b314:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b318:	4605      	mov	r5, r0
 800b31a:	d119      	bne.n	800b350 <__cvt+0x94>
 800b31c:	f019 0f01 	tst.w	r9, #1
 800b320:	d00e      	beq.n	800b340 <__cvt+0x84>
 800b322:	eb00 0904 	add.w	r9, r0, r4
 800b326:	2200      	movs	r2, #0
 800b328:	2300      	movs	r3, #0
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f5 fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 800b332:	b108      	cbz	r0, 800b338 <__cvt+0x7c>
 800b334:	f8cd 900c 	str.w	r9, [sp, #12]
 800b338:	2230      	movs	r2, #48	@ 0x30
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	454b      	cmp	r3, r9
 800b33e:	d31e      	bcc.n	800b37e <__cvt+0xc2>
 800b340:	9b03      	ldr	r3, [sp, #12]
 800b342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b344:	1b5b      	subs	r3, r3, r5
 800b346:	4628      	mov	r0, r5
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	b004      	add	sp, #16
 800b34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b350:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b354:	eb00 0904 	add.w	r9, r0, r4
 800b358:	d1e5      	bne.n	800b326 <__cvt+0x6a>
 800b35a:	7803      	ldrb	r3, [r0, #0]
 800b35c:	2b30      	cmp	r3, #48	@ 0x30
 800b35e:	d10a      	bne.n	800b376 <__cvt+0xba>
 800b360:	2200      	movs	r2, #0
 800b362:	2300      	movs	r3, #0
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	f7f5 fbce 	bl	8000b08 <__aeabi_dcmpeq>
 800b36c:	b918      	cbnz	r0, 800b376 <__cvt+0xba>
 800b36e:	f1c4 0401 	rsb	r4, r4, #1
 800b372:	f8ca 4000 	str.w	r4, [sl]
 800b376:	f8da 3000 	ldr.w	r3, [sl]
 800b37a:	4499      	add	r9, r3
 800b37c:	e7d3      	b.n	800b326 <__cvt+0x6a>
 800b37e:	1c59      	adds	r1, r3, #1
 800b380:	9103      	str	r1, [sp, #12]
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	e7d9      	b.n	800b33a <__cvt+0x7e>

0800b386 <__exponent>:
 800b386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b388:	2900      	cmp	r1, #0
 800b38a:	bfba      	itte	lt
 800b38c:	4249      	neglt	r1, r1
 800b38e:	232d      	movlt	r3, #45	@ 0x2d
 800b390:	232b      	movge	r3, #43	@ 0x2b
 800b392:	2909      	cmp	r1, #9
 800b394:	7002      	strb	r2, [r0, #0]
 800b396:	7043      	strb	r3, [r0, #1]
 800b398:	dd29      	ble.n	800b3ee <__exponent+0x68>
 800b39a:	f10d 0307 	add.w	r3, sp, #7
 800b39e:	461d      	mov	r5, r3
 800b3a0:	270a      	movs	r7, #10
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b3a8:	fb07 1416 	mls	r4, r7, r6, r1
 800b3ac:	3430      	adds	r4, #48	@ 0x30
 800b3ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	2c63      	cmp	r4, #99	@ 0x63
 800b3b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	dcf1      	bgt.n	800b3a2 <__exponent+0x1c>
 800b3be:	3130      	adds	r1, #48	@ 0x30
 800b3c0:	1e94      	subs	r4, r2, #2
 800b3c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3c6:	1c41      	adds	r1, r0, #1
 800b3c8:	4623      	mov	r3, r4
 800b3ca:	42ab      	cmp	r3, r5
 800b3cc:	d30a      	bcc.n	800b3e4 <__exponent+0x5e>
 800b3ce:	f10d 0309 	add.w	r3, sp, #9
 800b3d2:	1a9b      	subs	r3, r3, r2
 800b3d4:	42ac      	cmp	r4, r5
 800b3d6:	bf88      	it	hi
 800b3d8:	2300      	movhi	r3, #0
 800b3da:	3302      	adds	r3, #2
 800b3dc:	4403      	add	r3, r0
 800b3de:	1a18      	subs	r0, r3, r0
 800b3e0:	b003      	add	sp, #12
 800b3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3ec:	e7ed      	b.n	800b3ca <__exponent+0x44>
 800b3ee:	2330      	movs	r3, #48	@ 0x30
 800b3f0:	3130      	adds	r1, #48	@ 0x30
 800b3f2:	7083      	strb	r3, [r0, #2]
 800b3f4:	70c1      	strb	r1, [r0, #3]
 800b3f6:	1d03      	adds	r3, r0, #4
 800b3f8:	e7f1      	b.n	800b3de <__exponent+0x58>
	...

0800b3fc <_printf_float>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	b08d      	sub	sp, #52	@ 0x34
 800b402:	460c      	mov	r4, r1
 800b404:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b408:	4616      	mov	r6, r2
 800b40a:	461f      	mov	r7, r3
 800b40c:	4605      	mov	r5, r0
 800b40e:	f000 fcdb 	bl	800bdc8 <_localeconv_r>
 800b412:	6803      	ldr	r3, [r0, #0]
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	4618      	mov	r0, r3
 800b418:	f7f4 ff4a 	bl	80002b0 <strlen>
 800b41c:	2300      	movs	r3, #0
 800b41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b420:	f8d8 3000 	ldr.w	r3, [r8]
 800b424:	9005      	str	r0, [sp, #20]
 800b426:	3307      	adds	r3, #7
 800b428:	f023 0307 	bic.w	r3, r3, #7
 800b42c:	f103 0208 	add.w	r2, r3, #8
 800b430:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b434:	f8d4 b000 	ldr.w	fp, [r4]
 800b438:	f8c8 2000 	str.w	r2, [r8]
 800b43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b440:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b444:	9307      	str	r3, [sp, #28]
 800b446:	f8cd 8018 	str.w	r8, [sp, #24]
 800b44a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b44e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b452:	4b9c      	ldr	r3, [pc, #624]	@ (800b6c4 <_printf_float+0x2c8>)
 800b454:	f04f 32ff 	mov.w	r2, #4294967295
 800b458:	f7f5 fb88 	bl	8000b6c <__aeabi_dcmpun>
 800b45c:	bb70      	cbnz	r0, 800b4bc <_printf_float+0xc0>
 800b45e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b462:	4b98      	ldr	r3, [pc, #608]	@ (800b6c4 <_printf_float+0x2c8>)
 800b464:	f04f 32ff 	mov.w	r2, #4294967295
 800b468:	f7f5 fb62 	bl	8000b30 <__aeabi_dcmple>
 800b46c:	bb30      	cbnz	r0, 800b4bc <_printf_float+0xc0>
 800b46e:	2200      	movs	r2, #0
 800b470:	2300      	movs	r3, #0
 800b472:	4640      	mov	r0, r8
 800b474:	4649      	mov	r1, r9
 800b476:	f7f5 fb51 	bl	8000b1c <__aeabi_dcmplt>
 800b47a:	b110      	cbz	r0, 800b482 <_printf_float+0x86>
 800b47c:	232d      	movs	r3, #45	@ 0x2d
 800b47e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b482:	4a91      	ldr	r2, [pc, #580]	@ (800b6c8 <_printf_float+0x2cc>)
 800b484:	4b91      	ldr	r3, [pc, #580]	@ (800b6cc <_printf_float+0x2d0>)
 800b486:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b48a:	bf94      	ite	ls
 800b48c:	4690      	movls	r8, r2
 800b48e:	4698      	movhi	r8, r3
 800b490:	2303      	movs	r3, #3
 800b492:	6123      	str	r3, [r4, #16]
 800b494:	f02b 0304 	bic.w	r3, fp, #4
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	f04f 0900 	mov.w	r9, #0
 800b49e:	9700      	str	r7, [sp, #0]
 800b4a0:	4633      	mov	r3, r6
 800b4a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 f9d2 	bl	800b850 <_printf_common>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	f040 808d 	bne.w	800b5cc <_printf_float+0x1d0>
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	b00d      	add	sp, #52	@ 0x34
 800b4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4bc:	4642      	mov	r2, r8
 800b4be:	464b      	mov	r3, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f7f5 fb52 	bl	8000b6c <__aeabi_dcmpun>
 800b4c8:	b140      	cbz	r0, 800b4dc <_printf_float+0xe0>
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bfbc      	itt	lt
 800b4d0:	232d      	movlt	r3, #45	@ 0x2d
 800b4d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b4d6:	4a7e      	ldr	r2, [pc, #504]	@ (800b6d0 <_printf_float+0x2d4>)
 800b4d8:	4b7e      	ldr	r3, [pc, #504]	@ (800b6d4 <_printf_float+0x2d8>)
 800b4da:	e7d4      	b.n	800b486 <_printf_float+0x8a>
 800b4dc:	6863      	ldr	r3, [r4, #4]
 800b4de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b4e2:	9206      	str	r2, [sp, #24]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	d13b      	bne.n	800b560 <_printf_float+0x164>
 800b4e8:	2306      	movs	r3, #6
 800b4ea:	6063      	str	r3, [r4, #4]
 800b4ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	6022      	str	r2, [r4, #0]
 800b4f4:	9303      	str	r3, [sp, #12]
 800b4f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b4fc:	ab09      	add	r3, sp, #36	@ 0x24
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	6861      	ldr	r1, [r4, #4]
 800b502:	ec49 8b10 	vmov	d0, r8, r9
 800b506:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b50a:	4628      	mov	r0, r5
 800b50c:	f7ff fed6 	bl	800b2bc <__cvt>
 800b510:	9b06      	ldr	r3, [sp, #24]
 800b512:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b514:	2b47      	cmp	r3, #71	@ 0x47
 800b516:	4680      	mov	r8, r0
 800b518:	d129      	bne.n	800b56e <_printf_float+0x172>
 800b51a:	1cc8      	adds	r0, r1, #3
 800b51c:	db02      	blt.n	800b524 <_printf_float+0x128>
 800b51e:	6863      	ldr	r3, [r4, #4]
 800b520:	4299      	cmp	r1, r3
 800b522:	dd41      	ble.n	800b5a8 <_printf_float+0x1ac>
 800b524:	f1aa 0a02 	sub.w	sl, sl, #2
 800b528:	fa5f fa8a 	uxtb.w	sl, sl
 800b52c:	3901      	subs	r1, #1
 800b52e:	4652      	mov	r2, sl
 800b530:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b534:	9109      	str	r1, [sp, #36]	@ 0x24
 800b536:	f7ff ff26 	bl	800b386 <__exponent>
 800b53a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b53c:	1813      	adds	r3, r2, r0
 800b53e:	2a01      	cmp	r2, #1
 800b540:	4681      	mov	r9, r0
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	dc02      	bgt.n	800b54c <_printf_float+0x150>
 800b546:	6822      	ldr	r2, [r4, #0]
 800b548:	07d2      	lsls	r2, r2, #31
 800b54a:	d501      	bpl.n	800b550 <_printf_float+0x154>
 800b54c:	3301      	adds	r3, #1
 800b54e:	6123      	str	r3, [r4, #16]
 800b550:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0a2      	beq.n	800b49e <_printf_float+0xa2>
 800b558:	232d      	movs	r3, #45	@ 0x2d
 800b55a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b55e:	e79e      	b.n	800b49e <_printf_float+0xa2>
 800b560:	9a06      	ldr	r2, [sp, #24]
 800b562:	2a47      	cmp	r2, #71	@ 0x47
 800b564:	d1c2      	bne.n	800b4ec <_printf_float+0xf0>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1c0      	bne.n	800b4ec <_printf_float+0xf0>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e7bd      	b.n	800b4ea <_printf_float+0xee>
 800b56e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b572:	d9db      	bls.n	800b52c <_printf_float+0x130>
 800b574:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b578:	d118      	bne.n	800b5ac <_printf_float+0x1b0>
 800b57a:	2900      	cmp	r1, #0
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	dd0b      	ble.n	800b598 <_printf_float+0x19c>
 800b580:	6121      	str	r1, [r4, #16]
 800b582:	b913      	cbnz	r3, 800b58a <_printf_float+0x18e>
 800b584:	6822      	ldr	r2, [r4, #0]
 800b586:	07d0      	lsls	r0, r2, #31
 800b588:	d502      	bpl.n	800b590 <_printf_float+0x194>
 800b58a:	3301      	adds	r3, #1
 800b58c:	440b      	add	r3, r1
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b592:	f04f 0900 	mov.w	r9, #0
 800b596:	e7db      	b.n	800b550 <_printf_float+0x154>
 800b598:	b913      	cbnz	r3, 800b5a0 <_printf_float+0x1a4>
 800b59a:	6822      	ldr	r2, [r4, #0]
 800b59c:	07d2      	lsls	r2, r2, #31
 800b59e:	d501      	bpl.n	800b5a4 <_printf_float+0x1a8>
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	e7f4      	b.n	800b58e <_printf_float+0x192>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e7f2      	b.n	800b58e <_printf_float+0x192>
 800b5a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b5ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	db05      	blt.n	800b5be <_printf_float+0x1c2>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	6121      	str	r1, [r4, #16]
 800b5b6:	07d8      	lsls	r0, r3, #31
 800b5b8:	d5ea      	bpl.n	800b590 <_printf_float+0x194>
 800b5ba:	1c4b      	adds	r3, r1, #1
 800b5bc:	e7e7      	b.n	800b58e <_printf_float+0x192>
 800b5be:	2900      	cmp	r1, #0
 800b5c0:	bfd4      	ite	le
 800b5c2:	f1c1 0202 	rsble	r2, r1, #2
 800b5c6:	2201      	movgt	r2, #1
 800b5c8:	4413      	add	r3, r2
 800b5ca:	e7e0      	b.n	800b58e <_printf_float+0x192>
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	055a      	lsls	r2, r3, #21
 800b5d0:	d407      	bmi.n	800b5e2 <_printf_float+0x1e6>
 800b5d2:	6923      	ldr	r3, [r4, #16]
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d12b      	bne.n	800b638 <_printf_float+0x23c>
 800b5e0:	e767      	b.n	800b4b2 <_printf_float+0xb6>
 800b5e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5e6:	f240 80dd 	bls.w	800b7a4 <_printf_float+0x3a8>
 800b5ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f7f5 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d033      	beq.n	800b662 <_printf_float+0x266>
 800b5fa:	4a37      	ldr	r2, [pc, #220]	@ (800b6d8 <_printf_float+0x2dc>)
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	4631      	mov	r1, r6
 800b600:	4628      	mov	r0, r5
 800b602:	47b8      	blx	r7
 800b604:	3001      	adds	r0, #1
 800b606:	f43f af54 	beq.w	800b4b2 <_printf_float+0xb6>
 800b60a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b60e:	4543      	cmp	r3, r8
 800b610:	db02      	blt.n	800b618 <_printf_float+0x21c>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	07d8      	lsls	r0, r3, #31
 800b616:	d50f      	bpl.n	800b638 <_printf_float+0x23c>
 800b618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b61c:	4631      	mov	r1, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	47b8      	blx	r7
 800b622:	3001      	adds	r0, #1
 800b624:	f43f af45 	beq.w	800b4b2 <_printf_float+0xb6>
 800b628:	f04f 0900 	mov.w	r9, #0
 800b62c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b630:	f104 0a1a 	add.w	sl, r4, #26
 800b634:	45c8      	cmp	r8, r9
 800b636:	dc09      	bgt.n	800b64c <_printf_float+0x250>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	079b      	lsls	r3, r3, #30
 800b63c:	f100 8103 	bmi.w	800b846 <_printf_float+0x44a>
 800b640:	68e0      	ldr	r0, [r4, #12]
 800b642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b644:	4298      	cmp	r0, r3
 800b646:	bfb8      	it	lt
 800b648:	4618      	movlt	r0, r3
 800b64a:	e734      	b.n	800b4b6 <_printf_float+0xba>
 800b64c:	2301      	movs	r3, #1
 800b64e:	4652      	mov	r2, sl
 800b650:	4631      	mov	r1, r6
 800b652:	4628      	mov	r0, r5
 800b654:	47b8      	blx	r7
 800b656:	3001      	adds	r0, #1
 800b658:	f43f af2b 	beq.w	800b4b2 <_printf_float+0xb6>
 800b65c:	f109 0901 	add.w	r9, r9, #1
 800b660:	e7e8      	b.n	800b634 <_printf_float+0x238>
 800b662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	dc39      	bgt.n	800b6dc <_printf_float+0x2e0>
 800b668:	4a1b      	ldr	r2, [pc, #108]	@ (800b6d8 <_printf_float+0x2dc>)
 800b66a:	2301      	movs	r3, #1
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	47b8      	blx	r7
 800b672:	3001      	adds	r0, #1
 800b674:	f43f af1d 	beq.w	800b4b2 <_printf_float+0xb6>
 800b678:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b67c:	ea59 0303 	orrs.w	r3, r9, r3
 800b680:	d102      	bne.n	800b688 <_printf_float+0x28c>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	07d9      	lsls	r1, r3, #31
 800b686:	d5d7      	bpl.n	800b638 <_printf_float+0x23c>
 800b688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af0d 	beq.w	800b4b2 <_printf_float+0xb6>
 800b698:	f04f 0a00 	mov.w	sl, #0
 800b69c:	f104 0b1a 	add.w	fp, r4, #26
 800b6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a2:	425b      	negs	r3, r3
 800b6a4:	4553      	cmp	r3, sl
 800b6a6:	dc01      	bgt.n	800b6ac <_printf_float+0x2b0>
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	e793      	b.n	800b5d4 <_printf_float+0x1d8>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	465a      	mov	r2, fp
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f aefb 	beq.w	800b4b2 <_printf_float+0xb6>
 800b6bc:	f10a 0a01 	add.w	sl, sl, #1
 800b6c0:	e7ee      	b.n	800b6a0 <_printf_float+0x2a4>
 800b6c2:	bf00      	nop
 800b6c4:	7fefffff 	.word	0x7fefffff
 800b6c8:	0800ead0 	.word	0x0800ead0
 800b6cc:	0800ead4 	.word	0x0800ead4
 800b6d0:	0800ead8 	.word	0x0800ead8
 800b6d4:	0800eadc 	.word	0x0800eadc
 800b6d8:	0800eae0 	.word	0x0800eae0
 800b6dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6e2:	4553      	cmp	r3, sl
 800b6e4:	bfa8      	it	ge
 800b6e6:	4653      	movge	r3, sl
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	4699      	mov	r9, r3
 800b6ec:	dc36      	bgt.n	800b75c <_printf_float+0x360>
 800b6ee:	f04f 0b00 	mov.w	fp, #0
 800b6f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6f6:	f104 021a 	add.w	r2, r4, #26
 800b6fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6fc:	9306      	str	r3, [sp, #24]
 800b6fe:	eba3 0309 	sub.w	r3, r3, r9
 800b702:	455b      	cmp	r3, fp
 800b704:	dc31      	bgt.n	800b76a <_printf_float+0x36e>
 800b706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b708:	459a      	cmp	sl, r3
 800b70a:	dc3a      	bgt.n	800b782 <_printf_float+0x386>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	07da      	lsls	r2, r3, #31
 800b710:	d437      	bmi.n	800b782 <_printf_float+0x386>
 800b712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b714:	ebaa 0903 	sub.w	r9, sl, r3
 800b718:	9b06      	ldr	r3, [sp, #24]
 800b71a:	ebaa 0303 	sub.w	r3, sl, r3
 800b71e:	4599      	cmp	r9, r3
 800b720:	bfa8      	it	ge
 800b722:	4699      	movge	r9, r3
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	dc33      	bgt.n	800b792 <_printf_float+0x396>
 800b72a:	f04f 0800 	mov.w	r8, #0
 800b72e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b732:	f104 0b1a 	add.w	fp, r4, #26
 800b736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b738:	ebaa 0303 	sub.w	r3, sl, r3
 800b73c:	eba3 0309 	sub.w	r3, r3, r9
 800b740:	4543      	cmp	r3, r8
 800b742:	f77f af79 	ble.w	800b638 <_printf_float+0x23c>
 800b746:	2301      	movs	r3, #1
 800b748:	465a      	mov	r2, fp
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	f43f aeae 	beq.w	800b4b2 <_printf_float+0xb6>
 800b756:	f108 0801 	add.w	r8, r8, #1
 800b75a:	e7ec      	b.n	800b736 <_printf_float+0x33a>
 800b75c:	4642      	mov	r2, r8
 800b75e:	4631      	mov	r1, r6
 800b760:	4628      	mov	r0, r5
 800b762:	47b8      	blx	r7
 800b764:	3001      	adds	r0, #1
 800b766:	d1c2      	bne.n	800b6ee <_printf_float+0x2f2>
 800b768:	e6a3      	b.n	800b4b2 <_printf_float+0xb6>
 800b76a:	2301      	movs	r3, #1
 800b76c:	4631      	mov	r1, r6
 800b76e:	4628      	mov	r0, r5
 800b770:	9206      	str	r2, [sp, #24]
 800b772:	47b8      	blx	r7
 800b774:	3001      	adds	r0, #1
 800b776:	f43f ae9c 	beq.w	800b4b2 <_printf_float+0xb6>
 800b77a:	9a06      	ldr	r2, [sp, #24]
 800b77c:	f10b 0b01 	add.w	fp, fp, #1
 800b780:	e7bb      	b.n	800b6fa <_printf_float+0x2fe>
 800b782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	d1c0      	bne.n	800b712 <_printf_float+0x316>
 800b790:	e68f      	b.n	800b4b2 <_printf_float+0xb6>
 800b792:	9a06      	ldr	r2, [sp, #24]
 800b794:	464b      	mov	r3, r9
 800b796:	4442      	add	r2, r8
 800b798:	4631      	mov	r1, r6
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b8      	blx	r7
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d1c3      	bne.n	800b72a <_printf_float+0x32e>
 800b7a2:	e686      	b.n	800b4b2 <_printf_float+0xb6>
 800b7a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b7a8:	f1ba 0f01 	cmp.w	sl, #1
 800b7ac:	dc01      	bgt.n	800b7b2 <_printf_float+0x3b6>
 800b7ae:	07db      	lsls	r3, r3, #31
 800b7b0:	d536      	bpl.n	800b820 <_printf_float+0x424>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b8      	blx	r7
 800b7bc:	3001      	adds	r0, #1
 800b7be:	f43f ae78 	beq.w	800b4b2 <_printf_float+0xb6>
 800b7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b8      	blx	r7
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f43f ae70 	beq.w	800b4b2 <_printf_float+0xb6>
 800b7d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7de:	f7f5 f993 	bl	8000b08 <__aeabi_dcmpeq>
 800b7e2:	b9c0      	cbnz	r0, 800b816 <_printf_float+0x41a>
 800b7e4:	4653      	mov	r3, sl
 800b7e6:	f108 0201 	add.w	r2, r8, #1
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b8      	blx	r7
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d10c      	bne.n	800b80e <_printf_float+0x412>
 800b7f4:	e65d      	b.n	800b4b2 <_printf_float+0xb6>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	465a      	mov	r2, fp
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	47b8      	blx	r7
 800b800:	3001      	adds	r0, #1
 800b802:	f43f ae56 	beq.w	800b4b2 <_printf_float+0xb6>
 800b806:	f108 0801 	add.w	r8, r8, #1
 800b80a:	45d0      	cmp	r8, sl
 800b80c:	dbf3      	blt.n	800b7f6 <_printf_float+0x3fa>
 800b80e:	464b      	mov	r3, r9
 800b810:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b814:	e6df      	b.n	800b5d6 <_printf_float+0x1da>
 800b816:	f04f 0800 	mov.w	r8, #0
 800b81a:	f104 0b1a 	add.w	fp, r4, #26
 800b81e:	e7f4      	b.n	800b80a <_printf_float+0x40e>
 800b820:	2301      	movs	r3, #1
 800b822:	4642      	mov	r2, r8
 800b824:	e7e1      	b.n	800b7ea <_printf_float+0x3ee>
 800b826:	2301      	movs	r3, #1
 800b828:	464a      	mov	r2, r9
 800b82a:	4631      	mov	r1, r6
 800b82c:	4628      	mov	r0, r5
 800b82e:	47b8      	blx	r7
 800b830:	3001      	adds	r0, #1
 800b832:	f43f ae3e 	beq.w	800b4b2 <_printf_float+0xb6>
 800b836:	f108 0801 	add.w	r8, r8, #1
 800b83a:	68e3      	ldr	r3, [r4, #12]
 800b83c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b83e:	1a5b      	subs	r3, r3, r1
 800b840:	4543      	cmp	r3, r8
 800b842:	dcf0      	bgt.n	800b826 <_printf_float+0x42a>
 800b844:	e6fc      	b.n	800b640 <_printf_float+0x244>
 800b846:	f04f 0800 	mov.w	r8, #0
 800b84a:	f104 0919 	add.w	r9, r4, #25
 800b84e:	e7f4      	b.n	800b83a <_printf_float+0x43e>

0800b850 <_printf_common>:
 800b850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b854:	4616      	mov	r6, r2
 800b856:	4698      	mov	r8, r3
 800b858:	688a      	ldr	r2, [r1, #8]
 800b85a:	690b      	ldr	r3, [r1, #16]
 800b85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b860:	4293      	cmp	r3, r2
 800b862:	bfb8      	it	lt
 800b864:	4613      	movlt	r3, r2
 800b866:	6033      	str	r3, [r6, #0]
 800b868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b86c:	4607      	mov	r7, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	b10a      	cbz	r2, 800b876 <_printf_common+0x26>
 800b872:	3301      	adds	r3, #1
 800b874:	6033      	str	r3, [r6, #0]
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	0699      	lsls	r1, r3, #26
 800b87a:	bf42      	ittt	mi
 800b87c:	6833      	ldrmi	r3, [r6, #0]
 800b87e:	3302      	addmi	r3, #2
 800b880:	6033      	strmi	r3, [r6, #0]
 800b882:	6825      	ldr	r5, [r4, #0]
 800b884:	f015 0506 	ands.w	r5, r5, #6
 800b888:	d106      	bne.n	800b898 <_printf_common+0x48>
 800b88a:	f104 0a19 	add.w	sl, r4, #25
 800b88e:	68e3      	ldr	r3, [r4, #12]
 800b890:	6832      	ldr	r2, [r6, #0]
 800b892:	1a9b      	subs	r3, r3, r2
 800b894:	42ab      	cmp	r3, r5
 800b896:	dc26      	bgt.n	800b8e6 <_printf_common+0x96>
 800b898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b89c:	6822      	ldr	r2, [r4, #0]
 800b89e:	3b00      	subs	r3, #0
 800b8a0:	bf18      	it	ne
 800b8a2:	2301      	movne	r3, #1
 800b8a4:	0692      	lsls	r2, r2, #26
 800b8a6:	d42b      	bmi.n	800b900 <_printf_common+0xb0>
 800b8a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8ac:	4641      	mov	r1, r8
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	47c8      	blx	r9
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	d01e      	beq.n	800b8f4 <_printf_common+0xa4>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	6922      	ldr	r2, [r4, #16]
 800b8ba:	f003 0306 	and.w	r3, r3, #6
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	bf02      	ittt	eq
 800b8c2:	68e5      	ldreq	r5, [r4, #12]
 800b8c4:	6833      	ldreq	r3, [r6, #0]
 800b8c6:	1aed      	subeq	r5, r5, r3
 800b8c8:	68a3      	ldr	r3, [r4, #8]
 800b8ca:	bf0c      	ite	eq
 800b8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8d0:	2500      	movne	r5, #0
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	bfc4      	itt	gt
 800b8d6:	1a9b      	subgt	r3, r3, r2
 800b8d8:	18ed      	addgt	r5, r5, r3
 800b8da:	2600      	movs	r6, #0
 800b8dc:	341a      	adds	r4, #26
 800b8de:	42b5      	cmp	r5, r6
 800b8e0:	d11a      	bne.n	800b918 <_printf_common+0xc8>
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	e008      	b.n	800b8f8 <_printf_common+0xa8>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	47c8      	blx	r9
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d103      	bne.n	800b8fc <_printf_common+0xac>
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	e7c6      	b.n	800b88e <_printf_common+0x3e>
 800b900:	18e1      	adds	r1, r4, r3
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	2030      	movs	r0, #48	@ 0x30
 800b906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b90a:	4422      	add	r2, r4
 800b90c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b914:	3302      	adds	r3, #2
 800b916:	e7c7      	b.n	800b8a8 <_printf_common+0x58>
 800b918:	2301      	movs	r3, #1
 800b91a:	4622      	mov	r2, r4
 800b91c:	4641      	mov	r1, r8
 800b91e:	4638      	mov	r0, r7
 800b920:	47c8      	blx	r9
 800b922:	3001      	adds	r0, #1
 800b924:	d0e6      	beq.n	800b8f4 <_printf_common+0xa4>
 800b926:	3601      	adds	r6, #1
 800b928:	e7d9      	b.n	800b8de <_printf_common+0x8e>
	...

0800b92c <_printf_i>:
 800b92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	7e0f      	ldrb	r7, [r1, #24]
 800b932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b934:	2f78      	cmp	r7, #120	@ 0x78
 800b936:	4691      	mov	r9, r2
 800b938:	4680      	mov	r8, r0
 800b93a:	460c      	mov	r4, r1
 800b93c:	469a      	mov	sl, r3
 800b93e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b942:	d807      	bhi.n	800b954 <_printf_i+0x28>
 800b944:	2f62      	cmp	r7, #98	@ 0x62
 800b946:	d80a      	bhi.n	800b95e <_printf_i+0x32>
 800b948:	2f00      	cmp	r7, #0
 800b94a:	f000 80d2 	beq.w	800baf2 <_printf_i+0x1c6>
 800b94e:	2f58      	cmp	r7, #88	@ 0x58
 800b950:	f000 80b9 	beq.w	800bac6 <_printf_i+0x19a>
 800b954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b95c:	e03a      	b.n	800b9d4 <_printf_i+0xa8>
 800b95e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b962:	2b15      	cmp	r3, #21
 800b964:	d8f6      	bhi.n	800b954 <_printf_i+0x28>
 800b966:	a101      	add	r1, pc, #4	@ (adr r1, 800b96c <_printf_i+0x40>)
 800b968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b96c:	0800b9c5 	.word	0x0800b9c5
 800b970:	0800b9d9 	.word	0x0800b9d9
 800b974:	0800b955 	.word	0x0800b955
 800b978:	0800b955 	.word	0x0800b955
 800b97c:	0800b955 	.word	0x0800b955
 800b980:	0800b955 	.word	0x0800b955
 800b984:	0800b9d9 	.word	0x0800b9d9
 800b988:	0800b955 	.word	0x0800b955
 800b98c:	0800b955 	.word	0x0800b955
 800b990:	0800b955 	.word	0x0800b955
 800b994:	0800b955 	.word	0x0800b955
 800b998:	0800bad9 	.word	0x0800bad9
 800b99c:	0800ba03 	.word	0x0800ba03
 800b9a0:	0800ba93 	.word	0x0800ba93
 800b9a4:	0800b955 	.word	0x0800b955
 800b9a8:	0800b955 	.word	0x0800b955
 800b9ac:	0800bafb 	.word	0x0800bafb
 800b9b0:	0800b955 	.word	0x0800b955
 800b9b4:	0800ba03 	.word	0x0800ba03
 800b9b8:	0800b955 	.word	0x0800b955
 800b9bc:	0800b955 	.word	0x0800b955
 800b9c0:	0800ba9b 	.word	0x0800ba9b
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	1d1a      	adds	r2, r3, #4
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6032      	str	r2, [r6, #0]
 800b9cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e09d      	b.n	800bb14 <_printf_i+0x1e8>
 800b9d8:	6833      	ldr	r3, [r6, #0]
 800b9da:	6820      	ldr	r0, [r4, #0]
 800b9dc:	1d19      	adds	r1, r3, #4
 800b9de:	6031      	str	r1, [r6, #0]
 800b9e0:	0606      	lsls	r6, r0, #24
 800b9e2:	d501      	bpl.n	800b9e8 <_printf_i+0xbc>
 800b9e4:	681d      	ldr	r5, [r3, #0]
 800b9e6:	e003      	b.n	800b9f0 <_printf_i+0xc4>
 800b9e8:	0645      	lsls	r5, r0, #25
 800b9ea:	d5fb      	bpl.n	800b9e4 <_printf_i+0xb8>
 800b9ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9f0:	2d00      	cmp	r5, #0
 800b9f2:	da03      	bge.n	800b9fc <_printf_i+0xd0>
 800b9f4:	232d      	movs	r3, #45	@ 0x2d
 800b9f6:	426d      	negs	r5, r5
 800b9f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9fc:	4859      	ldr	r0, [pc, #356]	@ (800bb64 <_printf_i+0x238>)
 800b9fe:	230a      	movs	r3, #10
 800ba00:	e011      	b.n	800ba26 <_printf_i+0xfa>
 800ba02:	6821      	ldr	r1, [r4, #0]
 800ba04:	6833      	ldr	r3, [r6, #0]
 800ba06:	0608      	lsls	r0, r1, #24
 800ba08:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba0c:	d402      	bmi.n	800ba14 <_printf_i+0xe8>
 800ba0e:	0649      	lsls	r1, r1, #25
 800ba10:	bf48      	it	mi
 800ba12:	b2ad      	uxthmi	r5, r5
 800ba14:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba16:	4853      	ldr	r0, [pc, #332]	@ (800bb64 <_printf_i+0x238>)
 800ba18:	6033      	str	r3, [r6, #0]
 800ba1a:	bf14      	ite	ne
 800ba1c:	230a      	movne	r3, #10
 800ba1e:	2308      	moveq	r3, #8
 800ba20:	2100      	movs	r1, #0
 800ba22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba26:	6866      	ldr	r6, [r4, #4]
 800ba28:	60a6      	str	r6, [r4, #8]
 800ba2a:	2e00      	cmp	r6, #0
 800ba2c:	bfa2      	ittt	ge
 800ba2e:	6821      	ldrge	r1, [r4, #0]
 800ba30:	f021 0104 	bicge.w	r1, r1, #4
 800ba34:	6021      	strge	r1, [r4, #0]
 800ba36:	b90d      	cbnz	r5, 800ba3c <_printf_i+0x110>
 800ba38:	2e00      	cmp	r6, #0
 800ba3a:	d04b      	beq.n	800bad4 <_printf_i+0x1a8>
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba42:	fb03 5711 	mls	r7, r3, r1, r5
 800ba46:	5dc7      	ldrb	r7, [r0, r7]
 800ba48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba4c:	462f      	mov	r7, r5
 800ba4e:	42bb      	cmp	r3, r7
 800ba50:	460d      	mov	r5, r1
 800ba52:	d9f4      	bls.n	800ba3e <_printf_i+0x112>
 800ba54:	2b08      	cmp	r3, #8
 800ba56:	d10b      	bne.n	800ba70 <_printf_i+0x144>
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	07df      	lsls	r7, r3, #31
 800ba5c:	d508      	bpl.n	800ba70 <_printf_i+0x144>
 800ba5e:	6923      	ldr	r3, [r4, #16]
 800ba60:	6861      	ldr	r1, [r4, #4]
 800ba62:	4299      	cmp	r1, r3
 800ba64:	bfde      	ittt	le
 800ba66:	2330      	movle	r3, #48	@ 0x30
 800ba68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba70:	1b92      	subs	r2, r2, r6
 800ba72:	6122      	str	r2, [r4, #16]
 800ba74:	f8cd a000 	str.w	sl, [sp]
 800ba78:	464b      	mov	r3, r9
 800ba7a:	aa03      	add	r2, sp, #12
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7ff fee6 	bl	800b850 <_printf_common>
 800ba84:	3001      	adds	r0, #1
 800ba86:	d14a      	bne.n	800bb1e <_printf_i+0x1f2>
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	b004      	add	sp, #16
 800ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	f043 0320 	orr.w	r3, r3, #32
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	4833      	ldr	r0, [pc, #204]	@ (800bb68 <_printf_i+0x23c>)
 800ba9c:	2778      	movs	r7, #120	@ 0x78
 800ba9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	6831      	ldr	r1, [r6, #0]
 800baa6:	061f      	lsls	r7, r3, #24
 800baa8:	f851 5b04 	ldr.w	r5, [r1], #4
 800baac:	d402      	bmi.n	800bab4 <_printf_i+0x188>
 800baae:	065f      	lsls	r7, r3, #25
 800bab0:	bf48      	it	mi
 800bab2:	b2ad      	uxthmi	r5, r5
 800bab4:	6031      	str	r1, [r6, #0]
 800bab6:	07d9      	lsls	r1, r3, #31
 800bab8:	bf44      	itt	mi
 800baba:	f043 0320 	orrmi.w	r3, r3, #32
 800babe:	6023      	strmi	r3, [r4, #0]
 800bac0:	b11d      	cbz	r5, 800baca <_printf_i+0x19e>
 800bac2:	2310      	movs	r3, #16
 800bac4:	e7ac      	b.n	800ba20 <_printf_i+0xf4>
 800bac6:	4827      	ldr	r0, [pc, #156]	@ (800bb64 <_printf_i+0x238>)
 800bac8:	e7e9      	b.n	800ba9e <_printf_i+0x172>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	f023 0320 	bic.w	r3, r3, #32
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	e7f6      	b.n	800bac2 <_printf_i+0x196>
 800bad4:	4616      	mov	r6, r2
 800bad6:	e7bd      	b.n	800ba54 <_printf_i+0x128>
 800bad8:	6833      	ldr	r3, [r6, #0]
 800bada:	6825      	ldr	r5, [r4, #0]
 800badc:	6961      	ldr	r1, [r4, #20]
 800bade:	1d18      	adds	r0, r3, #4
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	062e      	lsls	r6, r5, #24
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	d501      	bpl.n	800baec <_printf_i+0x1c0>
 800bae8:	6019      	str	r1, [r3, #0]
 800baea:	e002      	b.n	800baf2 <_printf_i+0x1c6>
 800baec:	0668      	lsls	r0, r5, #25
 800baee:	d5fb      	bpl.n	800bae8 <_printf_i+0x1bc>
 800baf0:	8019      	strh	r1, [r3, #0]
 800baf2:	2300      	movs	r3, #0
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	4616      	mov	r6, r2
 800baf8:	e7bc      	b.n	800ba74 <_printf_i+0x148>
 800bafa:	6833      	ldr	r3, [r6, #0]
 800bafc:	1d1a      	adds	r2, r3, #4
 800bafe:	6032      	str	r2, [r6, #0]
 800bb00:	681e      	ldr	r6, [r3, #0]
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	2100      	movs	r1, #0
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7f4 fb82 	bl	8000210 <memchr>
 800bb0c:	b108      	cbz	r0, 800bb12 <_printf_i+0x1e6>
 800bb0e:	1b80      	subs	r0, r0, r6
 800bb10:	6060      	str	r0, [r4, #4]
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	6123      	str	r3, [r4, #16]
 800bb16:	2300      	movs	r3, #0
 800bb18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb1c:	e7aa      	b.n	800ba74 <_printf_i+0x148>
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	4632      	mov	r2, r6
 800bb22:	4649      	mov	r1, r9
 800bb24:	4640      	mov	r0, r8
 800bb26:	47d0      	blx	sl
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d0ad      	beq.n	800ba88 <_printf_i+0x15c>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	079b      	lsls	r3, r3, #30
 800bb30:	d413      	bmi.n	800bb5a <_printf_i+0x22e>
 800bb32:	68e0      	ldr	r0, [r4, #12]
 800bb34:	9b03      	ldr	r3, [sp, #12]
 800bb36:	4298      	cmp	r0, r3
 800bb38:	bfb8      	it	lt
 800bb3a:	4618      	movlt	r0, r3
 800bb3c:	e7a6      	b.n	800ba8c <_printf_i+0x160>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	4632      	mov	r2, r6
 800bb42:	4649      	mov	r1, r9
 800bb44:	4640      	mov	r0, r8
 800bb46:	47d0      	blx	sl
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d09d      	beq.n	800ba88 <_printf_i+0x15c>
 800bb4c:	3501      	adds	r5, #1
 800bb4e:	68e3      	ldr	r3, [r4, #12]
 800bb50:	9903      	ldr	r1, [sp, #12]
 800bb52:	1a5b      	subs	r3, r3, r1
 800bb54:	42ab      	cmp	r3, r5
 800bb56:	dcf2      	bgt.n	800bb3e <_printf_i+0x212>
 800bb58:	e7eb      	b.n	800bb32 <_printf_i+0x206>
 800bb5a:	2500      	movs	r5, #0
 800bb5c:	f104 0619 	add.w	r6, r4, #25
 800bb60:	e7f5      	b.n	800bb4e <_printf_i+0x222>
 800bb62:	bf00      	nop
 800bb64:	0800eae2 	.word	0x0800eae2
 800bb68:	0800eaf3 	.word	0x0800eaf3

0800bb6c <std>:
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	b510      	push	{r4, lr}
 800bb70:	4604      	mov	r4, r0
 800bb72:	e9c0 3300 	strd	r3, r3, [r0]
 800bb76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb7a:	6083      	str	r3, [r0, #8]
 800bb7c:	8181      	strh	r1, [r0, #12]
 800bb7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb80:	81c2      	strh	r2, [r0, #14]
 800bb82:	6183      	str	r3, [r0, #24]
 800bb84:	4619      	mov	r1, r3
 800bb86:	2208      	movs	r2, #8
 800bb88:	305c      	adds	r0, #92	@ 0x5c
 800bb8a:	f000 f914 	bl	800bdb6 <memset>
 800bb8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc4 <std+0x58>)
 800bb90:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb92:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc8 <std+0x5c>)
 800bb94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb96:	4b0d      	ldr	r3, [pc, #52]	@ (800bbcc <std+0x60>)
 800bb98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd0 <std+0x64>)
 800bb9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbd4 <std+0x68>)
 800bba0:	6224      	str	r4, [r4, #32]
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d006      	beq.n	800bbb4 <std+0x48>
 800bba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bbaa:	4294      	cmp	r4, r2
 800bbac:	d002      	beq.n	800bbb4 <std+0x48>
 800bbae:	33d0      	adds	r3, #208	@ 0xd0
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	d105      	bne.n	800bbc0 <std+0x54>
 800bbb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbbc:	f000 b9ce 	b.w	800bf5c <__retarget_lock_init_recursive>
 800bbc0:	bd10      	pop	{r4, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800bd31 	.word	0x0800bd31
 800bbc8:	0800bd53 	.word	0x0800bd53
 800bbcc:	0800bd8b 	.word	0x0800bd8b
 800bbd0:	0800bdaf 	.word	0x0800bdaf
 800bbd4:	2001aad0 	.word	0x2001aad0

0800bbd8 <stdio_exit_handler>:
 800bbd8:	4a02      	ldr	r2, [pc, #8]	@ (800bbe4 <stdio_exit_handler+0xc>)
 800bbda:	4903      	ldr	r1, [pc, #12]	@ (800bbe8 <stdio_exit_handler+0x10>)
 800bbdc:	4803      	ldr	r0, [pc, #12]	@ (800bbec <stdio_exit_handler+0x14>)
 800bbde:	f000 b869 	b.w	800bcb4 <_fwalk_sglue>
 800bbe2:	bf00      	nop
 800bbe4:	20000030 	.word	0x20000030
 800bbe8:	0800d8d5 	.word	0x0800d8d5
 800bbec:	20000040 	.word	0x20000040

0800bbf0 <cleanup_stdio>:
 800bbf0:	6841      	ldr	r1, [r0, #4]
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc24 <cleanup_stdio+0x34>)
 800bbf4:	4299      	cmp	r1, r3
 800bbf6:	b510      	push	{r4, lr}
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	d001      	beq.n	800bc00 <cleanup_stdio+0x10>
 800bbfc:	f001 fe6a 	bl	800d8d4 <_fflush_r>
 800bc00:	68a1      	ldr	r1, [r4, #8]
 800bc02:	4b09      	ldr	r3, [pc, #36]	@ (800bc28 <cleanup_stdio+0x38>)
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d002      	beq.n	800bc0e <cleanup_stdio+0x1e>
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f001 fe63 	bl	800d8d4 <_fflush_r>
 800bc0e:	68e1      	ldr	r1, [r4, #12]
 800bc10:	4b06      	ldr	r3, [pc, #24]	@ (800bc2c <cleanup_stdio+0x3c>)
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d004      	beq.n	800bc20 <cleanup_stdio+0x30>
 800bc16:	4620      	mov	r0, r4
 800bc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc1c:	f001 be5a 	b.w	800d8d4 <_fflush_r>
 800bc20:	bd10      	pop	{r4, pc}
 800bc22:	bf00      	nop
 800bc24:	2001aad0 	.word	0x2001aad0
 800bc28:	2001ab38 	.word	0x2001ab38
 800bc2c:	2001aba0 	.word	0x2001aba0

0800bc30 <global_stdio_init.part.0>:
 800bc30:	b510      	push	{r4, lr}
 800bc32:	4b0b      	ldr	r3, [pc, #44]	@ (800bc60 <global_stdio_init.part.0+0x30>)
 800bc34:	4c0b      	ldr	r4, [pc, #44]	@ (800bc64 <global_stdio_init.part.0+0x34>)
 800bc36:	4a0c      	ldr	r2, [pc, #48]	@ (800bc68 <global_stdio_init.part.0+0x38>)
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2104      	movs	r1, #4
 800bc40:	f7ff ff94 	bl	800bb6c <std>
 800bc44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc48:	2201      	movs	r2, #1
 800bc4a:	2109      	movs	r1, #9
 800bc4c:	f7ff ff8e 	bl	800bb6c <std>
 800bc50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc54:	2202      	movs	r2, #2
 800bc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc5a:	2112      	movs	r1, #18
 800bc5c:	f7ff bf86 	b.w	800bb6c <std>
 800bc60:	2001ac08 	.word	0x2001ac08
 800bc64:	2001aad0 	.word	0x2001aad0
 800bc68:	0800bbd9 	.word	0x0800bbd9

0800bc6c <__sfp_lock_acquire>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	@ (800bc74 <__sfp_lock_acquire+0x8>)
 800bc6e:	f000 b976 	b.w	800bf5e <__retarget_lock_acquire_recursive>
 800bc72:	bf00      	nop
 800bc74:	2001ac11 	.word	0x2001ac11

0800bc78 <__sfp_lock_release>:
 800bc78:	4801      	ldr	r0, [pc, #4]	@ (800bc80 <__sfp_lock_release+0x8>)
 800bc7a:	f000 b971 	b.w	800bf60 <__retarget_lock_release_recursive>
 800bc7e:	bf00      	nop
 800bc80:	2001ac11 	.word	0x2001ac11

0800bc84 <__sinit>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	4604      	mov	r4, r0
 800bc88:	f7ff fff0 	bl	800bc6c <__sfp_lock_acquire>
 800bc8c:	6a23      	ldr	r3, [r4, #32]
 800bc8e:	b11b      	cbz	r3, 800bc98 <__sinit+0x14>
 800bc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc94:	f7ff bff0 	b.w	800bc78 <__sfp_lock_release>
 800bc98:	4b04      	ldr	r3, [pc, #16]	@ (800bcac <__sinit+0x28>)
 800bc9a:	6223      	str	r3, [r4, #32]
 800bc9c:	4b04      	ldr	r3, [pc, #16]	@ (800bcb0 <__sinit+0x2c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1f5      	bne.n	800bc90 <__sinit+0xc>
 800bca4:	f7ff ffc4 	bl	800bc30 <global_stdio_init.part.0>
 800bca8:	e7f2      	b.n	800bc90 <__sinit+0xc>
 800bcaa:	bf00      	nop
 800bcac:	0800bbf1 	.word	0x0800bbf1
 800bcb0:	2001ac08 	.word	0x2001ac08

0800bcb4 <_fwalk_sglue>:
 800bcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4607      	mov	r7, r0
 800bcba:	4688      	mov	r8, r1
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcc4:	f1b9 0901 	subs.w	r9, r9, #1
 800bcc8:	d505      	bpl.n	800bcd6 <_fwalk_sglue+0x22>
 800bcca:	6824      	ldr	r4, [r4, #0]
 800bccc:	2c00      	cmp	r4, #0
 800bcce:	d1f7      	bne.n	800bcc0 <_fwalk_sglue+0xc>
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d907      	bls.n	800bcec <_fwalk_sglue+0x38>
 800bcdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bce0:	3301      	adds	r3, #1
 800bce2:	d003      	beq.n	800bcec <_fwalk_sglue+0x38>
 800bce4:	4629      	mov	r1, r5
 800bce6:	4638      	mov	r0, r7
 800bce8:	47c0      	blx	r8
 800bcea:	4306      	orrs	r6, r0
 800bcec:	3568      	adds	r5, #104	@ 0x68
 800bcee:	e7e9      	b.n	800bcc4 <_fwalk_sglue+0x10>

0800bcf0 <siprintf>:
 800bcf0:	b40e      	push	{r1, r2, r3}
 800bcf2:	b500      	push	{lr}
 800bcf4:	b09c      	sub	sp, #112	@ 0x70
 800bcf6:	ab1d      	add	r3, sp, #116	@ 0x74
 800bcf8:	9002      	str	r0, [sp, #8]
 800bcfa:	9006      	str	r0, [sp, #24]
 800bcfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bd00:	4809      	ldr	r0, [pc, #36]	@ (800bd28 <siprintf+0x38>)
 800bd02:	9107      	str	r1, [sp, #28]
 800bd04:	9104      	str	r1, [sp, #16]
 800bd06:	4909      	ldr	r1, [pc, #36]	@ (800bd2c <siprintf+0x3c>)
 800bd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0c:	9105      	str	r1, [sp, #20]
 800bd0e:	6800      	ldr	r0, [r0, #0]
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	a902      	add	r1, sp, #8
 800bd14:	f001 fc5e 	bl	800d5d4 <_svfiprintf_r>
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	701a      	strb	r2, [r3, #0]
 800bd1e:	b01c      	add	sp, #112	@ 0x70
 800bd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd24:	b003      	add	sp, #12
 800bd26:	4770      	bx	lr
 800bd28:	2000003c 	.word	0x2000003c
 800bd2c:	ffff0208 	.word	0xffff0208

0800bd30 <__sread>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	460c      	mov	r4, r1
 800bd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd38:	f000 f8c2 	bl	800bec0 <_read_r>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	bfab      	itete	ge
 800bd40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd42:	89a3      	ldrhlt	r3, [r4, #12]
 800bd44:	181b      	addge	r3, r3, r0
 800bd46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd4a:	bfac      	ite	ge
 800bd4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd4e:	81a3      	strhlt	r3, [r4, #12]
 800bd50:	bd10      	pop	{r4, pc}

0800bd52 <__swrite>:
 800bd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd56:	461f      	mov	r7, r3
 800bd58:	898b      	ldrh	r3, [r1, #12]
 800bd5a:	05db      	lsls	r3, r3, #23
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460c      	mov	r4, r1
 800bd60:	4616      	mov	r6, r2
 800bd62:	d505      	bpl.n	800bd70 <__swrite+0x1e>
 800bd64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd68:	2302      	movs	r3, #2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f000 f896 	bl	800be9c <_lseek_r>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	463b      	mov	r3, r7
 800bd80:	4628      	mov	r0, r5
 800bd82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	f000 b8ad 	b.w	800bee4 <_write_r>

0800bd8a <__sseek>:
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd92:	f000 f883 	bl	800be9c <_lseek_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	bf15      	itete	ne
 800bd9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bda2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bda6:	81a3      	strheq	r3, [r4, #12]
 800bda8:	bf18      	it	ne
 800bdaa:	81a3      	strhne	r3, [r4, #12]
 800bdac:	bd10      	pop	{r4, pc}

0800bdae <__sclose>:
 800bdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb2:	f000 b80d 	b.w	800bdd0 <_close_r>

0800bdb6 <memset>:
 800bdb6:	4402      	add	r2, r0
 800bdb8:	4603      	mov	r3, r0
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d100      	bne.n	800bdc0 <memset+0xa>
 800bdbe:	4770      	bx	lr
 800bdc0:	f803 1b01 	strb.w	r1, [r3], #1
 800bdc4:	e7f9      	b.n	800bdba <memset+0x4>
	...

0800bdc8 <_localeconv_r>:
 800bdc8:	4800      	ldr	r0, [pc, #0]	@ (800bdcc <_localeconv_r+0x4>)
 800bdca:	4770      	bx	lr
 800bdcc:	2000017c 	.word	0x2000017c

0800bdd0 <_close_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d06      	ldr	r5, [pc, #24]	@ (800bdec <_close_r+0x1c>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f7 f84a 	bl	8002e74 <_close>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_close_r+0x1a>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_close_r+0x1a>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	2001ac0c 	.word	0x2001ac0c

0800bdf0 <_reclaim_reent>:
 800bdf0:	4b29      	ldr	r3, [pc, #164]	@ (800be98 <_reclaim_reent+0xa8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4283      	cmp	r3, r0
 800bdf6:	b570      	push	{r4, r5, r6, lr}
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	d04b      	beq.n	800be94 <_reclaim_reent+0xa4>
 800bdfc:	69c3      	ldr	r3, [r0, #28]
 800bdfe:	b1ab      	cbz	r3, 800be2c <_reclaim_reent+0x3c>
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	b16b      	cbz	r3, 800be20 <_reclaim_reent+0x30>
 800be04:	2500      	movs	r5, #0
 800be06:	69e3      	ldr	r3, [r4, #28]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	5959      	ldr	r1, [r3, r5]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	d13b      	bne.n	800be88 <_reclaim_reent+0x98>
 800be10:	3504      	adds	r5, #4
 800be12:	2d80      	cmp	r5, #128	@ 0x80
 800be14:	d1f7      	bne.n	800be06 <_reclaim_reent+0x16>
 800be16:	69e3      	ldr	r3, [r4, #28]
 800be18:	4620      	mov	r0, r4
 800be1a:	68d9      	ldr	r1, [r3, #12]
 800be1c:	f000 fefc 	bl	800cc18 <_free_r>
 800be20:	69e3      	ldr	r3, [r4, #28]
 800be22:	6819      	ldr	r1, [r3, #0]
 800be24:	b111      	cbz	r1, 800be2c <_reclaim_reent+0x3c>
 800be26:	4620      	mov	r0, r4
 800be28:	f000 fef6 	bl	800cc18 <_free_r>
 800be2c:	6961      	ldr	r1, [r4, #20]
 800be2e:	b111      	cbz	r1, 800be36 <_reclaim_reent+0x46>
 800be30:	4620      	mov	r0, r4
 800be32:	f000 fef1 	bl	800cc18 <_free_r>
 800be36:	69e1      	ldr	r1, [r4, #28]
 800be38:	b111      	cbz	r1, 800be40 <_reclaim_reent+0x50>
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 feec 	bl	800cc18 <_free_r>
 800be40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800be42:	b111      	cbz	r1, 800be4a <_reclaim_reent+0x5a>
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fee7 	bl	800cc18 <_free_r>
 800be4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be4c:	b111      	cbz	r1, 800be54 <_reclaim_reent+0x64>
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 fee2 	bl	800cc18 <_free_r>
 800be54:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800be56:	b111      	cbz	r1, 800be5e <_reclaim_reent+0x6e>
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 fedd 	bl	800cc18 <_free_r>
 800be5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800be60:	b111      	cbz	r1, 800be68 <_reclaim_reent+0x78>
 800be62:	4620      	mov	r0, r4
 800be64:	f000 fed8 	bl	800cc18 <_free_r>
 800be68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800be6a:	b111      	cbz	r1, 800be72 <_reclaim_reent+0x82>
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 fed3 	bl	800cc18 <_free_r>
 800be72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800be74:	b111      	cbz	r1, 800be7c <_reclaim_reent+0x8c>
 800be76:	4620      	mov	r0, r4
 800be78:	f000 fece 	bl	800cc18 <_free_r>
 800be7c:	6a23      	ldr	r3, [r4, #32]
 800be7e:	b14b      	cbz	r3, 800be94 <_reclaim_reent+0xa4>
 800be80:	4620      	mov	r0, r4
 800be82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be86:	4718      	bx	r3
 800be88:	680e      	ldr	r6, [r1, #0]
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 fec4 	bl	800cc18 <_free_r>
 800be90:	4631      	mov	r1, r6
 800be92:	e7bb      	b.n	800be0c <_reclaim_reent+0x1c>
 800be94:	bd70      	pop	{r4, r5, r6, pc}
 800be96:	bf00      	nop
 800be98:	2000003c 	.word	0x2000003c

0800be9c <_lseek_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d07      	ldr	r5, [pc, #28]	@ (800bebc <_lseek_r+0x20>)
 800bea0:	4604      	mov	r4, r0
 800bea2:	4608      	mov	r0, r1
 800bea4:	4611      	mov	r1, r2
 800bea6:	2200      	movs	r2, #0
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	f7f7 f809 	bl	8002ec2 <_lseek>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d102      	bne.n	800beba <_lseek_r+0x1e>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	b103      	cbz	r3, 800beba <_lseek_r+0x1e>
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	bd38      	pop	{r3, r4, r5, pc}
 800bebc:	2001ac0c 	.word	0x2001ac0c

0800bec0 <_read_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	@ (800bee0 <_read_r+0x20>)
 800bec4:	4604      	mov	r4, r0
 800bec6:	4608      	mov	r0, r1
 800bec8:	4611      	mov	r1, r2
 800beca:	2200      	movs	r2, #0
 800becc:	602a      	str	r2, [r5, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	f7f6 ff97 	bl	8002e02 <_read>
 800bed4:	1c43      	adds	r3, r0, #1
 800bed6:	d102      	bne.n	800bede <_read_r+0x1e>
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	b103      	cbz	r3, 800bede <_read_r+0x1e>
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	bd38      	pop	{r3, r4, r5, pc}
 800bee0:	2001ac0c 	.word	0x2001ac0c

0800bee4 <_write_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d07      	ldr	r5, [pc, #28]	@ (800bf04 <_write_r+0x20>)
 800bee8:	4604      	mov	r4, r0
 800beea:	4608      	mov	r0, r1
 800beec:	4611      	mov	r1, r2
 800beee:	2200      	movs	r2, #0
 800bef0:	602a      	str	r2, [r5, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	f7f6 ffa2 	bl	8002e3c <_write>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_write_r+0x1e>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_write_r+0x1e>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	2001ac0c 	.word	0x2001ac0c

0800bf08 <__errno>:
 800bf08:	4b01      	ldr	r3, [pc, #4]	@ (800bf10 <__errno+0x8>)
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	2000003c 	.word	0x2000003c

0800bf14 <__libc_init_array>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	4d0d      	ldr	r5, [pc, #52]	@ (800bf4c <__libc_init_array+0x38>)
 800bf18:	4c0d      	ldr	r4, [pc, #52]	@ (800bf50 <__libc_init_array+0x3c>)
 800bf1a:	1b64      	subs	r4, r4, r5
 800bf1c:	10a4      	asrs	r4, r4, #2
 800bf1e:	2600      	movs	r6, #0
 800bf20:	42a6      	cmp	r6, r4
 800bf22:	d109      	bne.n	800bf38 <__libc_init_array+0x24>
 800bf24:	4d0b      	ldr	r5, [pc, #44]	@ (800bf54 <__libc_init_array+0x40>)
 800bf26:	4c0c      	ldr	r4, [pc, #48]	@ (800bf58 <__libc_init_array+0x44>)
 800bf28:	f002 f9e2 	bl	800e2f0 <_init>
 800bf2c:	1b64      	subs	r4, r4, r5
 800bf2e:	10a4      	asrs	r4, r4, #2
 800bf30:	2600      	movs	r6, #0
 800bf32:	42a6      	cmp	r6, r4
 800bf34:	d105      	bne.n	800bf42 <__libc_init_array+0x2e>
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3c:	4798      	blx	r3
 800bf3e:	3601      	adds	r6, #1
 800bf40:	e7ee      	b.n	800bf20 <__libc_init_array+0xc>
 800bf42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf46:	4798      	blx	r3
 800bf48:	3601      	adds	r6, #1
 800bf4a:	e7f2      	b.n	800bf32 <__libc_init_array+0x1e>
 800bf4c:	0800ee80 	.word	0x0800ee80
 800bf50:	0800ee80 	.word	0x0800ee80
 800bf54:	0800ee80 	.word	0x0800ee80
 800bf58:	0800ee84 	.word	0x0800ee84

0800bf5c <__retarget_lock_init_recursive>:
 800bf5c:	4770      	bx	lr

0800bf5e <__retarget_lock_acquire_recursive>:
 800bf5e:	4770      	bx	lr

0800bf60 <__retarget_lock_release_recursive>:
 800bf60:	4770      	bx	lr

0800bf62 <memcpy>:
 800bf62:	440a      	add	r2, r1
 800bf64:	4291      	cmp	r1, r2
 800bf66:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf6a:	d100      	bne.n	800bf6e <memcpy+0xc>
 800bf6c:	4770      	bx	lr
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf78:	4291      	cmp	r1, r2
 800bf7a:	d1f9      	bne.n	800bf70 <memcpy+0xe>
 800bf7c:	bd10      	pop	{r4, pc}

0800bf7e <quorem>:
 800bf7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf82:	6903      	ldr	r3, [r0, #16]
 800bf84:	690c      	ldr	r4, [r1, #16]
 800bf86:	42a3      	cmp	r3, r4
 800bf88:	4607      	mov	r7, r0
 800bf8a:	db7e      	blt.n	800c08a <quorem+0x10c>
 800bf8c:	3c01      	subs	r4, #1
 800bf8e:	f101 0814 	add.w	r8, r1, #20
 800bf92:	00a3      	lsls	r3, r4, #2
 800bf94:	f100 0514 	add.w	r5, r0, #20
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfb4:	d32e      	bcc.n	800c014 <quorem+0x96>
 800bfb6:	f04f 0a00 	mov.w	sl, #0
 800bfba:	46c4      	mov	ip, r8
 800bfbc:	46ae      	mov	lr, r5
 800bfbe:	46d3      	mov	fp, sl
 800bfc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfc4:	b298      	uxth	r0, r3
 800bfc6:	fb06 a000 	mla	r0, r6, r0, sl
 800bfca:	0c02      	lsrs	r2, r0, #16
 800bfcc:	0c1b      	lsrs	r3, r3, #16
 800bfce:	fb06 2303 	mla	r3, r6, r3, r2
 800bfd2:	f8de 2000 	ldr.w	r2, [lr]
 800bfd6:	b280      	uxth	r0, r0
 800bfd8:	b292      	uxth	r2, r2
 800bfda:	1a12      	subs	r2, r2, r0
 800bfdc:	445a      	add	r2, fp
 800bfde:	f8de 0000 	ldr.w	r0, [lr]
 800bfe2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bff0:	b292      	uxth	r2, r2
 800bff2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bff6:	45e1      	cmp	r9, ip
 800bff8:	f84e 2b04 	str.w	r2, [lr], #4
 800bffc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c000:	d2de      	bcs.n	800bfc0 <quorem+0x42>
 800c002:	9b00      	ldr	r3, [sp, #0]
 800c004:	58eb      	ldr	r3, [r5, r3]
 800c006:	b92b      	cbnz	r3, 800c014 <quorem+0x96>
 800c008:	9b01      	ldr	r3, [sp, #4]
 800c00a:	3b04      	subs	r3, #4
 800c00c:	429d      	cmp	r5, r3
 800c00e:	461a      	mov	r2, r3
 800c010:	d32f      	bcc.n	800c072 <quorem+0xf4>
 800c012:	613c      	str	r4, [r7, #16]
 800c014:	4638      	mov	r0, r7
 800c016:	f001 f979 	bl	800d30c <__mcmp>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	db25      	blt.n	800c06a <quorem+0xec>
 800c01e:	4629      	mov	r1, r5
 800c020:	2000      	movs	r0, #0
 800c022:	f858 2b04 	ldr.w	r2, [r8], #4
 800c026:	f8d1 c000 	ldr.w	ip, [r1]
 800c02a:	fa1f fe82 	uxth.w	lr, r2
 800c02e:	fa1f f38c 	uxth.w	r3, ip
 800c032:	eba3 030e 	sub.w	r3, r3, lr
 800c036:	4403      	add	r3, r0
 800c038:	0c12      	lsrs	r2, r2, #16
 800c03a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c03e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c042:	b29b      	uxth	r3, r3
 800c044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c048:	45c1      	cmp	r9, r8
 800c04a:	f841 3b04 	str.w	r3, [r1], #4
 800c04e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c052:	d2e6      	bcs.n	800c022 <quorem+0xa4>
 800c054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c05c:	b922      	cbnz	r2, 800c068 <quorem+0xea>
 800c05e:	3b04      	subs	r3, #4
 800c060:	429d      	cmp	r5, r3
 800c062:	461a      	mov	r2, r3
 800c064:	d30b      	bcc.n	800c07e <quorem+0x100>
 800c066:	613c      	str	r4, [r7, #16]
 800c068:	3601      	adds	r6, #1
 800c06a:	4630      	mov	r0, r6
 800c06c:	b003      	add	sp, #12
 800c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c072:	6812      	ldr	r2, [r2, #0]
 800c074:	3b04      	subs	r3, #4
 800c076:	2a00      	cmp	r2, #0
 800c078:	d1cb      	bne.n	800c012 <quorem+0x94>
 800c07a:	3c01      	subs	r4, #1
 800c07c:	e7c6      	b.n	800c00c <quorem+0x8e>
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	3b04      	subs	r3, #4
 800c082:	2a00      	cmp	r2, #0
 800c084:	d1ef      	bne.n	800c066 <quorem+0xe8>
 800c086:	3c01      	subs	r4, #1
 800c088:	e7ea      	b.n	800c060 <quorem+0xe2>
 800c08a:	2000      	movs	r0, #0
 800c08c:	e7ee      	b.n	800c06c <quorem+0xee>
	...

0800c090 <_dtoa_r>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	69c7      	ldr	r7, [r0, #28]
 800c096:	b099      	sub	sp, #100	@ 0x64
 800c098:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c09c:	ec55 4b10 	vmov	r4, r5, d0
 800c0a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c0a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0a4:	4683      	mov	fp, r0
 800c0a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0aa:	b97f      	cbnz	r7, 800c0cc <_dtoa_r+0x3c>
 800c0ac:	2010      	movs	r0, #16
 800c0ae:	f000 fdfd 	bl	800ccac <malloc>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c0b8:	b920      	cbnz	r0, 800c0c4 <_dtoa_r+0x34>
 800c0ba:	4ba7      	ldr	r3, [pc, #668]	@ (800c358 <_dtoa_r+0x2c8>)
 800c0bc:	21ef      	movs	r1, #239	@ 0xef
 800c0be:	48a7      	ldr	r0, [pc, #668]	@ (800c35c <_dtoa_r+0x2cc>)
 800c0c0:	f001 fc5a 	bl	800d978 <__assert_func>
 800c0c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0c8:	6007      	str	r7, [r0, #0]
 800c0ca:	60c7      	str	r7, [r0, #12]
 800c0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0d0:	6819      	ldr	r1, [r3, #0]
 800c0d2:	b159      	cbz	r1, 800c0ec <_dtoa_r+0x5c>
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	604a      	str	r2, [r1, #4]
 800c0d8:	2301      	movs	r3, #1
 800c0da:	4093      	lsls	r3, r2
 800c0dc:	608b      	str	r3, [r1, #8]
 800c0de:	4658      	mov	r0, fp
 800c0e0:	f000 feda 	bl	800ce98 <_Bfree>
 800c0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	1e2b      	subs	r3, r5, #0
 800c0ee:	bfb9      	ittee	lt
 800c0f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0f4:	9303      	strlt	r3, [sp, #12]
 800c0f6:	2300      	movge	r3, #0
 800c0f8:	6033      	strge	r3, [r6, #0]
 800c0fa:	9f03      	ldr	r7, [sp, #12]
 800c0fc:	4b98      	ldr	r3, [pc, #608]	@ (800c360 <_dtoa_r+0x2d0>)
 800c0fe:	bfbc      	itt	lt
 800c100:	2201      	movlt	r2, #1
 800c102:	6032      	strlt	r2, [r6, #0]
 800c104:	43bb      	bics	r3, r7
 800c106:	d112      	bne.n	800c12e <_dtoa_r+0x9e>
 800c108:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c10a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c114:	4323      	orrs	r3, r4
 800c116:	f000 854d 	beq.w	800cbb4 <_dtoa_r+0xb24>
 800c11a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c11c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c374 <_dtoa_r+0x2e4>
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 854f 	beq.w	800cbc4 <_dtoa_r+0xb34>
 800c126:	f10a 0303 	add.w	r3, sl, #3
 800c12a:	f000 bd49 	b.w	800cbc0 <_dtoa_r+0xb30>
 800c12e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c132:	2200      	movs	r2, #0
 800c134:	ec51 0b17 	vmov	r0, r1, d7
 800c138:	2300      	movs	r3, #0
 800c13a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c13e:	f7f4 fce3 	bl	8000b08 <__aeabi_dcmpeq>
 800c142:	4680      	mov	r8, r0
 800c144:	b158      	cbz	r0, 800c15e <_dtoa_r+0xce>
 800c146:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c148:	2301      	movs	r3, #1
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c14e:	b113      	cbz	r3, 800c156 <_dtoa_r+0xc6>
 800c150:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c152:	4b84      	ldr	r3, [pc, #528]	@ (800c364 <_dtoa_r+0x2d4>)
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c378 <_dtoa_r+0x2e8>
 800c15a:	f000 bd33 	b.w	800cbc4 <_dtoa_r+0xb34>
 800c15e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c162:	aa16      	add	r2, sp, #88	@ 0x58
 800c164:	a917      	add	r1, sp, #92	@ 0x5c
 800c166:	4658      	mov	r0, fp
 800c168:	f001 f980 	bl	800d46c <__d2b>
 800c16c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c170:	4681      	mov	r9, r0
 800c172:	2e00      	cmp	r6, #0
 800c174:	d077      	beq.n	800c266 <_dtoa_r+0x1d6>
 800c176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c178:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c184:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c188:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c18c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c190:	4619      	mov	r1, r3
 800c192:	2200      	movs	r2, #0
 800c194:	4b74      	ldr	r3, [pc, #464]	@ (800c368 <_dtoa_r+0x2d8>)
 800c196:	f7f4 f897 	bl	80002c8 <__aeabi_dsub>
 800c19a:	a369      	add	r3, pc, #420	@ (adr r3, 800c340 <_dtoa_r+0x2b0>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 fa4a 	bl	8000638 <__aeabi_dmul>
 800c1a4:	a368      	add	r3, pc, #416	@ (adr r3, 800c348 <_dtoa_r+0x2b8>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 f88f 	bl	80002cc <__adddf3>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	f7f4 f9d6 	bl	8000564 <__aeabi_i2d>
 800c1b8:	a365      	add	r3, pc, #404	@ (adr r3, 800c350 <_dtoa_r+0x2c0>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 fa3b 	bl	8000638 <__aeabi_dmul>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7f4 f87f 	bl	80002cc <__adddf3>
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	f7f4 fce1 	bl	8000b98 <__aeabi_d2iz>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4607      	mov	r7, r0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800c1e4:	b140      	cbz	r0, 800c1f8 <_dtoa_r+0x168>
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f7f4 f9bc 	bl	8000564 <__aeabi_i2d>
 800c1ec:	4622      	mov	r2, r4
 800c1ee:	462b      	mov	r3, r5
 800c1f0:	f7f4 fc8a 	bl	8000b08 <__aeabi_dcmpeq>
 800c1f4:	b900      	cbnz	r0, 800c1f8 <_dtoa_r+0x168>
 800c1f6:	3f01      	subs	r7, #1
 800c1f8:	2f16      	cmp	r7, #22
 800c1fa:	d851      	bhi.n	800c2a0 <_dtoa_r+0x210>
 800c1fc:	4b5b      	ldr	r3, [pc, #364]	@ (800c36c <_dtoa_r+0x2dc>)
 800c1fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c20a:	f7f4 fc87 	bl	8000b1c <__aeabi_dcmplt>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d048      	beq.n	800c2a4 <_dtoa_r+0x214>
 800c212:	3f01      	subs	r7, #1
 800c214:	2300      	movs	r3, #0
 800c216:	9312      	str	r3, [sp, #72]	@ 0x48
 800c218:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c21a:	1b9b      	subs	r3, r3, r6
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	bf44      	itt	mi
 800c220:	f1c3 0801 	rsbmi	r8, r3, #1
 800c224:	2300      	movmi	r3, #0
 800c226:	9208      	str	r2, [sp, #32]
 800c228:	bf54      	ite	pl
 800c22a:	f04f 0800 	movpl.w	r8, #0
 800c22e:	9308      	strmi	r3, [sp, #32]
 800c230:	2f00      	cmp	r7, #0
 800c232:	db39      	blt.n	800c2a8 <_dtoa_r+0x218>
 800c234:	9b08      	ldr	r3, [sp, #32]
 800c236:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c238:	443b      	add	r3, r7
 800c23a:	9308      	str	r3, [sp, #32]
 800c23c:	2300      	movs	r3, #0
 800c23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c242:	2b09      	cmp	r3, #9
 800c244:	d864      	bhi.n	800c310 <_dtoa_r+0x280>
 800c246:	2b05      	cmp	r3, #5
 800c248:	bfc4      	itt	gt
 800c24a:	3b04      	subgt	r3, #4
 800c24c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c250:	f1a3 0302 	sub.w	r3, r3, #2
 800c254:	bfcc      	ite	gt
 800c256:	2400      	movgt	r4, #0
 800c258:	2401      	movle	r4, #1
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d863      	bhi.n	800c326 <_dtoa_r+0x296>
 800c25e:	e8df f003 	tbb	[pc, r3]
 800c262:	372a      	.short	0x372a
 800c264:	5535      	.short	0x5535
 800c266:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c26a:	441e      	add	r6, r3
 800c26c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c270:	2b20      	cmp	r3, #32
 800c272:	bfc1      	itttt	gt
 800c274:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c278:	409f      	lslgt	r7, r3
 800c27a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c27e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c282:	bfd6      	itet	le
 800c284:	f1c3 0320 	rsble	r3, r3, #32
 800c288:	ea47 0003 	orrgt.w	r0, r7, r3
 800c28c:	fa04 f003 	lslle.w	r0, r4, r3
 800c290:	f7f4 f958 	bl	8000544 <__aeabi_ui2d>
 800c294:	2201      	movs	r2, #1
 800c296:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c29a:	3e01      	subs	r6, #1
 800c29c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c29e:	e777      	b.n	800c190 <_dtoa_r+0x100>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e7b8      	b.n	800c216 <_dtoa_r+0x186>
 800c2a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c2a6:	e7b7      	b.n	800c218 <_dtoa_r+0x188>
 800c2a8:	427b      	negs	r3, r7
 800c2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	eba8 0807 	sub.w	r8, r8, r7
 800c2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2b4:	e7c4      	b.n	800c240 <_dtoa_r+0x1b0>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc35      	bgt.n	800c32c <_dtoa_r+0x29c>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	9307      	str	r3, [sp, #28]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2ca:	e00b      	b.n	800c2e4 <_dtoa_r+0x254>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e7f3      	b.n	800c2b8 <_dtoa_r+0x228>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2d6:	18fb      	adds	r3, r7, r3
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	bfb8      	it	lt
 800c2e2:	2301      	movlt	r3, #1
 800c2e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	2204      	movs	r2, #4
 800c2ec:	f102 0514 	add.w	r5, r2, #20
 800c2f0:	429d      	cmp	r5, r3
 800c2f2:	d91f      	bls.n	800c334 <_dtoa_r+0x2a4>
 800c2f4:	6041      	str	r1, [r0, #4]
 800c2f6:	4658      	mov	r0, fp
 800c2f8:	f000 fd8e 	bl	800ce18 <_Balloc>
 800c2fc:	4682      	mov	sl, r0
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d13c      	bne.n	800c37c <_dtoa_r+0x2ec>
 800c302:	4b1b      	ldr	r3, [pc, #108]	@ (800c370 <_dtoa_r+0x2e0>)
 800c304:	4602      	mov	r2, r0
 800c306:	f240 11af 	movw	r1, #431	@ 0x1af
 800c30a:	e6d8      	b.n	800c0be <_dtoa_r+0x2e>
 800c30c:	2301      	movs	r3, #1
 800c30e:	e7e0      	b.n	800c2d2 <_dtoa_r+0x242>
 800c310:	2401      	movs	r4, #1
 800c312:	2300      	movs	r3, #0
 800c314:	9309      	str	r3, [sp, #36]	@ 0x24
 800c316:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	9307      	str	r3, [sp, #28]
 800c320:	2200      	movs	r2, #0
 800c322:	2312      	movs	r3, #18
 800c324:	e7d0      	b.n	800c2c8 <_dtoa_r+0x238>
 800c326:	2301      	movs	r3, #1
 800c328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c32a:	e7f5      	b.n	800c318 <_dtoa_r+0x288>
 800c32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	9307      	str	r3, [sp, #28]
 800c332:	e7d7      	b.n	800c2e4 <_dtoa_r+0x254>
 800c334:	3101      	adds	r1, #1
 800c336:	0052      	lsls	r2, r2, #1
 800c338:	e7d8      	b.n	800c2ec <_dtoa_r+0x25c>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	636f4361 	.word	0x636f4361
 800c344:	3fd287a7 	.word	0x3fd287a7
 800c348:	8b60c8b3 	.word	0x8b60c8b3
 800c34c:	3fc68a28 	.word	0x3fc68a28
 800c350:	509f79fb 	.word	0x509f79fb
 800c354:	3fd34413 	.word	0x3fd34413
 800c358:	0800eb11 	.word	0x0800eb11
 800c35c:	0800eb28 	.word	0x0800eb28
 800c360:	7ff00000 	.word	0x7ff00000
 800c364:	0800eae1 	.word	0x0800eae1
 800c368:	3ff80000 	.word	0x3ff80000
 800c36c:	0800ec20 	.word	0x0800ec20
 800c370:	0800eb80 	.word	0x0800eb80
 800c374:	0800eb0d 	.word	0x0800eb0d
 800c378:	0800eae0 	.word	0x0800eae0
 800c37c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c380:	6018      	str	r0, [r3, #0]
 800c382:	9b07      	ldr	r3, [sp, #28]
 800c384:	2b0e      	cmp	r3, #14
 800c386:	f200 80a4 	bhi.w	800c4d2 <_dtoa_r+0x442>
 800c38a:	2c00      	cmp	r4, #0
 800c38c:	f000 80a1 	beq.w	800c4d2 <_dtoa_r+0x442>
 800c390:	2f00      	cmp	r7, #0
 800c392:	dd33      	ble.n	800c3fc <_dtoa_r+0x36c>
 800c394:	4bad      	ldr	r3, [pc, #692]	@ (800c64c <_dtoa_r+0x5bc>)
 800c396:	f007 020f 	and.w	r2, r7, #15
 800c39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c39e:	ed93 7b00 	vldr	d7, [r3]
 800c3a2:	05f8      	lsls	r0, r7, #23
 800c3a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c3a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3ac:	d516      	bpl.n	800c3dc <_dtoa_r+0x34c>
 800c3ae:	4ba8      	ldr	r3, [pc, #672]	@ (800c650 <_dtoa_r+0x5c0>)
 800c3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3b8:	f7f4 fa68 	bl	800088c <__aeabi_ddiv>
 800c3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3c0:	f004 040f 	and.w	r4, r4, #15
 800c3c4:	2603      	movs	r6, #3
 800c3c6:	4da2      	ldr	r5, [pc, #648]	@ (800c650 <_dtoa_r+0x5c0>)
 800c3c8:	b954      	cbnz	r4, 800c3e0 <_dtoa_r+0x350>
 800c3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d2:	f7f4 fa5b 	bl	800088c <__aeabi_ddiv>
 800c3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3da:	e028      	b.n	800c42e <_dtoa_r+0x39e>
 800c3dc:	2602      	movs	r6, #2
 800c3de:	e7f2      	b.n	800c3c6 <_dtoa_r+0x336>
 800c3e0:	07e1      	lsls	r1, r4, #31
 800c3e2:	d508      	bpl.n	800c3f6 <_dtoa_r+0x366>
 800c3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3ec:	f7f4 f924 	bl	8000638 <__aeabi_dmul>
 800c3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3f4:	3601      	adds	r6, #1
 800c3f6:	1064      	asrs	r4, r4, #1
 800c3f8:	3508      	adds	r5, #8
 800c3fa:	e7e5      	b.n	800c3c8 <_dtoa_r+0x338>
 800c3fc:	f000 80d2 	beq.w	800c5a4 <_dtoa_r+0x514>
 800c400:	427c      	negs	r4, r7
 800c402:	4b92      	ldr	r3, [pc, #584]	@ (800c64c <_dtoa_r+0x5bc>)
 800c404:	4d92      	ldr	r5, [pc, #584]	@ (800c650 <_dtoa_r+0x5c0>)
 800c406:	f004 020f 	and.w	r2, r4, #15
 800c40a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c416:	f7f4 f90f 	bl	8000638 <__aeabi_dmul>
 800c41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c41e:	1124      	asrs	r4, r4, #4
 800c420:	2300      	movs	r3, #0
 800c422:	2602      	movs	r6, #2
 800c424:	2c00      	cmp	r4, #0
 800c426:	f040 80b2 	bne.w	800c58e <_dtoa_r+0x4fe>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1d3      	bne.n	800c3d6 <_dtoa_r+0x346>
 800c42e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c430:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80b7 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c43a:	4b86      	ldr	r3, [pc, #536]	@ (800c654 <_dtoa_r+0x5c4>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	4620      	mov	r0, r4
 800c440:	4629      	mov	r1, r5
 800c442:	f7f4 fb6b 	bl	8000b1c <__aeabi_dcmplt>
 800c446:	2800      	cmp	r0, #0
 800c448:	f000 80ae 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c44c:	9b07      	ldr	r3, [sp, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 80aa 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c454:	9b00      	ldr	r3, [sp, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	dd37      	ble.n	800c4ca <_dtoa_r+0x43a>
 800c45a:	1e7b      	subs	r3, r7, #1
 800c45c:	9304      	str	r3, [sp, #16]
 800c45e:	4620      	mov	r0, r4
 800c460:	4b7d      	ldr	r3, [pc, #500]	@ (800c658 <_dtoa_r+0x5c8>)
 800c462:	2200      	movs	r2, #0
 800c464:	4629      	mov	r1, r5
 800c466:	f7f4 f8e7 	bl	8000638 <__aeabi_dmul>
 800c46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c46e:	9c00      	ldr	r4, [sp, #0]
 800c470:	3601      	adds	r6, #1
 800c472:	4630      	mov	r0, r6
 800c474:	f7f4 f876 	bl	8000564 <__aeabi_i2d>
 800c478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c47c:	f7f4 f8dc 	bl	8000638 <__aeabi_dmul>
 800c480:	4b76      	ldr	r3, [pc, #472]	@ (800c65c <_dtoa_r+0x5cc>)
 800c482:	2200      	movs	r2, #0
 800c484:	f7f3 ff22 	bl	80002cc <__adddf3>
 800c488:	4605      	mov	r5, r0
 800c48a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c48e:	2c00      	cmp	r4, #0
 800c490:	f040 808d 	bne.w	800c5ae <_dtoa_r+0x51e>
 800c494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c498:	4b71      	ldr	r3, [pc, #452]	@ (800c660 <_dtoa_r+0x5d0>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	f7f3 ff14 	bl	80002c8 <__aeabi_dsub>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	4633      	mov	r3, r6
 800c4ac:	f7f4 fb54 	bl	8000b58 <__aeabi_dcmpgt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f040 828b 	bne.w	800c9cc <_dtoa_r+0x93c>
 800c4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4c0:	f7f4 fb2c 	bl	8000b1c <__aeabi_dcmplt>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f040 8128 	bne.w	800c71a <_dtoa_r+0x68a>
 800c4ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f2c0 815a 	blt.w	800c78e <_dtoa_r+0x6fe>
 800c4da:	2f0e      	cmp	r7, #14
 800c4dc:	f300 8157 	bgt.w	800c78e <_dtoa_r+0x6fe>
 800c4e0:	4b5a      	ldr	r3, [pc, #360]	@ (800c64c <_dtoa_r+0x5bc>)
 800c4e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4e6:	ed93 7b00 	vldr	d7, [r3]
 800c4ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	ed8d 7b00 	vstr	d7, [sp]
 800c4f2:	da03      	bge.n	800c4fc <_dtoa_r+0x46c>
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f340 8101 	ble.w	800c6fe <_dtoa_r+0x66e>
 800c4fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c500:	4656      	mov	r6, sl
 800c502:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 f9bf 	bl	800088c <__aeabi_ddiv>
 800c50e:	f7f4 fb43 	bl	8000b98 <__aeabi_d2iz>
 800c512:	4680      	mov	r8, r0
 800c514:	f7f4 f826 	bl	8000564 <__aeabi_i2d>
 800c518:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c51c:	f7f4 f88c 	bl	8000638 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c52c:	f7f3 fecc 	bl	80002c8 <__aeabi_dsub>
 800c530:	f806 4b01 	strb.w	r4, [r6], #1
 800c534:	9d07      	ldr	r5, [sp, #28]
 800c536:	eba6 040a 	sub.w	r4, r6, sl
 800c53a:	42a5      	cmp	r5, r4
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	f040 8117 	bne.w	800c772 <_dtoa_r+0x6e2>
 800c544:	f7f3 fec2 	bl	80002cc <__adddf3>
 800c548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c54c:	4604      	mov	r4, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	f7f4 fb02 	bl	8000b58 <__aeabi_dcmpgt>
 800c554:	2800      	cmp	r0, #0
 800c556:	f040 80f9 	bne.w	800c74c <_dtoa_r+0x6bc>
 800c55a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 fad1 	bl	8000b08 <__aeabi_dcmpeq>
 800c566:	b118      	cbz	r0, 800c570 <_dtoa_r+0x4e0>
 800c568:	f018 0f01 	tst.w	r8, #1
 800c56c:	f040 80ee 	bne.w	800c74c <_dtoa_r+0x6bc>
 800c570:	4649      	mov	r1, r9
 800c572:	4658      	mov	r0, fp
 800c574:	f000 fc90 	bl	800ce98 <_Bfree>
 800c578:	2300      	movs	r3, #0
 800c57a:	7033      	strb	r3, [r6, #0]
 800c57c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c57e:	3701      	adds	r7, #1
 800c580:	601f      	str	r7, [r3, #0]
 800c582:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 831d 	beq.w	800cbc4 <_dtoa_r+0xb34>
 800c58a:	601e      	str	r6, [r3, #0]
 800c58c:	e31a      	b.n	800cbc4 <_dtoa_r+0xb34>
 800c58e:	07e2      	lsls	r2, r4, #31
 800c590:	d505      	bpl.n	800c59e <_dtoa_r+0x50e>
 800c592:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c596:	f7f4 f84f 	bl	8000638 <__aeabi_dmul>
 800c59a:	3601      	adds	r6, #1
 800c59c:	2301      	movs	r3, #1
 800c59e:	1064      	asrs	r4, r4, #1
 800c5a0:	3508      	adds	r5, #8
 800c5a2:	e73f      	b.n	800c424 <_dtoa_r+0x394>
 800c5a4:	2602      	movs	r6, #2
 800c5a6:	e742      	b.n	800c42e <_dtoa_r+0x39e>
 800c5a8:	9c07      	ldr	r4, [sp, #28]
 800c5aa:	9704      	str	r7, [sp, #16]
 800c5ac:	e761      	b.n	800c472 <_dtoa_r+0x3e2>
 800c5ae:	4b27      	ldr	r3, [pc, #156]	@ (800c64c <_dtoa_r+0x5bc>)
 800c5b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5ba:	4454      	add	r4, sl
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	d053      	beq.n	800c668 <_dtoa_r+0x5d8>
 800c5c0:	4928      	ldr	r1, [pc, #160]	@ (800c664 <_dtoa_r+0x5d4>)
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	f7f4 f962 	bl	800088c <__aeabi_ddiv>
 800c5c8:	4633      	mov	r3, r6
 800c5ca:	462a      	mov	r2, r5
 800c5cc:	f7f3 fe7c 	bl	80002c8 <__aeabi_dsub>
 800c5d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5d4:	4656      	mov	r6, sl
 800c5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5da:	f7f4 fadd 	bl	8000b98 <__aeabi_d2iz>
 800c5de:	4605      	mov	r5, r0
 800c5e0:	f7f3 ffc0 	bl	8000564 <__aeabi_i2d>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ec:	f7f3 fe6c 	bl	80002c8 <__aeabi_dsub>
 800c5f0:	3530      	adds	r5, #48	@ 0x30
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5fa:	f806 5b01 	strb.w	r5, [r6], #1
 800c5fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c602:	f7f4 fa8b 	bl	8000b1c <__aeabi_dcmplt>
 800c606:	2800      	cmp	r0, #0
 800c608:	d171      	bne.n	800c6ee <_dtoa_r+0x65e>
 800c60a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c60e:	4911      	ldr	r1, [pc, #68]	@ (800c654 <_dtoa_r+0x5c4>)
 800c610:	2000      	movs	r0, #0
 800c612:	f7f3 fe59 	bl	80002c8 <__aeabi_dsub>
 800c616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c61a:	f7f4 fa7f 	bl	8000b1c <__aeabi_dcmplt>
 800c61e:	2800      	cmp	r0, #0
 800c620:	f040 8095 	bne.w	800c74e <_dtoa_r+0x6be>
 800c624:	42a6      	cmp	r6, r4
 800c626:	f43f af50 	beq.w	800c4ca <_dtoa_r+0x43a>
 800c62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c62e:	4b0a      	ldr	r3, [pc, #40]	@ (800c658 <_dtoa_r+0x5c8>)
 800c630:	2200      	movs	r2, #0
 800c632:	f7f4 f801 	bl	8000638 <__aeabi_dmul>
 800c636:	4b08      	ldr	r3, [pc, #32]	@ (800c658 <_dtoa_r+0x5c8>)
 800c638:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c63c:	2200      	movs	r2, #0
 800c63e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c642:	f7f3 fff9 	bl	8000638 <__aeabi_dmul>
 800c646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c64a:	e7c4      	b.n	800c5d6 <_dtoa_r+0x546>
 800c64c:	0800ec20 	.word	0x0800ec20
 800c650:	0800ebf8 	.word	0x0800ebf8
 800c654:	3ff00000 	.word	0x3ff00000
 800c658:	40240000 	.word	0x40240000
 800c65c:	401c0000 	.word	0x401c0000
 800c660:	40140000 	.word	0x40140000
 800c664:	3fe00000 	.word	0x3fe00000
 800c668:	4631      	mov	r1, r6
 800c66a:	4628      	mov	r0, r5
 800c66c:	f7f3 ffe4 	bl	8000638 <__aeabi_dmul>
 800c670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c674:	9415      	str	r4, [sp, #84]	@ 0x54
 800c676:	4656      	mov	r6, sl
 800c678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c67c:	f7f4 fa8c 	bl	8000b98 <__aeabi_d2iz>
 800c680:	4605      	mov	r5, r0
 800c682:	f7f3 ff6f 	bl	8000564 <__aeabi_i2d>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c68e:	f7f3 fe1b 	bl	80002c8 <__aeabi_dsub>
 800c692:	3530      	adds	r5, #48	@ 0x30
 800c694:	f806 5b01 	strb.w	r5, [r6], #1
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	42a6      	cmp	r6, r4
 800c69e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6a2:	f04f 0200 	mov.w	r2, #0
 800c6a6:	d124      	bne.n	800c6f2 <_dtoa_r+0x662>
 800c6a8:	4bac      	ldr	r3, [pc, #688]	@ (800c95c <_dtoa_r+0x8cc>)
 800c6aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6ae:	f7f3 fe0d 	bl	80002cc <__adddf3>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ba:	f7f4 fa4d 	bl	8000b58 <__aeabi_dcmpgt>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d145      	bne.n	800c74e <_dtoa_r+0x6be>
 800c6c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6c6:	49a5      	ldr	r1, [pc, #660]	@ (800c95c <_dtoa_r+0x8cc>)
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	f7f3 fdfd 	bl	80002c8 <__aeabi_dsub>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6d6:	f7f4 fa21 	bl	8000b1c <__aeabi_dcmplt>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	f43f aef5 	beq.w	800c4ca <_dtoa_r+0x43a>
 800c6e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c6e2:	1e73      	subs	r3, r6, #1
 800c6e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6ea:	2b30      	cmp	r3, #48	@ 0x30
 800c6ec:	d0f8      	beq.n	800c6e0 <_dtoa_r+0x650>
 800c6ee:	9f04      	ldr	r7, [sp, #16]
 800c6f0:	e73e      	b.n	800c570 <_dtoa_r+0x4e0>
 800c6f2:	4b9b      	ldr	r3, [pc, #620]	@ (800c960 <_dtoa_r+0x8d0>)
 800c6f4:	f7f3 ffa0 	bl	8000638 <__aeabi_dmul>
 800c6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6fc:	e7bc      	b.n	800c678 <_dtoa_r+0x5e8>
 800c6fe:	d10c      	bne.n	800c71a <_dtoa_r+0x68a>
 800c700:	4b98      	ldr	r3, [pc, #608]	@ (800c964 <_dtoa_r+0x8d4>)
 800c702:	2200      	movs	r2, #0
 800c704:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c708:	f7f3 ff96 	bl	8000638 <__aeabi_dmul>
 800c70c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c710:	f7f4 fa18 	bl	8000b44 <__aeabi_dcmpge>
 800c714:	2800      	cmp	r0, #0
 800c716:	f000 8157 	beq.w	800c9c8 <_dtoa_r+0x938>
 800c71a:	2400      	movs	r4, #0
 800c71c:	4625      	mov	r5, r4
 800c71e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c720:	43db      	mvns	r3, r3
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	4656      	mov	r6, sl
 800c726:	2700      	movs	r7, #0
 800c728:	4621      	mov	r1, r4
 800c72a:	4658      	mov	r0, fp
 800c72c:	f000 fbb4 	bl	800ce98 <_Bfree>
 800c730:	2d00      	cmp	r5, #0
 800c732:	d0dc      	beq.n	800c6ee <_dtoa_r+0x65e>
 800c734:	b12f      	cbz	r7, 800c742 <_dtoa_r+0x6b2>
 800c736:	42af      	cmp	r7, r5
 800c738:	d003      	beq.n	800c742 <_dtoa_r+0x6b2>
 800c73a:	4639      	mov	r1, r7
 800c73c:	4658      	mov	r0, fp
 800c73e:	f000 fbab 	bl	800ce98 <_Bfree>
 800c742:	4629      	mov	r1, r5
 800c744:	4658      	mov	r0, fp
 800c746:	f000 fba7 	bl	800ce98 <_Bfree>
 800c74a:	e7d0      	b.n	800c6ee <_dtoa_r+0x65e>
 800c74c:	9704      	str	r7, [sp, #16]
 800c74e:	4633      	mov	r3, r6
 800c750:	461e      	mov	r6, r3
 800c752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c756:	2a39      	cmp	r2, #57	@ 0x39
 800c758:	d107      	bne.n	800c76a <_dtoa_r+0x6da>
 800c75a:	459a      	cmp	sl, r3
 800c75c:	d1f8      	bne.n	800c750 <_dtoa_r+0x6c0>
 800c75e:	9a04      	ldr	r2, [sp, #16]
 800c760:	3201      	adds	r2, #1
 800c762:	9204      	str	r2, [sp, #16]
 800c764:	2230      	movs	r2, #48	@ 0x30
 800c766:	f88a 2000 	strb.w	r2, [sl]
 800c76a:	781a      	ldrb	r2, [r3, #0]
 800c76c:	3201      	adds	r2, #1
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e7bd      	b.n	800c6ee <_dtoa_r+0x65e>
 800c772:	4b7b      	ldr	r3, [pc, #492]	@ (800c960 <_dtoa_r+0x8d0>)
 800c774:	2200      	movs	r2, #0
 800c776:	f7f3 ff5f 	bl	8000638 <__aeabi_dmul>
 800c77a:	2200      	movs	r2, #0
 800c77c:	2300      	movs	r3, #0
 800c77e:	4604      	mov	r4, r0
 800c780:	460d      	mov	r5, r1
 800c782:	f7f4 f9c1 	bl	8000b08 <__aeabi_dcmpeq>
 800c786:	2800      	cmp	r0, #0
 800c788:	f43f aebb 	beq.w	800c502 <_dtoa_r+0x472>
 800c78c:	e6f0      	b.n	800c570 <_dtoa_r+0x4e0>
 800c78e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c790:	2a00      	cmp	r2, #0
 800c792:	f000 80db 	beq.w	800c94c <_dtoa_r+0x8bc>
 800c796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c798:	2a01      	cmp	r2, #1
 800c79a:	f300 80bf 	bgt.w	800c91c <_dtoa_r+0x88c>
 800c79e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	f000 80b7 	beq.w	800c914 <_dtoa_r+0x884>
 800c7a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7ac:	4646      	mov	r6, r8
 800c7ae:	9a08      	ldr	r2, [sp, #32]
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	441a      	add	r2, r3
 800c7b4:	4658      	mov	r0, fp
 800c7b6:	4498      	add	r8, r3
 800c7b8:	9208      	str	r2, [sp, #32]
 800c7ba:	f000 fc21 	bl	800d000 <__i2b>
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b15e      	cbz	r6, 800c7da <_dtoa_r+0x74a>
 800c7c2:	9b08      	ldr	r3, [sp, #32]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dd08      	ble.n	800c7da <_dtoa_r+0x74a>
 800c7c8:	42b3      	cmp	r3, r6
 800c7ca:	9a08      	ldr	r2, [sp, #32]
 800c7cc:	bfa8      	it	ge
 800c7ce:	4633      	movge	r3, r6
 800c7d0:	eba8 0803 	sub.w	r8, r8, r3
 800c7d4:	1af6      	subs	r6, r6, r3
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	9308      	str	r3, [sp, #32]
 800c7da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7dc:	b1f3      	cbz	r3, 800c81c <_dtoa_r+0x78c>
 800c7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f000 80b7 	beq.w	800c954 <_dtoa_r+0x8c4>
 800c7e6:	b18c      	cbz	r4, 800c80c <_dtoa_r+0x77c>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4622      	mov	r2, r4
 800c7ec:	4658      	mov	r0, fp
 800c7ee:	f000 fcc7 	bl	800d180 <__pow5mult>
 800c7f2:	464a      	mov	r2, r9
 800c7f4:	4601      	mov	r1, r0
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	4658      	mov	r0, fp
 800c7fa:	f000 fc17 	bl	800d02c <__multiply>
 800c7fe:	4649      	mov	r1, r9
 800c800:	9004      	str	r0, [sp, #16]
 800c802:	4658      	mov	r0, fp
 800c804:	f000 fb48 	bl	800ce98 <_Bfree>
 800c808:	9b04      	ldr	r3, [sp, #16]
 800c80a:	4699      	mov	r9, r3
 800c80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c80e:	1b1a      	subs	r2, r3, r4
 800c810:	d004      	beq.n	800c81c <_dtoa_r+0x78c>
 800c812:	4649      	mov	r1, r9
 800c814:	4658      	mov	r0, fp
 800c816:	f000 fcb3 	bl	800d180 <__pow5mult>
 800c81a:	4681      	mov	r9, r0
 800c81c:	2101      	movs	r1, #1
 800c81e:	4658      	mov	r0, fp
 800c820:	f000 fbee 	bl	800d000 <__i2b>
 800c824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c826:	4604      	mov	r4, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 81cf 	beq.w	800cbcc <_dtoa_r+0xb3c>
 800c82e:	461a      	mov	r2, r3
 800c830:	4601      	mov	r1, r0
 800c832:	4658      	mov	r0, fp
 800c834:	f000 fca4 	bl	800d180 <__pow5mult>
 800c838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	4604      	mov	r4, r0
 800c83e:	f300 8095 	bgt.w	800c96c <_dtoa_r+0x8dc>
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 8087 	bne.w	800c958 <_dtoa_r+0x8c8>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c850:	2b00      	cmp	r3, #0
 800c852:	f040 8089 	bne.w	800c968 <_dtoa_r+0x8d8>
 800c856:	9b03      	ldr	r3, [sp, #12]
 800c858:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c85c:	0d1b      	lsrs	r3, r3, #20
 800c85e:	051b      	lsls	r3, r3, #20
 800c860:	b12b      	cbz	r3, 800c86e <_dtoa_r+0x7de>
 800c862:	9b08      	ldr	r3, [sp, #32]
 800c864:	3301      	adds	r3, #1
 800c866:	9308      	str	r3, [sp, #32]
 800c868:	f108 0801 	add.w	r8, r8, #1
 800c86c:	2301      	movs	r3, #1
 800c86e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c870:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c872:	2b00      	cmp	r3, #0
 800c874:	f000 81b0 	beq.w	800cbd8 <_dtoa_r+0xb48>
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c87e:	6918      	ldr	r0, [r3, #16]
 800c880:	f000 fb72 	bl	800cf68 <__hi0bits>
 800c884:	f1c0 0020 	rsb	r0, r0, #32
 800c888:	9b08      	ldr	r3, [sp, #32]
 800c88a:	4418      	add	r0, r3
 800c88c:	f010 001f 	ands.w	r0, r0, #31
 800c890:	d077      	beq.n	800c982 <_dtoa_r+0x8f2>
 800c892:	f1c0 0320 	rsb	r3, r0, #32
 800c896:	2b04      	cmp	r3, #4
 800c898:	dd6b      	ble.n	800c972 <_dtoa_r+0x8e2>
 800c89a:	9b08      	ldr	r3, [sp, #32]
 800c89c:	f1c0 001c 	rsb	r0, r0, #28
 800c8a0:	4403      	add	r3, r0
 800c8a2:	4480      	add	r8, r0
 800c8a4:	4406      	add	r6, r0
 800c8a6:	9308      	str	r3, [sp, #32]
 800c8a8:	f1b8 0f00 	cmp.w	r8, #0
 800c8ac:	dd05      	ble.n	800c8ba <_dtoa_r+0x82a>
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	4658      	mov	r0, fp
 800c8b4:	f000 fcbe 	bl	800d234 <__lshift>
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	9b08      	ldr	r3, [sp, #32]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd05      	ble.n	800c8cc <_dtoa_r+0x83c>
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4658      	mov	r0, fp
 800c8c6:	f000 fcb5 	bl	800d234 <__lshift>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d059      	beq.n	800c986 <_dtoa_r+0x8f6>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	f000 fd19 	bl	800d30c <__mcmp>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	da53      	bge.n	800c986 <_dtoa_r+0x8f6>
 800c8de:	1e7b      	subs	r3, r7, #1
 800c8e0:	9304      	str	r3, [sp, #16]
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	220a      	movs	r2, #10
 800c8e8:	4658      	mov	r0, fp
 800c8ea:	f000 faf7 	bl	800cedc <__multadd>
 800c8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8f0:	4681      	mov	r9, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f000 8172 	beq.w	800cbdc <_dtoa_r+0xb4c>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4658      	mov	r0, fp
 800c900:	f000 faec 	bl	800cedc <__multadd>
 800c904:	9b00      	ldr	r3, [sp, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	4605      	mov	r5, r0
 800c90a:	dc67      	bgt.n	800c9dc <_dtoa_r+0x94c>
 800c90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c90e:	2b02      	cmp	r3, #2
 800c910:	dc41      	bgt.n	800c996 <_dtoa_r+0x906>
 800c912:	e063      	b.n	800c9dc <_dtoa_r+0x94c>
 800c914:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c916:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c91a:	e746      	b.n	800c7aa <_dtoa_r+0x71a>
 800c91c:	9b07      	ldr	r3, [sp, #28]
 800c91e:	1e5c      	subs	r4, r3, #1
 800c920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c922:	42a3      	cmp	r3, r4
 800c924:	bfbf      	itttt	lt
 800c926:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c928:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c92a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c92c:	1ae3      	sublt	r3, r4, r3
 800c92e:	bfb4      	ite	lt
 800c930:	18d2      	addlt	r2, r2, r3
 800c932:	1b1c      	subge	r4, r3, r4
 800c934:	9b07      	ldr	r3, [sp, #28]
 800c936:	bfbc      	itt	lt
 800c938:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c93a:	2400      	movlt	r4, #0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bfb5      	itete	lt
 800c940:	eba8 0603 	sublt.w	r6, r8, r3
 800c944:	9b07      	ldrge	r3, [sp, #28]
 800c946:	2300      	movlt	r3, #0
 800c948:	4646      	movge	r6, r8
 800c94a:	e730      	b.n	800c7ae <_dtoa_r+0x71e>
 800c94c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c94e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c950:	4646      	mov	r6, r8
 800c952:	e735      	b.n	800c7c0 <_dtoa_r+0x730>
 800c954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c956:	e75c      	b.n	800c812 <_dtoa_r+0x782>
 800c958:	2300      	movs	r3, #0
 800c95a:	e788      	b.n	800c86e <_dtoa_r+0x7de>
 800c95c:	3fe00000 	.word	0x3fe00000
 800c960:	40240000 	.word	0x40240000
 800c964:	40140000 	.word	0x40140000
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	e780      	b.n	800c86e <_dtoa_r+0x7de>
 800c96c:	2300      	movs	r3, #0
 800c96e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c970:	e782      	b.n	800c878 <_dtoa_r+0x7e8>
 800c972:	d099      	beq.n	800c8a8 <_dtoa_r+0x818>
 800c974:	9a08      	ldr	r2, [sp, #32]
 800c976:	331c      	adds	r3, #28
 800c978:	441a      	add	r2, r3
 800c97a:	4498      	add	r8, r3
 800c97c:	441e      	add	r6, r3
 800c97e:	9208      	str	r2, [sp, #32]
 800c980:	e792      	b.n	800c8a8 <_dtoa_r+0x818>
 800c982:	4603      	mov	r3, r0
 800c984:	e7f6      	b.n	800c974 <_dtoa_r+0x8e4>
 800c986:	9b07      	ldr	r3, [sp, #28]
 800c988:	9704      	str	r7, [sp, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	dc20      	bgt.n	800c9d0 <_dtoa_r+0x940>
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c992:	2b02      	cmp	r3, #2
 800c994:	dd1e      	ble.n	800c9d4 <_dtoa_r+0x944>
 800c996:	9b00      	ldr	r3, [sp, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f47f aec0 	bne.w	800c71e <_dtoa_r+0x68e>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	2205      	movs	r2, #5
 800c9a2:	4658      	mov	r0, fp
 800c9a4:	f000 fa9a 	bl	800cedc <__multadd>
 800c9a8:	4601      	mov	r1, r0
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	f000 fcad 	bl	800d30c <__mcmp>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f77f aeb3 	ble.w	800c71e <_dtoa_r+0x68e>
 800c9b8:	4656      	mov	r6, sl
 800c9ba:	2331      	movs	r3, #49	@ 0x31
 800c9bc:	f806 3b01 	strb.w	r3, [r6], #1
 800c9c0:	9b04      	ldr	r3, [sp, #16]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	e6ae      	b.n	800c726 <_dtoa_r+0x696>
 800c9c8:	9c07      	ldr	r4, [sp, #28]
 800c9ca:	9704      	str	r7, [sp, #16]
 800c9cc:	4625      	mov	r5, r4
 800c9ce:	e7f3      	b.n	800c9b8 <_dtoa_r+0x928>
 800c9d0:	9b07      	ldr	r3, [sp, #28]
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 8104 	beq.w	800cbe4 <_dtoa_r+0xb54>
 800c9dc:	2e00      	cmp	r6, #0
 800c9de:	dd05      	ble.n	800c9ec <_dtoa_r+0x95c>
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	4658      	mov	r0, fp
 800c9e6:	f000 fc25 	bl	800d234 <__lshift>
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d05a      	beq.n	800caa8 <_dtoa_r+0xa18>
 800c9f2:	6869      	ldr	r1, [r5, #4]
 800c9f4:	4658      	mov	r0, fp
 800c9f6:	f000 fa0f 	bl	800ce18 <_Balloc>
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	b928      	cbnz	r0, 800ca0a <_dtoa_r+0x97a>
 800c9fe:	4b84      	ldr	r3, [pc, #528]	@ (800cc10 <_dtoa_r+0xb80>)
 800ca00:	4602      	mov	r2, r0
 800ca02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca06:	f7ff bb5a 	b.w	800c0be <_dtoa_r+0x2e>
 800ca0a:	692a      	ldr	r2, [r5, #16]
 800ca0c:	3202      	adds	r2, #2
 800ca0e:	0092      	lsls	r2, r2, #2
 800ca10:	f105 010c 	add.w	r1, r5, #12
 800ca14:	300c      	adds	r0, #12
 800ca16:	f7ff faa4 	bl	800bf62 <memcpy>
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4658      	mov	r0, fp
 800ca20:	f000 fc08 	bl	800d234 <__lshift>
 800ca24:	f10a 0301 	add.w	r3, sl, #1
 800ca28:	9307      	str	r3, [sp, #28]
 800ca2a:	9b00      	ldr	r3, [sp, #0]
 800ca2c:	4453      	add	r3, sl
 800ca2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca30:	9b02      	ldr	r3, [sp, #8]
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	462f      	mov	r7, r5
 800ca38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	4621      	mov	r1, r4
 800ca40:	3b01      	subs	r3, #1
 800ca42:	4648      	mov	r0, r9
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	f7ff fa9a 	bl	800bf7e <quorem>
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	9002      	str	r0, [sp, #8]
 800ca4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca52:	4648      	mov	r0, r9
 800ca54:	f000 fc5a 	bl	800d30c <__mcmp>
 800ca58:	462a      	mov	r2, r5
 800ca5a:	9008      	str	r0, [sp, #32]
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4658      	mov	r0, fp
 800ca60:	f000 fc70 	bl	800d344 <__mdiff>
 800ca64:	68c2      	ldr	r2, [r0, #12]
 800ca66:	4606      	mov	r6, r0
 800ca68:	bb02      	cbnz	r2, 800caac <_dtoa_r+0xa1c>
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	4648      	mov	r0, r9
 800ca6e:	f000 fc4d 	bl	800d30c <__mcmp>
 800ca72:	4602      	mov	r2, r0
 800ca74:	4631      	mov	r1, r6
 800ca76:	4658      	mov	r0, fp
 800ca78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca7a:	f000 fa0d 	bl	800ce98 <_Bfree>
 800ca7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca82:	9e07      	ldr	r6, [sp, #28]
 800ca84:	ea43 0102 	orr.w	r1, r3, r2
 800ca88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca8a:	4319      	orrs	r1, r3
 800ca8c:	d110      	bne.n	800cab0 <_dtoa_r+0xa20>
 800ca8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca92:	d029      	beq.n	800cae8 <_dtoa_r+0xa58>
 800ca94:	9b08      	ldr	r3, [sp, #32]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dd02      	ble.n	800caa0 <_dtoa_r+0xa10>
 800ca9a:	9b02      	ldr	r3, [sp, #8]
 800ca9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800caa0:	9b00      	ldr	r3, [sp, #0]
 800caa2:	f883 8000 	strb.w	r8, [r3]
 800caa6:	e63f      	b.n	800c728 <_dtoa_r+0x698>
 800caa8:	4628      	mov	r0, r5
 800caaa:	e7bb      	b.n	800ca24 <_dtoa_r+0x994>
 800caac:	2201      	movs	r2, #1
 800caae:	e7e1      	b.n	800ca74 <_dtoa_r+0x9e4>
 800cab0:	9b08      	ldr	r3, [sp, #32]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	db04      	blt.n	800cac0 <_dtoa_r+0xa30>
 800cab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cab8:	430b      	orrs	r3, r1
 800caba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cabc:	430b      	orrs	r3, r1
 800cabe:	d120      	bne.n	800cb02 <_dtoa_r+0xa72>
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	dded      	ble.n	800caa0 <_dtoa_r+0xa10>
 800cac4:	4649      	mov	r1, r9
 800cac6:	2201      	movs	r2, #1
 800cac8:	4658      	mov	r0, fp
 800caca:	f000 fbb3 	bl	800d234 <__lshift>
 800cace:	4621      	mov	r1, r4
 800cad0:	4681      	mov	r9, r0
 800cad2:	f000 fc1b 	bl	800d30c <__mcmp>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	dc03      	bgt.n	800cae2 <_dtoa_r+0xa52>
 800cada:	d1e1      	bne.n	800caa0 <_dtoa_r+0xa10>
 800cadc:	f018 0f01 	tst.w	r8, #1
 800cae0:	d0de      	beq.n	800caa0 <_dtoa_r+0xa10>
 800cae2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cae6:	d1d8      	bne.n	800ca9a <_dtoa_r+0xa0a>
 800cae8:	9a00      	ldr	r2, [sp, #0]
 800caea:	2339      	movs	r3, #57	@ 0x39
 800caec:	7013      	strb	r3, [r2, #0]
 800caee:	4633      	mov	r3, r6
 800caf0:	461e      	mov	r6, r3
 800caf2:	3b01      	subs	r3, #1
 800caf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800caf8:	2a39      	cmp	r2, #57	@ 0x39
 800cafa:	d052      	beq.n	800cba2 <_dtoa_r+0xb12>
 800cafc:	3201      	adds	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	e612      	b.n	800c728 <_dtoa_r+0x698>
 800cb02:	2a00      	cmp	r2, #0
 800cb04:	dd07      	ble.n	800cb16 <_dtoa_r+0xa86>
 800cb06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb0a:	d0ed      	beq.n	800cae8 <_dtoa_r+0xa58>
 800cb0c:	9a00      	ldr	r2, [sp, #0]
 800cb0e:	f108 0301 	add.w	r3, r8, #1
 800cb12:	7013      	strb	r3, [r2, #0]
 800cb14:	e608      	b.n	800c728 <_dtoa_r+0x698>
 800cb16:	9b07      	ldr	r3, [sp, #28]
 800cb18:	9a07      	ldr	r2, [sp, #28]
 800cb1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d028      	beq.n	800cb76 <_dtoa_r+0xae6>
 800cb24:	4649      	mov	r1, r9
 800cb26:	2300      	movs	r3, #0
 800cb28:	220a      	movs	r2, #10
 800cb2a:	4658      	mov	r0, fp
 800cb2c:	f000 f9d6 	bl	800cedc <__multadd>
 800cb30:	42af      	cmp	r7, r5
 800cb32:	4681      	mov	r9, r0
 800cb34:	f04f 0300 	mov.w	r3, #0
 800cb38:	f04f 020a 	mov.w	r2, #10
 800cb3c:	4639      	mov	r1, r7
 800cb3e:	4658      	mov	r0, fp
 800cb40:	d107      	bne.n	800cb52 <_dtoa_r+0xac2>
 800cb42:	f000 f9cb 	bl	800cedc <__multadd>
 800cb46:	4607      	mov	r7, r0
 800cb48:	4605      	mov	r5, r0
 800cb4a:	9b07      	ldr	r3, [sp, #28]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	9307      	str	r3, [sp, #28]
 800cb50:	e774      	b.n	800ca3c <_dtoa_r+0x9ac>
 800cb52:	f000 f9c3 	bl	800cedc <__multadd>
 800cb56:	4629      	mov	r1, r5
 800cb58:	4607      	mov	r7, r0
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	220a      	movs	r2, #10
 800cb5e:	4658      	mov	r0, fp
 800cb60:	f000 f9bc 	bl	800cedc <__multadd>
 800cb64:	4605      	mov	r5, r0
 800cb66:	e7f0      	b.n	800cb4a <_dtoa_r+0xaba>
 800cb68:	9b00      	ldr	r3, [sp, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	bfcc      	ite	gt
 800cb6e:	461e      	movgt	r6, r3
 800cb70:	2601      	movle	r6, #1
 800cb72:	4456      	add	r6, sl
 800cb74:	2700      	movs	r7, #0
 800cb76:	4649      	mov	r1, r9
 800cb78:	2201      	movs	r2, #1
 800cb7a:	4658      	mov	r0, fp
 800cb7c:	f000 fb5a 	bl	800d234 <__lshift>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4681      	mov	r9, r0
 800cb84:	f000 fbc2 	bl	800d30c <__mcmp>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	dcb0      	bgt.n	800caee <_dtoa_r+0xa5e>
 800cb8c:	d102      	bne.n	800cb94 <_dtoa_r+0xb04>
 800cb8e:	f018 0f01 	tst.w	r8, #1
 800cb92:	d1ac      	bne.n	800caee <_dtoa_r+0xa5e>
 800cb94:	4633      	mov	r3, r6
 800cb96:	461e      	mov	r6, r3
 800cb98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb9c:	2a30      	cmp	r2, #48	@ 0x30
 800cb9e:	d0fa      	beq.n	800cb96 <_dtoa_r+0xb06>
 800cba0:	e5c2      	b.n	800c728 <_dtoa_r+0x698>
 800cba2:	459a      	cmp	sl, r3
 800cba4:	d1a4      	bne.n	800caf0 <_dtoa_r+0xa60>
 800cba6:	9b04      	ldr	r3, [sp, #16]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	2331      	movs	r3, #49	@ 0x31
 800cbae:	f88a 3000 	strb.w	r3, [sl]
 800cbb2:	e5b9      	b.n	800c728 <_dtoa_r+0x698>
 800cbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc14 <_dtoa_r+0xb84>
 800cbba:	b11b      	cbz	r3, 800cbc4 <_dtoa_r+0xb34>
 800cbbc:	f10a 0308 	add.w	r3, sl, #8
 800cbc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	4650      	mov	r0, sl
 800cbc6:	b019      	add	sp, #100	@ 0x64
 800cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	f77f ae37 	ble.w	800c842 <_dtoa_r+0x7b2>
 800cbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e655      	b.n	800c888 <_dtoa_r+0x7f8>
 800cbdc:	9b00      	ldr	r3, [sp, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f77f aed6 	ble.w	800c990 <_dtoa_r+0x900>
 800cbe4:	4656      	mov	r6, sl
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	4648      	mov	r0, r9
 800cbea:	f7ff f9c8 	bl	800bf7e <quorem>
 800cbee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbf2:	f806 8b01 	strb.w	r8, [r6], #1
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	eba6 020a 	sub.w	r2, r6, sl
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	ddb3      	ble.n	800cb68 <_dtoa_r+0xad8>
 800cc00:	4649      	mov	r1, r9
 800cc02:	2300      	movs	r3, #0
 800cc04:	220a      	movs	r2, #10
 800cc06:	4658      	mov	r0, fp
 800cc08:	f000 f968 	bl	800cedc <__multadd>
 800cc0c:	4681      	mov	r9, r0
 800cc0e:	e7ea      	b.n	800cbe6 <_dtoa_r+0xb56>
 800cc10:	0800eb80 	.word	0x0800eb80
 800cc14:	0800eb04 	.word	0x0800eb04

0800cc18 <_free_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	2900      	cmp	r1, #0
 800cc1e:	d041      	beq.n	800cca4 <_free_r+0x8c>
 800cc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc24:	1f0c      	subs	r4, r1, #4
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	18e4      	addlt	r4, r4, r3
 800cc2c:	f000 f8e8 	bl	800ce00 <__malloc_lock>
 800cc30:	4a1d      	ldr	r2, [pc, #116]	@ (800cca8 <_free_r+0x90>)
 800cc32:	6813      	ldr	r3, [r2, #0]
 800cc34:	b933      	cbnz	r3, 800cc44 <_free_r+0x2c>
 800cc36:	6063      	str	r3, [r4, #4]
 800cc38:	6014      	str	r4, [r2, #0]
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc40:	f000 b8e4 	b.w	800ce0c <__malloc_unlock>
 800cc44:	42a3      	cmp	r3, r4
 800cc46:	d908      	bls.n	800cc5a <_free_r+0x42>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	1821      	adds	r1, r4, r0
 800cc4c:	428b      	cmp	r3, r1
 800cc4e:	bf01      	itttt	eq
 800cc50:	6819      	ldreq	r1, [r3, #0]
 800cc52:	685b      	ldreq	r3, [r3, #4]
 800cc54:	1809      	addeq	r1, r1, r0
 800cc56:	6021      	streq	r1, [r4, #0]
 800cc58:	e7ed      	b.n	800cc36 <_free_r+0x1e>
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	b10b      	cbz	r3, 800cc64 <_free_r+0x4c>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d9fa      	bls.n	800cc5a <_free_r+0x42>
 800cc64:	6811      	ldr	r1, [r2, #0]
 800cc66:	1850      	adds	r0, r2, r1
 800cc68:	42a0      	cmp	r0, r4
 800cc6a:	d10b      	bne.n	800cc84 <_free_r+0x6c>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	4401      	add	r1, r0
 800cc70:	1850      	adds	r0, r2, r1
 800cc72:	4283      	cmp	r3, r0
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	d1e0      	bne.n	800cc3a <_free_r+0x22>
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	6053      	str	r3, [r2, #4]
 800cc7e:	4408      	add	r0, r1
 800cc80:	6010      	str	r0, [r2, #0]
 800cc82:	e7da      	b.n	800cc3a <_free_r+0x22>
 800cc84:	d902      	bls.n	800cc8c <_free_r+0x74>
 800cc86:	230c      	movs	r3, #12
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	e7d6      	b.n	800cc3a <_free_r+0x22>
 800cc8c:	6820      	ldr	r0, [r4, #0]
 800cc8e:	1821      	adds	r1, r4, r0
 800cc90:	428b      	cmp	r3, r1
 800cc92:	bf04      	itt	eq
 800cc94:	6819      	ldreq	r1, [r3, #0]
 800cc96:	685b      	ldreq	r3, [r3, #4]
 800cc98:	6063      	str	r3, [r4, #4]
 800cc9a:	bf04      	itt	eq
 800cc9c:	1809      	addeq	r1, r1, r0
 800cc9e:	6021      	streq	r1, [r4, #0]
 800cca0:	6054      	str	r4, [r2, #4]
 800cca2:	e7ca      	b.n	800cc3a <_free_r+0x22>
 800cca4:	bd38      	pop	{r3, r4, r5, pc}
 800cca6:	bf00      	nop
 800cca8:	2001ac18 	.word	0x2001ac18

0800ccac <malloc>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	@ (800ccb8 <malloc+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f000 b825 	b.w	800cd00 <_malloc_r>
 800ccb6:	bf00      	nop
 800ccb8:	2000003c 	.word	0x2000003c

0800ccbc <sbrk_aligned>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	4e0f      	ldr	r6, [pc, #60]	@ (800ccfc <sbrk_aligned+0x40>)
 800ccc0:	460c      	mov	r4, r1
 800ccc2:	6831      	ldr	r1, [r6, #0]
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	b911      	cbnz	r1, 800ccce <sbrk_aligned+0x12>
 800ccc8:	f000 fe46 	bl	800d958 <_sbrk_r>
 800cccc:	6030      	str	r0, [r6, #0]
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f000 fe41 	bl	800d958 <_sbrk_r>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d103      	bne.n	800cce2 <sbrk_aligned+0x26>
 800ccda:	f04f 34ff 	mov.w	r4, #4294967295
 800ccde:	4620      	mov	r0, r4
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	1cc4      	adds	r4, r0, #3
 800cce4:	f024 0403 	bic.w	r4, r4, #3
 800cce8:	42a0      	cmp	r0, r4
 800ccea:	d0f8      	beq.n	800ccde <sbrk_aligned+0x22>
 800ccec:	1a21      	subs	r1, r4, r0
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f000 fe32 	bl	800d958 <_sbrk_r>
 800ccf4:	3001      	adds	r0, #1
 800ccf6:	d1f2      	bne.n	800ccde <sbrk_aligned+0x22>
 800ccf8:	e7ef      	b.n	800ccda <sbrk_aligned+0x1e>
 800ccfa:	bf00      	nop
 800ccfc:	2001ac14 	.word	0x2001ac14

0800cd00 <_malloc_r>:
 800cd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd04:	1ccd      	adds	r5, r1, #3
 800cd06:	f025 0503 	bic.w	r5, r5, #3
 800cd0a:	3508      	adds	r5, #8
 800cd0c:	2d0c      	cmp	r5, #12
 800cd0e:	bf38      	it	cc
 800cd10:	250c      	movcc	r5, #12
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	4606      	mov	r6, r0
 800cd16:	db01      	blt.n	800cd1c <_malloc_r+0x1c>
 800cd18:	42a9      	cmp	r1, r5
 800cd1a:	d904      	bls.n	800cd26 <_malloc_r+0x26>
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	6033      	str	r3, [r6, #0]
 800cd20:	2000      	movs	r0, #0
 800cd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdfc <_malloc_r+0xfc>
 800cd2a:	f000 f869 	bl	800ce00 <__malloc_lock>
 800cd2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd32:	461c      	mov	r4, r3
 800cd34:	bb44      	cbnz	r4, 800cd88 <_malloc_r+0x88>
 800cd36:	4629      	mov	r1, r5
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f7ff ffbf 	bl	800ccbc <sbrk_aligned>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	4604      	mov	r4, r0
 800cd42:	d158      	bne.n	800cdf6 <_malloc_r+0xf6>
 800cd44:	f8d8 4000 	ldr.w	r4, [r8]
 800cd48:	4627      	mov	r7, r4
 800cd4a:	2f00      	cmp	r7, #0
 800cd4c:	d143      	bne.n	800cdd6 <_malloc_r+0xd6>
 800cd4e:	2c00      	cmp	r4, #0
 800cd50:	d04b      	beq.n	800cdea <_malloc_r+0xea>
 800cd52:	6823      	ldr	r3, [r4, #0]
 800cd54:	4639      	mov	r1, r7
 800cd56:	4630      	mov	r0, r6
 800cd58:	eb04 0903 	add.w	r9, r4, r3
 800cd5c:	f000 fdfc 	bl	800d958 <_sbrk_r>
 800cd60:	4581      	cmp	r9, r0
 800cd62:	d142      	bne.n	800cdea <_malloc_r+0xea>
 800cd64:	6821      	ldr	r1, [r4, #0]
 800cd66:	1a6d      	subs	r5, r5, r1
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f7ff ffa6 	bl	800ccbc <sbrk_aligned>
 800cd70:	3001      	adds	r0, #1
 800cd72:	d03a      	beq.n	800cdea <_malloc_r+0xea>
 800cd74:	6823      	ldr	r3, [r4, #0]
 800cd76:	442b      	add	r3, r5
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	bb62      	cbnz	r2, 800cddc <_malloc_r+0xdc>
 800cd82:	f8c8 7000 	str.w	r7, [r8]
 800cd86:	e00f      	b.n	800cda8 <_malloc_r+0xa8>
 800cd88:	6822      	ldr	r2, [r4, #0]
 800cd8a:	1b52      	subs	r2, r2, r5
 800cd8c:	d420      	bmi.n	800cdd0 <_malloc_r+0xd0>
 800cd8e:	2a0b      	cmp	r2, #11
 800cd90:	d917      	bls.n	800cdc2 <_malloc_r+0xc2>
 800cd92:	1961      	adds	r1, r4, r5
 800cd94:	42a3      	cmp	r3, r4
 800cd96:	6025      	str	r5, [r4, #0]
 800cd98:	bf18      	it	ne
 800cd9a:	6059      	strne	r1, [r3, #4]
 800cd9c:	6863      	ldr	r3, [r4, #4]
 800cd9e:	bf08      	it	eq
 800cda0:	f8c8 1000 	streq.w	r1, [r8]
 800cda4:	5162      	str	r2, [r4, r5]
 800cda6:	604b      	str	r3, [r1, #4]
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 f82f 	bl	800ce0c <__malloc_unlock>
 800cdae:	f104 000b 	add.w	r0, r4, #11
 800cdb2:	1d23      	adds	r3, r4, #4
 800cdb4:	f020 0007 	bic.w	r0, r0, #7
 800cdb8:	1ac2      	subs	r2, r0, r3
 800cdba:	bf1c      	itt	ne
 800cdbc:	1a1b      	subne	r3, r3, r0
 800cdbe:	50a3      	strne	r3, [r4, r2]
 800cdc0:	e7af      	b.n	800cd22 <_malloc_r+0x22>
 800cdc2:	6862      	ldr	r2, [r4, #4]
 800cdc4:	42a3      	cmp	r3, r4
 800cdc6:	bf0c      	ite	eq
 800cdc8:	f8c8 2000 	streq.w	r2, [r8]
 800cdcc:	605a      	strne	r2, [r3, #4]
 800cdce:	e7eb      	b.n	800cda8 <_malloc_r+0xa8>
 800cdd0:	4623      	mov	r3, r4
 800cdd2:	6864      	ldr	r4, [r4, #4]
 800cdd4:	e7ae      	b.n	800cd34 <_malloc_r+0x34>
 800cdd6:	463c      	mov	r4, r7
 800cdd8:	687f      	ldr	r7, [r7, #4]
 800cdda:	e7b6      	b.n	800cd4a <_malloc_r+0x4a>
 800cddc:	461a      	mov	r2, r3
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	d1fb      	bne.n	800cddc <_malloc_r+0xdc>
 800cde4:	2300      	movs	r3, #0
 800cde6:	6053      	str	r3, [r2, #4]
 800cde8:	e7de      	b.n	800cda8 <_malloc_r+0xa8>
 800cdea:	230c      	movs	r3, #12
 800cdec:	6033      	str	r3, [r6, #0]
 800cdee:	4630      	mov	r0, r6
 800cdf0:	f000 f80c 	bl	800ce0c <__malloc_unlock>
 800cdf4:	e794      	b.n	800cd20 <_malloc_r+0x20>
 800cdf6:	6005      	str	r5, [r0, #0]
 800cdf8:	e7d6      	b.n	800cda8 <_malloc_r+0xa8>
 800cdfa:	bf00      	nop
 800cdfc:	2001ac18 	.word	0x2001ac18

0800ce00 <__malloc_lock>:
 800ce00:	4801      	ldr	r0, [pc, #4]	@ (800ce08 <__malloc_lock+0x8>)
 800ce02:	f7ff b8ac 	b.w	800bf5e <__retarget_lock_acquire_recursive>
 800ce06:	bf00      	nop
 800ce08:	2001ac10 	.word	0x2001ac10

0800ce0c <__malloc_unlock>:
 800ce0c:	4801      	ldr	r0, [pc, #4]	@ (800ce14 <__malloc_unlock+0x8>)
 800ce0e:	f7ff b8a7 	b.w	800bf60 <__retarget_lock_release_recursive>
 800ce12:	bf00      	nop
 800ce14:	2001ac10 	.word	0x2001ac10

0800ce18 <_Balloc>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	69c6      	ldr	r6, [r0, #28]
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	460d      	mov	r5, r1
 800ce20:	b976      	cbnz	r6, 800ce40 <_Balloc+0x28>
 800ce22:	2010      	movs	r0, #16
 800ce24:	f7ff ff42 	bl	800ccac <malloc>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	61e0      	str	r0, [r4, #28]
 800ce2c:	b920      	cbnz	r0, 800ce38 <_Balloc+0x20>
 800ce2e:	4b18      	ldr	r3, [pc, #96]	@ (800ce90 <_Balloc+0x78>)
 800ce30:	4818      	ldr	r0, [pc, #96]	@ (800ce94 <_Balloc+0x7c>)
 800ce32:	216b      	movs	r1, #107	@ 0x6b
 800ce34:	f000 fda0 	bl	800d978 <__assert_func>
 800ce38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce3c:	6006      	str	r6, [r0, #0]
 800ce3e:	60c6      	str	r6, [r0, #12]
 800ce40:	69e6      	ldr	r6, [r4, #28]
 800ce42:	68f3      	ldr	r3, [r6, #12]
 800ce44:	b183      	cbz	r3, 800ce68 <_Balloc+0x50>
 800ce46:	69e3      	ldr	r3, [r4, #28]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce4e:	b9b8      	cbnz	r0, 800ce80 <_Balloc+0x68>
 800ce50:	2101      	movs	r1, #1
 800ce52:	fa01 f605 	lsl.w	r6, r1, r5
 800ce56:	1d72      	adds	r2, r6, #5
 800ce58:	0092      	lsls	r2, r2, #2
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 fdaa 	bl	800d9b4 <_calloc_r>
 800ce60:	b160      	cbz	r0, 800ce7c <_Balloc+0x64>
 800ce62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce66:	e00e      	b.n	800ce86 <_Balloc+0x6e>
 800ce68:	2221      	movs	r2, #33	@ 0x21
 800ce6a:	2104      	movs	r1, #4
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	f000 fda1 	bl	800d9b4 <_calloc_r>
 800ce72:	69e3      	ldr	r3, [r4, #28]
 800ce74:	60f0      	str	r0, [r6, #12]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1e4      	bne.n	800ce46 <_Balloc+0x2e>
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	bd70      	pop	{r4, r5, r6, pc}
 800ce80:	6802      	ldr	r2, [r0, #0]
 800ce82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce86:	2300      	movs	r3, #0
 800ce88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce8c:	e7f7      	b.n	800ce7e <_Balloc+0x66>
 800ce8e:	bf00      	nop
 800ce90:	0800eb11 	.word	0x0800eb11
 800ce94:	0800eb91 	.word	0x0800eb91

0800ce98 <_Bfree>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	69c6      	ldr	r6, [r0, #28]
 800ce9c:	4605      	mov	r5, r0
 800ce9e:	460c      	mov	r4, r1
 800cea0:	b976      	cbnz	r6, 800cec0 <_Bfree+0x28>
 800cea2:	2010      	movs	r0, #16
 800cea4:	f7ff ff02 	bl	800ccac <malloc>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	61e8      	str	r0, [r5, #28]
 800ceac:	b920      	cbnz	r0, 800ceb8 <_Bfree+0x20>
 800ceae:	4b09      	ldr	r3, [pc, #36]	@ (800ced4 <_Bfree+0x3c>)
 800ceb0:	4809      	ldr	r0, [pc, #36]	@ (800ced8 <_Bfree+0x40>)
 800ceb2:	218f      	movs	r1, #143	@ 0x8f
 800ceb4:	f000 fd60 	bl	800d978 <__assert_func>
 800ceb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cebc:	6006      	str	r6, [r0, #0]
 800cebe:	60c6      	str	r6, [r0, #12]
 800cec0:	b13c      	cbz	r4, 800ced2 <_Bfree+0x3a>
 800cec2:	69eb      	ldr	r3, [r5, #28]
 800cec4:	6862      	ldr	r2, [r4, #4]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cecc:	6021      	str	r1, [r4, #0]
 800cece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ced2:	bd70      	pop	{r4, r5, r6, pc}
 800ced4:	0800eb11 	.word	0x0800eb11
 800ced8:	0800eb91 	.word	0x0800eb91

0800cedc <__multadd>:
 800cedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee0:	690d      	ldr	r5, [r1, #16]
 800cee2:	4607      	mov	r7, r0
 800cee4:	460c      	mov	r4, r1
 800cee6:	461e      	mov	r6, r3
 800cee8:	f101 0c14 	add.w	ip, r1, #20
 800ceec:	2000      	movs	r0, #0
 800ceee:	f8dc 3000 	ldr.w	r3, [ip]
 800cef2:	b299      	uxth	r1, r3
 800cef4:	fb02 6101 	mla	r1, r2, r1, r6
 800cef8:	0c1e      	lsrs	r6, r3, #16
 800cefa:	0c0b      	lsrs	r3, r1, #16
 800cefc:	fb02 3306 	mla	r3, r2, r6, r3
 800cf00:	b289      	uxth	r1, r1
 800cf02:	3001      	adds	r0, #1
 800cf04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf08:	4285      	cmp	r5, r0
 800cf0a:	f84c 1b04 	str.w	r1, [ip], #4
 800cf0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf12:	dcec      	bgt.n	800ceee <__multadd+0x12>
 800cf14:	b30e      	cbz	r6, 800cf5a <__multadd+0x7e>
 800cf16:	68a3      	ldr	r3, [r4, #8]
 800cf18:	42ab      	cmp	r3, r5
 800cf1a:	dc19      	bgt.n	800cf50 <__multadd+0x74>
 800cf1c:	6861      	ldr	r1, [r4, #4]
 800cf1e:	4638      	mov	r0, r7
 800cf20:	3101      	adds	r1, #1
 800cf22:	f7ff ff79 	bl	800ce18 <_Balloc>
 800cf26:	4680      	mov	r8, r0
 800cf28:	b928      	cbnz	r0, 800cf36 <__multadd+0x5a>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf60 <__multadd+0x84>)
 800cf2e:	480d      	ldr	r0, [pc, #52]	@ (800cf64 <__multadd+0x88>)
 800cf30:	21ba      	movs	r1, #186	@ 0xba
 800cf32:	f000 fd21 	bl	800d978 <__assert_func>
 800cf36:	6922      	ldr	r2, [r4, #16]
 800cf38:	3202      	adds	r2, #2
 800cf3a:	f104 010c 	add.w	r1, r4, #12
 800cf3e:	0092      	lsls	r2, r2, #2
 800cf40:	300c      	adds	r0, #12
 800cf42:	f7ff f80e 	bl	800bf62 <memcpy>
 800cf46:	4621      	mov	r1, r4
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ffa5 	bl	800ce98 <_Bfree>
 800cf4e:	4644      	mov	r4, r8
 800cf50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf54:	3501      	adds	r5, #1
 800cf56:	615e      	str	r6, [r3, #20]
 800cf58:	6125      	str	r5, [r4, #16]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf60:	0800eb80 	.word	0x0800eb80
 800cf64:	0800eb91 	.word	0x0800eb91

0800cf68 <__hi0bits>:
 800cf68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	bf36      	itet	cc
 800cf70:	0403      	lslcc	r3, r0, #16
 800cf72:	2000      	movcs	r0, #0
 800cf74:	2010      	movcc	r0, #16
 800cf76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf7a:	bf3c      	itt	cc
 800cf7c:	021b      	lslcc	r3, r3, #8
 800cf7e:	3008      	addcc	r0, #8
 800cf80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf84:	bf3c      	itt	cc
 800cf86:	011b      	lslcc	r3, r3, #4
 800cf88:	3004      	addcc	r0, #4
 800cf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf8e:	bf3c      	itt	cc
 800cf90:	009b      	lslcc	r3, r3, #2
 800cf92:	3002      	addcc	r0, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	db05      	blt.n	800cfa4 <__hi0bits+0x3c>
 800cf98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf9c:	f100 0001 	add.w	r0, r0, #1
 800cfa0:	bf08      	it	eq
 800cfa2:	2020      	moveq	r0, #32
 800cfa4:	4770      	bx	lr

0800cfa6 <__lo0bits>:
 800cfa6:	6803      	ldr	r3, [r0, #0]
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	f013 0007 	ands.w	r0, r3, #7
 800cfae:	d00b      	beq.n	800cfc8 <__lo0bits+0x22>
 800cfb0:	07d9      	lsls	r1, r3, #31
 800cfb2:	d421      	bmi.n	800cff8 <__lo0bits+0x52>
 800cfb4:	0798      	lsls	r0, r3, #30
 800cfb6:	bf49      	itett	mi
 800cfb8:	085b      	lsrmi	r3, r3, #1
 800cfba:	089b      	lsrpl	r3, r3, #2
 800cfbc:	2001      	movmi	r0, #1
 800cfbe:	6013      	strmi	r3, [r2, #0]
 800cfc0:	bf5c      	itt	pl
 800cfc2:	6013      	strpl	r3, [r2, #0]
 800cfc4:	2002      	movpl	r0, #2
 800cfc6:	4770      	bx	lr
 800cfc8:	b299      	uxth	r1, r3
 800cfca:	b909      	cbnz	r1, 800cfd0 <__lo0bits+0x2a>
 800cfcc:	0c1b      	lsrs	r3, r3, #16
 800cfce:	2010      	movs	r0, #16
 800cfd0:	b2d9      	uxtb	r1, r3
 800cfd2:	b909      	cbnz	r1, 800cfd8 <__lo0bits+0x32>
 800cfd4:	3008      	adds	r0, #8
 800cfd6:	0a1b      	lsrs	r3, r3, #8
 800cfd8:	0719      	lsls	r1, r3, #28
 800cfda:	bf04      	itt	eq
 800cfdc:	091b      	lsreq	r3, r3, #4
 800cfde:	3004      	addeq	r0, #4
 800cfe0:	0799      	lsls	r1, r3, #30
 800cfe2:	bf04      	itt	eq
 800cfe4:	089b      	lsreq	r3, r3, #2
 800cfe6:	3002      	addeq	r0, #2
 800cfe8:	07d9      	lsls	r1, r3, #31
 800cfea:	d403      	bmi.n	800cff4 <__lo0bits+0x4e>
 800cfec:	085b      	lsrs	r3, r3, #1
 800cfee:	f100 0001 	add.w	r0, r0, #1
 800cff2:	d003      	beq.n	800cffc <__lo0bits+0x56>
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	4770      	bx	lr
 800cff8:	2000      	movs	r0, #0
 800cffa:	4770      	bx	lr
 800cffc:	2020      	movs	r0, #32
 800cffe:	4770      	bx	lr

0800d000 <__i2b>:
 800d000:	b510      	push	{r4, lr}
 800d002:	460c      	mov	r4, r1
 800d004:	2101      	movs	r1, #1
 800d006:	f7ff ff07 	bl	800ce18 <_Balloc>
 800d00a:	4602      	mov	r2, r0
 800d00c:	b928      	cbnz	r0, 800d01a <__i2b+0x1a>
 800d00e:	4b05      	ldr	r3, [pc, #20]	@ (800d024 <__i2b+0x24>)
 800d010:	4805      	ldr	r0, [pc, #20]	@ (800d028 <__i2b+0x28>)
 800d012:	f240 1145 	movw	r1, #325	@ 0x145
 800d016:	f000 fcaf 	bl	800d978 <__assert_func>
 800d01a:	2301      	movs	r3, #1
 800d01c:	6144      	str	r4, [r0, #20]
 800d01e:	6103      	str	r3, [r0, #16]
 800d020:	bd10      	pop	{r4, pc}
 800d022:	bf00      	nop
 800d024:	0800eb80 	.word	0x0800eb80
 800d028:	0800eb91 	.word	0x0800eb91

0800d02c <__multiply>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	4614      	mov	r4, r2
 800d032:	690a      	ldr	r2, [r1, #16]
 800d034:	6923      	ldr	r3, [r4, #16]
 800d036:	429a      	cmp	r2, r3
 800d038:	bfa8      	it	ge
 800d03a:	4623      	movge	r3, r4
 800d03c:	460f      	mov	r7, r1
 800d03e:	bfa4      	itt	ge
 800d040:	460c      	movge	r4, r1
 800d042:	461f      	movge	r7, r3
 800d044:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d048:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d04c:	68a3      	ldr	r3, [r4, #8]
 800d04e:	6861      	ldr	r1, [r4, #4]
 800d050:	eb0a 0609 	add.w	r6, sl, r9
 800d054:	42b3      	cmp	r3, r6
 800d056:	b085      	sub	sp, #20
 800d058:	bfb8      	it	lt
 800d05a:	3101      	addlt	r1, #1
 800d05c:	f7ff fedc 	bl	800ce18 <_Balloc>
 800d060:	b930      	cbnz	r0, 800d070 <__multiply+0x44>
 800d062:	4602      	mov	r2, r0
 800d064:	4b44      	ldr	r3, [pc, #272]	@ (800d178 <__multiply+0x14c>)
 800d066:	4845      	ldr	r0, [pc, #276]	@ (800d17c <__multiply+0x150>)
 800d068:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d06c:	f000 fc84 	bl	800d978 <__assert_func>
 800d070:	f100 0514 	add.w	r5, r0, #20
 800d074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d078:	462b      	mov	r3, r5
 800d07a:	2200      	movs	r2, #0
 800d07c:	4543      	cmp	r3, r8
 800d07e:	d321      	bcc.n	800d0c4 <__multiply+0x98>
 800d080:	f107 0114 	add.w	r1, r7, #20
 800d084:	f104 0214 	add.w	r2, r4, #20
 800d088:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d08c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d090:	9302      	str	r3, [sp, #8]
 800d092:	1b13      	subs	r3, r2, r4
 800d094:	3b15      	subs	r3, #21
 800d096:	f023 0303 	bic.w	r3, r3, #3
 800d09a:	3304      	adds	r3, #4
 800d09c:	f104 0715 	add.w	r7, r4, #21
 800d0a0:	42ba      	cmp	r2, r7
 800d0a2:	bf38      	it	cc
 800d0a4:	2304      	movcc	r3, #4
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	9b02      	ldr	r3, [sp, #8]
 800d0aa:	9103      	str	r1, [sp, #12]
 800d0ac:	428b      	cmp	r3, r1
 800d0ae:	d80c      	bhi.n	800d0ca <__multiply+0x9e>
 800d0b0:	2e00      	cmp	r6, #0
 800d0b2:	dd03      	ble.n	800d0bc <__multiply+0x90>
 800d0b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d05b      	beq.n	800d174 <__multiply+0x148>
 800d0bc:	6106      	str	r6, [r0, #16]
 800d0be:	b005      	add	sp, #20
 800d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c4:	f843 2b04 	str.w	r2, [r3], #4
 800d0c8:	e7d8      	b.n	800d07c <__multiply+0x50>
 800d0ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0ce:	f1ba 0f00 	cmp.w	sl, #0
 800d0d2:	d024      	beq.n	800d11e <__multiply+0xf2>
 800d0d4:	f104 0e14 	add.w	lr, r4, #20
 800d0d8:	46a9      	mov	r9, r5
 800d0da:	f04f 0c00 	mov.w	ip, #0
 800d0de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0e2:	f8d9 3000 	ldr.w	r3, [r9]
 800d0e6:	fa1f fb87 	uxth.w	fp, r7
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d0f4:	f8d9 7000 	ldr.w	r7, [r9]
 800d0f8:	4463      	add	r3, ip
 800d0fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800d102:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d106:	b29b      	uxth	r3, r3
 800d108:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d10c:	4572      	cmp	r2, lr
 800d10e:	f849 3b04 	str.w	r3, [r9], #4
 800d112:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d116:	d8e2      	bhi.n	800d0de <__multiply+0xb2>
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	f845 c003 	str.w	ip, [r5, r3]
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d124:	3104      	adds	r1, #4
 800d126:	f1b9 0f00 	cmp.w	r9, #0
 800d12a:	d021      	beq.n	800d170 <__multiply+0x144>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	f104 0c14 	add.w	ip, r4, #20
 800d132:	46ae      	mov	lr, r5
 800d134:	f04f 0a00 	mov.w	sl, #0
 800d138:	f8bc b000 	ldrh.w	fp, [ip]
 800d13c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d140:	fb09 770b 	mla	r7, r9, fp, r7
 800d144:	4457      	add	r7, sl
 800d146:	b29b      	uxth	r3, r3
 800d148:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d14c:	f84e 3b04 	str.w	r3, [lr], #4
 800d150:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d158:	f8be 3000 	ldrh.w	r3, [lr]
 800d15c:	fb09 330a 	mla	r3, r9, sl, r3
 800d160:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d164:	4562      	cmp	r2, ip
 800d166:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d16a:	d8e5      	bhi.n	800d138 <__multiply+0x10c>
 800d16c:	9f01      	ldr	r7, [sp, #4]
 800d16e:	51eb      	str	r3, [r5, r7]
 800d170:	3504      	adds	r5, #4
 800d172:	e799      	b.n	800d0a8 <__multiply+0x7c>
 800d174:	3e01      	subs	r6, #1
 800d176:	e79b      	b.n	800d0b0 <__multiply+0x84>
 800d178:	0800eb80 	.word	0x0800eb80
 800d17c:	0800eb91 	.word	0x0800eb91

0800d180 <__pow5mult>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	4615      	mov	r5, r2
 800d186:	f012 0203 	ands.w	r2, r2, #3
 800d18a:	4607      	mov	r7, r0
 800d18c:	460e      	mov	r6, r1
 800d18e:	d007      	beq.n	800d1a0 <__pow5mult+0x20>
 800d190:	4c25      	ldr	r4, [pc, #148]	@ (800d228 <__pow5mult+0xa8>)
 800d192:	3a01      	subs	r2, #1
 800d194:	2300      	movs	r3, #0
 800d196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d19a:	f7ff fe9f 	bl	800cedc <__multadd>
 800d19e:	4606      	mov	r6, r0
 800d1a0:	10ad      	asrs	r5, r5, #2
 800d1a2:	d03d      	beq.n	800d220 <__pow5mult+0xa0>
 800d1a4:	69fc      	ldr	r4, [r7, #28]
 800d1a6:	b97c      	cbnz	r4, 800d1c8 <__pow5mult+0x48>
 800d1a8:	2010      	movs	r0, #16
 800d1aa:	f7ff fd7f 	bl	800ccac <malloc>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	61f8      	str	r0, [r7, #28]
 800d1b2:	b928      	cbnz	r0, 800d1c0 <__pow5mult+0x40>
 800d1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d22c <__pow5mult+0xac>)
 800d1b6:	481e      	ldr	r0, [pc, #120]	@ (800d230 <__pow5mult+0xb0>)
 800d1b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d1bc:	f000 fbdc 	bl	800d978 <__assert_func>
 800d1c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1c4:	6004      	str	r4, [r0, #0]
 800d1c6:	60c4      	str	r4, [r0, #12]
 800d1c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d0:	b94c      	cbnz	r4, 800d1e6 <__pow5mult+0x66>
 800d1d2:	f240 2171 	movw	r1, #625	@ 0x271
 800d1d6:	4638      	mov	r0, r7
 800d1d8:	f7ff ff12 	bl	800d000 <__i2b>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	f04f 0900 	mov.w	r9, #0
 800d1ea:	07eb      	lsls	r3, r5, #31
 800d1ec:	d50a      	bpl.n	800d204 <__pow5mult+0x84>
 800d1ee:	4631      	mov	r1, r6
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	f7ff ff1a 	bl	800d02c <__multiply>
 800d1f8:	4631      	mov	r1, r6
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7ff fe4b 	bl	800ce98 <_Bfree>
 800d202:	4646      	mov	r6, r8
 800d204:	106d      	asrs	r5, r5, #1
 800d206:	d00b      	beq.n	800d220 <__pow5mult+0xa0>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	b938      	cbnz	r0, 800d21c <__pow5mult+0x9c>
 800d20c:	4622      	mov	r2, r4
 800d20e:	4621      	mov	r1, r4
 800d210:	4638      	mov	r0, r7
 800d212:	f7ff ff0b 	bl	800d02c <__multiply>
 800d216:	6020      	str	r0, [r4, #0]
 800d218:	f8c0 9000 	str.w	r9, [r0]
 800d21c:	4604      	mov	r4, r0
 800d21e:	e7e4      	b.n	800d1ea <__pow5mult+0x6a>
 800d220:	4630      	mov	r0, r6
 800d222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d226:	bf00      	nop
 800d228:	0800ebec 	.word	0x0800ebec
 800d22c:	0800eb11 	.word	0x0800eb11
 800d230:	0800eb91 	.word	0x0800eb91

0800d234 <__lshift>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	6849      	ldr	r1, [r1, #4]
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d242:	68a3      	ldr	r3, [r4, #8]
 800d244:	4607      	mov	r7, r0
 800d246:	4691      	mov	r9, r2
 800d248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d24c:	f108 0601 	add.w	r6, r8, #1
 800d250:	42b3      	cmp	r3, r6
 800d252:	db0b      	blt.n	800d26c <__lshift+0x38>
 800d254:	4638      	mov	r0, r7
 800d256:	f7ff fddf 	bl	800ce18 <_Balloc>
 800d25a:	4605      	mov	r5, r0
 800d25c:	b948      	cbnz	r0, 800d272 <__lshift+0x3e>
 800d25e:	4602      	mov	r2, r0
 800d260:	4b28      	ldr	r3, [pc, #160]	@ (800d304 <__lshift+0xd0>)
 800d262:	4829      	ldr	r0, [pc, #164]	@ (800d308 <__lshift+0xd4>)
 800d264:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d268:	f000 fb86 	bl	800d978 <__assert_func>
 800d26c:	3101      	adds	r1, #1
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	e7ee      	b.n	800d250 <__lshift+0x1c>
 800d272:	2300      	movs	r3, #0
 800d274:	f100 0114 	add.w	r1, r0, #20
 800d278:	f100 0210 	add.w	r2, r0, #16
 800d27c:	4618      	mov	r0, r3
 800d27e:	4553      	cmp	r3, sl
 800d280:	db33      	blt.n	800d2ea <__lshift+0xb6>
 800d282:	6920      	ldr	r0, [r4, #16]
 800d284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d288:	f104 0314 	add.w	r3, r4, #20
 800d28c:	f019 091f 	ands.w	r9, r9, #31
 800d290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d294:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d298:	d02b      	beq.n	800d2f2 <__lshift+0xbe>
 800d29a:	f1c9 0e20 	rsb	lr, r9, #32
 800d29e:	468a      	mov	sl, r1
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	6818      	ldr	r0, [r3, #0]
 800d2a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d2a8:	4310      	orrs	r0, r2
 800d2aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b2:	459c      	cmp	ip, r3
 800d2b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2b8:	d8f3      	bhi.n	800d2a2 <__lshift+0x6e>
 800d2ba:	ebac 0304 	sub.w	r3, ip, r4
 800d2be:	3b15      	subs	r3, #21
 800d2c0:	f023 0303 	bic.w	r3, r3, #3
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	f104 0015 	add.w	r0, r4, #21
 800d2ca:	4584      	cmp	ip, r0
 800d2cc:	bf38      	it	cc
 800d2ce:	2304      	movcc	r3, #4
 800d2d0:	50ca      	str	r2, [r1, r3]
 800d2d2:	b10a      	cbz	r2, 800d2d8 <__lshift+0xa4>
 800d2d4:	f108 0602 	add.w	r6, r8, #2
 800d2d8:	3e01      	subs	r6, #1
 800d2da:	4638      	mov	r0, r7
 800d2dc:	612e      	str	r6, [r5, #16]
 800d2de:	4621      	mov	r1, r4
 800d2e0:	f7ff fdda 	bl	800ce98 <_Bfree>
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	e7c5      	b.n	800d27e <__lshift+0x4a>
 800d2f2:	3904      	subs	r1, #4
 800d2f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2fc:	459c      	cmp	ip, r3
 800d2fe:	d8f9      	bhi.n	800d2f4 <__lshift+0xc0>
 800d300:	e7ea      	b.n	800d2d8 <__lshift+0xa4>
 800d302:	bf00      	nop
 800d304:	0800eb80 	.word	0x0800eb80
 800d308:	0800eb91 	.word	0x0800eb91

0800d30c <__mcmp>:
 800d30c:	690a      	ldr	r2, [r1, #16]
 800d30e:	4603      	mov	r3, r0
 800d310:	6900      	ldr	r0, [r0, #16]
 800d312:	1a80      	subs	r0, r0, r2
 800d314:	b530      	push	{r4, r5, lr}
 800d316:	d10e      	bne.n	800d336 <__mcmp+0x2a>
 800d318:	3314      	adds	r3, #20
 800d31a:	3114      	adds	r1, #20
 800d31c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d320:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d324:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d328:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d32c:	4295      	cmp	r5, r2
 800d32e:	d003      	beq.n	800d338 <__mcmp+0x2c>
 800d330:	d205      	bcs.n	800d33e <__mcmp+0x32>
 800d332:	f04f 30ff 	mov.w	r0, #4294967295
 800d336:	bd30      	pop	{r4, r5, pc}
 800d338:	42a3      	cmp	r3, r4
 800d33a:	d3f3      	bcc.n	800d324 <__mcmp+0x18>
 800d33c:	e7fb      	b.n	800d336 <__mcmp+0x2a>
 800d33e:	2001      	movs	r0, #1
 800d340:	e7f9      	b.n	800d336 <__mcmp+0x2a>
	...

0800d344 <__mdiff>:
 800d344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d348:	4689      	mov	r9, r1
 800d34a:	4606      	mov	r6, r0
 800d34c:	4611      	mov	r1, r2
 800d34e:	4648      	mov	r0, r9
 800d350:	4614      	mov	r4, r2
 800d352:	f7ff ffdb 	bl	800d30c <__mcmp>
 800d356:	1e05      	subs	r5, r0, #0
 800d358:	d112      	bne.n	800d380 <__mdiff+0x3c>
 800d35a:	4629      	mov	r1, r5
 800d35c:	4630      	mov	r0, r6
 800d35e:	f7ff fd5b 	bl	800ce18 <_Balloc>
 800d362:	4602      	mov	r2, r0
 800d364:	b928      	cbnz	r0, 800d372 <__mdiff+0x2e>
 800d366:	4b3f      	ldr	r3, [pc, #252]	@ (800d464 <__mdiff+0x120>)
 800d368:	f240 2137 	movw	r1, #567	@ 0x237
 800d36c:	483e      	ldr	r0, [pc, #248]	@ (800d468 <__mdiff+0x124>)
 800d36e:	f000 fb03 	bl	800d978 <__assert_func>
 800d372:	2301      	movs	r3, #1
 800d374:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d378:	4610      	mov	r0, r2
 800d37a:	b003      	add	sp, #12
 800d37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d380:	bfbc      	itt	lt
 800d382:	464b      	movlt	r3, r9
 800d384:	46a1      	movlt	r9, r4
 800d386:	4630      	mov	r0, r6
 800d388:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d38c:	bfba      	itte	lt
 800d38e:	461c      	movlt	r4, r3
 800d390:	2501      	movlt	r5, #1
 800d392:	2500      	movge	r5, #0
 800d394:	f7ff fd40 	bl	800ce18 <_Balloc>
 800d398:	4602      	mov	r2, r0
 800d39a:	b918      	cbnz	r0, 800d3a4 <__mdiff+0x60>
 800d39c:	4b31      	ldr	r3, [pc, #196]	@ (800d464 <__mdiff+0x120>)
 800d39e:	f240 2145 	movw	r1, #581	@ 0x245
 800d3a2:	e7e3      	b.n	800d36c <__mdiff+0x28>
 800d3a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d3a8:	6926      	ldr	r6, [r4, #16]
 800d3aa:	60c5      	str	r5, [r0, #12]
 800d3ac:	f109 0310 	add.w	r3, r9, #16
 800d3b0:	f109 0514 	add.w	r5, r9, #20
 800d3b4:	f104 0e14 	add.w	lr, r4, #20
 800d3b8:	f100 0b14 	add.w	fp, r0, #20
 800d3bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d3c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d3c4:	9301      	str	r3, [sp, #4]
 800d3c6:	46d9      	mov	r9, fp
 800d3c8:	f04f 0c00 	mov.w	ip, #0
 800d3cc:	9b01      	ldr	r3, [sp, #4]
 800d3ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d3d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	fa1f f38a 	uxth.w	r3, sl
 800d3dc:	4619      	mov	r1, r3
 800d3de:	b283      	uxth	r3, r0
 800d3e0:	1acb      	subs	r3, r1, r3
 800d3e2:	0c00      	lsrs	r0, r0, #16
 800d3e4:	4463      	add	r3, ip
 800d3e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3f4:	4576      	cmp	r6, lr
 800d3f6:	f849 3b04 	str.w	r3, [r9], #4
 800d3fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3fe:	d8e5      	bhi.n	800d3cc <__mdiff+0x88>
 800d400:	1b33      	subs	r3, r6, r4
 800d402:	3b15      	subs	r3, #21
 800d404:	f023 0303 	bic.w	r3, r3, #3
 800d408:	3415      	adds	r4, #21
 800d40a:	3304      	adds	r3, #4
 800d40c:	42a6      	cmp	r6, r4
 800d40e:	bf38      	it	cc
 800d410:	2304      	movcc	r3, #4
 800d412:	441d      	add	r5, r3
 800d414:	445b      	add	r3, fp
 800d416:	461e      	mov	r6, r3
 800d418:	462c      	mov	r4, r5
 800d41a:	4544      	cmp	r4, r8
 800d41c:	d30e      	bcc.n	800d43c <__mdiff+0xf8>
 800d41e:	f108 0103 	add.w	r1, r8, #3
 800d422:	1b49      	subs	r1, r1, r5
 800d424:	f021 0103 	bic.w	r1, r1, #3
 800d428:	3d03      	subs	r5, #3
 800d42a:	45a8      	cmp	r8, r5
 800d42c:	bf38      	it	cc
 800d42e:	2100      	movcc	r1, #0
 800d430:	440b      	add	r3, r1
 800d432:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d436:	b191      	cbz	r1, 800d45e <__mdiff+0x11a>
 800d438:	6117      	str	r7, [r2, #16]
 800d43a:	e79d      	b.n	800d378 <__mdiff+0x34>
 800d43c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d440:	46e6      	mov	lr, ip
 800d442:	0c08      	lsrs	r0, r1, #16
 800d444:	fa1c fc81 	uxtah	ip, ip, r1
 800d448:	4471      	add	r1, lr
 800d44a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d44e:	b289      	uxth	r1, r1
 800d450:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d454:	f846 1b04 	str.w	r1, [r6], #4
 800d458:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d45c:	e7dd      	b.n	800d41a <__mdiff+0xd6>
 800d45e:	3f01      	subs	r7, #1
 800d460:	e7e7      	b.n	800d432 <__mdiff+0xee>
 800d462:	bf00      	nop
 800d464:	0800eb80 	.word	0x0800eb80
 800d468:	0800eb91 	.word	0x0800eb91

0800d46c <__d2b>:
 800d46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d470:	460f      	mov	r7, r1
 800d472:	2101      	movs	r1, #1
 800d474:	ec59 8b10 	vmov	r8, r9, d0
 800d478:	4616      	mov	r6, r2
 800d47a:	f7ff fccd 	bl	800ce18 <_Balloc>
 800d47e:	4604      	mov	r4, r0
 800d480:	b930      	cbnz	r0, 800d490 <__d2b+0x24>
 800d482:	4602      	mov	r2, r0
 800d484:	4b23      	ldr	r3, [pc, #140]	@ (800d514 <__d2b+0xa8>)
 800d486:	4824      	ldr	r0, [pc, #144]	@ (800d518 <__d2b+0xac>)
 800d488:	f240 310f 	movw	r1, #783	@ 0x30f
 800d48c:	f000 fa74 	bl	800d978 <__assert_func>
 800d490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d498:	b10d      	cbz	r5, 800d49e <__d2b+0x32>
 800d49a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d4a4:	d023      	beq.n	800d4ee <__d2b+0x82>
 800d4a6:	4668      	mov	r0, sp
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	f7ff fd7c 	bl	800cfa6 <__lo0bits>
 800d4ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4b2:	b1d0      	cbz	r0, 800d4ea <__d2b+0x7e>
 800d4b4:	f1c0 0320 	rsb	r3, r0, #32
 800d4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4bc:	430b      	orrs	r3, r1
 800d4be:	40c2      	lsrs	r2, r0
 800d4c0:	6163      	str	r3, [r4, #20]
 800d4c2:	9201      	str	r2, [sp, #4]
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	61a3      	str	r3, [r4, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bf0c      	ite	eq
 800d4cc:	2201      	moveq	r2, #1
 800d4ce:	2202      	movne	r2, #2
 800d4d0:	6122      	str	r2, [r4, #16]
 800d4d2:	b1a5      	cbz	r5, 800d4fe <__d2b+0x92>
 800d4d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4d8:	4405      	add	r5, r0
 800d4da:	603d      	str	r5, [r7, #0]
 800d4dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4e0:	6030      	str	r0, [r6, #0]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	b003      	add	sp, #12
 800d4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4ea:	6161      	str	r1, [r4, #20]
 800d4ec:	e7ea      	b.n	800d4c4 <__d2b+0x58>
 800d4ee:	a801      	add	r0, sp, #4
 800d4f0:	f7ff fd59 	bl	800cfa6 <__lo0bits>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	6163      	str	r3, [r4, #20]
 800d4f8:	3020      	adds	r0, #32
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	e7e8      	b.n	800d4d0 <__d2b+0x64>
 800d4fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d502:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d506:	6038      	str	r0, [r7, #0]
 800d508:	6918      	ldr	r0, [r3, #16]
 800d50a:	f7ff fd2d 	bl	800cf68 <__hi0bits>
 800d50e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d512:	e7e5      	b.n	800d4e0 <__d2b+0x74>
 800d514:	0800eb80 	.word	0x0800eb80
 800d518:	0800eb91 	.word	0x0800eb91

0800d51c <__ssputs_r>:
 800d51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d520:	688e      	ldr	r6, [r1, #8]
 800d522:	461f      	mov	r7, r3
 800d524:	42be      	cmp	r6, r7
 800d526:	680b      	ldr	r3, [r1, #0]
 800d528:	4682      	mov	sl, r0
 800d52a:	460c      	mov	r4, r1
 800d52c:	4690      	mov	r8, r2
 800d52e:	d82d      	bhi.n	800d58c <__ssputs_r+0x70>
 800d530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d534:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d538:	d026      	beq.n	800d588 <__ssputs_r+0x6c>
 800d53a:	6965      	ldr	r5, [r4, #20]
 800d53c:	6909      	ldr	r1, [r1, #16]
 800d53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d542:	eba3 0901 	sub.w	r9, r3, r1
 800d546:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d54a:	1c7b      	adds	r3, r7, #1
 800d54c:	444b      	add	r3, r9
 800d54e:	106d      	asrs	r5, r5, #1
 800d550:	429d      	cmp	r5, r3
 800d552:	bf38      	it	cc
 800d554:	461d      	movcc	r5, r3
 800d556:	0553      	lsls	r3, r2, #21
 800d558:	d527      	bpl.n	800d5aa <__ssputs_r+0x8e>
 800d55a:	4629      	mov	r1, r5
 800d55c:	f7ff fbd0 	bl	800cd00 <_malloc_r>
 800d560:	4606      	mov	r6, r0
 800d562:	b360      	cbz	r0, 800d5be <__ssputs_r+0xa2>
 800d564:	6921      	ldr	r1, [r4, #16]
 800d566:	464a      	mov	r2, r9
 800d568:	f7fe fcfb 	bl	800bf62 <memcpy>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	6126      	str	r6, [r4, #16]
 800d57a:	6165      	str	r5, [r4, #20]
 800d57c:	444e      	add	r6, r9
 800d57e:	eba5 0509 	sub.w	r5, r5, r9
 800d582:	6026      	str	r6, [r4, #0]
 800d584:	60a5      	str	r5, [r4, #8]
 800d586:	463e      	mov	r6, r7
 800d588:	42be      	cmp	r6, r7
 800d58a:	d900      	bls.n	800d58e <__ssputs_r+0x72>
 800d58c:	463e      	mov	r6, r7
 800d58e:	6820      	ldr	r0, [r4, #0]
 800d590:	4632      	mov	r2, r6
 800d592:	4641      	mov	r1, r8
 800d594:	f000 f9c6 	bl	800d924 <memmove>
 800d598:	68a3      	ldr	r3, [r4, #8]
 800d59a:	1b9b      	subs	r3, r3, r6
 800d59c:	60a3      	str	r3, [r4, #8]
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	4433      	add	r3, r6
 800d5a2:	6023      	str	r3, [r4, #0]
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5aa:	462a      	mov	r2, r5
 800d5ac:	f000 fa28 	bl	800da00 <_realloc_r>
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d1e0      	bne.n	800d578 <__ssputs_r+0x5c>
 800d5b6:	6921      	ldr	r1, [r4, #16]
 800d5b8:	4650      	mov	r0, sl
 800d5ba:	f7ff fb2d 	bl	800cc18 <_free_r>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	f8ca 3000 	str.w	r3, [sl]
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d0:	e7e9      	b.n	800d5a6 <__ssputs_r+0x8a>
	...

0800d5d4 <_svfiprintf_r>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	4698      	mov	r8, r3
 800d5da:	898b      	ldrh	r3, [r1, #12]
 800d5dc:	061b      	lsls	r3, r3, #24
 800d5de:	b09d      	sub	sp, #116	@ 0x74
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	4614      	mov	r4, r2
 800d5e6:	d510      	bpl.n	800d60a <_svfiprintf_r+0x36>
 800d5e8:	690b      	ldr	r3, [r1, #16]
 800d5ea:	b973      	cbnz	r3, 800d60a <_svfiprintf_r+0x36>
 800d5ec:	2140      	movs	r1, #64	@ 0x40
 800d5ee:	f7ff fb87 	bl	800cd00 <_malloc_r>
 800d5f2:	6028      	str	r0, [r5, #0]
 800d5f4:	6128      	str	r0, [r5, #16]
 800d5f6:	b930      	cbnz	r0, 800d606 <_svfiprintf_r+0x32>
 800d5f8:	230c      	movs	r3, #12
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d600:	b01d      	add	sp, #116	@ 0x74
 800d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d606:	2340      	movs	r3, #64	@ 0x40
 800d608:	616b      	str	r3, [r5, #20]
 800d60a:	2300      	movs	r3, #0
 800d60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d60e:	2320      	movs	r3, #32
 800d610:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d614:	f8cd 800c 	str.w	r8, [sp, #12]
 800d618:	2330      	movs	r3, #48	@ 0x30
 800d61a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7b8 <_svfiprintf_r+0x1e4>
 800d61e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d622:	f04f 0901 	mov.w	r9, #1
 800d626:	4623      	mov	r3, r4
 800d628:	469a      	mov	sl, r3
 800d62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d62e:	b10a      	cbz	r2, 800d634 <_svfiprintf_r+0x60>
 800d630:	2a25      	cmp	r2, #37	@ 0x25
 800d632:	d1f9      	bne.n	800d628 <_svfiprintf_r+0x54>
 800d634:	ebba 0b04 	subs.w	fp, sl, r4
 800d638:	d00b      	beq.n	800d652 <_svfiprintf_r+0x7e>
 800d63a:	465b      	mov	r3, fp
 800d63c:	4622      	mov	r2, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	4638      	mov	r0, r7
 800d642:	f7ff ff6b 	bl	800d51c <__ssputs_r>
 800d646:	3001      	adds	r0, #1
 800d648:	f000 80a7 	beq.w	800d79a <_svfiprintf_r+0x1c6>
 800d64c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d64e:	445a      	add	r2, fp
 800d650:	9209      	str	r2, [sp, #36]	@ 0x24
 800d652:	f89a 3000 	ldrb.w	r3, [sl]
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 809f 	beq.w	800d79a <_svfiprintf_r+0x1c6>
 800d65c:	2300      	movs	r3, #0
 800d65e:	f04f 32ff 	mov.w	r2, #4294967295
 800d662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d666:	f10a 0a01 	add.w	sl, sl, #1
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	9307      	str	r3, [sp, #28]
 800d66e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d672:	931a      	str	r3, [sp, #104]	@ 0x68
 800d674:	4654      	mov	r4, sl
 800d676:	2205      	movs	r2, #5
 800d678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67c:	484e      	ldr	r0, [pc, #312]	@ (800d7b8 <_svfiprintf_r+0x1e4>)
 800d67e:	f7f2 fdc7 	bl	8000210 <memchr>
 800d682:	9a04      	ldr	r2, [sp, #16]
 800d684:	b9d8      	cbnz	r0, 800d6be <_svfiprintf_r+0xea>
 800d686:	06d0      	lsls	r0, r2, #27
 800d688:	bf44      	itt	mi
 800d68a:	2320      	movmi	r3, #32
 800d68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d690:	0711      	lsls	r1, r2, #28
 800d692:	bf44      	itt	mi
 800d694:	232b      	movmi	r3, #43	@ 0x2b
 800d696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d69a:	f89a 3000 	ldrb.w	r3, [sl]
 800d69e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a0:	d015      	beq.n	800d6ce <_svfiprintf_r+0xfa>
 800d6a2:	9a07      	ldr	r2, [sp, #28]
 800d6a4:	4654      	mov	r4, sl
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f04f 0c0a 	mov.w	ip, #10
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b2:	3b30      	subs	r3, #48	@ 0x30
 800d6b4:	2b09      	cmp	r3, #9
 800d6b6:	d94b      	bls.n	800d750 <_svfiprintf_r+0x17c>
 800d6b8:	b1b0      	cbz	r0, 800d6e8 <_svfiprintf_r+0x114>
 800d6ba:	9207      	str	r2, [sp, #28]
 800d6bc:	e014      	b.n	800d6e8 <_svfiprintf_r+0x114>
 800d6be:	eba0 0308 	sub.w	r3, r0, r8
 800d6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	9304      	str	r3, [sp, #16]
 800d6ca:	46a2      	mov	sl, r4
 800d6cc:	e7d2      	b.n	800d674 <_svfiprintf_r+0xa0>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	1d19      	adds	r1, r3, #4
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	9103      	str	r1, [sp, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	bfbb      	ittet	lt
 800d6da:	425b      	neglt	r3, r3
 800d6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e0:	9307      	strge	r3, [sp, #28]
 800d6e2:	9307      	strlt	r3, [sp, #28]
 800d6e4:	bfb8      	it	lt
 800d6e6:	9204      	strlt	r2, [sp, #16]
 800d6e8:	7823      	ldrb	r3, [r4, #0]
 800d6ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6ec:	d10a      	bne.n	800d704 <_svfiprintf_r+0x130>
 800d6ee:	7863      	ldrb	r3, [r4, #1]
 800d6f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6f2:	d132      	bne.n	800d75a <_svfiprintf_r+0x186>
 800d6f4:	9b03      	ldr	r3, [sp, #12]
 800d6f6:	1d1a      	adds	r2, r3, #4
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	9203      	str	r2, [sp, #12]
 800d6fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d700:	3402      	adds	r4, #2
 800d702:	9305      	str	r3, [sp, #20]
 800d704:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7c8 <_svfiprintf_r+0x1f4>
 800d708:	7821      	ldrb	r1, [r4, #0]
 800d70a:	2203      	movs	r2, #3
 800d70c:	4650      	mov	r0, sl
 800d70e:	f7f2 fd7f 	bl	8000210 <memchr>
 800d712:	b138      	cbz	r0, 800d724 <_svfiprintf_r+0x150>
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	eba0 000a 	sub.w	r0, r0, sl
 800d71a:	2240      	movs	r2, #64	@ 0x40
 800d71c:	4082      	lsls	r2, r0
 800d71e:	4313      	orrs	r3, r2
 800d720:	3401      	adds	r4, #1
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d728:	4824      	ldr	r0, [pc, #144]	@ (800d7bc <_svfiprintf_r+0x1e8>)
 800d72a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d72e:	2206      	movs	r2, #6
 800d730:	f7f2 fd6e 	bl	8000210 <memchr>
 800d734:	2800      	cmp	r0, #0
 800d736:	d036      	beq.n	800d7a6 <_svfiprintf_r+0x1d2>
 800d738:	4b21      	ldr	r3, [pc, #132]	@ (800d7c0 <_svfiprintf_r+0x1ec>)
 800d73a:	bb1b      	cbnz	r3, 800d784 <_svfiprintf_r+0x1b0>
 800d73c:	9b03      	ldr	r3, [sp, #12]
 800d73e:	3307      	adds	r3, #7
 800d740:	f023 0307 	bic.w	r3, r3, #7
 800d744:	3308      	adds	r3, #8
 800d746:	9303      	str	r3, [sp, #12]
 800d748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d74a:	4433      	add	r3, r6
 800d74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d74e:	e76a      	b.n	800d626 <_svfiprintf_r+0x52>
 800d750:	fb0c 3202 	mla	r2, ip, r2, r3
 800d754:	460c      	mov	r4, r1
 800d756:	2001      	movs	r0, #1
 800d758:	e7a8      	b.n	800d6ac <_svfiprintf_r+0xd8>
 800d75a:	2300      	movs	r3, #0
 800d75c:	3401      	adds	r4, #1
 800d75e:	9305      	str	r3, [sp, #20]
 800d760:	4619      	mov	r1, r3
 800d762:	f04f 0c0a 	mov.w	ip, #10
 800d766:	4620      	mov	r0, r4
 800d768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d76c:	3a30      	subs	r2, #48	@ 0x30
 800d76e:	2a09      	cmp	r2, #9
 800d770:	d903      	bls.n	800d77a <_svfiprintf_r+0x1a6>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d0c6      	beq.n	800d704 <_svfiprintf_r+0x130>
 800d776:	9105      	str	r1, [sp, #20]
 800d778:	e7c4      	b.n	800d704 <_svfiprintf_r+0x130>
 800d77a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d77e:	4604      	mov	r4, r0
 800d780:	2301      	movs	r3, #1
 800d782:	e7f0      	b.n	800d766 <_svfiprintf_r+0x192>
 800d784:	ab03      	add	r3, sp, #12
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	462a      	mov	r2, r5
 800d78a:	4b0e      	ldr	r3, [pc, #56]	@ (800d7c4 <_svfiprintf_r+0x1f0>)
 800d78c:	a904      	add	r1, sp, #16
 800d78e:	4638      	mov	r0, r7
 800d790:	f7fd fe34 	bl	800b3fc <_printf_float>
 800d794:	1c42      	adds	r2, r0, #1
 800d796:	4606      	mov	r6, r0
 800d798:	d1d6      	bne.n	800d748 <_svfiprintf_r+0x174>
 800d79a:	89ab      	ldrh	r3, [r5, #12]
 800d79c:	065b      	lsls	r3, r3, #25
 800d79e:	f53f af2d 	bmi.w	800d5fc <_svfiprintf_r+0x28>
 800d7a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7a4:	e72c      	b.n	800d600 <_svfiprintf_r+0x2c>
 800d7a6:	ab03      	add	r3, sp, #12
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	4b05      	ldr	r3, [pc, #20]	@ (800d7c4 <_svfiprintf_r+0x1f0>)
 800d7ae:	a904      	add	r1, sp, #16
 800d7b0:	4638      	mov	r0, r7
 800d7b2:	f7fe f8bb 	bl	800b92c <_printf_i>
 800d7b6:	e7ed      	b.n	800d794 <_svfiprintf_r+0x1c0>
 800d7b8:	0800ece8 	.word	0x0800ece8
 800d7bc:	0800ecf2 	.word	0x0800ecf2
 800d7c0:	0800b3fd 	.word	0x0800b3fd
 800d7c4:	0800d51d 	.word	0x0800d51d
 800d7c8:	0800ecee 	.word	0x0800ecee

0800d7cc <__sflush_r>:
 800d7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	0716      	lsls	r6, r2, #28
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	460c      	mov	r4, r1
 800d7da:	d454      	bmi.n	800d886 <__sflush_r+0xba>
 800d7dc:	684b      	ldr	r3, [r1, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	dc02      	bgt.n	800d7e8 <__sflush_r+0x1c>
 800d7e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	dd48      	ble.n	800d87a <__sflush_r+0xae>
 800d7e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ea:	2e00      	cmp	r6, #0
 800d7ec:	d045      	beq.n	800d87a <__sflush_r+0xae>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7f4:	682f      	ldr	r7, [r5, #0]
 800d7f6:	6a21      	ldr	r1, [r4, #32]
 800d7f8:	602b      	str	r3, [r5, #0]
 800d7fa:	d030      	beq.n	800d85e <__sflush_r+0x92>
 800d7fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7fe:	89a3      	ldrh	r3, [r4, #12]
 800d800:	0759      	lsls	r1, r3, #29
 800d802:	d505      	bpl.n	800d810 <__sflush_r+0x44>
 800d804:	6863      	ldr	r3, [r4, #4]
 800d806:	1ad2      	subs	r2, r2, r3
 800d808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d80a:	b10b      	cbz	r3, 800d810 <__sflush_r+0x44>
 800d80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d80e:	1ad2      	subs	r2, r2, r3
 800d810:	2300      	movs	r3, #0
 800d812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d814:	6a21      	ldr	r1, [r4, #32]
 800d816:	4628      	mov	r0, r5
 800d818:	47b0      	blx	r6
 800d81a:	1c43      	adds	r3, r0, #1
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	d106      	bne.n	800d82e <__sflush_r+0x62>
 800d820:	6829      	ldr	r1, [r5, #0]
 800d822:	291d      	cmp	r1, #29
 800d824:	d82b      	bhi.n	800d87e <__sflush_r+0xb2>
 800d826:	4a2a      	ldr	r2, [pc, #168]	@ (800d8d0 <__sflush_r+0x104>)
 800d828:	410a      	asrs	r2, r1
 800d82a:	07d6      	lsls	r6, r2, #31
 800d82c:	d427      	bmi.n	800d87e <__sflush_r+0xb2>
 800d82e:	2200      	movs	r2, #0
 800d830:	6062      	str	r2, [r4, #4]
 800d832:	04d9      	lsls	r1, r3, #19
 800d834:	6922      	ldr	r2, [r4, #16]
 800d836:	6022      	str	r2, [r4, #0]
 800d838:	d504      	bpl.n	800d844 <__sflush_r+0x78>
 800d83a:	1c42      	adds	r2, r0, #1
 800d83c:	d101      	bne.n	800d842 <__sflush_r+0x76>
 800d83e:	682b      	ldr	r3, [r5, #0]
 800d840:	b903      	cbnz	r3, 800d844 <__sflush_r+0x78>
 800d842:	6560      	str	r0, [r4, #84]	@ 0x54
 800d844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d846:	602f      	str	r7, [r5, #0]
 800d848:	b1b9      	cbz	r1, 800d87a <__sflush_r+0xae>
 800d84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d84e:	4299      	cmp	r1, r3
 800d850:	d002      	beq.n	800d858 <__sflush_r+0x8c>
 800d852:	4628      	mov	r0, r5
 800d854:	f7ff f9e0 	bl	800cc18 <_free_r>
 800d858:	2300      	movs	r3, #0
 800d85a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d85c:	e00d      	b.n	800d87a <__sflush_r+0xae>
 800d85e:	2301      	movs	r3, #1
 800d860:	4628      	mov	r0, r5
 800d862:	47b0      	blx	r6
 800d864:	4602      	mov	r2, r0
 800d866:	1c50      	adds	r0, r2, #1
 800d868:	d1c9      	bne.n	800d7fe <__sflush_r+0x32>
 800d86a:	682b      	ldr	r3, [r5, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0c6      	beq.n	800d7fe <__sflush_r+0x32>
 800d870:	2b1d      	cmp	r3, #29
 800d872:	d001      	beq.n	800d878 <__sflush_r+0xac>
 800d874:	2b16      	cmp	r3, #22
 800d876:	d11e      	bne.n	800d8b6 <__sflush_r+0xea>
 800d878:	602f      	str	r7, [r5, #0]
 800d87a:	2000      	movs	r0, #0
 800d87c:	e022      	b.n	800d8c4 <__sflush_r+0xf8>
 800d87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d882:	b21b      	sxth	r3, r3
 800d884:	e01b      	b.n	800d8be <__sflush_r+0xf2>
 800d886:	690f      	ldr	r7, [r1, #16]
 800d888:	2f00      	cmp	r7, #0
 800d88a:	d0f6      	beq.n	800d87a <__sflush_r+0xae>
 800d88c:	0793      	lsls	r3, r2, #30
 800d88e:	680e      	ldr	r6, [r1, #0]
 800d890:	bf08      	it	eq
 800d892:	694b      	ldreq	r3, [r1, #20]
 800d894:	600f      	str	r7, [r1, #0]
 800d896:	bf18      	it	ne
 800d898:	2300      	movne	r3, #0
 800d89a:	eba6 0807 	sub.w	r8, r6, r7
 800d89e:	608b      	str	r3, [r1, #8]
 800d8a0:	f1b8 0f00 	cmp.w	r8, #0
 800d8a4:	dde9      	ble.n	800d87a <__sflush_r+0xae>
 800d8a6:	6a21      	ldr	r1, [r4, #32]
 800d8a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8aa:	4643      	mov	r3, r8
 800d8ac:	463a      	mov	r2, r7
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	47b0      	blx	r6
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	dc08      	bgt.n	800d8c8 <__sflush_r+0xfc>
 800d8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c8:	4407      	add	r7, r0
 800d8ca:	eba8 0800 	sub.w	r8, r8, r0
 800d8ce:	e7e7      	b.n	800d8a0 <__sflush_r+0xd4>
 800d8d0:	dfbffffe 	.word	0xdfbffffe

0800d8d4 <_fflush_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	690b      	ldr	r3, [r1, #16]
 800d8d8:	4605      	mov	r5, r0
 800d8da:	460c      	mov	r4, r1
 800d8dc:	b913      	cbnz	r3, 800d8e4 <_fflush_r+0x10>
 800d8de:	2500      	movs	r5, #0
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}
 800d8e4:	b118      	cbz	r0, 800d8ee <_fflush_r+0x1a>
 800d8e6:	6a03      	ldr	r3, [r0, #32]
 800d8e8:	b90b      	cbnz	r3, 800d8ee <_fflush_r+0x1a>
 800d8ea:	f7fe f9cb 	bl	800bc84 <__sinit>
 800d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0f3      	beq.n	800d8de <_fflush_r+0xa>
 800d8f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8f8:	07d0      	lsls	r0, r2, #31
 800d8fa:	d404      	bmi.n	800d906 <_fflush_r+0x32>
 800d8fc:	0599      	lsls	r1, r3, #22
 800d8fe:	d402      	bmi.n	800d906 <_fflush_r+0x32>
 800d900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d902:	f7fe fb2c 	bl	800bf5e <__retarget_lock_acquire_recursive>
 800d906:	4628      	mov	r0, r5
 800d908:	4621      	mov	r1, r4
 800d90a:	f7ff ff5f 	bl	800d7cc <__sflush_r>
 800d90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d910:	07da      	lsls	r2, r3, #31
 800d912:	4605      	mov	r5, r0
 800d914:	d4e4      	bmi.n	800d8e0 <_fflush_r+0xc>
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	059b      	lsls	r3, r3, #22
 800d91a:	d4e1      	bmi.n	800d8e0 <_fflush_r+0xc>
 800d91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d91e:	f7fe fb1f 	bl	800bf60 <__retarget_lock_release_recursive>
 800d922:	e7dd      	b.n	800d8e0 <_fflush_r+0xc>

0800d924 <memmove>:
 800d924:	4288      	cmp	r0, r1
 800d926:	b510      	push	{r4, lr}
 800d928:	eb01 0402 	add.w	r4, r1, r2
 800d92c:	d902      	bls.n	800d934 <memmove+0x10>
 800d92e:	4284      	cmp	r4, r0
 800d930:	4623      	mov	r3, r4
 800d932:	d807      	bhi.n	800d944 <memmove+0x20>
 800d934:	1e43      	subs	r3, r0, #1
 800d936:	42a1      	cmp	r1, r4
 800d938:	d008      	beq.n	800d94c <memmove+0x28>
 800d93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d942:	e7f8      	b.n	800d936 <memmove+0x12>
 800d944:	4402      	add	r2, r0
 800d946:	4601      	mov	r1, r0
 800d948:	428a      	cmp	r2, r1
 800d94a:	d100      	bne.n	800d94e <memmove+0x2a>
 800d94c:	bd10      	pop	{r4, pc}
 800d94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d956:	e7f7      	b.n	800d948 <memmove+0x24>

0800d958 <_sbrk_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_sbrk_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f5 faba 	bl	8002edc <_sbrk>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_sbrk_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_sbrk_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	2001ac0c 	.word	0x2001ac0c

0800d978 <__assert_func>:
 800d978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d97a:	4614      	mov	r4, r2
 800d97c:	461a      	mov	r2, r3
 800d97e:	4b09      	ldr	r3, [pc, #36]	@ (800d9a4 <__assert_func+0x2c>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4605      	mov	r5, r0
 800d984:	68d8      	ldr	r0, [r3, #12]
 800d986:	b954      	cbnz	r4, 800d99e <__assert_func+0x26>
 800d988:	4b07      	ldr	r3, [pc, #28]	@ (800d9a8 <__assert_func+0x30>)
 800d98a:	461c      	mov	r4, r3
 800d98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d990:	9100      	str	r1, [sp, #0]
 800d992:	462b      	mov	r3, r5
 800d994:	4905      	ldr	r1, [pc, #20]	@ (800d9ac <__assert_func+0x34>)
 800d996:	f000 f86f 	bl	800da78 <fiprintf>
 800d99a:	f000 f87f 	bl	800da9c <abort>
 800d99e:	4b04      	ldr	r3, [pc, #16]	@ (800d9b0 <__assert_func+0x38>)
 800d9a0:	e7f4      	b.n	800d98c <__assert_func+0x14>
 800d9a2:	bf00      	nop
 800d9a4:	2000003c 	.word	0x2000003c
 800d9a8:	0800ed3e 	.word	0x0800ed3e
 800d9ac:	0800ed10 	.word	0x0800ed10
 800d9b0:	0800ed03 	.word	0x0800ed03

0800d9b4 <_calloc_r>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	fba1 5402 	umull	r5, r4, r1, r2
 800d9ba:	b93c      	cbnz	r4, 800d9cc <_calloc_r+0x18>
 800d9bc:	4629      	mov	r1, r5
 800d9be:	f7ff f99f 	bl	800cd00 <_malloc_r>
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	b928      	cbnz	r0, 800d9d2 <_calloc_r+0x1e>
 800d9c6:	2600      	movs	r6, #0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	bd70      	pop	{r4, r5, r6, pc}
 800d9cc:	220c      	movs	r2, #12
 800d9ce:	6002      	str	r2, [r0, #0]
 800d9d0:	e7f9      	b.n	800d9c6 <_calloc_r+0x12>
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	f7fe f9ee 	bl	800bdb6 <memset>
 800d9da:	e7f5      	b.n	800d9c8 <_calloc_r+0x14>

0800d9dc <__ascii_mbtowc>:
 800d9dc:	b082      	sub	sp, #8
 800d9de:	b901      	cbnz	r1, 800d9e2 <__ascii_mbtowc+0x6>
 800d9e0:	a901      	add	r1, sp, #4
 800d9e2:	b142      	cbz	r2, 800d9f6 <__ascii_mbtowc+0x1a>
 800d9e4:	b14b      	cbz	r3, 800d9fa <__ascii_mbtowc+0x1e>
 800d9e6:	7813      	ldrb	r3, [r2, #0]
 800d9e8:	600b      	str	r3, [r1, #0]
 800d9ea:	7812      	ldrb	r2, [r2, #0]
 800d9ec:	1e10      	subs	r0, r2, #0
 800d9ee:	bf18      	it	ne
 800d9f0:	2001      	movne	r0, #1
 800d9f2:	b002      	add	sp, #8
 800d9f4:	4770      	bx	lr
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	e7fb      	b.n	800d9f2 <__ascii_mbtowc+0x16>
 800d9fa:	f06f 0001 	mvn.w	r0, #1
 800d9fe:	e7f8      	b.n	800d9f2 <__ascii_mbtowc+0x16>

0800da00 <_realloc_r>:
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	4680      	mov	r8, r0
 800da06:	4615      	mov	r5, r2
 800da08:	460c      	mov	r4, r1
 800da0a:	b921      	cbnz	r1, 800da16 <_realloc_r+0x16>
 800da0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da10:	4611      	mov	r1, r2
 800da12:	f7ff b975 	b.w	800cd00 <_malloc_r>
 800da16:	b92a      	cbnz	r2, 800da24 <_realloc_r+0x24>
 800da18:	f7ff f8fe 	bl	800cc18 <_free_r>
 800da1c:	2400      	movs	r4, #0
 800da1e:	4620      	mov	r0, r4
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	f000 f841 	bl	800daaa <_malloc_usable_size_r>
 800da28:	4285      	cmp	r5, r0
 800da2a:	4606      	mov	r6, r0
 800da2c:	d802      	bhi.n	800da34 <_realloc_r+0x34>
 800da2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800da32:	d8f4      	bhi.n	800da1e <_realloc_r+0x1e>
 800da34:	4629      	mov	r1, r5
 800da36:	4640      	mov	r0, r8
 800da38:	f7ff f962 	bl	800cd00 <_malloc_r>
 800da3c:	4607      	mov	r7, r0
 800da3e:	2800      	cmp	r0, #0
 800da40:	d0ec      	beq.n	800da1c <_realloc_r+0x1c>
 800da42:	42b5      	cmp	r5, r6
 800da44:	462a      	mov	r2, r5
 800da46:	4621      	mov	r1, r4
 800da48:	bf28      	it	cs
 800da4a:	4632      	movcs	r2, r6
 800da4c:	f7fe fa89 	bl	800bf62 <memcpy>
 800da50:	4621      	mov	r1, r4
 800da52:	4640      	mov	r0, r8
 800da54:	f7ff f8e0 	bl	800cc18 <_free_r>
 800da58:	463c      	mov	r4, r7
 800da5a:	e7e0      	b.n	800da1e <_realloc_r+0x1e>

0800da5c <__ascii_wctomb>:
 800da5c:	4603      	mov	r3, r0
 800da5e:	4608      	mov	r0, r1
 800da60:	b141      	cbz	r1, 800da74 <__ascii_wctomb+0x18>
 800da62:	2aff      	cmp	r2, #255	@ 0xff
 800da64:	d904      	bls.n	800da70 <__ascii_wctomb+0x14>
 800da66:	228a      	movs	r2, #138	@ 0x8a
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	f04f 30ff 	mov.w	r0, #4294967295
 800da6e:	4770      	bx	lr
 800da70:	700a      	strb	r2, [r1, #0]
 800da72:	2001      	movs	r0, #1
 800da74:	4770      	bx	lr
	...

0800da78 <fiprintf>:
 800da78:	b40e      	push	{r1, r2, r3}
 800da7a:	b503      	push	{r0, r1, lr}
 800da7c:	4601      	mov	r1, r0
 800da7e:	ab03      	add	r3, sp, #12
 800da80:	4805      	ldr	r0, [pc, #20]	@ (800da98 <fiprintf+0x20>)
 800da82:	f853 2b04 	ldr.w	r2, [r3], #4
 800da86:	6800      	ldr	r0, [r0, #0]
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	f000 f83f 	bl	800db0c <_vfiprintf_r>
 800da8e:	b002      	add	sp, #8
 800da90:	f85d eb04 	ldr.w	lr, [sp], #4
 800da94:	b003      	add	sp, #12
 800da96:	4770      	bx	lr
 800da98:	2000003c 	.word	0x2000003c

0800da9c <abort>:
 800da9c:	b508      	push	{r3, lr}
 800da9e:	2006      	movs	r0, #6
 800daa0:	f000 fa08 	bl	800deb4 <raise>
 800daa4:	2001      	movs	r0, #1
 800daa6:	f7f5 f9a1 	bl	8002dec <_exit>

0800daaa <_malloc_usable_size_r>:
 800daaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daae:	1f18      	subs	r0, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfbc      	itt	lt
 800dab4:	580b      	ldrlt	r3, [r1, r0]
 800dab6:	18c0      	addlt	r0, r0, r3
 800dab8:	4770      	bx	lr

0800daba <__sfputc_r>:
 800daba:	6893      	ldr	r3, [r2, #8]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	b410      	push	{r4}
 800dac2:	6093      	str	r3, [r2, #8]
 800dac4:	da08      	bge.n	800dad8 <__sfputc_r+0x1e>
 800dac6:	6994      	ldr	r4, [r2, #24]
 800dac8:	42a3      	cmp	r3, r4
 800daca:	db01      	blt.n	800dad0 <__sfputc_r+0x16>
 800dacc:	290a      	cmp	r1, #10
 800dace:	d103      	bne.n	800dad8 <__sfputc_r+0x1e>
 800dad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dad4:	f000 b932 	b.w	800dd3c <__swbuf_r>
 800dad8:	6813      	ldr	r3, [r2, #0]
 800dada:	1c58      	adds	r0, r3, #1
 800dadc:	6010      	str	r0, [r2, #0]
 800dade:	7019      	strb	r1, [r3, #0]
 800dae0:	4608      	mov	r0, r1
 800dae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <__sfputs_r>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	4606      	mov	r6, r0
 800daec:	460f      	mov	r7, r1
 800daee:	4614      	mov	r4, r2
 800daf0:	18d5      	adds	r5, r2, r3
 800daf2:	42ac      	cmp	r4, r5
 800daf4:	d101      	bne.n	800dafa <__sfputs_r+0x12>
 800daf6:	2000      	movs	r0, #0
 800daf8:	e007      	b.n	800db0a <__sfputs_r+0x22>
 800dafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dafe:	463a      	mov	r2, r7
 800db00:	4630      	mov	r0, r6
 800db02:	f7ff ffda 	bl	800daba <__sfputc_r>
 800db06:	1c43      	adds	r3, r0, #1
 800db08:	d1f3      	bne.n	800daf2 <__sfputs_r+0xa>
 800db0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db0c <_vfiprintf_r>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	460d      	mov	r5, r1
 800db12:	b09d      	sub	sp, #116	@ 0x74
 800db14:	4614      	mov	r4, r2
 800db16:	4698      	mov	r8, r3
 800db18:	4606      	mov	r6, r0
 800db1a:	b118      	cbz	r0, 800db24 <_vfiprintf_r+0x18>
 800db1c:	6a03      	ldr	r3, [r0, #32]
 800db1e:	b90b      	cbnz	r3, 800db24 <_vfiprintf_r+0x18>
 800db20:	f7fe f8b0 	bl	800bc84 <__sinit>
 800db24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db26:	07d9      	lsls	r1, r3, #31
 800db28:	d405      	bmi.n	800db36 <_vfiprintf_r+0x2a>
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	059a      	lsls	r2, r3, #22
 800db2e:	d402      	bmi.n	800db36 <_vfiprintf_r+0x2a>
 800db30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db32:	f7fe fa14 	bl	800bf5e <__retarget_lock_acquire_recursive>
 800db36:	89ab      	ldrh	r3, [r5, #12]
 800db38:	071b      	lsls	r3, r3, #28
 800db3a:	d501      	bpl.n	800db40 <_vfiprintf_r+0x34>
 800db3c:	692b      	ldr	r3, [r5, #16]
 800db3e:	b99b      	cbnz	r3, 800db68 <_vfiprintf_r+0x5c>
 800db40:	4629      	mov	r1, r5
 800db42:	4630      	mov	r0, r6
 800db44:	f000 f938 	bl	800ddb8 <__swsetup_r>
 800db48:	b170      	cbz	r0, 800db68 <_vfiprintf_r+0x5c>
 800db4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db4c:	07dc      	lsls	r4, r3, #31
 800db4e:	d504      	bpl.n	800db5a <_vfiprintf_r+0x4e>
 800db50:	f04f 30ff 	mov.w	r0, #4294967295
 800db54:	b01d      	add	sp, #116	@ 0x74
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	89ab      	ldrh	r3, [r5, #12]
 800db5c:	0598      	lsls	r0, r3, #22
 800db5e:	d4f7      	bmi.n	800db50 <_vfiprintf_r+0x44>
 800db60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db62:	f7fe f9fd 	bl	800bf60 <__retarget_lock_release_recursive>
 800db66:	e7f3      	b.n	800db50 <_vfiprintf_r+0x44>
 800db68:	2300      	movs	r3, #0
 800db6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db6c:	2320      	movs	r3, #32
 800db6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db72:	f8cd 800c 	str.w	r8, [sp, #12]
 800db76:	2330      	movs	r3, #48	@ 0x30
 800db78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dd28 <_vfiprintf_r+0x21c>
 800db7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db80:	f04f 0901 	mov.w	r9, #1
 800db84:	4623      	mov	r3, r4
 800db86:	469a      	mov	sl, r3
 800db88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8c:	b10a      	cbz	r2, 800db92 <_vfiprintf_r+0x86>
 800db8e:	2a25      	cmp	r2, #37	@ 0x25
 800db90:	d1f9      	bne.n	800db86 <_vfiprintf_r+0x7a>
 800db92:	ebba 0b04 	subs.w	fp, sl, r4
 800db96:	d00b      	beq.n	800dbb0 <_vfiprintf_r+0xa4>
 800db98:	465b      	mov	r3, fp
 800db9a:	4622      	mov	r2, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	4630      	mov	r0, r6
 800dba0:	f7ff ffa2 	bl	800dae8 <__sfputs_r>
 800dba4:	3001      	adds	r0, #1
 800dba6:	f000 80a7 	beq.w	800dcf8 <_vfiprintf_r+0x1ec>
 800dbaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbac:	445a      	add	r2, fp
 800dbae:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f000 809f 	beq.w	800dcf8 <_vfiprintf_r+0x1ec>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc4:	f10a 0a01 	add.w	sl, sl, #1
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9307      	str	r3, [sp, #28]
 800dbcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbd0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbd2:	4654      	mov	r4, sl
 800dbd4:	2205      	movs	r2, #5
 800dbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbda:	4853      	ldr	r0, [pc, #332]	@ (800dd28 <_vfiprintf_r+0x21c>)
 800dbdc:	f7f2 fb18 	bl	8000210 <memchr>
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	b9d8      	cbnz	r0, 800dc1c <_vfiprintf_r+0x110>
 800dbe4:	06d1      	lsls	r1, r2, #27
 800dbe6:	bf44      	itt	mi
 800dbe8:	2320      	movmi	r3, #32
 800dbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbee:	0713      	lsls	r3, r2, #28
 800dbf0:	bf44      	itt	mi
 800dbf2:	232b      	movmi	r3, #43	@ 0x2b
 800dbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbfe:	d015      	beq.n	800dc2c <_vfiprintf_r+0x120>
 800dc00:	9a07      	ldr	r2, [sp, #28]
 800dc02:	4654      	mov	r4, sl
 800dc04:	2000      	movs	r0, #0
 800dc06:	f04f 0c0a 	mov.w	ip, #10
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc10:	3b30      	subs	r3, #48	@ 0x30
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d94b      	bls.n	800dcae <_vfiprintf_r+0x1a2>
 800dc16:	b1b0      	cbz	r0, 800dc46 <_vfiprintf_r+0x13a>
 800dc18:	9207      	str	r2, [sp, #28]
 800dc1a:	e014      	b.n	800dc46 <_vfiprintf_r+0x13a>
 800dc1c:	eba0 0308 	sub.w	r3, r0, r8
 800dc20:	fa09 f303 	lsl.w	r3, r9, r3
 800dc24:	4313      	orrs	r3, r2
 800dc26:	9304      	str	r3, [sp, #16]
 800dc28:	46a2      	mov	sl, r4
 800dc2a:	e7d2      	b.n	800dbd2 <_vfiprintf_r+0xc6>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1d19      	adds	r1, r3, #4
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	9103      	str	r1, [sp, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bfbb      	ittet	lt
 800dc38:	425b      	neglt	r3, r3
 800dc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc3e:	9307      	strge	r3, [sp, #28]
 800dc40:	9307      	strlt	r3, [sp, #28]
 800dc42:	bfb8      	it	lt
 800dc44:	9204      	strlt	r2, [sp, #16]
 800dc46:	7823      	ldrb	r3, [r4, #0]
 800dc48:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc4a:	d10a      	bne.n	800dc62 <_vfiprintf_r+0x156>
 800dc4c:	7863      	ldrb	r3, [r4, #1]
 800dc4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc50:	d132      	bne.n	800dcb8 <_vfiprintf_r+0x1ac>
 800dc52:	9b03      	ldr	r3, [sp, #12]
 800dc54:	1d1a      	adds	r2, r3, #4
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	9203      	str	r2, [sp, #12]
 800dc5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc5e:	3402      	adds	r4, #2
 800dc60:	9305      	str	r3, [sp, #20]
 800dc62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dd38 <_vfiprintf_r+0x22c>
 800dc66:	7821      	ldrb	r1, [r4, #0]
 800dc68:	2203      	movs	r2, #3
 800dc6a:	4650      	mov	r0, sl
 800dc6c:	f7f2 fad0 	bl	8000210 <memchr>
 800dc70:	b138      	cbz	r0, 800dc82 <_vfiprintf_r+0x176>
 800dc72:	9b04      	ldr	r3, [sp, #16]
 800dc74:	eba0 000a 	sub.w	r0, r0, sl
 800dc78:	2240      	movs	r2, #64	@ 0x40
 800dc7a:	4082      	lsls	r2, r0
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	3401      	adds	r4, #1
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc86:	4829      	ldr	r0, [pc, #164]	@ (800dd2c <_vfiprintf_r+0x220>)
 800dc88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc8c:	2206      	movs	r2, #6
 800dc8e:	f7f2 fabf 	bl	8000210 <memchr>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d03f      	beq.n	800dd16 <_vfiprintf_r+0x20a>
 800dc96:	4b26      	ldr	r3, [pc, #152]	@ (800dd30 <_vfiprintf_r+0x224>)
 800dc98:	bb1b      	cbnz	r3, 800dce2 <_vfiprintf_r+0x1d6>
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	3307      	adds	r3, #7
 800dc9e:	f023 0307 	bic.w	r3, r3, #7
 800dca2:	3308      	adds	r3, #8
 800dca4:	9303      	str	r3, [sp, #12]
 800dca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca8:	443b      	add	r3, r7
 800dcaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcac:	e76a      	b.n	800db84 <_vfiprintf_r+0x78>
 800dcae:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	2001      	movs	r0, #1
 800dcb6:	e7a8      	b.n	800dc0a <_vfiprintf_r+0xfe>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	3401      	adds	r4, #1
 800dcbc:	9305      	str	r3, [sp, #20]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	f04f 0c0a 	mov.w	ip, #10
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcca:	3a30      	subs	r2, #48	@ 0x30
 800dccc:	2a09      	cmp	r2, #9
 800dcce:	d903      	bls.n	800dcd8 <_vfiprintf_r+0x1cc>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d0c6      	beq.n	800dc62 <_vfiprintf_r+0x156>
 800dcd4:	9105      	str	r1, [sp, #20]
 800dcd6:	e7c4      	b.n	800dc62 <_vfiprintf_r+0x156>
 800dcd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcdc:	4604      	mov	r4, r0
 800dcde:	2301      	movs	r3, #1
 800dce0:	e7f0      	b.n	800dcc4 <_vfiprintf_r+0x1b8>
 800dce2:	ab03      	add	r3, sp, #12
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	462a      	mov	r2, r5
 800dce8:	4b12      	ldr	r3, [pc, #72]	@ (800dd34 <_vfiprintf_r+0x228>)
 800dcea:	a904      	add	r1, sp, #16
 800dcec:	4630      	mov	r0, r6
 800dcee:	f7fd fb85 	bl	800b3fc <_printf_float>
 800dcf2:	4607      	mov	r7, r0
 800dcf4:	1c78      	adds	r0, r7, #1
 800dcf6:	d1d6      	bne.n	800dca6 <_vfiprintf_r+0x19a>
 800dcf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcfa:	07d9      	lsls	r1, r3, #31
 800dcfc:	d405      	bmi.n	800dd0a <_vfiprintf_r+0x1fe>
 800dcfe:	89ab      	ldrh	r3, [r5, #12]
 800dd00:	059a      	lsls	r2, r3, #22
 800dd02:	d402      	bmi.n	800dd0a <_vfiprintf_r+0x1fe>
 800dd04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd06:	f7fe f92b 	bl	800bf60 <__retarget_lock_release_recursive>
 800dd0a:	89ab      	ldrh	r3, [r5, #12]
 800dd0c:	065b      	lsls	r3, r3, #25
 800dd0e:	f53f af1f 	bmi.w	800db50 <_vfiprintf_r+0x44>
 800dd12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd14:	e71e      	b.n	800db54 <_vfiprintf_r+0x48>
 800dd16:	ab03      	add	r3, sp, #12
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	462a      	mov	r2, r5
 800dd1c:	4b05      	ldr	r3, [pc, #20]	@ (800dd34 <_vfiprintf_r+0x228>)
 800dd1e:	a904      	add	r1, sp, #16
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7fd fe03 	bl	800b92c <_printf_i>
 800dd26:	e7e4      	b.n	800dcf2 <_vfiprintf_r+0x1e6>
 800dd28:	0800ece8 	.word	0x0800ece8
 800dd2c:	0800ecf2 	.word	0x0800ecf2
 800dd30:	0800b3fd 	.word	0x0800b3fd
 800dd34:	0800dae9 	.word	0x0800dae9
 800dd38:	0800ecee 	.word	0x0800ecee

0800dd3c <__swbuf_r>:
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	460e      	mov	r6, r1
 800dd40:	4614      	mov	r4, r2
 800dd42:	4605      	mov	r5, r0
 800dd44:	b118      	cbz	r0, 800dd4e <__swbuf_r+0x12>
 800dd46:	6a03      	ldr	r3, [r0, #32]
 800dd48:	b90b      	cbnz	r3, 800dd4e <__swbuf_r+0x12>
 800dd4a:	f7fd ff9b 	bl	800bc84 <__sinit>
 800dd4e:	69a3      	ldr	r3, [r4, #24]
 800dd50:	60a3      	str	r3, [r4, #8]
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	071a      	lsls	r2, r3, #28
 800dd56:	d501      	bpl.n	800dd5c <__swbuf_r+0x20>
 800dd58:	6923      	ldr	r3, [r4, #16]
 800dd5a:	b943      	cbnz	r3, 800dd6e <__swbuf_r+0x32>
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f000 f82a 	bl	800ddb8 <__swsetup_r>
 800dd64:	b118      	cbz	r0, 800dd6e <__swbuf_r+0x32>
 800dd66:	f04f 37ff 	mov.w	r7, #4294967295
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	6922      	ldr	r2, [r4, #16]
 800dd72:	1a98      	subs	r0, r3, r2
 800dd74:	6963      	ldr	r3, [r4, #20]
 800dd76:	b2f6      	uxtb	r6, r6
 800dd78:	4283      	cmp	r3, r0
 800dd7a:	4637      	mov	r7, r6
 800dd7c:	dc05      	bgt.n	800dd8a <__swbuf_r+0x4e>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	4628      	mov	r0, r5
 800dd82:	f7ff fda7 	bl	800d8d4 <_fflush_r>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d1ed      	bne.n	800dd66 <__swbuf_r+0x2a>
 800dd8a:	68a3      	ldr	r3, [r4, #8]
 800dd8c:	3b01      	subs	r3, #1
 800dd8e:	60a3      	str	r3, [r4, #8]
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	6022      	str	r2, [r4, #0]
 800dd96:	701e      	strb	r6, [r3, #0]
 800dd98:	6962      	ldr	r2, [r4, #20]
 800dd9a:	1c43      	adds	r3, r0, #1
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d004      	beq.n	800ddaa <__swbuf_r+0x6e>
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	07db      	lsls	r3, r3, #31
 800dda4:	d5e1      	bpl.n	800dd6a <__swbuf_r+0x2e>
 800dda6:	2e0a      	cmp	r6, #10
 800dda8:	d1df      	bne.n	800dd6a <__swbuf_r+0x2e>
 800ddaa:	4621      	mov	r1, r4
 800ddac:	4628      	mov	r0, r5
 800ddae:	f7ff fd91 	bl	800d8d4 <_fflush_r>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d0d9      	beq.n	800dd6a <__swbuf_r+0x2e>
 800ddb6:	e7d6      	b.n	800dd66 <__swbuf_r+0x2a>

0800ddb8 <__swsetup_r>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	4b29      	ldr	r3, [pc, #164]	@ (800de60 <__swsetup_r+0xa8>)
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	6818      	ldr	r0, [r3, #0]
 800ddc0:	460c      	mov	r4, r1
 800ddc2:	b118      	cbz	r0, 800ddcc <__swsetup_r+0x14>
 800ddc4:	6a03      	ldr	r3, [r0, #32]
 800ddc6:	b90b      	cbnz	r3, 800ddcc <__swsetup_r+0x14>
 800ddc8:	f7fd ff5c 	bl	800bc84 <__sinit>
 800ddcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddd0:	0719      	lsls	r1, r3, #28
 800ddd2:	d422      	bmi.n	800de1a <__swsetup_r+0x62>
 800ddd4:	06da      	lsls	r2, r3, #27
 800ddd6:	d407      	bmi.n	800dde8 <__swsetup_r+0x30>
 800ddd8:	2209      	movs	r2, #9
 800ddda:	602a      	str	r2, [r5, #0]
 800dddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	f04f 30ff 	mov.w	r0, #4294967295
 800dde6:	e033      	b.n	800de50 <__swsetup_r+0x98>
 800dde8:	0758      	lsls	r0, r3, #29
 800ddea:	d512      	bpl.n	800de12 <__swsetup_r+0x5a>
 800ddec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddee:	b141      	cbz	r1, 800de02 <__swsetup_r+0x4a>
 800ddf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddf4:	4299      	cmp	r1, r3
 800ddf6:	d002      	beq.n	800ddfe <__swsetup_r+0x46>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7fe ff0d 	bl	800cc18 <_free_r>
 800ddfe:	2300      	movs	r3, #0
 800de00:	6363      	str	r3, [r4, #52]	@ 0x34
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800de08:	81a3      	strh	r3, [r4, #12]
 800de0a:	2300      	movs	r3, #0
 800de0c:	6063      	str	r3, [r4, #4]
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	f043 0308 	orr.w	r3, r3, #8
 800de18:	81a3      	strh	r3, [r4, #12]
 800de1a:	6923      	ldr	r3, [r4, #16]
 800de1c:	b94b      	cbnz	r3, 800de32 <__swsetup_r+0x7a>
 800de1e:	89a3      	ldrh	r3, [r4, #12]
 800de20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800de24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de28:	d003      	beq.n	800de32 <__swsetup_r+0x7a>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4628      	mov	r0, r5
 800de2e:	f000 f883 	bl	800df38 <__smakebuf_r>
 800de32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de36:	f013 0201 	ands.w	r2, r3, #1
 800de3a:	d00a      	beq.n	800de52 <__swsetup_r+0x9a>
 800de3c:	2200      	movs	r2, #0
 800de3e:	60a2      	str	r2, [r4, #8]
 800de40:	6962      	ldr	r2, [r4, #20]
 800de42:	4252      	negs	r2, r2
 800de44:	61a2      	str	r2, [r4, #24]
 800de46:	6922      	ldr	r2, [r4, #16]
 800de48:	b942      	cbnz	r2, 800de5c <__swsetup_r+0xa4>
 800de4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800de4e:	d1c5      	bne.n	800dddc <__swsetup_r+0x24>
 800de50:	bd38      	pop	{r3, r4, r5, pc}
 800de52:	0799      	lsls	r1, r3, #30
 800de54:	bf58      	it	pl
 800de56:	6962      	ldrpl	r2, [r4, #20]
 800de58:	60a2      	str	r2, [r4, #8]
 800de5a:	e7f4      	b.n	800de46 <__swsetup_r+0x8e>
 800de5c:	2000      	movs	r0, #0
 800de5e:	e7f7      	b.n	800de50 <__swsetup_r+0x98>
 800de60:	2000003c 	.word	0x2000003c

0800de64 <_raise_r>:
 800de64:	291f      	cmp	r1, #31
 800de66:	b538      	push	{r3, r4, r5, lr}
 800de68:	4605      	mov	r5, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	d904      	bls.n	800de78 <_raise_r+0x14>
 800de6e:	2316      	movs	r3, #22
 800de70:	6003      	str	r3, [r0, #0]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de7a:	b112      	cbz	r2, 800de82 <_raise_r+0x1e>
 800de7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de80:	b94b      	cbnz	r3, 800de96 <_raise_r+0x32>
 800de82:	4628      	mov	r0, r5
 800de84:	f000 f830 	bl	800dee8 <_getpid_r>
 800de88:	4622      	mov	r2, r4
 800de8a:	4601      	mov	r1, r0
 800de8c:	4628      	mov	r0, r5
 800de8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de92:	f000 b817 	b.w	800dec4 <_kill_r>
 800de96:	2b01      	cmp	r3, #1
 800de98:	d00a      	beq.n	800deb0 <_raise_r+0x4c>
 800de9a:	1c59      	adds	r1, r3, #1
 800de9c:	d103      	bne.n	800dea6 <_raise_r+0x42>
 800de9e:	2316      	movs	r3, #22
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	2001      	movs	r0, #1
 800dea4:	e7e7      	b.n	800de76 <_raise_r+0x12>
 800dea6:	2100      	movs	r1, #0
 800dea8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800deac:	4620      	mov	r0, r4
 800deae:	4798      	blx	r3
 800deb0:	2000      	movs	r0, #0
 800deb2:	e7e0      	b.n	800de76 <_raise_r+0x12>

0800deb4 <raise>:
 800deb4:	4b02      	ldr	r3, [pc, #8]	@ (800dec0 <raise+0xc>)
 800deb6:	4601      	mov	r1, r0
 800deb8:	6818      	ldr	r0, [r3, #0]
 800deba:	f7ff bfd3 	b.w	800de64 <_raise_r>
 800debe:	bf00      	nop
 800dec0:	2000003c 	.word	0x2000003c

0800dec4 <_kill_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d07      	ldr	r5, [pc, #28]	@ (800dee4 <_kill_r+0x20>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	4611      	mov	r1, r2
 800ded0:	602b      	str	r3, [r5, #0]
 800ded2:	f7f4 ff7b 	bl	8002dcc <_kill>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	d102      	bne.n	800dee0 <_kill_r+0x1c>
 800deda:	682b      	ldr	r3, [r5, #0]
 800dedc:	b103      	cbz	r3, 800dee0 <_kill_r+0x1c>
 800dede:	6023      	str	r3, [r4, #0]
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	2001ac0c 	.word	0x2001ac0c

0800dee8 <_getpid_r>:
 800dee8:	f7f4 bf68 	b.w	8002dbc <_getpid>

0800deec <__swhatbuf_r>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	460c      	mov	r4, r1
 800def0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800def4:	2900      	cmp	r1, #0
 800def6:	b096      	sub	sp, #88	@ 0x58
 800def8:	4615      	mov	r5, r2
 800defa:	461e      	mov	r6, r3
 800defc:	da0d      	bge.n	800df1a <__swhatbuf_r+0x2e>
 800defe:	89a3      	ldrh	r3, [r4, #12]
 800df00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df04:	f04f 0100 	mov.w	r1, #0
 800df08:	bf14      	ite	ne
 800df0a:	2340      	movne	r3, #64	@ 0x40
 800df0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df10:	2000      	movs	r0, #0
 800df12:	6031      	str	r1, [r6, #0]
 800df14:	602b      	str	r3, [r5, #0]
 800df16:	b016      	add	sp, #88	@ 0x58
 800df18:	bd70      	pop	{r4, r5, r6, pc}
 800df1a:	466a      	mov	r2, sp
 800df1c:	f000 f848 	bl	800dfb0 <_fstat_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	dbec      	blt.n	800defe <__swhatbuf_r+0x12>
 800df24:	9901      	ldr	r1, [sp, #4]
 800df26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df2e:	4259      	negs	r1, r3
 800df30:	4159      	adcs	r1, r3
 800df32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df36:	e7eb      	b.n	800df10 <__swhatbuf_r+0x24>

0800df38 <__smakebuf_r>:
 800df38:	898b      	ldrh	r3, [r1, #12]
 800df3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df3c:	079d      	lsls	r5, r3, #30
 800df3e:	4606      	mov	r6, r0
 800df40:	460c      	mov	r4, r1
 800df42:	d507      	bpl.n	800df54 <__smakebuf_r+0x1c>
 800df44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	6123      	str	r3, [r4, #16]
 800df4c:	2301      	movs	r3, #1
 800df4e:	6163      	str	r3, [r4, #20]
 800df50:	b003      	add	sp, #12
 800df52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df54:	ab01      	add	r3, sp, #4
 800df56:	466a      	mov	r2, sp
 800df58:	f7ff ffc8 	bl	800deec <__swhatbuf_r>
 800df5c:	9f00      	ldr	r7, [sp, #0]
 800df5e:	4605      	mov	r5, r0
 800df60:	4639      	mov	r1, r7
 800df62:	4630      	mov	r0, r6
 800df64:	f7fe fecc 	bl	800cd00 <_malloc_r>
 800df68:	b948      	cbnz	r0, 800df7e <__smakebuf_r+0x46>
 800df6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df6e:	059a      	lsls	r2, r3, #22
 800df70:	d4ee      	bmi.n	800df50 <__smakebuf_r+0x18>
 800df72:	f023 0303 	bic.w	r3, r3, #3
 800df76:	f043 0302 	orr.w	r3, r3, #2
 800df7a:	81a3      	strh	r3, [r4, #12]
 800df7c:	e7e2      	b.n	800df44 <__smakebuf_r+0xc>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	6020      	str	r0, [r4, #0]
 800df82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df86:	81a3      	strh	r3, [r4, #12]
 800df88:	9b01      	ldr	r3, [sp, #4]
 800df8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df8e:	b15b      	cbz	r3, 800dfa8 <__smakebuf_r+0x70>
 800df90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df94:	4630      	mov	r0, r6
 800df96:	f000 f81d 	bl	800dfd4 <_isatty_r>
 800df9a:	b128      	cbz	r0, 800dfa8 <__smakebuf_r+0x70>
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	f023 0303 	bic.w	r3, r3, #3
 800dfa2:	f043 0301 	orr.w	r3, r3, #1
 800dfa6:	81a3      	strh	r3, [r4, #12]
 800dfa8:	89a3      	ldrh	r3, [r4, #12]
 800dfaa:	431d      	orrs	r5, r3
 800dfac:	81a5      	strh	r5, [r4, #12]
 800dfae:	e7cf      	b.n	800df50 <__smakebuf_r+0x18>

0800dfb0 <_fstat_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4d07      	ldr	r5, [pc, #28]	@ (800dfd0 <_fstat_r+0x20>)
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	4608      	mov	r0, r1
 800dfba:	4611      	mov	r1, r2
 800dfbc:	602b      	str	r3, [r5, #0]
 800dfbe:	f7f4 ff65 	bl	8002e8c <_fstat>
 800dfc2:	1c43      	adds	r3, r0, #1
 800dfc4:	d102      	bne.n	800dfcc <_fstat_r+0x1c>
 800dfc6:	682b      	ldr	r3, [r5, #0]
 800dfc8:	b103      	cbz	r3, 800dfcc <_fstat_r+0x1c>
 800dfca:	6023      	str	r3, [r4, #0]
 800dfcc:	bd38      	pop	{r3, r4, r5, pc}
 800dfce:	bf00      	nop
 800dfd0:	2001ac0c 	.word	0x2001ac0c

0800dfd4 <_isatty_r>:
 800dfd4:	b538      	push	{r3, r4, r5, lr}
 800dfd6:	4d06      	ldr	r5, [pc, #24]	@ (800dff0 <_isatty_r+0x1c>)
 800dfd8:	2300      	movs	r3, #0
 800dfda:	4604      	mov	r4, r0
 800dfdc:	4608      	mov	r0, r1
 800dfde:	602b      	str	r3, [r5, #0]
 800dfe0:	f7f4 ff64 	bl	8002eac <_isatty>
 800dfe4:	1c43      	adds	r3, r0, #1
 800dfe6:	d102      	bne.n	800dfee <_isatty_r+0x1a>
 800dfe8:	682b      	ldr	r3, [r5, #0]
 800dfea:	b103      	cbz	r3, 800dfee <_isatty_r+0x1a>
 800dfec:	6023      	str	r3, [r4, #0]
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	2001ac0c 	.word	0x2001ac0c

0800dff4 <atan2f>:
 800dff4:	f000 b800 	b.w	800dff8 <__ieee754_atan2f>

0800dff8 <__ieee754_atan2f>:
 800dff8:	ee10 2a90 	vmov	r2, s1
 800dffc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e000:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e004:	b510      	push	{r4, lr}
 800e006:	eef0 7a40 	vmov.f32	s15, s0
 800e00a:	d806      	bhi.n	800e01a <__ieee754_atan2f+0x22>
 800e00c:	ee10 0a10 	vmov	r0, s0
 800e010:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e014:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e018:	d904      	bls.n	800e024 <__ieee754_atan2f+0x2c>
 800e01a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e01e:	eeb0 0a67 	vmov.f32	s0, s15
 800e022:	bd10      	pop	{r4, pc}
 800e024:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e028:	d103      	bne.n	800e032 <__ieee754_atan2f+0x3a>
 800e02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e02e:	f000 b883 	b.w	800e138 <atanf>
 800e032:	1794      	asrs	r4, r2, #30
 800e034:	f004 0402 	and.w	r4, r4, #2
 800e038:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e03c:	b943      	cbnz	r3, 800e050 <__ieee754_atan2f+0x58>
 800e03e:	2c02      	cmp	r4, #2
 800e040:	d05e      	beq.n	800e100 <__ieee754_atan2f+0x108>
 800e042:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e114 <__ieee754_atan2f+0x11c>
 800e046:	2c03      	cmp	r4, #3
 800e048:	bf08      	it	eq
 800e04a:	eef0 7a47 	vmoveq.f32	s15, s14
 800e04e:	e7e6      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e050:	b941      	cbnz	r1, 800e064 <__ieee754_atan2f+0x6c>
 800e052:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e118 <__ieee754_atan2f+0x120>
 800e056:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e11c <__ieee754_atan2f+0x124>
 800e05a:	2800      	cmp	r0, #0
 800e05c:	bfb8      	it	lt
 800e05e:	eef0 7a47 	vmovlt.f32	s15, s14
 800e062:	e7dc      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e064:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e068:	d110      	bne.n	800e08c <__ieee754_atan2f+0x94>
 800e06a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e06e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e072:	d107      	bne.n	800e084 <__ieee754_atan2f+0x8c>
 800e074:	2c02      	cmp	r4, #2
 800e076:	d846      	bhi.n	800e106 <__ieee754_atan2f+0x10e>
 800e078:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <__ieee754_atan2f+0x128>)
 800e07a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e07e:	edd3 7a00 	vldr	s15, [r3]
 800e082:	e7cc      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e084:	2c02      	cmp	r4, #2
 800e086:	d841      	bhi.n	800e10c <__ieee754_atan2f+0x114>
 800e088:	4b26      	ldr	r3, [pc, #152]	@ (800e124 <__ieee754_atan2f+0x12c>)
 800e08a:	e7f6      	b.n	800e07a <__ieee754_atan2f+0x82>
 800e08c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e090:	d0df      	beq.n	800e052 <__ieee754_atan2f+0x5a>
 800e092:	1a5b      	subs	r3, r3, r1
 800e094:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e098:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e09c:	da1a      	bge.n	800e0d4 <__ieee754_atan2f+0xdc>
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	da01      	bge.n	800e0a6 <__ieee754_atan2f+0xae>
 800e0a2:	313c      	adds	r1, #60	@ 0x3c
 800e0a4:	db19      	blt.n	800e0da <__ieee754_atan2f+0xe2>
 800e0a6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e0aa:	f000 f919 	bl	800e2e0 <fabsf>
 800e0ae:	f000 f843 	bl	800e138 <atanf>
 800e0b2:	eef0 7a40 	vmov.f32	s15, s0
 800e0b6:	2c01      	cmp	r4, #1
 800e0b8:	d012      	beq.n	800e0e0 <__ieee754_atan2f+0xe8>
 800e0ba:	2c02      	cmp	r4, #2
 800e0bc:	d017      	beq.n	800e0ee <__ieee754_atan2f+0xf6>
 800e0be:	2c00      	cmp	r4, #0
 800e0c0:	d0ad      	beq.n	800e01e <__ieee754_atan2f+0x26>
 800e0c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e128 <__ieee754_atan2f+0x130>
 800e0c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0ca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e12c <__ieee754_atan2f+0x134>
 800e0ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0d2:	e7a4      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e0d4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e118 <__ieee754_atan2f+0x120>
 800e0d8:	e7ed      	b.n	800e0b6 <__ieee754_atan2f+0xbe>
 800e0da:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e130 <__ieee754_atan2f+0x138>
 800e0de:	e7ea      	b.n	800e0b6 <__ieee754_atan2f+0xbe>
 800e0e0:	ee17 3a90 	vmov	r3, s15
 800e0e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e0e8:	ee07 3a90 	vmov	s15, r3
 800e0ec:	e797      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e0ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e128 <__ieee754_atan2f+0x130>
 800e0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e12c <__ieee754_atan2f+0x134>
 800e0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0fe:	e78e      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e100:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e12c <__ieee754_atan2f+0x134>
 800e104:	e78b      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e106:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e134 <__ieee754_atan2f+0x13c>
 800e10a:	e788      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e10c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e130 <__ieee754_atan2f+0x138>
 800e110:	e785      	b.n	800e01e <__ieee754_atan2f+0x26>
 800e112:	bf00      	nop
 800e114:	c0490fdb 	.word	0xc0490fdb
 800e118:	3fc90fdb 	.word	0x3fc90fdb
 800e11c:	bfc90fdb 	.word	0xbfc90fdb
 800e120:	0800ee4c 	.word	0x0800ee4c
 800e124:	0800ee40 	.word	0x0800ee40
 800e128:	33bbbd2e 	.word	0x33bbbd2e
 800e12c:	40490fdb 	.word	0x40490fdb
 800e130:	00000000 	.word	0x00000000
 800e134:	3f490fdb 	.word	0x3f490fdb

0800e138 <atanf>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	ee10 5a10 	vmov	r5, s0
 800e13e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e142:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e146:	eef0 7a40 	vmov.f32	s15, s0
 800e14a:	d310      	bcc.n	800e16e <atanf+0x36>
 800e14c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e150:	d904      	bls.n	800e15c <atanf+0x24>
 800e152:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e156:	eeb0 0a67 	vmov.f32	s0, s15
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e294 <atanf+0x15c>
 800e160:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e298 <atanf+0x160>
 800e164:	2d00      	cmp	r5, #0
 800e166:	bfc8      	it	gt
 800e168:	eef0 7a47 	vmovgt.f32	s15, s14
 800e16c:	e7f3      	b.n	800e156 <atanf+0x1e>
 800e16e:	4b4b      	ldr	r3, [pc, #300]	@ (800e29c <atanf+0x164>)
 800e170:	429c      	cmp	r4, r3
 800e172:	d810      	bhi.n	800e196 <atanf+0x5e>
 800e174:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e178:	d20a      	bcs.n	800e190 <atanf+0x58>
 800e17a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e2a0 <atanf+0x168>
 800e17e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e186:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	dce2      	bgt.n	800e156 <atanf+0x1e>
 800e190:	f04f 33ff 	mov.w	r3, #4294967295
 800e194:	e013      	b.n	800e1be <atanf+0x86>
 800e196:	f000 f8a3 	bl	800e2e0 <fabsf>
 800e19a:	4b42      	ldr	r3, [pc, #264]	@ (800e2a4 <atanf+0x16c>)
 800e19c:	429c      	cmp	r4, r3
 800e19e:	d84f      	bhi.n	800e240 <atanf+0x108>
 800e1a0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e1a4:	429c      	cmp	r4, r3
 800e1a6:	d841      	bhi.n	800e22c <atanf+0xf4>
 800e1a8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e1ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e1b0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e1c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e2a8 <atanf+0x170>
 800e1c8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e2ac <atanf+0x174>
 800e1cc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e2b0 <atanf+0x178>
 800e1d0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e1d4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e1d8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e2b4 <atanf+0x17c>
 800e1dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e1e0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e2b8 <atanf+0x180>
 800e1e4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e1e8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e2bc <atanf+0x184>
 800e1ec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e1f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e2c0 <atanf+0x188>
 800e1f4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e1f8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e2c4 <atanf+0x18c>
 800e1fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e200:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e2c8 <atanf+0x190>
 800e204:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e208:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e2cc <atanf+0x194>
 800e20c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e210:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e2d0 <atanf+0x198>
 800e214:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e218:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e21c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e220:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e224:	d121      	bne.n	800e26a <atanf+0x132>
 800e226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e22a:	e794      	b.n	800e156 <atanf+0x1e>
 800e22c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e230:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e234:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e238:	2301      	movs	r3, #1
 800e23a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e23e:	e7be      	b.n	800e1be <atanf+0x86>
 800e240:	4b24      	ldr	r3, [pc, #144]	@ (800e2d4 <atanf+0x19c>)
 800e242:	429c      	cmp	r4, r3
 800e244:	d80b      	bhi.n	800e25e <atanf+0x126>
 800e246:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e24a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e24e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e252:	2302      	movs	r3, #2
 800e254:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e25c:	e7af      	b.n	800e1be <atanf+0x86>
 800e25e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e262:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e266:	2303      	movs	r3, #3
 800e268:	e7a9      	b.n	800e1be <atanf+0x86>
 800e26a:	4a1b      	ldr	r2, [pc, #108]	@ (800e2d8 <atanf+0x1a0>)
 800e26c:	491b      	ldr	r1, [pc, #108]	@ (800e2dc <atanf+0x1a4>)
 800e26e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e272:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e276:	edd3 6a00 	vldr	s13, [r3]
 800e27a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e27e:	2d00      	cmp	r5, #0
 800e280:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e284:	edd2 7a00 	vldr	s15, [r2]
 800e288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e28c:	bfb8      	it	lt
 800e28e:	eef1 7a67 	vneglt.f32	s15, s15
 800e292:	e760      	b.n	800e156 <atanf+0x1e>
 800e294:	bfc90fdb 	.word	0xbfc90fdb
 800e298:	3fc90fdb 	.word	0x3fc90fdb
 800e29c:	3edfffff 	.word	0x3edfffff
 800e2a0:	7149f2ca 	.word	0x7149f2ca
 800e2a4:	3f97ffff 	.word	0x3f97ffff
 800e2a8:	3c8569d7 	.word	0x3c8569d7
 800e2ac:	3d4bda59 	.word	0x3d4bda59
 800e2b0:	bd6ef16b 	.word	0xbd6ef16b
 800e2b4:	3d886b35 	.word	0x3d886b35
 800e2b8:	3dba2e6e 	.word	0x3dba2e6e
 800e2bc:	3e124925 	.word	0x3e124925
 800e2c0:	3eaaaaab 	.word	0x3eaaaaab
 800e2c4:	bd15a221 	.word	0xbd15a221
 800e2c8:	bd9d8795 	.word	0xbd9d8795
 800e2cc:	bde38e38 	.word	0xbde38e38
 800e2d0:	be4ccccd 	.word	0xbe4ccccd
 800e2d4:	401bffff 	.word	0x401bffff
 800e2d8:	0800ee68 	.word	0x0800ee68
 800e2dc:	0800ee58 	.word	0x0800ee58

0800e2e0 <fabsf>:
 800e2e0:	ee10 3a10 	vmov	r3, s0
 800e2e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e2e8:	ee00 3a10 	vmov	s0, r3
 800e2ec:	4770      	bx	lr
	...

0800e2f0 <_init>:
 800e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f2:	bf00      	nop
 800e2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2f6:	bc08      	pop	{r3}
 800e2f8:	469e      	mov	lr, r3
 800e2fa:	4770      	bx	lr

0800e2fc <_fini>:
 800e2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fe:	bf00      	nop
 800e300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e302:	bc08      	pop	{r3}
 800e304:	469e      	mov	lr, r3
 800e306:	4770      	bx	lr

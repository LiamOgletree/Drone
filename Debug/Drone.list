
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800d3a8  0800d3a8  0000e3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd68  0800dd68  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd68  0800dd68  0000ed68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd70  0800dd70  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd70  0800dd70  0000ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd74  0800dd74  0000ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800dd78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019dac  200001ec  0800df64  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019f98  0800df64  0000ff98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002268a  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc4  00000000  00000000  000318a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00036570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001365  00000000  00000000  00037ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027de3  00000000  00000000  00039205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218fc  00000000  00000000  00060fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c30  00000000  00000000  000828e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a20  00000000  00000000  00164558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d390 	.word	0x0800d390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800d390 	.word	0x0800d390

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <compute_compensations>:
/*      HELPER FUNCTIONS      */
/******************************/

static void compute_compensations(BMP388_COMP * const bmp388_comp,
                                  uint8_t const * const DATA)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    bmp388_comp->T1 =  (float)((DATA[2] << 8) | DATA[1]) * 256.f;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	3201      	adds	r2, #1
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800116c <compute_compensations+0x1f4>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
    bmp388_comp->T2 =  (float)((DATA[4] << 8) | DATA[3]) / 1073741824.f;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	3304      	adds	r3, #4
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	3203      	adds	r2, #3
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc0:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001170 <compute_compensations+0x1f8>
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a01 	vstr	s15, [r3, #4]
    bmp388_comp->T3 =  (float)(DATA[5]) / 281474976710656.f;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	3305      	adds	r3, #5
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fdc:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001174 <compute_compensations+0x1fc>
 8000fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	edc3 7a02 	vstr	s15, [r3, #8]
    bmp388_comp->P1 = ((float)((DATA[7] << 8) | DATA[6]) - 16384.f) / 1048576.f;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3307      	adds	r3, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	3206      	adds	r2, #6
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001178 <compute_compensations+0x200>
 8001006:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800100a:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 800117c <compute_compensations+0x204>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edc3 7a03 	vstr	s15, [r3, #12]
    bmp388_comp->P2 = ((float)((DATA[9] << 8) | DATA[8]) - 16384.f) / 536870912.f;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3309      	adds	r3, #9
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	3208      	adds	r2, #8
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	4313      	orrs	r3, r2
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001178 <compute_compensations+0x200>
 8001034:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001038:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001180 <compute_compensations+0x208>
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edc3 7a04 	vstr	s15, [r3, #16]
    bmp388_comp->P3 =  (float)(DATA[10]) / 4294967296.f;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	330a      	adds	r3, #10
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001054:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001184 <compute_compensations+0x20c>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edc3 7a05 	vstr	s15, [r3, #20]
    bmp388_comp->P4 =  (float)(DATA[11]) / 137438953472.f;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	330b      	adds	r3, #11
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001070:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001188 <compute_compensations+0x210>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edc3 7a06 	vstr	s15, [r3, #24]
    bmp388_comp->P5 =  (float)((DATA[13] << 8) | DATA[12]) * 8.f;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	330d      	adds	r3, #13
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	320c      	adds	r2, #12
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001096:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800109a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a07 	vstr	s15, [r3, #28]
    bmp388_comp->P6 =  (float)((DATA[15] << 8) | DATA[14]) / 64.f;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	330f      	adds	r3, #15
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	320e      	adds	r2, #14
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010bc:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800118c <compute_compensations+0x214>
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	edc3 7a08 	vstr	s15, [r3, #32]
    bmp388_comp->P7 =  (float)(DATA[16]) / 256.f;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3310      	adds	r3, #16
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800116c <compute_compensations+0x1f4>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bmp388_comp->P8 =  (float)(DATA[17]) / 32768.f;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3311      	adds	r3, #17
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001190 <compute_compensations+0x218>
 80010f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    bmp388_comp->P9 =  (float)((DATA[19] << 8) | DATA[18]) / 281474976710656.f;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	3313      	adds	r3, #19
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	3212      	adds	r2, #18
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	4313      	orrs	r3, r2
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001174 <compute_compensations+0x1fc>
 800111e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    bmp388_comp->P10 = (float)(DATA[20]) / 281474976710656.f;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3314      	adds	r3, #20
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001136:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001174 <compute_compensations+0x1fc>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    bmp388_comp->P11 = (float)(DATA[21]) / 36893488147419103232.f;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3315      	adds	r3, #21
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001152:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001194 <compute_compensations+0x21c>
 8001156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	43800000 	.word	0x43800000
 8001170:	4e800000 	.word	0x4e800000
 8001174:	57800000 	.word	0x57800000
 8001178:	46800000 	.word	0x46800000
 800117c:	49800000 	.word	0x49800000
 8001180:	4e000000 	.word	0x4e000000
 8001184:	4f800000 	.word	0x4f800000
 8001188:	52000000 	.word	0x52000000
 800118c:	42800000 	.word	0x42800000
 8001190:	47000000 	.word	0x47000000
 8001194:	60000000 	.word	0x60000000

08001198 <compensate_temperature>:

static void compensate_temperature(BMP388 * const bmp388,
                                   BMP388_COMP const * const bmp388_comp,
                                   float const uncomp_temp)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	ed87 0a01 	vstr	s0, [r7, #4]
    float const partial_data1 = uncomp_temp - bmp388_comp->T1;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	edc7 7a05 	vstr	s15, [r7, #20]
    bmp388->temperature = \
        (partial_data1 * bmp388_comp->T2) + \
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80011be:	edd7 7a05 	vldr	s15, [r7, #20]
 80011c2:	ee27 7a27 	vmul.f32	s14, s14, s15
        (partial_data1 * partial_data1) * bmp388_comp->T3;
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (partial_data1 * bmp388_comp->T2) + \
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    bmp388->temperature = \
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edc3 7a02 	vstr	s15, [r3, #8]
    // Set volatile temperature variable for compensate_pressure function.
    global_temperature = bmp388->temperature;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <compensate_temperature+0x60>)
 80011e8:	6013      	str	r3, [r2, #0]
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000208 	.word	0x20000208

080011fc <compensate_pressure>:

static void compensate_pressure(BMP388 * const bmp388,
                                BMP388_COMP const * const bmp388_comp,
                                float const uncomp_pres)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	ed87 0a01 	vstr	s0, [r7, #4]
    float const temperature = global_temperature;
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <compensate_pressure+0x138>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	61fb      	str	r3, [r7, #28]
    float const partial_out1 = \
        (bmp388_comp->P5) + \
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	ed93 7a07 	vldr	s14, [r3, #28]
        (bmp388_comp->P6 * temperature) + \
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	edd3 6a08 	vldr	s13, [r3, #32]
 800121c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P5) + \
 8001224:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P7 * temperature * temperature) + \
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800122e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001232:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001236:	edd7 7a07 	vldr	s15, [r7, #28]
 800123a:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P6 * temperature) + \
 800123e:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P8 * temperature * temperature * temperature);
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001248:	edd7 7a07 	vldr	s15, [r7, #28]
 800124c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001250:	edd7 7a07 	vldr	s15, [r7, #28]
 8001254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001258:	edd7 7a07 	vldr	s15, [r7, #28]
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out1 = \
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc7 7a06 	vstr	s15, [r7, #24]
    float const partial_out2 = uncomp_pres * \
        (bmp388_comp->P1 + \
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	ed93 7a03 	vldr	s14, [r3, #12]
        (bmp388_comp->P2 * temperature) + \
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	edd3 6a04 	vldr	s13, [r3, #16]
 8001274:	edd7 7a07 	vldr	s15, [r7, #28]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P1 + \
 800127c:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	edd3 6a05 	vldr	s13, [r3, #20]
 8001286:	edd7 7a07 	vldr	s15, [r7, #28]
 800128a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800128e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P2 * temperature) + \
 8001296:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P4 * temperature * temperature * temperature));
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	edd3 6a06 	vldr	s13, [r3, #24]
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    float const partial_out2 = uncomp_pres * \
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c4:	edc7 7a05 	vstr	s15, [r7, #20]
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
        (bmp388_comp->P9 + bmp388_comp->P10 * temperature) + \
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 80012dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 80012e8:	ee27 7a27 	vmul.f32	s14, s14, s15
        (uncomp_pres * uncomp_pres * uncomp_pres * bmp388_comp->P11);
 80012ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80012f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	edc7 7a04 	vstr	s15, [r7, #16]
    bmp388->pressure = partial_out1 + partial_out2 + partial_out3;
 800130e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001312:	edd7 7a05 	vldr	s15, [r7, #20]
 8001316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131a:	edd7 7a04 	vldr	s15, [r7, #16]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001328:	bf00      	nop
 800132a:	3724      	adds	r7, #36	@ 0x24
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000208 	.word	0x20000208

08001338 <transmit_receive>:
static BMP388_STATUS transmit_receive(uint8_t const * const TX,
                                      uint8_t const NUM_TX,
                                      uint8_t * const RX,
                                      uint8_t const NUM_RX,
                                      SPI_HandleTypeDef * const hspi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	460b      	mov	r3, r1
 8001346:	72fb      	strb	r3, [r7, #11]
 8001348:	4613      	mov	r3, r2
 800134a:	72bb      	strb	r3, [r7, #10]
    BMP388_STATUS status = BMP388_SUCCESS;
 800134c:	2300      	movs	r3, #0
 800134e:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001350:	f008 fcf2 	bl	8009d38 <vPortEnterCritical>
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <transmit_receive+0x6c>)
 8001356:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800135a:	619a      	str	r2, [r3, #24]
    if(HAL_SPI_Transmit(hspi,
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <transmit_receive+0x70>)
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	6a38      	ldr	r0, [r7, #32]
 8001366:	f003 fba8 	bl	8004aba <HAL_SPI_Transmit>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <transmit_receive+0x3e>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = BMP388_SPI_TX_FAILURE;
 8001370:	2302      	movs	r3, #2
 8001372:	75fb      	strb	r3, [r7, #23]
 8001374:	e00b      	b.n	800138e <transmit_receive+0x56>
    } else {
        if(HAL_SPI_Receive(hspi,
 8001376:	7abb      	ldrb	r3, [r7, #10]
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <transmit_receive+0x70>)
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	6a38      	ldr	r0, [r7, #32]
 8001380:	f003 fcde 	bl	8004d40 <HAL_SPI_Receive>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <transmit_receive+0x56>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = BMP388_SPI_RX_FAILURE;
 800138a:	2303      	movs	r3, #3
 800138c:	75fb      	strb	r3, [r7, #23]
        }
    }
    GPIOx->BSRR = GPIO_PINx;
 800138e:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <transmit_receive+0x6c>)
 8001390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001394:	619a      	str	r2, [r3, #24]
    taskEXIT_CRITICAL();
 8001396:	f008 fd01 	bl	8009d9c <vPortExitCritical>

    return status;
 800139a:	7dfb      	ldrb	r3, [r7, #23]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40020400 	.word	0x40020400
 80013a8:	00186a00 	.word	0x00186a00

080013ac <BMP388_Setup>:
/*       CORE FUNCTIONS       */
/******************************/

BMP388_STATUS BMP388_Setup(BMP388_COMP * const bmp388_comp,
                           SPI_HandleTypeDef * const hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    // If expected CHIP ID is not received, return failure.
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t RX[22] = {0};
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	821a      	strh	r2, [r3, #16]

    BMP388_STATUS status;

    status = transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 80013d0:	f107 020c 	add.w	r2, r7, #12
 80013d4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2316      	movs	r3, #22
 80013de:	2101      	movs	r1, #1
 80013e0:	f7ff ffaa 	bl	8001338 <transmit_receive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              RX,  sizeof(RX)  / sizeof(RX[0]), hspi);
    if(status != BMP388_SUCCESS) {
 80013ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <BMP388_Setup+0x4c>
        return status;
 80013f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013f6:	e028      	b.n	800144a <BMP388_Setup+0x9e>
    }

    if(RX[1] != 0x50) {
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	2b50      	cmp	r3, #80	@ 0x50
 80013fc:	d001      	beq.n	8001402 <BMP388_Setup+0x56>
        return BMP388_WHOAMI_FAILURE;
 80013fe:	2304      	movs	r3, #4
 8001400:	e023      	b.n	800144a <BMP388_Setup+0x9e>
    }

    // Otherwise, configure the sensor and receive calibration values.
    uint8_t const TX2[] = {
 8001402:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <BMP388_Setup+0xa8>)
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	4611      	mov	r1, r2
 800140c:	8019      	strh	r1, [r3, #0]
 800140e:	3302      	adds	r3, #2
 8001410:	0c12      	lsrs	r2, r2, #16
 8001412:	701a      	strb	r2, [r3, #0]
        WRITE | REG_PWR_CTRL,
        WRITE | ENABLE_PRESSURE | ENABLE_TEMPERATURE | NORMAL_MODE,
        READ  | REG_CALIBRATION
    };

    status = transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	f107 0008 	add.w	r0, r7, #8
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2316      	movs	r3, #22
 8001422:	2103      	movs	r1, #3
 8001424:	f7ff ff88 	bl	8001338 <transmit_receive>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                              RX,  sizeof(RX)  / sizeof(RX[0]), hspi);
    if(status != BMP388_SUCCESS) {
 800142e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <BMP388_Setup+0x90>
        return status;
 8001436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143a:	e006      	b.n	800144a <BMP388_Setup+0x9e>
    }

    compute_compensations(bmp388_comp, RX);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fd98 	bl	8000f78 <compute_compensations>

    return BMP388_SUCCESS;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800d3a8 	.word	0x0800d3a8

08001458 <BMP388_ReadTemp>:

BMP388_STATUS BMP388_ReadTemp(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af02      	add	r7, sp, #8
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4613      	mov	r3, r2
 8001466:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_TEMPERATURE };
 8001468:	2387      	movs	r3, #135	@ 0x87
 800146a:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 8001470:	f107 0214 	add.w	r2, r7, #20
 8001474:	f107 0018 	add.w	r0, r7, #24
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2304      	movs	r3, #4
 800147e:	2101      	movs	r1, #1
 8001480:	f7ff ff5a 	bl	8001338 <transmit_receive>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <BMP388_ReadTemp+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 800148a:	2301      	movs	r3, #1
 800148c:	e023      	b.n	80014d6 <BMP388_ReadTemp+0x7e>
    }

    bmp388->timestamp = TIM5->CNT;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <BMP388_ReadTemp+0x88>)
 8001490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	605a      	str	r2, [r3, #4]

    float const uncomp_temp = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	7dbb      	ldrb	r3, [r7, #22]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	4313      	orrs	r3, r2
 80014a0:	7d7a      	ldrb	r2, [r7, #21]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <BMP388_ReadTemp+0x70>
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10a      	bne.n	80014d0 <BMP388_ReadTemp+0x78>
    case BMP388_COMPENSATED:
        compensate_temperature(bmp388, bmp388_comp, uncomp_temp);
 80014ba:	ed97 0a07 	vldr	s0, [r7, #28]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fe69 	bl	8001198 <compensate_temperature>
        break;
 80014c6:	e005      	b.n	80014d4 <BMP388_ReadTemp+0x7c>
    case BMP388_RAW:
        bmp388->temperature = uncomp_temp;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	609a      	str	r2, [r3, #8]
        break;
 80014ce:	e001      	b.n	80014d4 <BMP388_ReadTemp+0x7c>
    default:
        return BMP388_FAILURE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <BMP388_ReadTemp+0x7e>
    }

    return BMP388_SUCCESS;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40000c00 	.word	0x40000c00

080014e4 <BMP388_ReadPres>:

BMP388_STATUS BMP388_ReadPres(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	@ 0x28
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_PRESSURE };
 80014f4:	2384      	movs	r3, #132	@ 0x84
 80014f6:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80014fc:	f107 0214 	add.w	r2, r7, #20
 8001500:	f107 0018 	add.w	r0, r7, #24
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2304      	movs	r3, #4
 800150a:	2101      	movs	r1, #1
 800150c:	f7ff ff14 	bl	8001338 <transmit_receive>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <BMP388_ReadPres+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 8001516:	2301      	movs	r3, #1
 8001518:	e023      	b.n	8001562 <BMP388_ReadPres+0x7e>
    }

    bmp388->timestamp = TIM5->CNT;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <BMP388_ReadPres+0x88>)
 800151c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	605a      	str	r2, [r3, #4]

    float const uncomp_pres = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	7dbb      	ldrb	r3, [r7, #22]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	4313      	orrs	r3, r2
 800152c:	7d7a      	ldrb	r2, [r7, #21]
 800152e:	4313      	orrs	r3, r2
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <BMP388_ReadPres+0x70>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d10a      	bne.n	800155c <BMP388_ReadPres+0x78>
    case BMP388_COMPENSATED:
        compensate_pressure(bmp388, bmp388_comp, uncomp_pres);
 8001546:	ed97 0a07 	vldr	s0, [r7, #28]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff fe55 	bl	80011fc <compensate_pressure>
        break;
 8001552:	e005      	b.n	8001560 <BMP388_ReadPres+0x7c>
    case BMP388_RAW:
        bmp388->pressure = uncomp_pres;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	609a      	str	r2, [r3, #8]
        break;
 800155a:	e001      	b.n	8001560 <BMP388_ReadPres+0x7c>
    default:
        return BMP388_FAILURE;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <BMP388_ReadPres+0x7e>
    }

    return BMP388_SUCCESS;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40000c00 	.word	0x40000c00

08001570 <transmit_receive>:
static LIS2MDL_STATUS transmit_receive(uint8_t const * const TX,
                                       uint8_t const NUM_TX,
                                       uint8_t * const RX,
                                       uint8_t const NUM_RX,
                                       SPI_HandleTypeDef * const hspi)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	72fb      	strb	r3, [r7, #11]
 8001580:	4613      	mov	r3, r2
 8001582:	72bb      	strb	r3, [r7, #10]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001588:	f008 fbd6 	bl	8009d38 <vPortEnterCritical>
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <transmit_receive+0x6c>)
 800158e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001592:	619a      	str	r2, [r3, #24]
    if(HAL_SPI_Transmit(hspi,
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <transmit_receive+0x70>)
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	6a38      	ldr	r0, [r7, #32]
 800159e:	f003 fa8c 	bl	8004aba <HAL_SPI_Transmit>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <transmit_receive+0x3e>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LIS2MDL_FAILURE;
 80015a8:	2301      	movs	r3, #1
 80015aa:	75fb      	strb	r3, [r7, #23]
 80015ac:	e00b      	b.n	80015c6 <transmit_receive+0x56>
    } else {
        if(HAL_SPI_Receive(hspi,
 80015ae:	7abb      	ldrb	r3, [r7, #10]
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <transmit_receive+0x70>)
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	6a38      	ldr	r0, [r7, #32]
 80015b8:	f003 fbc2 	bl	8004d40 <HAL_SPI_Receive>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <transmit_receive+0x56>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = LIS2MDL_FAILURE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
        }
    }
    GPIOx->BSRR = GPIO_PINx;
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <transmit_receive+0x6c>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	619a      	str	r2, [r3, #24]
    taskEXIT_CRITICAL();
 80015cc:	f008 fbe6 	bl	8009d9c <vPortExitCritical>

    return status;
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020400 	.word	0x40020400
 80015e0:	00186a00 	.word	0x00186a00

080015e4 <transmit>:

static LIS2MDL_STATUS transmit(uint8_t const * const TX,
                               uint8_t const NUM_TX,
                               SPI_HandleTypeDef * const hspi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	72fb      	strb	r3, [r7, #11]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80015f6:	f008 fb9f 	bl	8009d38 <vPortEnterCritical>
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <transmit+0x4c>)
 80015fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001600:	619a      	str	r2, [r3, #24]
    if(HAL_SPI_Transmit(hspi,
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	b29a      	uxth	r2, r3
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <transmit+0x50>)
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f003 fa55 	bl	8004aba <HAL_SPI_Transmit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <transmit+0x36>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LIS2MDL_FAILURE;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }
    GPIOx->BSRR = GPIO_PINx;
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <transmit+0x4c>)
 800161c:	2210      	movs	r2, #16
 800161e:	619a      	str	r2, [r3, #24]
    taskEXIT_CRITICAL();
 8001620:	f008 fbbc 	bl	8009d9c <vPortExitCritical>

    return status;
 8001624:	7dfb      	ldrb	r3, [r7, #23]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020400 	.word	0x40020400
 8001634:	00186a00 	.word	0x00186a00

08001638 <LIS2MDL_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LIS2MDL_STATUS LIS2MDL_Setup(SPI_HandleTypeDef * const hspi)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
    // Configure LIS2MDL sensor.
    uint8_t const TX1[] = {
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <LIS2MDL_Setup+0x5c>)
 8001642:	617b      	str	r3, [r7, #20]
        WRITE | ENABLE_SENSOR,
        WRITE | ENABLE_OFFSET,
        WRITE | SET_SPI_4WIRE
    };

    if(transmit(TX1, sizeof(TX1) / sizeof(TX1[0]), hspi)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	2104      	movs	r1, #4
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ffc9 	bl	80015e4 <transmit>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <LIS2MDL_Setup+0x24>
                != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 8001658:	2301      	movs	r3, #1
 800165a:	e016      	b.n	800168a <LIS2MDL_Setup+0x52>
    }

    // If expected WHO_AM_I value is not received, return failure.
    uint8_t const TX2[] = { READ | REG_WHO_AM_I };
 800165c:	23cf      	movs	r3, #207	@ 0xcf
 800165e:	743b      	strb	r3, [r7, #16]
    uint8_t RX[1];

    if(transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	f107 0010 	add.w	r0, r7, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2301      	movs	r3, #1
 800166e:	2101      	movs	r1, #1
 8001670:	f7ff ff7e 	bl	8001570 <transmit_receive>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <LIS2MDL_Setup+0x46>
                        RX,  sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 800167a:	2301      	movs	r3, #1
 800167c:	e005      	b.n	800168a <LIS2MDL_Setup+0x52>
    }

    if(RX[0] != 0x40) return LIS2MDL_FAILURE;
 800167e:	7b3b      	ldrb	r3, [r7, #12]
 8001680:	2b40      	cmp	r3, #64	@ 0x40
 8001682:	d001      	beq.n	8001688 <LIS2MDL_Setup+0x50>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LIS2MDL_Setup+0x52>

    return LIS2MDL_SUCCESS;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	04028060 	.word	0x04028060

08001698 <LIS2MDL_Read>:

LIS2MDL_STATUS LIS2MDL_Read(LIS2MDL * const lis2mdl,
                            SPI_HandleTypeDef * const hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    uint8_t const TX[] = { READ | REG_OUTPUTS };
 80016a2:	23e8      	movs	r3, #232	@ 0xe8
 80016a4:	753b      	strb	r3, [r7, #20]
    uint8_t RX[6] = {0};
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	823b      	strh	r3, [r7, #16]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80016ae:	f107 020c 	add.w	r2, r7, #12
 80016b2:	f107 0014 	add.w	r0, r7, #20
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2306      	movs	r3, #6
 80016bc:	2101      	movs	r1, #1
 80016be:	f7ff ff57 	bl	8001570 <transmit_receive>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <LIS2MDL_Read+0x34>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e038      	b.n	800173e <LIS2MDL_Read+0xa6>
    }

    lis2mdl->timestamp = TIM5->CNT;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <LIS2MDL_Read+0xb0>)
 80016ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]

    lis2mdl->X = (int16_t)(((uint16_t)RX[1] << 8) | RX[0]);
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	7b3b      	ldrb	r3, [r7, #12]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	801a      	strh	r2, [r3, #0]
    lis2mdl->Y = (int16_t)(((uint16_t)RX[3] << 8) | RX[2]);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	805a      	strh	r2, [r3, #2]
    lis2mdl->Z = (int16_t)(((uint16_t)RX[5] << 8) | RX[4]);
 80016f8:	7c7b      	ldrb	r3, [r7, #17]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	7c3b      	ldrb	r3, [r7, #16]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b21a      	sxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	809a      	strh	r2, [r3, #4]
    lis2mdl->heading = atan2f((float)lis2mdl->Y, (float)lis2mdl->X);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	ee07 3a10 	vmov	s14, r3
 8001722:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001726:	eef0 0a47 	vmov.f32	s1, s14
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f00b fcb1 	bl	800d094 <atan2f>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edc3 7a03 	vstr	s15, [r3, #12]

    return LIS2MDL_SUCCESS;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40000c00 	.word	0x40000c00

0800174c <transmit_receive>:
static LSM6DSO32_STATUS transmit_receive(uint8_t const * const TX,
                                         uint8_t const NUM_TX,
                                         uint8_t * const RX,
                                         uint8_t const NUM_RX,
                                         SPI_HandleTypeDef * const hspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	461a      	mov	r2, r3
 8001758:	460b      	mov	r3, r1
 800175a:	72fb      	strb	r3, [r7, #11]
 800175c:	4613      	mov	r3, r2
 800175e:	72bb      	strb	r3, [r7, #10]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001764:	f008 fae8 	bl	8009d38 <vPortEnterCritical>
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <transmit_receive+0x6c>)
 800176a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800176e:	619a      	str	r2, [r3, #24]
    if(HAL_SPI_Transmit(hspi,
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <transmit_receive+0x70>)
 8001776:	68f9      	ldr	r1, [r7, #12]
 8001778:	6a38      	ldr	r0, [r7, #32]
 800177a:	f003 f99e 	bl	8004aba <HAL_SPI_Transmit>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <transmit_receive+0x3e>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LSM6DSO32_FAILURE;
 8001784:	2301      	movs	r3, #1
 8001786:	75fb      	strb	r3, [r7, #23]
 8001788:	e00b      	b.n	80017a2 <transmit_receive+0x56>
    } else {
        if(HAL_SPI_Receive(hspi,
 800178a:	7abb      	ldrb	r3, [r7, #10]
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <transmit_receive+0x70>)
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6a38      	ldr	r0, [r7, #32]
 8001794:	f003 fad4 	bl	8004d40 <HAL_SPI_Receive>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <transmit_receive+0x56>
                           (uint8_t *)RX,
                           NUM_RX,
                           HAL_TIMEOUT)
                           != HAL_OK) {
            status = LSM6DSO32_FAILURE;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
        }
    }
    GPIOx->BSRR = GPIO_PINx;
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <transmit_receive+0x6c>)
 80017a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a8:	619a      	str	r2, [r3, #24]
    taskEXIT_CRITICAL();
 80017aa:	f008 faf7 	bl	8009d9c <vPortExitCritical>

    return status;
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020000 	.word	0x40020000
 80017bc:	00186a00 	.word	0x00186a00

080017c0 <transmit>:

static LSM6DSO32_STATUS transmit(uint8_t const * const TX,
                                 uint8_t const NUM_TX,
                                 SPI_HandleTypeDef * const hspi)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	460b      	mov	r3, r1
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	72fb      	strb	r3, [r7, #11]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 80017ce:	2300      	movs	r3, #0
 80017d0:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80017d2:	f008 fab1 	bl	8009d38 <vPortEnterCritical>
    GPIOx->BSRR = (uint32_t)GPIO_PINx << 16U;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <transmit+0x4c>)
 80017d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017dc:	619a      	str	r2, [r3, #24]
    if(HAL_SPI_Transmit(hspi,
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <transmit+0x50>)
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f003 f967 	bl	8004aba <HAL_SPI_Transmit>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <transmit+0x36>
                        (uint8_t *)TX,
                        NUM_TX,
                        HAL_TIMEOUT)
                        != HAL_OK) {
        status = LSM6DSO32_FAILURE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	75fb      	strb	r3, [r7, #23]
    }
    GPIOx->BSRR = GPIO_PINx;
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <transmit+0x4c>)
 80017f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fc:	619a      	str	r2, [r3, #24]
    taskEXIT_CRITICAL();
 80017fe:	f008 facd 	bl	8009d9c <vPortExitCritical>

    return status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020000 	.word	0x40020000
 8001810:	00186a00 	.word	0x00186a00

08001814 <LSM6DSO32_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LSM6DSO32_STATUS LSM6DSO32_Setup(SPI_HandleTypeDef * const hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
 800181a:	6078      	str	r0, [r7, #4]
    // If expected WHO_AM_I value is not read, return failure
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 800181c:	238f      	movs	r3, #143	@ 0x8f
 800181e:	753b      	strb	r3, [r7, #20]
    uint8_t RX[1] = {0};
 8001820:	2300      	movs	r3, #0
 8001822:	743b      	strb	r3, [r7, #16]

    if(transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8001824:	f107 0210 	add.w	r2, r7, #16
 8001828:	f107 0014 	add.w	r0, r7, #20
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2301      	movs	r3, #1
 8001832:	2101      	movs	r1, #1
 8001834:	f7ff ff8a 	bl	800174c <transmit_receive>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <LSM6DSO32_Setup+0x2e>
                        RX,  sizeof(RX)  / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 800183e:	2301      	movs	r3, #1
 8001840:	e018      	b.n	8001874 <LSM6DSO32_Setup+0x60>
    }

    if(RX[0] != 0x6C) return LSM6DSO32_FAILURE;
 8001842:	7c3b      	ldrb	r3, [r7, #16]
 8001844:	2b6c      	cmp	r3, #108	@ 0x6c
 8001846:	d001      	beq.n	800184c <LSM6DSO32_Setup+0x38>
 8001848:	2301      	movs	r3, #1
 800184a:	e013      	b.n	8001874 <LSM6DSO32_Setup+0x60>

    // Otherwise, configure the sensor
    uint8_t const TX2[] = {
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <LSM6DSO32_Setup+0x68>)
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001856:	e883 0003 	stmia.w	r3, {r0, r1}
        WRITE | SET_REG_CTRL5_DEFAULT,                         // REG CTRL 5 C
        WRITE | SET_REG_CTRL6_DEFAULT,                         // REG CTRL 6 C
        WRITE | ENABLE_GYROSCOPE_HPFILTER                      // REG CTRL 7 G
    };

    if(transmit(TX2, sizeof(TX2) / sizeof(TX2[0]), hspi)
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	2108      	movs	r1, #8
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffac 	bl	80017c0 <transmit>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <LSM6DSO32_Setup+0x5e>
                != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LSM6DSO32_Setup+0x60>
    }

    return LSM6DSO32_SUCCESS;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	0800d3ac 	.word	0x0800d3ac

08001880 <LSM6DSO32_ReadGyro>:

LSM6DSO32_STATUS LSM6DSO32_ReadGyro(LSM6DSO32 * const lsm6dso32_gyro,
                                    SPI_HandleTypeDef * const hspi,
                                    LSM6DSO32_DATA_TYPE const data_type)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	4613      	mov	r3, r2
 800188c:	71fb      	strb	r3, [r7, #7]
    const uint8_t TX[] = { READ  | REG_GYROSCOPE };
 800188e:	23a2      	movs	r3, #162	@ 0xa2
 8001890:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	2300      	movs	r3, #0
 8001898:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 800189a:	f107 0210 	add.w	r2, r7, #16
 800189e:	f107 0018 	add.w	r0, r7, #24
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2306      	movs	r3, #6
 80018a8:	2101      	movs	r1, #1
 80018aa:	f7ff ff4f 	bl	800174c <transmit_receive>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <LSM6DSO32_ReadGyro+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e04f      	b.n	8001958 <LSM6DSO32_ReadGyro+0xd8>
    }

    lsm6dso32_gyro->timestamp = TIM5->CNT;
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <LSM6DSO32_ReadGyro+0xe0>)
 80018ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	605a      	str	r2, [r3, #4]

    float sensitivity;
    switch(data_type) {
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <LSM6DSO32_ReadGyro+0x4c>
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d004      	beq.n	80018d4 <LSM6DSO32_ReadGyro+0x54>
 80018ca:	e006      	b.n	80018da <LSM6DSO32_ReadGyro+0x5a>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 80018cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018d0:	61fb      	str	r3, [r7, #28]
        break;
 80018d2:	e004      	b.n	80018de <LSM6DSO32_ReadGyro+0x5e>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 4.375f;
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <LSM6DSO32_ReadGyro+0xe4>)
 80018d6:	61fb      	str	r3, [r7, #28]
        break;
 80018d8:	e001      	b.n	80018de <LSM6DSO32_ReadGyro+0x5e>
    default:
        return LSM6DSO32_FAILURE;
 80018da:	2301      	movs	r3, #1
 80018dc:	e03c      	b.n	8001958 <LSM6DSO32_ReadGyro+0xd8>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	7c3a      	ldrb	r2, [r7, #16]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->X = (float)temporary * sensitivity;
 80018ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	7cba      	ldrb	r2, [r7, #18]
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Y = (float)temporary * sensitivity;
 8001914:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001920:	edd7 7a07 	vldr	s15, [r7, #28]
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	edc3 7a03 	vstr	s15, [r3, #12]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 800192e:	7d7b      	ldrb	r3, [r7, #21]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	7d3a      	ldrb	r2, [r7, #20]
 8001936:	4413      	add	r3, r2
 8001938:	b29b      	uxth	r3, r3
 800193a:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Z = (float)temporary * sensitivity;
 800193c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001948:	edd7 7a07 	vldr	s15, [r7, #28]
 800194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	edc3 7a04 	vstr	s15, [r3, #16]

    return LSM6DSO32_SUCCESS;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40000c00 	.word	0x40000c00
 8001964:	408c0000 	.word	0x408c0000

08001968 <LSM6DSO32_ReadAccel>:

LSM6DSO32_STATUS LSM6DSO32_ReadAccel(LSM6DSO32 * const lsm6dso32_accel,
                                     SPI_HandleTypeDef * const hspi,
                                     LSM6DSO32_DATA_TYPE const data_type)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	4613      	mov	r3, r2
 8001974:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ  | REG_ACCELEROMETER };
 8001976:	23a8      	movs	r3, #168	@ 0xa8
 8001978:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	2300      	movs	r3, #0
 8001980:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 8001982:	f107 0210 	add.w	r2, r7, #16
 8001986:	f107 0018 	add.w	r0, r7, #24
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2306      	movs	r3, #6
 8001990:	2101      	movs	r1, #1
 8001992:	f7ff fedb 	bl	800174c <transmit_receive>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <LSM6DSO32_ReadAccel+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 800199c:	2301      	movs	r3, #1
 800199e:	e04f      	b.n	8001a40 <LSM6DSO32_ReadAccel+0xd8>
    }

    lsm6dso32_accel->timestamp = TIM5->CNT;
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <LSM6DSO32_ReadAccel+0xe0>)
 80019a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	605a      	str	r2, [r3, #4]

    float sensitivity;
    switch(data_type) {
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <LSM6DSO32_ReadAccel+0x4c>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d004      	beq.n	80019bc <LSM6DSO32_ReadAccel+0x54>
 80019b2:	e006      	b.n	80019c2 <LSM6DSO32_ReadAccel+0x5a>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 80019b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80019b8:	61fb      	str	r3, [r7, #28]
        break;
 80019ba:	e004      	b.n	80019c6 <LSM6DSO32_ReadAccel+0x5e>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 0.122f;
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <LSM6DSO32_ReadAccel+0xe4>)
 80019be:	61fb      	str	r3, [r7, #28]
        break;
 80019c0:	e001      	b.n	80019c6 <LSM6DSO32_ReadAccel+0x5e>
    default:
        return LSM6DSO32_FAILURE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e03c      	b.n	8001a40 <LSM6DSO32_ReadAccel+0xd8>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 80019c6:	7c7b      	ldrb	r3, [r7, #17]
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	7c3a      	ldrb	r2, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->X = (float)temporary * sensitivity;
 80019d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 80019ee:	7cfb      	ldrb	r3, [r7, #19]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	7cba      	ldrb	r2, [r7, #18]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Y = (float)temporary * sensitivity;
 80019fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edc3 7a03 	vstr	s15, [r3, #12]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	7d3a      	ldrb	r2, [r7, #20]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Z = (float)temporary * sensitivity;
 8001a24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	edc3 7a04 	vstr	s15, [r3, #16]

    return LSM6DSO32_SUCCESS;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	3df9db23 	.word	0x3df9db23

08001a50 <LSM6DSO32_CalibrateOffset>:

LSM6DSO32_STATUS LSM6DSO32_CalibrateOffset(LSM6DSO32 * const lsm6dso32,
                                           LSM6DSO32_OFFSET * const offset,
                                           SPI_HandleTypeDef * const hspi,
                                           LSM6DSO32_DATA_TYPE const data_type)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	@ 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	70fb      	strb	r3, [r7, #3]
    LSM6DSO32_STATUS (*readSensor)(LSM6DSO32 * const,
                                   SPI_HandleTypeDef * const,
                                   LSM6DSO32_DATA_TYPE const);

    if(lsm6dso32->sensor == LSM6DSO32_GYROSCOPE) {
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <LSM6DSO32_CalibrateOffset+0x1c>
        readSensor = LSM6DSO32_ReadGyro;
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <LSM6DSO32_CalibrateOffset+0xbc>)
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6a:	e001      	b.n	8001a70 <LSM6DSO32_CalibrateOffset+0x20>
    } else {
        readSensor = LSM6DSO32_ReadAccel;
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <LSM6DSO32_CalibrateOffset+0xc0>)
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    float X, Y, Z;
    for(int i = 0; i < 100; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e027      	b.n	8001ac6 <LSM6DSO32_CalibrateOffset+0x76>
        if(readSensor(lsm6dso32, hspi, data_type) != LSM6DSO32_SUCCESS) {
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	4798      	blx	r3
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <LSM6DSO32_CalibrateOffset+0x3a>
            return LSM6DSO32_FAILURE;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e03c      	b.n	8001b04 <LSM6DSO32_CalibrateOffset+0xb4>
        }

        X += lsm6dso32->X;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a90:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	edc7 7a08 	vstr	s15, [r7, #32]
        Y += lsm6dso32->Y;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aa2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        Z += lsm6dso32->Z;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ab4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	edc7 7a06 	vstr	s15, [r7, #24]
    for(int i = 0; i < 100; i++) {
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b63      	cmp	r3, #99	@ 0x63
 8001aca:	ddd4      	ble.n	8001a76 <LSM6DSO32_CalibrateOffset+0x26>
    }

    offset->X = X / 100.f;
 8001acc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ad0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001b14 <LSM6DSO32_CalibrateOffset+0xc4>
 8001ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	edc3 7a00 	vstr	s15, [r3]
    offset->Y = Y / 100.f;
 8001ade:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ae2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001b14 <LSM6DSO32_CalibrateOffset+0xc4>
 8001ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	edc3 7a01 	vstr	s15, [r3, #4]
    offset->Z = Z / 100.f;
 8001af0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001af4:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001b14 <LSM6DSO32_CalibrateOffset+0xc4>
 8001af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	edc3 7a02 	vstr	s15, [r3, #8]

    return LSM6DSO32_SUCCESS;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	@ 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	08001881 	.word	0x08001881
 8001b10:	08001969 	.word	0x08001969
 8001b14:	42c80000 	.word	0x42c80000

08001b18 <LSM6DSO32_UseOffset>:

LSM6DSO32_STATUS LSM6DSO32_UseOffset(LSM6DSO32 * const lsm6dso32,
                                     LSM6DSO32_OFFSET * const offset)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    lsm6dso32->X -= offset->X;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edc3 7a02 	vstr	s15, [r3, #8]
    lsm6dso32->Y -= offset->Y;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edc3 7a03 	vstr	s15, [r3, #12]
    lsm6dso32->Z -= offset->Z;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edc3 7a04 	vstr	s15, [r3, #16]

    return LSM6DSO32_SUCCESS;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <filter_ctor>:
 */

#include "kalmanfilter.h"

void filter_ctor(KALMAN_FILTER * const filter)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
    // Initialize fundamental matrices for matrix computations.
    arm_mat_init_f32(&filter->x_instance, dim_x, 1, filter->x[0]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 8001b80:	3008      	adds	r0, #8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	2109      	movs	r1, #9
 8001b88:	f001 fde5 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->F_instance, dim_x, dim_x, filter->F[0]);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 8001b92:	3010      	adds	r0, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3324      	adds	r3, #36	@ 0x24
 8001b98:	2209      	movs	r2, #9
 8001b9a:	2109      	movs	r1, #9
 8001b9c:	f001 fddb 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_instance, dim_x, dim_x, filter->P[0]);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f503 5092 	add.w	r0, r3, #4672	@ 0x1240
 8001ba6:	3018      	adds	r0, #24
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001bae:	2209      	movs	r2, #9
 8001bb0:	2109      	movs	r1, #9
 8001bb2:	f001 fdd0 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_instance, dim_x, dim_x, filter->Q[0]);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8001bc2:	2209      	movs	r2, #9
 8001bc4:	2109      	movs	r1, #9
 8001bc6:	f001 fdc6 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Ha_instance, dim_za, dim_x, filter->Ha[0]);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001bd0:	3008      	adds	r0, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f503 737c 	add.w	r3, r3, #1008	@ 0x3f0
 8001bd8:	2209      	movs	r2, #9
 8001bda:	2103      	movs	r1, #3
 8001bdc:	f001 fdbb 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hp_instance, dim_zp, dim_x, filter->Hp[0]);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001be6:	3010      	adds	r0, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f203 435c 	addw	r3, r3, #1116	@ 0x45c
 8001bee:	2209      	movs	r2, #9
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	f001 fdb0 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hg_instance, dim_zg, dim_x, filter->Hg[0]);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f503 5093 	add.w	r0, r3, #4704	@ 0x1260
 8001bfc:	3018      	adds	r0, #24
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8001c04:	2209      	movs	r2, #9
 8001c06:	2103      	movs	r1, #3
 8001c08:	f001 fda5 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Ra_instance, dim_za, dim_za, filter->Ra[0]);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 8001c18:	2203      	movs	r2, #3
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	f001 fd9b 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Rp_instance, dim_zp, dim_zp, filter->Rp[0]);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001c26:	3008      	adds	r0, #8
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2101      	movs	r1, #1
 8001c32:	f001 fd90 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Rg_instance, dim_zg, dim_zg, filter->Rg[0]);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001c3c:	3010      	adds	r0, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8001c44:	2203      	movs	r2, #3
 8001c46:	2103      	movs	r1, #3
 8001c48:	f001 fd85 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->ya_instance, dim_za, 1, filter->ya[0]);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f503 5094 	add.w	r0, r3, #4736	@ 0x1280
 8001c52:	3018      	adds	r0, #24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f503 63a7 	add.w	r3, r3, #1336	@ 0x538
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	f001 fd7a 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->yp_instance, dim_zp, 1, filter->yp[0]);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2101      	movs	r1, #1
 8001c72:	f001 fd70 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->yg_instance, dim_zg, 1, filter->yg[0]);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 8001c7c:	3008      	adds	r0, #8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f503 63a9 	add.w	r3, r3, #1352	@ 0x548
 8001c84:	2201      	movs	r2, #1
 8001c86:	2103      	movs	r1, #3
 8001c88:	f001 fd65 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Ka_instance, dim_x, dim_za, filter->Ka[0]);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 8001c92:	3010      	adds	r0, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f203 5354 	addw	r3, r3, #1364	@ 0x554
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	2109      	movs	r1, #9
 8001c9e:	f001 fd5a 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Kp_instance, dim_x, dim_zp, filter->Kp[0]);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f503 5095 	add.w	r0, r3, #4768	@ 0x12a0
 8001ca8:	3018      	adds	r0, #24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2109      	movs	r1, #9
 8001cb4:	f001 fd4f 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Kg_instance, dim_x, dim_zg, filter->Kg[0]);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f203 53e4 	addw	r3, r3, #1508	@ 0x5e4
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	2109      	movs	r1, #9
 8001cc8:	f001 fd45 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_instance, dim_x, dim_x, filter->I[0]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001cd2:	3008      	adds	r0, #8
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001cda:	2209      	movs	r2, #9
 8001cdc:	2109      	movs	r1, #9
 8001cde:	f001 fd3a 	bl	8003756 <arm_mat_init_f32>

    // Initialize matrices to store intermediate products.
    arm_mat_init_f32(&filter->Ft_instance, dim_x, dim_x, filter->Ft[0]);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001ce8:	3010      	adds	r0, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f203 7394 	addw	r3, r3, #1940	@ 0x794
 8001cf0:	2209      	movs	r2, #9
 8001cf2:	2109      	movs	r1, #9
 8001cf4:	f001 fd2f 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->FP_instance, dim_x, dim_x, filter->FP[0]);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 5096 	add.w	r0, r3, #4800	@ 0x12c0
 8001cfe:	3018      	adds	r0, #24
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f603 03d8 	addw	r3, r3, #2264	@ 0x8d8
 8001d06:	2209      	movs	r2, #9
 8001d08:	2109      	movs	r1, #9
 8001d0a:	f001 fd24 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->FPFt_instance, dim_x, dim_x, filter->FPFt[0]);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f603 231c 	addw	r3, r3, #2588	@ 0xa1c
 8001d1a:	2209      	movs	r2, #9
 8001d1c:	2109      	movs	r1, #9
 8001d1e:	f001 fd1a 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hxa_instance, dim_za, 1, filter->Hxa[0]);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001d28:	3008      	adds	r0, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f503 6336 	add.w	r3, r3, #2912	@ 0xb60
 8001d30:	2201      	movs	r2, #1
 8001d32:	2103      	movs	r1, #3
 8001d34:	f001 fd0f 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hxp_instance, dim_zp, 1, filter->Hxp[0]);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001d3e:	3010      	adds	r0, #16
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f603 336c 	addw	r3, r3, #2924	@ 0xb6c
 8001d46:	2201      	movs	r2, #1
 8001d48:	2101      	movs	r1, #1
 8001d4a:	f001 fd04 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hxg_instance, dim_zg, 1, filter->Hxg[0]);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f503 5097 	add.w	r0, r3, #4832	@ 0x12e0
 8001d54:	3018      	adds	r0, #24
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f503 6337 	add.w	r3, r3, #2928	@ 0xb70
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2103      	movs	r1, #3
 8001d60:	f001 fcf9 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Hta_instance, dim_x, dim_za, filter->Hta[0]);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f603 337c 	addw	r3, r3, #2940	@ 0xb7c
 8001d70:	2203      	movs	r2, #3
 8001d72:	2109      	movs	r1, #9
 8001d74:	f001 fcef 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Htp_instance, dim_x, dim_zp, filter->Htp[0]);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 8001d7e:	3008      	adds	r0, #8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f603 33e8 	addw	r3, r3, #3048	@ 0xbe8
 8001d86:	2201      	movs	r2, #1
 8001d88:	2109      	movs	r1, #9
 8001d8a:	f001 fce4 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Htg_instance, dim_x, dim_zg, filter->Htg[0]);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 8001d94:	3010      	adds	r0, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f603 430c 	addw	r3, r3, #3084	@ 0xc0c
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	2109      	movs	r1, #9
 8001da0:	f001 fcd9 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->PHta_instance, dim_x, dim_za, filter->PHta[0]);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f503 5098 	add.w	r0, r3, #4864	@ 0x1300
 8001daa:	3018      	adds	r0, #24
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f603 4378 	addw	r3, r3, #3192	@ 0xc78
 8001db2:	2203      	movs	r2, #3
 8001db4:	2109      	movs	r1, #9
 8001db6:	f001 fcce 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->PHtp_instance, dim_x, dim_zp, filter->PHtp[0]);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2109      	movs	r1, #9
 8001dca:	f001 fcc4 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->PHtg_instance, dim_x, dim_zg, filter->PHtg[0]);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001dd4:	3008      	adds	r0, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 8001ddc:	2203      	movs	r2, #3
 8001dde:	2109      	movs	r1, #9
 8001de0:	f001 fcb9 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->HPHta_instance, dim_za, dim_za, filter->HPHta[0]);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001dea:	3010      	adds	r0, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f603 5374 	addw	r3, r3, #3444	@ 0xd74
 8001df2:	2203      	movs	r2, #3
 8001df4:	2103      	movs	r1, #3
 8001df6:	f001 fcae 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->HPHtp_instance, dim_zp, dim_zp, filter->HPHtp[0]);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f503 5099 	add.w	r0, r3, #4896	@ 0x1320
 8001e00:	3018      	adds	r0, #24
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f603 5398 	addw	r3, r3, #3480	@ 0xd98
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	f001 fca3 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->HPHtg_instance, dim_zg, dim_zg, filter->HPHtg[0]);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f603 539c 	addw	r3, r3, #3484	@ 0xd9c
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	2103      	movs	r1, #3
 8001e20:	f001 fc99 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sa_instance, dim_za, dim_za, filter->Sa[0]);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001e2a:	3008      	adds	r0, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 635c 	add.w	r3, r3, #3520	@ 0xdc0
 8001e32:	2203      	movs	r2, #3
 8001e34:	2103      	movs	r1, #3
 8001e36:	f001 fc8e 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sp_instance, dim_zp, dim_zp, filter->Sp[0]);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001e40:	3010      	adds	r0, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f603 53e4 	addw	r3, r3, #3556	@ 0xde4
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	f001 fc83 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sg_instance, dim_zg, dim_zg, filter->Sg[0]);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f503 509a 	add.w	r0, r3, #4928	@ 0x1340
 8001e56:	3018      	adds	r0, #24
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f603 53e8 	addw	r3, r3, #3560	@ 0xde8
 8001e5e:	2203      	movs	r2, #3
 8001e60:	2103      	movs	r1, #3
 8001e62:	f001 fc78 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sia_instance, dim_za, dim_za, filter->Sia[0]);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f603 630c 	addw	r3, r3, #3596	@ 0xe0c
 8001e72:	2203      	movs	r2, #3
 8001e74:	2103      	movs	r1, #3
 8001e76:	f001 fc6e 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sip_instance, dim_zp, dim_zp, filter->Sip[0]);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 8001e80:	3008      	adds	r0, #8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f503 6363 	add.w	r3, r3, #3632	@ 0xe30
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	f001 fc63 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Sig_instance, dim_zg, dim_zg, filter->Sig[0]);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 8001e96:	3010      	adds	r0, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f603 6334 	addw	r3, r3, #3636	@ 0xe34
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	f001 fc58 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Ky_instance, dim_x, 1, filter->Ky[0]);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 509b 	add.w	r0, r3, #4960	@ 0x1360
 8001eac:	3018      	adds	r0, #24
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f603 6358 	addw	r3, r3, #3672	@ 0xe58
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2109      	movs	r1, #9
 8001eb8:	f001 fc4d 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->KH_instance, dim_x, dim_x, filter->KH[0]);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f603 637c 	addw	r3, r3, #3708	@ 0xe7c
 8001ec8:	2209      	movs	r2, #9
 8001eca:	2109      	movs	r1, #9
 8001ecc:	f001 fc43 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->IKH_instance, dim_x, dim_x, filter->IKH[0]);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 8001ed6:	3008      	adds	r0, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 637c 	add.w	r3, r3, #4032	@ 0xfc0
 8001ede:	2209      	movs	r2, #9
 8001ee0:	2109      	movs	r1, #9
 8001ee2:	f001 fc38 	bl	8003756 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->IKHP_instance, dim_x, dim_x, filter->IKHP[0]);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f503 509c 	add.w	r0, r3, #4992	@ 0x1380
 8001eec:	3010      	adds	r0, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2209      	movs	r2, #9
 8001ef8:	2109      	movs	r1, #9
 8001efa:	f001 fc2c 	bl	8003756 <arm_mat_init_f32>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f0c:	f001 fc3c 	bl	8003788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f10:	f000 f89c 	bl	800204c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f14:	f000 f9b6 	bl	8002284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f18:	f000 f98a 	bl	8002230 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001f1c:	f000 f904 	bl	8002128 <MX_SPI1_Init>
  MX_TIM5_Init();
 8001f20:	f000 f938 	bl	8002194 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  RingBufferUART_ctor(&uart_rb, 64, uart_rb_buf);
 8001f24:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe0 <main+0xd8>)
 8001f26:	2140      	movs	r1, #64	@ 0x40
 8001f28:	482e      	ldr	r0, [pc, #184]	@ (8001fe4 <main+0xdc>)
 8001f2a:	f000 fa53 	bl	80023d4 <RingBufferUART_ctor>
  HAL_Delay(100);
 8001f2e:	2064      	movs	r0, #100	@ 0x64
 8001f30:	f001 fc6c 	bl	800380c <HAL_Delay>

  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001f34:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <main+0xe0>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <main+0xe0>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6413      	str	r3, [r2, #64]	@ 0x40
  TIM5->CR1 |= TIM_CR1_CEN;
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <main+0xe4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a29      	ldr	r2, [pc, #164]	@ (8001fec <main+0xe4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f4c:	f004 fbc8 	bl	80066e0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uartMutex */
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 8001f50:	4827      	ldr	r0, [pc, #156]	@ (8001ff0 <main+0xe8>)
 8001f52:	f004 fcbc 	bl	80068ce <osMutexNew>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a26      	ldr	r2, [pc, #152]	@ (8001ff4 <main+0xec>)
 8001f5a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSemaphore */
  uartSemaphoreHandle = osSemaphoreNew(64, 0, &uartSemaphore_attributes);
 8001f5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <main+0xf0>)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2040      	movs	r0, #64	@ 0x40
 8001f62:	f004 fdc2 	bl	8006aea <osSemaphoreNew>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <main+0xf4>)
 8001f6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f6c:	4a24      	ldr	r2, [pc, #144]	@ (8002000 <main+0xf8>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4824      	ldr	r0, [pc, #144]	@ (8002004 <main+0xfc>)
 8001f72:	f004 fbff 	bl	8006774 <osThreadNew>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <main+0x100>)
 8001f7a:	6013      	str	r3, [r2, #0]

  /* creation of RunUART */
  RunUARTHandle = osThreadNew(StartUART, (void*) sensor_args, &RunUART_attributes);
 8001f7c:	4b23      	ldr	r3, [pc, #140]	@ (800200c <main+0x104>)
 8001f7e:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <main+0x108>)
 8001f80:	4619      	mov	r1, r3
 8001f82:	4824      	ldr	r0, [pc, #144]	@ (8002014 <main+0x10c>)
 8001f84:	f004 fbf6 	bl	8006774 <osThreadNew>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <main+0x110>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* creation of RunBMP388 */
  RunBMP388Handle = osThreadNew(StartBMP388, (void*) sensor_args, &RunBMP388_attributes);
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <main+0x104>)
 8001f90:	4a22      	ldr	r2, [pc, #136]	@ (800201c <main+0x114>)
 8001f92:	4619      	mov	r1, r3
 8001f94:	4822      	ldr	r0, [pc, #136]	@ (8002020 <main+0x118>)
 8001f96:	f004 fbed 	bl	8006774 <osThreadNew>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a21      	ldr	r2, [pc, #132]	@ (8002024 <main+0x11c>)
 8001f9e:	6013      	str	r3, [r2, #0]

  /* creation of RunLIS2MDL */
  RunLIS2MDLHandle = osThreadNew(StartLIS2MDL, (void*) sensor_args, &RunLIS2MDL_attributes);
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <main+0x104>)
 8001fa2:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <main+0x120>)
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4821      	ldr	r0, [pc, #132]	@ (800202c <main+0x124>)
 8001fa8:	f004 fbe4 	bl	8006774 <osThreadNew>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a20      	ldr	r2, [pc, #128]	@ (8002030 <main+0x128>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* creation of RunLSM6DSO32 */
  RunLSM6DSO32Handle = osThreadNew(StartLSM6DSO32, (void*) sensor_args, &RunLSM6DSO32_attributes);
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <main+0x104>)
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <main+0x12c>)
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	481f      	ldr	r0, [pc, #124]	@ (8002038 <main+0x130>)
 8001fba:	f004 fbdb 	bl	8006774 <osThreadNew>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <main+0x134>)
 8001fc2:	6013      	str	r3, [r2, #0]

  /* creation of RunStateMachine */
  RunStateMachineHandle = osThreadNew(StartStateMachine, (void*) sensor_args, &RunStateMachine_attributes);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <main+0x104>)
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <main+0x138>)
 8001fc8:	4619      	mov	r1, r3
 8001fca:	481e      	ldr	r0, [pc, #120]	@ (8002044 <main+0x13c>)
 8001fcc:	f004 fbd2 	bl	8006774 <osThreadNew>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <main+0x140>)
 8001fd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001fd6:	f004 fba7 	bl	8006728 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001fda:	bf00      	nop
 8001fdc:	e7fd      	b.n	8001fda <main+0xd2>
 8001fde:	bf00      	nop
 8001fe0:	20000328 	.word	0x20000328
 8001fe4:	20000314 	.word	0x20000314
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	0800d8e4 	.word	0x0800d8e4
 8001ff4:	2000030c 	.word	0x2000030c
 8001ff8:	0800d8f4 	.word	0x0800d8f4
 8001ffc:	20000310 	.word	0x20000310
 8002000:	0800d80c 	.word	0x0800d80c
 8002004:	08002395 	.word	0x08002395
 8002008:	200002f4 	.word	0x200002f4
 800200c:	20000000 	.word	0x20000000
 8002010:	0800d830 	.word	0x0800d830
 8002014:	080032f1 	.word	0x080032f1
 8002018:	200002f8 	.word	0x200002f8
 800201c:	0800d854 	.word	0x0800d854
 8002020:	08002c1d 	.word	0x08002c1d
 8002024:	200002fc 	.word	0x200002fc
 8002028:	0800d878 	.word	0x0800d878
 800202c:	08002db1 	.word	0x08002db1
 8002030:	20000300 	.word	0x20000300
 8002034:	0800d89c 	.word	0x0800d89c
 8002038:	08003071 	.word	0x08003071
 800203c:	20000304 	.word	0x20000304
 8002040:	0800d8c0 	.word	0x0800d8c0
 8002044:	080030f9 	.word	0x080030f9
 8002048:	20000308 	.word	0x20000308

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b094      	sub	sp, #80	@ 0x50
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2234      	movs	r2, #52	@ 0x34
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f008 fefb 	bl	800ae56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <SystemClock_Config+0xd4>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	4a29      	ldr	r2, [pc, #164]	@ (8002120 <SystemClock_Config+0xd4>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002080:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <SystemClock_Config+0xd4>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <SystemClock_Config+0xd8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002098:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <SystemClock_Config+0xd8>)
 800209a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <SystemClock_Config+0xd8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b4:	2310      	movs	r3, #16
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b8:	2302      	movs	r3, #2
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020bc:	2300      	movs	r3, #0
 80020be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80020c0:	2310      	movs	r3, #16
 80020c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80020ca:	2304      	movs	r3, #4
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 f9c6 	bl	800446c <HAL_RCC_OscConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80020e6:	f000 f96f 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ea:	230f      	movs	r3, #15
 80020ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ee:	2302      	movs	r3, #2
 80020f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f001 fe34 	bl	8003d74 <HAL_RCC_ClockConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002112:	f000 f959 	bl	80023c8 <Error_Handler>
  }
}
 8002116:	bf00      	nop
 8002118:	3750      	adds	r7, #80	@ 0x50
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000

08002128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800212c:	4b17      	ldr	r3, [pc, #92]	@ (800218c <MX_SPI1_Init+0x64>)
 800212e:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <MX_SPI1_Init+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <MX_SPI1_Init+0x64>)
 8002134:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800213a:	4b14      	ldr	r3, [pc, #80]	@ (800218c <MX_SPI1_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <MX_SPI1_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_SPI1_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_SPI1_Init+0x64>)
 8002154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002158:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_SPI1_Init+0x64>)
 800215c:	2220      	movs	r2, #32
 800215e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <MX_SPI1_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_SPI1_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_SPI1_Init+0x64>)
 8002174:	220a      	movs	r2, #10
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	@ (800218c <MX_SPI1_Init+0x64>)
 800217a:	f002 fc15 	bl	80049a8 <HAL_SPI_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002184:	f000 f920 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000020c 	.word	0x2000020c
 8002190:	40013000 	.word	0x40013000

08002194 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	f107 0308 	add.w	r3, r7, #8
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021b2:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <MX_TIM5_Init+0x98>)
 80021b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021d6:	4814      	ldr	r0, [pc, #80]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021d8:	f003 f9bc 	bl	8005554 <HAL_TIM_Base_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80021e2:	f000 f8f1 	bl	80023c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	480d      	ldr	r0, [pc, #52]	@ (8002228 <MX_TIM5_Init+0x94>)
 80021f4:	f003 fb5e 	bl	80058b4 <HAL_TIM_ConfigClockSource>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f000 f8e3 	bl	80023c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	@ (8002228 <MX_TIM5_Init+0x94>)
 8002210:	f003 fd86 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800221a:	f000 f8d5 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000264 	.word	0x20000264
 800222c:	40000c00 	.word	0x40000c00

08002230 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002234:	4b11      	ldr	r3, [pc, #68]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <MX_USART2_UART_Init+0x50>)
 8002238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800223a:	4b10      	ldr	r3, [pc, #64]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_USART2_UART_Init+0x4c>)
 8002268:	f003 fdea 	bl	8005e40 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002272:	f000 f8a9 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002ac 	.word	0x200002ac
 8002280:	40004400 	.word	0x40004400

08002284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	@ 0x28
 8002288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b39      	ldr	r3, [pc, #228]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a38      	ldr	r2, [pc, #224]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a31      	ldr	r2, [pc, #196]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a2a      	ldr	r2, [pc, #168]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <MX_GPIO_Init+0x100>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <MX_GPIO_Init+0x100>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002310:	481d      	ldr	r0, [pc, #116]	@ (8002388 <MX_GPIO_Init+0x104>)
 8002312:	f001 fd15 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800231c:	481b      	ldr	r0, [pc, #108]	@ (800238c <MX_GPIO_Init+0x108>)
 800231e:	f001 fd0f 	bl	8003d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002328:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800232c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4815      	ldr	r0, [pc, #84]	@ (8002390 <MX_GPIO_Init+0x10c>)
 800233a:	f001 fb6d 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800233e:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	480c      	ldr	r0, [pc, #48]	@ (8002388 <MX_GPIO_Init+0x104>)
 8002358:	f001 fb5e 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800235c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_GPIO_Init+0x108>)
 8002376:	f001 fb4f 	bl	8003a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800237a:	bf00      	nop
 800237c:	3728      	adds	r7, #40	@ 0x28
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400
 800238c:	40020000 	.word	0x40020000
 8002390:	40020800 	.word	0x40020800

08002394 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;) {
    osDelay(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f004 fa7b 	bl	8006898 <osDelay>
 80023a2:	e7fb      	b.n	800239c <StartDefaultTask+0x8>

080023a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023b6:	f001 fa09 	bl	80037cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40001000 	.word	0x40001000

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <Error_Handler+0x8>

080023d4 <RingBufferUART_ctor>:
#include <ringbufferUART.h>

RB_STATUS_UART RingBufferUART_ctor(RingBufferUART * const rb,
                                   uint32_t const capacity,
                                   RingBufferUART_t * const buffer)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    // If capacity is 0 or buffer is a nullptr, return failure.
    if(!capacity || !buffer) {
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <RingBufferUART_ctor+0x18>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <RingBufferUART_ctor+0x1c>
        return RB_UART_FAILURE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00f      	b.n	8002410 <RingBufferUART_ctor+0x3c>
    }
    // Else, initialize values and return success.
    rb->capacity = capacity;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	601a      	str	r2, [r3, #0]
    rb->buffer   = buffer;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
    rb->size     = (uint32_t)0;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
    rb->head     = (uint32_t)0;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
    rb->tail     = (uint32_t)0;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]

    return RB_UART_SUCCESS;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <RingBufferUART_enqueue>:

RB_STATUS_UART RingBufferUART_enqueue(RingBufferUART * const rb,
                                      RingBufferUART_t const item)
{
 800241c:	b084      	sub	sp, #16
 800241e:	b4b0      	push	{r4, r5, r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	f107 001c 	add.w	r0, r7, #28
 800242a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Add item to head end of RingBuffer. Overwrite old data if necessary.
    rb->buffer[rb->head] = item;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	461d      	mov	r5, r3
 8002442:	f107 041c 	add.w	r4, r7, #28
 8002446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244e:	e885 0003 	stmia.w	r5, {r0, r1}
    // If head is at the end of memory, wrap around to 0.
    if(++rb->head == rb->capacity) {
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d102      	bne.n	800246e <RingBufferUART_enqueue+0x52>
        rb->head = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
    }
    // Increment size if not already at capacity.
    if(rb->size < rb->capacity) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d205      	bcs.n	8002486 <RingBufferUART_enqueue+0x6a>
        rb->size++;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	e00d      	b.n	80024a2 <RingBufferUART_enqueue+0x86>
    } else {
        // Otherwise, increment tail so that we're still reading oldest data.
        if(++rb->tail == rb->capacity) {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d102      	bne.n	80024a2 <RingBufferUART_enqueue+0x86>
            rb->tail = 0;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
        }
    }
    // Return success to calling function.
    return RB_UART_SUCCESS;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bcb0      	pop	{r4, r5, r7}
 80024ac:	b004      	add	sp, #16
 80024ae:	4770      	bx	lr

080024b0 <RingBufferUART_dequeue>:

RB_STATUS_UART RingBufferUART_dequeue(RingBufferUART * const rb,
                                      RingBufferUART_t * const item)
{
 80024b0:	b4b0      	push	{r4, r5, r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
    // If RingBuffer is empty, return failure.
    if(!rb->size) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <RingBufferUART_dequeue+0x16>
        return RB_UART_FAILURE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e025      	b.n	8002512 <RingBufferUART_dequeue+0x62>
    } else {
        // Otherwise, take item from tail end of RingBuffer.
        *item = rb->buffer[rb->tail];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6919      	ldr	r1, [r3, #16]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	440b      	add	r3, r1
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4614      	mov	r4, r2
 80024dc:	461d      	mov	r5, r3
 80024de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024e6:	e884 0003 	stmia.w	r4, {r0, r1}
        // If tail is at the end of memory, wrap around to 0.
        if(++rb->tail == rb->capacity) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d102      	bne.n	8002506 <RingBufferUART_dequeue+0x56>
          rb->tail = 0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
        }
        // Decrement the size of the buffer.
        rb->size--;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]
    }
    // Return success to calling function.
    return RB_UART_SUCCESS;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bcb0      	pop	{r4, r5, r7}
 800251a:	4770      	bx	lr

0800251c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_MspInit+0x54>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <HAL_MspInit+0x54>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002530:	6453      	str	r3, [r2, #68]	@ 0x44
 8002532:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <HAL_MspInit+0x54>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_MspInit+0x54>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_MspInit+0x54>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	@ 0x40
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_MspInit+0x54>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	210f      	movs	r1, #15
 800255e:	f06f 0001 	mvn.w	r0, #1
 8002562:	f001 fa2f 	bl	80039c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_SPI_MspInit+0x84>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12b      	bne.n	80025ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a17      	ldr	r2, [pc, #92]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 80025a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b0e      	ldr	r3, [pc, #56]	@ (80025fc <HAL_SPI_MspInit+0x88>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025ce:	23e0      	movs	r3, #224	@ 0xe0
 80025d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025da:	2303      	movs	r3, #3
 80025dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025de:	2305      	movs	r3, #5
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	4805      	ldr	r0, [pc, #20]	@ (8002600 <HAL_SPI_MspInit+0x8c>)
 80025ea:	f001 fa15 	bl	8003a18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	@ 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40013000 	.word	0x40013000
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020000 	.word	0x40020000

08002604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <HAL_TIM_Base_MspInit+0x3c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10d      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_TIM_Base_MspInit+0x40>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <HAL_TIM_Base_MspInit+0x40>)
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6413      	str	r3, [r2, #64]	@ 0x40
 8002626:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <HAL_TIM_Base_MspInit+0x40>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_UART_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d12b      	bne.n	80026c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a10      	ldr	r2, [pc, #64]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_UART_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b2:	2307      	movs	r3, #7
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <HAL_UART_MspInit+0x8c>)
 80026be:	f001 f9ab 	bl	8003a18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	@ 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000

080026d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08e      	sub	sp, #56	@ 0x38
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4b33      	ldr	r3, [pc, #204]	@ (80027bc <HAL_InitTick+0xe4>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	4a32      	ldr	r2, [pc, #200]	@ (80027bc <HAL_InitTick+0xe4>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f8:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <HAL_InitTick+0xe4>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002704:	f107 0210 	add.w	r2, r7, #16
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fc4a 	bl	8003fa8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800271e:	f001 fc1b 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8002722:	6378      	str	r0, [r7, #52]	@ 0x34
 8002724:	e004      	b.n	8002730 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002726:	f001 fc17 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 800272a:	4603      	mov	r3, r0
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	4a23      	ldr	r2, [pc, #140]	@ (80027c0 <HAL_InitTick+0xe8>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	0c9b      	lsrs	r3, r3, #18
 800273a:	3b01      	subs	r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800273e:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <HAL_InitTick+0xec>)
 8002740:	4a21      	ldr	r2, [pc, #132]	@ (80027c8 <HAL_InitTick+0xf0>)
 8002742:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002744:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <HAL_InitTick+0xec>)
 8002746:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800274a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800274c:	4a1d      	ldr	r2, [pc, #116]	@ (80027c4 <HAL_InitTick+0xec>)
 800274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002750:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002752:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_InitTick+0xec>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_InitTick+0xec>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <HAL_InitTick+0xec>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002764:	4817      	ldr	r0, [pc, #92]	@ (80027c4 <HAL_InitTick+0xec>)
 8002766:	f002 fef5 	bl	8005554 <HAL_TIM_Base_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11b      	bne.n	80027b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002778:	4812      	ldr	r0, [pc, #72]	@ (80027c4 <HAL_InitTick+0xec>)
 800277a:	f002 ff3b 	bl	80055f4 <HAL_TIM_Base_Start_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002784:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002788:	2b00      	cmp	r3, #0
 800278a:	d111      	bne.n	80027b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800278c:	2036      	movs	r0, #54	@ 0x36
 800278e:	f001 f935 	bl	80039fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d808      	bhi.n	80027aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	2036      	movs	r0, #54	@ 0x36
 800279e:	f001 f911 	bl	80039c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a2:	4a0a      	ldr	r2, [pc, #40]	@ (80027cc <HAL_InitTick+0xf4>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	e002      	b.n	80027b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80027b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3738      	adds	r7, #56	@ 0x38
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	431bde83 	.word	0x431bde83
 80027c4:	20000928 	.word	0x20000928
 80027c8:	40001000 	.word	0x40001000
 80027cc:	20000018 	.word	0x20000018

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <NMI_Handler+0x4>

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <MemManage_Handler+0x4>

080027e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <TIM6_DAC_IRQHandler+0x10>)
 800280e:	f002 ff61 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000928 	.word	0x20000928

0800281c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return 1;
 8002820:	2301      	movs	r3, #1
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_kill>:

int _kill(int pid, int sig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002836:	f008 fbb7 	bl	800afa8 <__errno>
 800283a:	4603      	mov	r3, r0
 800283c:	2216      	movs	r2, #22
 800283e:	601a      	str	r2, [r3, #0]
  return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_exit>:

void _exit (int status)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffe7 	bl	800282c <_kill>
  while (1) {}    /* Make sure we hang here */
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <_exit+0x12>

08002862 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e00a      	b.n	800288a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002874:	f3af 8000 	nop.w
 8002878:	4601      	mov	r1, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	60ba      	str	r2, [r7, #8]
 8002880:	b2ca      	uxtb	r2, r1
 8002882:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbf0      	blt.n	8002874 <_read+0x12>
  }

  return len;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e009      	b.n	80028c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	60ba      	str	r2, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	dbf1      	blt.n	80028ae <_write+0x12>
  }
  return len;
 80028ca:	687b      	ldr	r3, [r7, #4]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_close>:

int _close(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028fc:	605a      	str	r2, [r3, #4]
  return 0;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_isatty>:

int _isatty(int file)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002914:	2301      	movs	r3, #1
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f008 fb1c 	bl	800afa8 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20020000 	.word	0x20020000
 800299c:	00000400 	.word	0x00000400
 80029a0:	20000970 	.word	0x20000970
 80029a4:	20019f98 	.word	0x20019f98

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <SystemInit+0x20>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	4a05      	ldr	r2, [pc, #20]	@ (80029c8 <SystemInit+0x20>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 80029cc:	b084      	sub	sp, #16
 80029ce:	b5b0      	push	{r4, r5, r7, lr}
 80029d0:	b08a      	sub	sp, #40	@ 0x28
 80029d2:	af04      	add	r7, sp, #16
 80029d4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80029d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_ERROR,
 80029dc:	463b      	mov	r3, r7
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	615a      	str	r2, [r3, #20]
 80029ec:	2303      	movs	r3, #3
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f2:	607b      	str	r3, [r7, #4]
                                  .error_buf = message};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 80029f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 ffec 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002a02:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002a04:	466c      	mov	r4, sp
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a12:	463b      	mov	r3, r7
 8002a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a16:	4628      	mov	r0, r5
 8002a18:	f7ff fd00 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 f825 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 f938 	bl	8006ca0 <osSemaphoreRelease>
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a3a:	b004      	add	sp, #16
 8002a3c:	4770      	bx	lr

08002a3e <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               BMP388 const bmp388)
{
 8002a3e:	b084      	sub	sp, #16
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_BMP388,
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	615a      	str	r2, [r3, #20]
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                  .bmp388 = bmp388};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a72:	4618      	mov	r0, r3
 8002a74:	f003 ffb1 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002a78:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002a7a:	466c      	mov	r4, sp
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a88:	463b      	mov	r3, r7
 8002a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f7ff fcc5 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 ffea 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 f8fd 	bl	8006ca0 <osSemaphoreRelease>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ab0:	b004      	add	sp, #16
 8002ab2:	4770      	bx	lr

08002ab4 <StartTemperature>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTemperature(void *argument)
{
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b090      	sub	sp, #64	@ 0x40
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f107 041c 	add.w	r4, r7, #28
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	6023      	str	r3, [r4, #0]
    BMP388 bmp388 = {.sensor = BMP388_TEMPERATURE};
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]

    // Initial temperature read to update global temperature variable
    //  in bmp388.c for pressure compensations.
    if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
                       args.hspi) != BMP388_SUCCESS) {
 8002ad8:	69fb      	ldr	r3, [r7, #28]
    if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
 8002ada:	f107 0010 	add.w	r0, r7, #16
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4923      	ldr	r1, [pc, #140]	@ (8002b70 <StartTemperature+0xbc>)
 8002ae2:	f7fe fcb9 	bl	8001458 <BMP388_ReadTemp>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <StartTemperature+0x50>
        report_error(args, "TEMPERATURE READ ERROR");
 8002aec:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <StartTemperature+0xc0>)
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afa:	f7ff ff67 	bl	80029cc <report_error>
        vTaskSuspend(NULL);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f005 fdc6 	bl	8008690 <vTaskSuspend>
    }

    // Let pressure task know it can start, because initial temperature
    //  is received and available for pressure compensation.
    osSemaphoreRelease(bmp388SemaphoreHandle);
 8002b04:	4b1c      	ldr	r3, [pc, #112]	@ (8002b78 <StartTemperature+0xc4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f8c9 	bl	8006ca0 <osSemaphoreRelease>
    // Update temperature reading once per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002b0e:	f005 ff51 	bl	80089b4 <xTaskGetTickCount>
 8002b12:	4603      	mov	r3, r0
 8002b14:	60fb      	str	r3, [r7, #12]

        // Read temperature from BMP388 sensor.
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
                           args.hspi) != BMP388_SUCCESS) {
 8002b16:	69fb      	ldr	r3, [r7, #28]
        if(BMP388_ReadTemp(&bmp388, &bmp388_comp, TEMPERATURE_DATA_TYPE,
 8002b18:	f107 0010 	add.w	r0, r7, #16
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4914      	ldr	r1, [pc, #80]	@ (8002b70 <StartTemperature+0xbc>)
 8002b20:	f7fe fc9a 	bl	8001458 <BMP388_ReadTemp>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <StartTemperature+0x8e>
            report_error(args, "TEMPERATURE READ ERROR");
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <StartTemperature+0xc0>)
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	f107 031c 	add.w	r3, r7, #28
 8002b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b38:	f7ff ff48 	bl	80029cc <report_error>
            vTaskSuspend(NULL);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f005 fda7 	bl	8008690 <vTaskSuspend>
        }

        // Send latest temperature reading to UART RingBuffer.
        send_update(args, bmp388);
 8002b42:	ac01      	add	r4, sp, #4
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f107 031c 	add.w	r3, r7, #28
 8002b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b5a:	f7ff ff70 	bl	8002a3e <send_update>

        // Delay 1 second from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 1000);
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002b66:	4618      	mov	r0, r3
 8002b68:	f005 fcdc 	bl	8008524 <vTaskDelayUntil>
        xLastWakeTime = xTaskGetTickCount();
 8002b6c:	e7cf      	b.n	8002b0e <StartTemperature+0x5a>
 8002b6e:	bf00      	nop
 8002b70:	2000097c 	.word	0x2000097c
 8002b74:	0800d43c 	.word	0x0800d43c
 8002b78:	200009b4 	.word	0x200009b4

08002b7c <StartPressure>:
    }
}

static void StartPressure(void *argument)
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b090      	sub	sp, #64	@ 0x40
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f107 041c 	add.w	r4, r7, #28
 8002b8a:	461d      	mov	r5, r3
 8002b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b90:	682b      	ldr	r3, [r5, #0]
 8002b92:	6023      	str	r3, [r4, #0]
    BMP388 bmp388 = {.sensor = BMP388_PRESSURE};
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	743b      	strb	r3, [r7, #16]

    // Wait for temperature task to run once and provide a value for
    //  compensate_pressure function to work.
    osSemaphoreAcquire(bmp388SemaphoreHandle, osWaitForever);
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <StartPressure+0x94>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	4618      	mov	r0, r3
 8002bae:	f004 f825 	bl	8006bfc <osSemaphoreAcquire>
    // Update pressure reading 25 times per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002bb2:	f005 feff 	bl	80089b4 <xTaskGetTickCount>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]

        // Read pressure from BMP388 sensor.
        if(BMP388_ReadPres(&bmp388,
                           &bmp388_comp,
                           PRESSURE_DATA_TYPE,
                           args.hspi)
 8002bba:	69fb      	ldr	r3, [r7, #28]
        if(BMP388_ReadPres(&bmp388,
 8002bbc:	f107 0010 	add.w	r0, r7, #16
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4914      	ldr	r1, [pc, #80]	@ (8002c14 <StartPressure+0x98>)
 8002bc4:	f7fe fc8e 	bl	80014e4 <BMP388_ReadPres>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <StartPressure+0x6a>
                           != BMP388_SUCCESS) {
            report_error(args, "PRESURE READ ERROR");
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <StartPressure+0x9c>)
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bdc:	f7ff fef6 	bl	80029cc <report_error>
            vTaskSuspend(NULL);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f005 fd55 	bl	8008690 <vTaskSuspend>
        }

        // Send latest pressure reading to UART RingBuffer.
        send_update(args, bmp388);
 8002be6:	ac01      	add	r4, sp, #4
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfe:	f7ff ff1e 	bl	8002a3e <send_update>

        // Delay 40 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 40);
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	2128      	movs	r1, #40	@ 0x28
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f005 fc8b 	bl	8008524 <vTaskDelayUntil>
        xLastWakeTime = xTaskGetTickCount();
 8002c0e:	e7d0      	b.n	8002bb2 <StartPressure+0x36>
 8002c10:	200009b4 	.word	0x200009b4
 8002c14:	2000097c 	.word	0x2000097c
 8002c18:	0800d454 	.word	0x0800d454

08002c1c <StartBMP388>:
    }
}

void StartBMP388(void *argument)
{
 8002c1c:	b5b0      	push	{r4, r5, r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f107 040c 	add.w	r4, r7, #12
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	6023      	str	r3, [r4, #0]

    // Run BMP388 setup routine before starting pressure or temperature
    //  tasks. On failure, suspend before starting subtasks.
    if(BMP388_Setup(&bmp388_comp, args.hspi) != BMP388_SUCCESS) {
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4619      	mov	r1, r3
 8002c38:	4818      	ldr	r0, [pc, #96]	@ (8002c9c <StartBMP388+0x80>)
 8002c3a:	f7fe fbb7 	bl	80013ac <BMP388_Setup>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <StartBMP388+0x40>
        report_error(args, "BMP388 SETUP ERROR");
 8002c44:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <StartBMP388+0x84>)
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c52:	f7ff febb 	bl	80029cc <report_error>
        vTaskSuspend(NULL);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f005 fd1a 	bl	8008690 <vTaskSuspend>
    }

    // Create the private BMP388 semaphore which will allow the temperature
    //  task to notify the pressure task that it can start.
    bmp388SemaphoreHandle = osSemaphoreNew(1, 0, &bmp388Semaphore_attributes);
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <StartBMP388+0x88>)
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2001      	movs	r0, #1
 8002c62:	f003 ff42 	bl	8006aea <osSemaphoreNew>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <StartBMP388+0x8c>)
 8002c6a:	6013      	str	r3, [r2, #0]

    // Create and start temperature and pressure tasks.
    RunTemperatureHandle = osThreadNew(StartTemperature,
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cac <StartBMP388+0x90>)
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	480f      	ldr	r0, [pc, #60]	@ (8002cb0 <StartBMP388+0x94>)
 8002c72:	f003 fd7f 	bl	8006774 <osThreadNew>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb4 <StartBMP388+0x98>)
 8002c7a:	6013      	str	r3, [r2, #0]
                                       (void*) argument,
                                       &RunTemp_attributes);
    RunPressureHandle    = osThreadNew(StartPressure,
 8002c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb8 <StartBMP388+0x9c>)
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	480e      	ldr	r0, [pc, #56]	@ (8002cbc <StartBMP388+0xa0>)
 8002c82:	f003 fd77 	bl	8006774 <osThreadNew>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <StartBMP388+0xa4>)
 8002c8a:	6013      	str	r3, [r2, #0]
                                       (void*) argument,
                                       &RunPres_attributes);

    // Since this task is only used for setup and to start the temperature
    //  and pressure tasks, delete this task from the FreeRTOS kernel.
    vTaskDelete(NULL);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f005 fbd5 	bl	800843c <vTaskDelete>
}
 8002c92:	bf00      	nop
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000097c 	.word	0x2000097c
 8002ca0:	0800d468 	.word	0x0800d468
 8002ca4:	0800d964 	.word	0x0800d964
 8002ca8:	200009b4 	.word	0x200009b4
 8002cac:	0800d91c 	.word	0x0800d91c
 8002cb0:	08002ab5 	.word	0x08002ab5
 8002cb4:	20000974 	.word	0x20000974
 8002cb8:	0800d940 	.word	0x0800d940
 8002cbc:	08002b7d 	.word	0x08002b7d
 8002cc0:	20000978 	.word	0x20000978

08002cc4 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	b5b0      	push	{r4, r5, r7, lr}
 8002cc8:	b08a      	sub	sp, #40	@ 0x28
 8002cca:	af04      	add	r7, sp, #16
 8002ccc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_ERROR,
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	615a      	str	r2, [r3, #20]
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cea:	607b      	str	r3, [r7, #4]
                                  .error_buf = message};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8002cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fe70 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002cfa:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002cfc:	466c      	mov	r4, sp
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d0a:	463b      	mov	r3, r7
 8002d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f7ff fb84 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fea9 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 ffbc 	bl	8006ca0 <osSemaphoreRelease>
}
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d32:	b004      	add	sp, #16
 8002d34:	4770      	bx	lr

08002d36 <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               LIS2MDL const lis2mdl)
{
 8002d36:	b084      	sub	sp, #16
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af04      	add	r7, sp, #16
 8002d3e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002d42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_LIS2MDL,
 8002d46:	463b      	mov	r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	2301      	movs	r3, #1
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	1d3c      	adds	r4, r7, #4
 8002d5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                  .lis2mdl = lis2mdl};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fe33 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002d74:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002d76:	466c      	mov	r4, sp
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d84:	463b      	mov	r3, r7
 8002d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff fb47 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fe6c 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 ff7f 	bl	8006ca0 <osSemaphoreRelease>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002dac:	b004      	add	sp, #16
 8002dae:	4770      	bx	lr

08002db0 <StartLIS2MDL>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartLIS2MDL(void *argument)
{
 8002db0:	b5b0      	push	{r4, r5, r7, lr}
 8002db2:	b092      	sub	sp, #72	@ 0x48
 8002db4:	af06      	add	r7, sp, #24
 8002db6:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f107 041c 	add.w	r4, r7, #28
 8002dbe:	461d      	mov	r5, r3
 8002dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	6023      	str	r3, [r4, #0]

    // Run LIS2MDL setup routine. On failure, suspend this task.
    if(LIS2MDL_Setup(args.hspi) != LIS2MDL_SUCCESS) {
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fc34 	bl	8001638 <LIS2MDL_Setup>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <StartLIS2MDL+0x3e>
        report_error(args, "LIS2MDL SETUP ERROR");
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <StartLIS2MDL+0x9c>)
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f107 031c 	add.w	r3, r7, #28
 8002de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de4:	f7ff ff6e 	bl	8002cc4 <report_error>
        vTaskSuspend(NULL);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f005 fc51 	bl	8008690 <vTaskSuspend>
    LIS2MDL lis2mdl;
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002dee:	f005 fde1 	bl	80089b4 <xTaskGetTickCount>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60bb      	str	r3, [r7, #8]

        // Read magnetometer from LIS2MDL sensor.
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	f107 030c 	add.w	r3, r7, #12
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fc4a 	bl	8001698 <LIS2MDL_Read>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <StartLIS2MDL+0x72>
            report_error(args, "LIS2MDL READ ERROR");
 8002e0a:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <StartLIS2MDL+0xa0>)
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	f107 031c 	add.w	r3, r7, #28
 8002e16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e18:	f7ff ff54 	bl	8002cc4 <report_error>
            vTaskSuspend(NULL);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f005 fc37 	bl	8008690 <vTaskSuspend>
        }

        // Send latest magnetometer reading to UART RingBuffer.
        send_update(args, lis2mdl);
 8002e22:	ac01      	add	r4, sp, #4
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e38:	f7ff ff7d 	bl	8002d36 <send_update>

        // Delay 125 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 125);
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	217d      	movs	r1, #125	@ 0x7d
 8002e42:	4618      	mov	r0, r3
 8002e44:	f005 fb6e 	bl	8008524 <vTaskDelayUntil>
        xLastWakeTime = xTaskGetTickCount();
 8002e48:	e7d1      	b.n	8002dee <StartLIS2MDL+0x3e>
 8002e4a:	bf00      	nop
 8002e4c:	0800d47c 	.word	0x0800d47c
 8002e50:	0800d490 	.word	0x0800d490

08002e54 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(const SENSOR_ARGS args,
                                char * const message)
{
 8002e54:	b084      	sub	sp, #16
 8002e56:	b5b0      	push	{r4, r5, r7, lr}
 8002e58:	b08a      	sub	sp, #40	@ 0x28
 8002e5a:	af04      	add	r7, sp, #16
 8002e5c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_ERROR,
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
 8002e70:	611a      	str	r2, [r3, #16]
 8002e72:	615a      	str	r2, [r3, #20]
 8002e74:	2303      	movs	r3, #3
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7a:	607b      	str	r3, [r7, #4]
                                  .error_buf = message};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 fda8 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002e8a:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002e8c:	466c      	mov	r4, sp
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f7ff fabc 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fde1 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fef4 	bl	8006ca0 <osSemaphoreRelease>
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ec2:	b004      	add	sp, #16
 8002ec4:	4770      	bx	lr

08002ec6 <send_update>:

static inline void send_update(const SENSOR_ARGS args,
                               const LSM6DSO32 lsm6dso32)
{
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Create temporary RingBuffer_t object to place in UART RingBuffer.
    RingBufferUART_t const tmp = {.type = UPDATE_LSM6DSO32,
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	1d3c      	adds	r4, r7, #4
 8002edc:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8002ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	6023      	str	r3, [r4, #0]
                                  .lsm6dso32 = lsm6dso32};

    // Enqueue the RingBuffer_t object without creating race conditions
    //  with other tasks either enqueueing or dequeueing from the RingBuffer.
    osMutexAcquire(*args.uartMutex, osWaitForever);
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 fd72 	bl	80069da <osMutexAcquire>
    RingBufferUART_enqueue(args.uart_rb, tmp);
 8002ef6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002ef8:	466c      	mov	r4, sp
 8002efa:	f107 030c 	add.w	r3, r7, #12
 8002efe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f06:	463b      	mov	r3, r7
 8002f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f7ff fa86 	bl	800241c <RingBufferUART_enqueue>
    osMutexRelease(*args.uartMutex);
 8002f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fdab 	bl	8006a70 <osMutexRelease>

    // Notify the UART task that a RingBuffer_t object has been enqueued.
    osSemaphoreRelease(*args.uartSemaphore);
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 febe 	bl	8006ca0 <osSemaphoreRelease>
}
 8002f24:	bf00      	nop
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002f2e:	b004      	add	sp, #16
 8002f30:	4770      	bx	lr
	...

08002f34 <StartGyroscope>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartGyroscope(void *argument)
{
 8002f34:	b5b0      	push	{r4, r5, r7, lr}
 8002f36:	b094      	sub	sp, #80	@ 0x50
 8002f38:	af06      	add	r7, sp, #24
 8002f3a:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002f42:	461d      	mov	r5, r3
 8002f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	6023      	str	r3, [r4, #0]
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_GYROSCOPE};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
    // Update gyroscope reading 10 times per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002f5c:	f005 fd2a 	bl	80089b4 <xTaskGetTickCount>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]

        // Read gyroscope tilt from LSM6DSO32 sensor.
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
                              args.hspi,
 8002f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe fc87 	bl	8001880 <LSM6DSO32_ReadGyro>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <StartGyroscope+0x5c>
                              GYROSCOPE_DATA_TYPE)
                              != LSM6DSO32_SUCCESS) {
            report_error(args, "GYROSCOPE READ ERROR");
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <StartGyroscope+0x88>)
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f86:	f7ff ff65 	bl	8002e54 <report_error>
            vTaskSuspend(NULL);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f005 fb80 	bl	8008690 <vTaskSuspend>
        }

        // Send latest gyroscope reading to UART RingBuffer.
        send_update(args, lsm6dso32);
 8002f90:	ad01      	add	r5, sp, #4
 8002f92:	f107 0410 	add.w	r4, r7, #16
 8002f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	f7ff ff8d 	bl	8002ec6 <send_update>

        // Delay 100 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 100);
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	2164      	movs	r1, #100	@ 0x64
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f005 fab6 	bl	8008524 <vTaskDelayUntil>
        xLastWakeTime = xTaskGetTickCount();
 8002fb8:	e7d0      	b.n	8002f5c <StartGyroscope+0x28>
 8002fba:	bf00      	nop
 8002fbc:	0800d4b8 	.word	0x0800d4b8

08002fc0 <StartAccelerometer>:
    }
}

static void StartAccelerometer(void *argument)
{
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b096      	sub	sp, #88	@ 0x58
 8002fc4:	af06      	add	r7, sp, #24
 8002fc6:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002fce:	461d      	mov	r5, r3
 8002fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	6023      	str	r3, [r4, #0]
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_ACCELEROMETER};
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	763b      	strb	r3, [r7, #24]
    // Take 100 readings from the accelerometer, compute the average
    //  on all axes, and then save these averages to be used as a
    //  software offset (see LSM6DSO32_UseOffset below).
    LSM6DSO32_CalibrateOffset(&lsm6dso32,
                              &offset,
                              args.hspi,
 8002fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
    LSM6DSO32_CalibrateOffset(&lsm6dso32,
 8002fee:	f107 010c 	add.w	r1, r7, #12
 8002ff2:	f107 0018 	add.w	r0, r7, #24
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f7fe fd2a 	bl	8001a50 <LSM6DSO32_CalibrateOffset>
    // Update accelerometer reading 50 times per second.
    TickType_t xLastWakeTime;
    for(;;) {
        // Read current tick time for vTaskDelayUntil() to make sure our
        //  delay is precise.
        xLastWakeTime = xTaskGetTickCount();
 8002ffc:	f005 fcda 	bl	80089b4 <xTaskGetTickCount>
 8003000:	4603      	mov	r3, r0
 8003002:	60bb      	str	r3, [r7, #8]

        // Read accelerometer from LSM6DSO32 sensor.
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
                               args.hspi,
 8003004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
 8003006:	f107 0318 	add.w	r3, r7, #24
 800300a:	2201      	movs	r2, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fcab 	bl	8001968 <LSM6DSO32_ReadAccel>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <StartAccelerometer+0x70>
                               ACCELEROMETER_DATA_TYPE)
                               != LSM6DSO32_SUCCESS) {
            report_error(args, "ACCELEROMETER READ ERROR");
 8003018:	4b14      	ldr	r3, [pc, #80]	@ (800306c <StartAccelerometer+0xac>)
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003026:	f7ff ff15 	bl	8002e54 <report_error>
            vTaskSuspend(NULL);
 800302a:	2000      	movs	r0, #0
 800302c:	f005 fb30 	bl	8008690 <vTaskSuspend>
        }

        // Incorporate computed offset in x, y, and z directions.
        LSM6DSO32_UseOffset(&lsm6dso32, &offset);
 8003030:	f107 020c 	add.w	r2, r7, #12
 8003034:	f107 0318 	add.w	r3, r7, #24
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fd6c 	bl	8001b18 <LSM6DSO32_UseOffset>

        // Send latest accelerometer reading to UART RingBuffer.
        send_update(args, lsm6dso32);
 8003040:	ad01      	add	r5, sp, #4
 8003042:	f107 0418 	add.w	r4, r7, #24
 8003046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	602b      	str	r3, [r5, #0]
 800304e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003058:	f7ff ff35 	bl	8002ec6 <send_update>

        // Delay 100 milliseconds from the start of the last reading.
        vTaskDelayUntil(&xLastWakeTime, 20);
 800305c:	f107 0308 	add.w	r3, r7, #8
 8003060:	2114      	movs	r1, #20
 8003062:	4618      	mov	r0, r3
 8003064:	f005 fa5e 	bl	8008524 <vTaskDelayUntil>
        xLastWakeTime = xTaskGetTickCount();
 8003068:	e7c8      	b.n	8002ffc <StartAccelerometer+0x3c>
 800306a:	bf00      	nop
 800306c:	0800d4d0 	.word	0x0800d4d0

08003070 <StartLSM6DSO32>:
    }
}

void StartLSM6DSO32(void *argument)
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	af02      	add	r7, sp, #8
 8003076:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f107 040c 	add.w	r4, r7, #12
 800307e:	461d      	mov	r5, r3
 8003080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	6023      	str	r3, [r4, #0]

    // Run LSM6DSO32 setup routine before starting gyroscope or accelerometer
    //  tasks. On failure, suspend before starting subtasks.
    if(LSM6DSO32_Setup(args.hspi) != LSM6DSO32_SUCCESS) {
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fbc2 	bl	8001814 <LSM6DSO32_Setup>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <StartLSM6DSO32+0x3e>
        report_error(args, "LSM6DSO32 SETUP ERROR");
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <StartLSM6DSO32+0x6c>)
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a4:	f7ff fed6 	bl	8002e54 <report_error>
        vTaskSuspend(NULL);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f005 faf1 	bl	8008690 <vTaskSuspend>
    }

    // Create and start gyroscope and acceleromter tasks.
    RunGyroscopeHandle     = osThreadNew(StartGyroscope,
 80030ae:	4a0c      	ldr	r2, [pc, #48]	@ (80030e0 <StartLSM6DSO32+0x70>)
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	480c      	ldr	r0, [pc, #48]	@ (80030e4 <StartLSM6DSO32+0x74>)
 80030b4:	f003 fb5e 	bl	8006774 <osThreadNew>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4a0b      	ldr	r2, [pc, #44]	@ (80030e8 <StartLSM6DSO32+0x78>)
 80030bc:	6013      	str	r3, [r2, #0]
                                         (void*) argument,
                                         &RunGyro_attributes);
    RunAccelerometerHandle = osThreadNew(StartAccelerometer,
 80030be:	4a0b      	ldr	r2, [pc, #44]	@ (80030ec <StartLSM6DSO32+0x7c>)
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	480b      	ldr	r0, [pc, #44]	@ (80030f0 <StartLSM6DSO32+0x80>)
 80030c4:	f003 fb56 	bl	8006774 <osThreadNew>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <StartLSM6DSO32+0x84>)
 80030cc:	6013      	str	r3, [r2, #0]
                                         (void*) argument,
                                         &RunAccel_attributes);

    // Since this task is only used for setup and to start the gyroscope
    //  and accelerometer tasks, delete this task from the FreeRTOS kernel.
    vTaskDelete(NULL);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f005 f9b4 	bl	800843c <vTaskDelete>
}
 80030d4:	bf00      	nop
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	0800d4ec 	.word	0x0800d4ec
 80030e0:	0800d974 	.word	0x0800d974
 80030e4:	08002f35 	.word	0x08002f35
 80030e8:	200009b8 	.word	0x200009b8
 80030ec:	0800d998 	.word	0x0800d998
 80030f0:	08002fc1 	.word	0x08002fc1
 80030f4:	200009bc 	.word	0x200009bc

080030f8 <StartStateMachine>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartStateMachine(void *argument)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 5d9d 	sub.w	sp, sp, #5024	@ 0x13a0
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003104:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8003108:	6018      	str	r0, [r3, #0]

    // Initialize the Kalman Filter based on drone system.
    KALMAN_FILTER filter = {
 800310a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800310e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003112:	4618      	mov	r0, r3
 8003114:	f241 3398 	movw	r3, #5016	@ 0x1398
 8003118:	461a      	mov	r2, r3
 800311a:	2100      	movs	r1, #0
 800311c:	f007 fe9b 	bl	800ae56 <memset>
 8003120:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003124:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003128:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
 800312e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003132:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003136:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800313a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800313c:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003140:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003144:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003148:	675a      	str	r2, [r3, #116]	@ 0x74
 800314a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800314e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003152:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003156:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800315a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800315e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003162:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003166:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800316a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800316e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003172:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003176:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800317a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800317e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003182:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003186:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800318a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800318e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003192:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003196:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 800319a:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800319e:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031a6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
 80031aa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031ae:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031b2:	4a3e      	ldr	r2, [pc, #248]	@ (80032ac <StartStateMachine+0x1b4>)
 80031b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
 80031b8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031bc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031c0:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80031c4:	4a39      	ldr	r2, [pc, #228]	@ (80032ac <StartStateMachine+0x1b4>)
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031cc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031d0:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 80031d4:	4a35      	ldr	r2, [pc, #212]	@ (80032ac <StartStateMachine+0x1b4>)
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031dc:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031e0:	f503 638d 	add.w	r3, r3, #1128	@ 0x468
 80031e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80031ee:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 80031f2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80031f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003200:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003204:	f503 6396 	add.w	r3, r3, #1200	@ 0x4b0
 8003208:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003212:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003216:	f503 639c 	add.w	r3, r3, #1248	@ 0x4e0
 800321a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003224:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003228:	f203 43ec 	addw	r3, r3, #1260	@ 0x4ec
 800322c:	4a20      	ldr	r2, [pc, #128]	@ (80032b0 <StartStateMachine+0x1b8>)
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003234:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003238:	f203 43fc 	addw	r3, r3, #1276	@ 0x4fc
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <StartStateMachine+0x1b8>)
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003244:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003248:	f203 530c 	addw	r3, r3, #1292	@ 0x50c
 800324c:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <StartStateMachine+0x1b8>)
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003254:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 8003258:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800325c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003266:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800326a:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 800326e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 8003278:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800327c:	f203 5324 	addw	r3, r3, #1316	@ 0x524
 8003280:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 800328a:	f5a3 7366 	sub.w	r3, r3, #920	@ 0x398
 800328e:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8003292:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003296:	601a      	str	r2, [r3, #0]
        .Rg = {{1, 0, 0},
               {0, 1, 0},
               {0, 0, 1}}};

    // Perform basic filter setup.
    filter_ctor(&filter);
 8003298:	f107 0320 	add.w	r3, r7, #32
 800329c:	3b18      	subs	r3, #24
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fc67 	bl	8001b72 <filter_ctor>

    while(1) {
        osDelay(100);
 80032a4:	2064      	movs	r0, #100	@ 0x64
 80032a6:	f003 faf7 	bl	8006898 <osDelay>
 80032aa:	e7fb      	b.n	80032a4 <StartStateMachine+0x1ac>
 80032ac:	3c20ac12 	.word	0x3c20ac12
 80032b0:	3c71021b 	.word	0x3c71021b

080032b4 <transmit>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline UART_STATUS transmit(UART_HandleTypeDef * const huart,
                                   char * const buf)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
    if(HAL_UART_Transmit(huart,
                         (uint8_t*)buf,
                         strlen(buf),
 80032be:	6838      	ldr	r0, [r7, #0]
 80032c0:	f7fc fff6 	bl	80002b0 <strlen>
 80032c4:	4603      	mov	r3, r0
    if(HAL_UART_Transmit(huart,
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <transmit+0x34>)
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f002 fe07 	bl	8005ee0 <HAL_UART_Transmit>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <transmit+0x28>
                         (uint32_t)1600000) // ~100 ms
                         != HAL_OK) {
        return UART_FAILURE;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <transmit+0x2a>
    }

    return UART_SUCCESS;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	00186a00 	.word	0x00186a00
 80032ec:	00000000 	.word	0x00000000

080032f0 <StartUART>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartUART(void *argument)
{
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	b0d5      	sub	sp, #340	@ 0x154
 80032f6:	af0c      	add	r7, sp, #48	@ 0x30
 80032f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80032fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003300:	6018      	str	r0, [r3, #0]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8003302:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003306:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8003310:	461d      	mov	r5, r3
 8003312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003316:	682b      	ldr	r3, [r5, #0]
 8003318:	6023      	str	r3, [r4, #0]

    char buf[210];
    sprintf(buf, "%c[0;0H\n"
 800331a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800331e:	221b      	movs	r2, #27
 8003320:	49b9      	ldr	r1, [pc, #740]	@ (8003608 <StartUART+0x318>)
 8003322:	4618      	mov	r0, r3
 8003324:	f007 fd34 	bl	800ad90 <siprintf>
                 "\tX:\t\t\tmg\r\n"
                 "\tY:\t\t\tmg\r\n"
                 "\tZ:\t\t\tmg\r\n",
                 0x1b);

    if(transmit(args.huart, buf) != UART_SUCCESS) {
 8003328:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800332c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ffbe 	bl	80032b4 <transmit>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <StartUART+0x54>
        vTaskSuspend(NULL);
 800333e:	2000      	movs	r0, #0
 8003340:	f005 f9a6 	bl	8008690 <vTaskSuspend>
    }

    RingBufferUART_t update;
    for(;;) {
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 8003344:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f04f 31ff 	mov.w	r1, #4294967295
 800334e:	4618      	mov	r0, r3
 8003350:	f003 fc54 	bl	8006bfc <osSemaphoreAcquire>
        osMutexAcquire(*args.uartMutex, osWaitForever);
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 31ff 	mov.w	r1, #4294967295
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fb3b 	bl	80069da <osMutexAcquire>
        RB_STATUS_UART status = RingBufferUART_dequeue(args.uart_rb, &update);
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003368:	f107 0218 	add.w	r2, r7, #24
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f89e 	bl	80024b0 <RingBufferUART_dequeue>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        osMutexRelease(*args.uartMutex);
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 fb75 	bl	8006a70 <osMutexRelease>
        if(status != RB_UART_SUCCESS) {
 8003386:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d011      	beq.n	80033b2 <StartUART+0xc2>
            sprintf(buf, "%c[0;0H RINGBUFFER DEQUEUE ERROR", 0x1b);
 800338e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003392:	221b      	movs	r2, #27
 8003394:	499d      	ldr	r1, [pc, #628]	@ (800360c <StartUART+0x31c>)
 8003396:	4618      	mov	r0, r3
 8003398:	f007 fcfa 	bl	800ad90 <siprintf>
            transmit(args.huart, buf);
 800339c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80033a0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff84 	bl	80032b4 <transmit>
            vTaskSuspend(NULL);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f005 f96f 	bl	8008690 <vTaskSuspend>
        }

        float timestamp;

        switch(update.type) {
 80033b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	f200 8182 	bhi.w	80036c6 <StartUART+0x3d6>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <StartUART+0xd8>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	0800347f 	.word	0x0800347f
 80033d0:	08003533 	.word	0x08003533
 80033d4:	080036af 	.word	0x080036af
        case UPDATE_BMP388:
            timestamp = update.bmp388.timestamp / TIM5_CLK_SPEED;
 80033d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80033dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f8ae 	bl	8000544 <__aeabi_ui2d>
 80033e8:	a385      	add	r3, pc, #532	@ (adr r3, 8003600 <StartUART+0x310>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd fa4d 	bl	800088c <__aeabi_ddiv>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fbf5 	bl	8000be8 <__aeabi_d2f>
 80033fe:	4603      	mov	r3, r0
 8003400:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            if(update.bmp388.sensor == BMP388_TEMPERATURE) {
 8003404:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11a      	bne.n	8003448 <StartUART+0x158>
                sprintf(buf, "%c[0;0H"
                             "\n"
                             "\t\t%5.2f   \t\t\t%3.2f sec     ",
                             0x1b,
                             update.bmp388.temperature,
 8003412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800341a:	68db      	ldr	r3, [r3, #12]
                sprintf(buf, "%c[0;0H"
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f8b3 	bl	8000588 <__aeabi_f2d>
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800342a:	f7fd f8ad 	bl	8000588 <__aeabi_f2d>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8003436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800343a:	e9cd 4500 	strd	r4, r5, [sp]
 800343e:	221b      	movs	r2, #27
 8003440:	4973      	ldr	r1, [pc, #460]	@ (8003610 <StartUART+0x320>)
 8003442:	f007 fca5 	bl	800ad90 <siprintf>
                             "\t\t%5.2f   \t\t\t%3.2f sec     ",
                             0x1b,
                             update.bmp388.pressure,
                             timestamp);
            }
            break;
 8003446:	e146      	b.n	80036d6 <StartUART+0x3e6>
                             update.bmp388.pressure,
 8003448:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800344c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003450:	68db      	ldr	r3, [r3, #12]
                sprintf(buf, "%c[0;0H"
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f898 	bl	8000588 <__aeabi_f2d>
 8003458:	4604      	mov	r4, r0
 800345a:	460d      	mov	r5, r1
 800345c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003460:	f7fd f892 	bl	8000588 <__aeabi_f2d>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800346c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003470:	e9cd 4500 	strd	r4, r5, [sp]
 8003474:	221b      	movs	r2, #27
 8003476:	4967      	ldr	r1, [pc, #412]	@ (8003614 <StartUART+0x324>)
 8003478:	f007 fc8a 	bl	800ad90 <siprintf>
            break;
 800347c:	e12b      	b.n	80036d6 <StartUART+0x3e6>
        case UPDATE_LIS2MDL:
            timestamp = update.lis2mdl.timestamp / TIM5_CLK_SPEED;
 800347e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f85b 	bl	8000544 <__aeabi_ui2d>
 800348e:	a35c      	add	r3, pc, #368	@ (adr r3, 8003600 <StartUART+0x310>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f7fd f9fa 	bl	800088c <__aeabi_ddiv>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fba2 	bl	8000be8 <__aeabi_d2f>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
                         "\t\t%hd    \t\t\t%3.2f sec     \r\n"
                         "\t\t%hd    \t\t\t\t%3.2f sec     \r\n"
                         "\t\t%hd    \t\t\t\t%3.2f sec     \r\n"
                         "\t\t%5.2f    ",
                         0x1b,
                         update.lis2mdl.X,
 80034aa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
            sprintf(buf, "%c[0;0H"
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80034bc:	f7fd f864 	bl	8000588 <__aeabi_f2d>
 80034c0:	4604      	mov	r4, r0
 80034c2:	460d      	mov	r5, r1
                         timestamp,
                         update.lis2mdl.Y,
 80034c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
            sprintf(buf, "%c[0;0H"
 80034d0:	461e      	mov	r6, r3
 80034d2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80034d6:	f7fd f857 	bl	8000588 <__aeabi_f2d>
 80034da:	4680      	mov	r8, r0
 80034dc:	4689      	mov	r9, r1
                         timestamp,
                         update.lis2mdl.Z,
 80034de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            sprintf(buf, "%c[0;0H"
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80034f0:	f7fd f84a 	bl	8000588 <__aeabi_f2d>
 80034f4:	4682      	mov	sl, r0
 80034f6:	468b      	mov	fp, r1
                         timestamp,
                         update.lis2mdl.heading);
 80034f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003500:	691b      	ldr	r3, [r3, #16]
            sprintf(buf, "%c[0;0H"
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f840 	bl	8000588 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8003510:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003514:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	9206      	str	r2, [sp, #24]
 800351c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8003520:	9602      	str	r6, [sp, #8]
 8003522:	e9cd 4500 	strd	r4, r5, [sp]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	221b      	movs	r2, #27
 800352a:	493b      	ldr	r1, [pc, #236]	@ (8003618 <StartUART+0x328>)
 800352c:	f007 fc30 	bl	800ad90 <siprintf>
            break;
 8003530:	e0d1      	b.n	80036d6 <StartUART+0x3e6>
        case UPDATE_LSM6DSO32:
            timestamp = update.lsm6dso32.timestamp / TIM5_CLK_SPEED;
 8003532:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd f801 	bl	8000544 <__aeabi_ui2d>
 8003542:	a32f      	add	r3, pc, #188	@ (adr r3, 8003600 <StartUART+0x310>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f9a0 	bl	800088c <__aeabi_ddiv>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4610      	mov	r0, r2
 8003552:	4619      	mov	r1, r3
 8003554:	f7fd fb48 	bl	8000be8 <__aeabi_d2f>
 8003558:	4603      	mov	r3, r0
 800355a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
            if(update.lsm6dso32.sensor == LSM6DSO32_GYROSCOPE) {
 800355e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d159      	bne.n	8003620 <StartUART+0x330>
                             "\n\n\n\n\n\n\n\n\n"
                             "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                             "\t\t%5.2f    \t\t\t%3.2f sec     \r\n"
                             "\t\t%5.2f    \t\t\t%3.2f sec     ",
                             0x1b,
                             update.lsm6dso32.X,
 800356c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003574:	68db      	ldr	r3, [r3, #12]
                sprintf(buf, "%c[0;0H"
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd f806 	bl	8000588 <__aeabi_f2d>
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
 8003580:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003584:	f7fd f800 	bl	8000588 <__aeabi_f2d>
 8003588:	4680      	mov	r8, r0
 800358a:	4689      	mov	r9, r1
                             timestamp,
                             update.lsm6dso32.Y,
 800358c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003594:	691b      	ldr	r3, [r3, #16]
                sprintf(buf, "%c[0;0H"
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc fff6 	bl	8000588 <__aeabi_f2d>
 800359c:	4682      	mov	sl, r0
 800359e:	468b      	mov	fp, r1
 80035a0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80035a4:	f7fc fff0 	bl	8000588 <__aeabi_f2d>
 80035a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
                             timestamp,
                             update.lsm6dso32.Z,
 80035ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035b4:	695b      	ldr	r3, [r3, #20]
                sprintf(buf, "%c[0;0H"
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ffe6 	bl	8000588 <__aeabi_f2d>
 80035bc:	e9c7 0100 	strd	r0, r1, [r7]
 80035c0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80035c4:	f7fc ffe0 	bl	8000588 <__aeabi_f2d>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80035d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80035d4:	ed97 7b00 	vldr	d7, [r7]
 80035d8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80035dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80035e0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80035e4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80035e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80035ec:	e9cd 4500 	strd	r4, r5, [sp]
 80035f0:	221b      	movs	r2, #27
 80035f2:	490a      	ldr	r1, [pc, #40]	@ (800361c <StartUART+0x32c>)
 80035f4:	f007 fbcc 	bl	800ad90 <siprintf>
                             update.lsm6dso32.Y,
                             timestamp,
                             update.lsm6dso32.Z,
                             timestamp);
            }
            break;
 80035f8:	e06d      	b.n	80036d6 <StartUART+0x3e6>
 80035fa:	bf00      	nop
 80035fc:	f3af 8000 	nop.w
 8003600:	00000000 	.word	0x00000000
 8003604:	419312d0 	.word	0x419312d0
 8003608:	0800d504 	.word	0x0800d504
 800360c:	0800d5d8 	.word	0x0800d5d8
 8003610:	0800d5fc 	.word	0x0800d5fc
 8003614:	0800d620 	.word	0x0800d620
 8003618:	0800d648 	.word	0x0800d648
 800361c:	0800d6b8 	.word	0x0800d6b8
                             update.lsm6dso32.X,
 8003620:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003628:	68db      	ldr	r3, [r3, #12]
                sprintf(buf, "%c[0;0H"
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ffac 	bl	8000588 <__aeabi_f2d>
 8003630:	4604      	mov	r4, r0
 8003632:	460d      	mov	r5, r1
 8003634:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003638:	f7fc ffa6 	bl	8000588 <__aeabi_f2d>
 800363c:	4680      	mov	r8, r0
 800363e:	4689      	mov	r9, r1
                             update.lsm6dso32.Y,
 8003640:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003648:	691b      	ldr	r3, [r3, #16]
                sprintf(buf, "%c[0;0H"
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff9c 	bl	8000588 <__aeabi_f2d>
 8003650:	4682      	mov	sl, r0
 8003652:	468b      	mov	fp, r1
 8003654:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003658:	f7fc ff96 	bl	8000588 <__aeabi_f2d>
 800365c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                             update.lsm6dso32.Z,
 8003660:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003668:	695b      	ldr	r3, [r3, #20]
                sprintf(buf, "%c[0;0H"
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff8c 	bl	8000588 <__aeabi_f2d>
 8003670:	e9c7 0100 	strd	r0, r1, [r7]
 8003674:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003678:	f7fc ff86 	bl	8000588 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8003684:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8003688:	ed97 7b00 	vldr	d7, [r7]
 800368c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003690:	ed97 7b02 	vldr	d7, [r7, #8]
 8003694:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003698:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800369c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80036a0:	e9cd 4500 	strd	r4, r5, [sp]
 80036a4:	221b      	movs	r2, #27
 80036a6:	4914      	ldr	r1, [pc, #80]	@ (80036f8 <StartUART+0x408>)
 80036a8:	f007 fb72 	bl	800ad90 <siprintf>
            break;
 80036ac:	e013      	b.n	80036d6 <StartUART+0x3e6>
        case UPDATE_ERROR:
            sprintf(buf, "%c[0;0H"
 80036ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80036bc:	221b      	movs	r2, #27
 80036be:	490f      	ldr	r1, [pc, #60]	@ (80036fc <StartUART+0x40c>)
 80036c0:	f007 fb66 	bl	800ad90 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "%s    ",
                         0x1b,
                         update.error_buf);
            break;
 80036c4:	e007      	b.n	80036d6 <StartUART+0x3e6>
        default:
            sprintf(buf, "%c[0;0H"
 80036c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036ca:	221b      	movs	r2, #27
 80036cc:	490c      	ldr	r1, [pc, #48]	@ (8003700 <StartUART+0x410>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f007 fb5e 	bl	800ad90 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "UART RECEIVED INVALID UPDATE TYPE   ",
                         0x1b);
            break;
 80036d4:	bf00      	nop
        }

        if(transmit(args.huart, buf) != UART_SUCCESS) {
 80036d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80036da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fde7 	bl	80032b4 <transmit>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f43f ae2b 	beq.w	8003344 <StartUART+0x54>
            vTaskSuspend(NULL);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f004 ffce 	bl	8008690 <vTaskSuspend>
    for(;;) {
 80036f4:	e626      	b.n	8003344 <StartUART+0x54>
 80036f6:	bf00      	nop
 80036f8:	0800d724 	.word	0x0800d724
 80036fc:	0800d794 	.word	0x0800d794
 8003700:	0800d7b4 	.word	0x0800d7b4

08003704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800373c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003708:	f7ff f94e 	bl	80029a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800370c:	480c      	ldr	r0, [pc, #48]	@ (8003740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800370e:	490d      	ldr	r1, [pc, #52]	@ (8003744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003710:	4a0d      	ldr	r2, [pc, #52]	@ (8003748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003724:	4c0a      	ldr	r4, [pc, #40]	@ (8003750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003732:	f007 fc3f 	bl	800afb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003736:	f7fe fbe7 	bl	8001f08 <main>
  bx  lr    
 800373a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800373c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003744:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003748:	0800dd78 	.word	0x0800dd78
  ldr r2, =_sbss
 800374c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003750:	20019f98 	.word	0x20019f98

08003754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003754:	e7fe      	b.n	8003754 <ADC_IRQHandler>

08003756 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	817b      	strh	r3, [r7, #10]
 8003764:	4613      	mov	r3, r2
 8003766:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	897a      	ldrh	r2, [r7, #10]
 800376c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	893a      	ldrh	r2, [r7, #8]
 8003772:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	605a      	str	r2, [r3, #4]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800378c:	4b0e      	ldr	r3, [pc, #56]	@ (80037c8 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_Init+0x40>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <HAL_Init+0x40>)
 800379e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_Init+0x40>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <HAL_Init+0x40>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f8fc 	bl	80039ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b6:	200f      	movs	r0, #15
 80037b8:	f7fe ff8e 	bl	80026d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037bc:	f7fe feae 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00

080037cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_IncTick+0x20>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x24>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <HAL_IncTick+0x24>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000001c 	.word	0x2000001c
 80037f0:	200009c0 	.word	0x200009c0

080037f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b03      	ldr	r3, [pc, #12]	@ (8003808 <HAL_GetTick+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	200009c0 	.word	0x200009c0

0800380c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff ffee 	bl	80037f4 <HAL_GetTick>
 8003818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d005      	beq.n	8003832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <HAL_Delay+0x44>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003832:	bf00      	nop
 8003834:	f7ff ffde 	bl	80037f4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d8f7      	bhi.n	8003834 <HAL_Delay+0x28>
  {
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000001c 	.word	0x2000001c

08003854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003870:	4013      	ands	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800387c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <__NVIC_SetPriorityGrouping+0x44>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <__NVIC_GetPriorityGrouping+0x18>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	f003 0307 	and.w	r3, r3, #7
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db0b      	blt.n	80038e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	f003 021f 	and.w	r2, r3, #31
 80038d0:	4907      	ldr	r1, [pc, #28]	@ (80038f0 <__NVIC_EnableIRQ+0x38>)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	095b      	lsrs	r3, r3, #5
 80038d8:	2001      	movs	r0, #1
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e100 	.word	0xe000e100

080038f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	2b00      	cmp	r3, #0
 8003906:	db0a      	blt.n	800391e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	b2da      	uxtb	r2, r3
 800390c:	490c      	ldr	r1, [pc, #48]	@ (8003940 <__NVIC_SetPriority+0x4c>)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	440b      	add	r3, r1
 8003918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800391c:	e00a      	b.n	8003934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2da      	uxtb	r2, r3
 8003922:	4908      	ldr	r1, [pc, #32]	@ (8003944 <__NVIC_SetPriority+0x50>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	3b04      	subs	r3, #4
 800392c:	0112      	lsls	r2, r2, #4
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	440b      	add	r3, r1
 8003932:	761a      	strb	r2, [r3, #24]
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003948:	b480      	push	{r7}
 800394a:	b089      	sub	sp, #36	@ 0x24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f1c3 0307 	rsb	r3, r3, #7
 8003962:	2b04      	cmp	r3, #4
 8003964:	bf28      	it	cs
 8003966:	2304      	movcs	r3, #4
 8003968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3304      	adds	r3, #4
 800396e:	2b06      	cmp	r3, #6
 8003970:	d902      	bls.n	8003978 <NVIC_EncodePriority+0x30>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3b03      	subs	r3, #3
 8003976:	e000      	b.n	800397a <NVIC_EncodePriority+0x32>
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	f04f 32ff 	mov.w	r2, #4294967295
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	401a      	ands	r2, r3
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003990:	f04f 31ff 	mov.w	r1, #4294967295
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	43d9      	mvns	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	4313      	orrs	r3, r2
         );
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	@ 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ff4c 	bl	8003854 <__NVIC_SetPriorityGrouping>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d6:	f7ff ff61 	bl	800389c <__NVIC_GetPriorityGrouping>
 80039da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	6978      	ldr	r0, [r7, #20]
 80039e2:	f7ff ffb1 	bl	8003948 <NVIC_EncodePriority>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ff80 	bl	80038f4 <__NVIC_SetPriority>
}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff54 	bl	80038b8 <__NVIC_EnableIRQ>
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e165      	b.n	8003d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a34:	2201      	movs	r2, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4013      	ands	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	f040 8154 	bne.w	8003cfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d005      	beq.n	8003a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d130      	bne.n	8003acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	2203      	movs	r2, #3
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d017      	beq.n	8003b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d123      	bne.n	8003b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	08da      	lsrs	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3208      	adds	r2, #8
 8003b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	08da      	lsrs	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3208      	adds	r2, #8
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0203 	and.w	r2, r3, #3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80ae 	beq.w	8003cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <HAL_GPIO_Init+0x300>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d18 <HAL_GPIO_Init+0x300>)
 8003ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bae:	4b5a      	ldr	r3, [pc, #360]	@ (8003d18 <HAL_GPIO_Init+0x300>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bba:	4a58      	ldr	r2, [pc, #352]	@ (8003d1c <HAL_GPIO_Init+0x304>)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d20 <HAL_GPIO_Init+0x308>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d025      	beq.n	8003c32 <HAL_GPIO_Init+0x21a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d24 <HAL_GPIO_Init+0x30c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01f      	beq.n	8003c2e <HAL_GPIO_Init+0x216>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d28 <HAL_GPIO_Init+0x310>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d019      	beq.n	8003c2a <HAL_GPIO_Init+0x212>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8003d2c <HAL_GPIO_Init+0x314>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_GPIO_Init+0x20e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	@ (8003d30 <HAL_GPIO_Init+0x318>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00d      	beq.n	8003c22 <HAL_GPIO_Init+0x20a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4a      	ldr	r2, [pc, #296]	@ (8003d34 <HAL_GPIO_Init+0x31c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <HAL_GPIO_Init+0x206>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a49      	ldr	r2, [pc, #292]	@ (8003d38 <HAL_GPIO_Init+0x320>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_GPIO_Init+0x202>
 8003c16:	2306      	movs	r3, #6
 8003c18:	e00c      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	e00a      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c1e:	2305      	movs	r3, #5
 8003c20:	e008      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e006      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c26:	2303      	movs	r3, #3
 8003c28:	e004      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_GPIO_Init+0x21c>
 8003c32:	2300      	movs	r3, #0
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f002 0203 	and.w	r2, r2, #3
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c44:	4935      	ldr	r1, [pc, #212]	@ (8003d1c <HAL_GPIO_Init+0x304>)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c52:	4b3a      	ldr	r3, [pc, #232]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c76:	4a31      	ldr	r2, [pc, #196]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca0:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ca6:	4b25      	ldr	r3, [pc, #148]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cca:	4a1c      	ldr	r2, [pc, #112]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cf4:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <HAL_GPIO_Init+0x324>)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	f67f ae96 	bls.w	8003a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40013800 	.word	0x40013800
 8003d20:	40020000 	.word	0x40020000
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	40020c00 	.word	0x40020c00
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40021400 	.word	0x40021400
 8003d38:	40021800 	.word	0x40021800
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d5c:	e003      	b.n	8003d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0cc      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b68      	ldr	r3, [pc, #416]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d90c      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b65      	ldr	r3, [pc, #404]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d044      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d119      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	4b3f      	ldr	r3, [pc, #252]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e067      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b37      	ldr	r3, [pc, #220]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4934      	ldr	r1, [pc, #208]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e64:	f7ff fcc6 	bl	80037f4 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7ff fcc2 	bl	80037f4 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b25      	ldr	r3, [pc, #148]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d20c      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b22      	ldr	r3, [pc, #136]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f887 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490a      	ldr	r1, [pc, #40]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fbdc 	bl	80026d8 <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023c00 	.word	0x40023c00
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800d904 	.word	0x0800d904
 8003f38:	20000014 	.word	0x20000014
 8003f3c:	20000018 	.word	0x20000018

08003f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000014 	.word	0x20000014

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a9b      	lsrs	r3, r3, #10
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	0800d914 	.word	0x0800d914

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffdc 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0b5b      	lsrs	r3, r3, #13
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	0800d914 	.word	0x0800d914

08003fa8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_GetClockConfig+0x5c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <HAL_RCC_GetClockConfig+0x5c>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fdc:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_RCC_GetClockConfig+0x5c>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	08db      	lsrs	r3, r3, #3
 8003fe2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fea:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <HAL_RCC_GetClockConfig+0x60>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 020f 	and.w	r2, r3, #15
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	601a      	str	r2, [r3, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40023c00 	.word	0x40023c00

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b0ae      	sub	sp, #184	@ 0xb8
 8004012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004032:	4bcb      	ldr	r3, [pc, #812]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b0c      	cmp	r3, #12
 800403c:	f200 8206 	bhi.w	800444c <HAL_RCC_GetSysClockFreq+0x440>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	0800444d 	.word	0x0800444d
 8004050:	0800444d 	.word	0x0800444d
 8004054:	0800444d 	.word	0x0800444d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800444d 	.word	0x0800444d
 8004060:	0800444d 	.word	0x0800444d
 8004064:	0800444d 	.word	0x0800444d
 8004068:	0800408d 	.word	0x0800408d
 800406c:	0800444d 	.word	0x0800444d
 8004070:	0800444d 	.word	0x0800444d
 8004074:	0800444d 	.word	0x0800444d
 8004078:	0800427d 	.word	0x0800427d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4bb9      	ldr	r3, [pc, #740]	@ (8004364 <HAL_RCC_GetSysClockFreq+0x358>)
 800407e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004082:	e1e7      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004084:	4bb8      	ldr	r3, [pc, #736]	@ (8004368 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004086:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800408a:	e1e3      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408c:	4bb4      	ldr	r3, [pc, #720]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004098:	4bb1      	ldr	r3, [pc, #708]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d071      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a4:	4bae      	ldr	r3, [pc, #696]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4621      	mov	r1, r4
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80040e8:	4629      	mov	r1, r5
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80040fc:	4649      	mov	r1, r9
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4641      	mov	r1, r8
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4641      	mov	r1, r8
 800410c:	1a51      	subs	r1, r2, r1
 800410e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004110:	4649      	mov	r1, r9
 8004112:	eb63 0301 	sbc.w	r3, r3, r1
 8004116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004124:	4649      	mov	r1, r9
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4641      	mov	r1, r8
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4641      	mov	r1, r8
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4622      	mov	r2, r4
 800413a:	189b      	adds	r3, r3, r2
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
 800413e:	462b      	mov	r3, r5
 8004140:	460a      	mov	r2, r1
 8004142:	eb42 0303 	adc.w	r3, r2, r3
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004154:	4629      	mov	r1, r5
 8004156:	024b      	lsls	r3, r1, #9
 8004158:	4621      	mov	r1, r4
 800415a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800415e:	4621      	mov	r1, r4
 8004160:	024a      	lsls	r2, r1, #9
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800416a:	2200      	movs	r2, #0
 800416c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004170:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004174:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004178:	f7fc fd86 	bl	8000c88 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004186:	e067      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004188:	4b75      	ldr	r3, [pc, #468]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	2200      	movs	r2, #0
 8004190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004194:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800419c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041a2:	2300      	movs	r3, #0
 80041a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80041aa:	4622      	mov	r2, r4
 80041ac:	462b      	mov	r3, r5
 80041ae:	f04f 0000 	mov.w	r0, #0
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	0159      	lsls	r1, r3, #5
 80041b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041bc:	0150      	lsls	r0, r2, #5
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4621      	mov	r1, r4
 80041c4:	1a51      	subs	r1, r2, r1
 80041c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80041c8:	4629      	mov	r1, r5
 80041ca:	eb63 0301 	sbc.w	r3, r3, r1
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80041dc:	4649      	mov	r1, r9
 80041de:	018b      	lsls	r3, r1, #6
 80041e0:	4641      	mov	r1, r8
 80041e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041e6:	4641      	mov	r1, r8
 80041e8:	018a      	lsls	r2, r1, #6
 80041ea:	4641      	mov	r1, r8
 80041ec:	ebb2 0a01 	subs.w	sl, r2, r1
 80041f0:	4649      	mov	r1, r9
 80041f2:	eb63 0b01 	sbc.w	fp, r3, r1
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004202:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420a:	4692      	mov	sl, r2
 800420c:	469b      	mov	fp, r3
 800420e:	4623      	mov	r3, r4
 8004210:	eb1a 0303 	adds.w	r3, sl, r3
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	462b      	mov	r3, r5
 8004218:	eb4b 0303 	adc.w	r3, fp, r3
 800421c:	627b      	str	r3, [r7, #36]	@ 0x24
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800422a:	4629      	mov	r1, r5
 800422c:	028b      	lsls	r3, r1, #10
 800422e:	4621      	mov	r1, r4
 8004230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004234:	4621      	mov	r1, r4
 8004236:	028a      	lsls	r2, r1, #10
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004240:	2200      	movs	r2, #0
 8004242:	673b      	str	r3, [r7, #112]	@ 0x70
 8004244:	677a      	str	r2, [r7, #116]	@ 0x74
 8004246:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800424a:	f7fc fd1d 	bl	8000c88 <__aeabi_uldivmod>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	4613      	mov	r3, r2
 8004254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004258:	4b41      	ldr	r3, [pc, #260]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800426a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800426e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800427a:	e0eb      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b38      	ldr	r3, [pc, #224]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004284:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06b      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004294:	4b32      	ldr	r3, [pc, #200]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x354>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	2200      	movs	r2, #0
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042a8:	2300      	movs	r3, #0
 80042aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80042b0:	4622      	mov	r2, r4
 80042b2:	462b      	mov	r3, r5
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	0159      	lsls	r1, r3, #5
 80042be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c2:	0150      	lsls	r0, r2, #5
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4621      	mov	r1, r4
 80042ca:	1a51      	subs	r1, r2, r1
 80042cc:	61b9      	str	r1, [r7, #24]
 80042ce:	4629      	mov	r1, r5
 80042d0:	eb63 0301 	sbc.w	r3, r3, r1
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80042e2:	4659      	mov	r1, fp
 80042e4:	018b      	lsls	r3, r1, #6
 80042e6:	4651      	mov	r1, sl
 80042e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ec:	4651      	mov	r1, sl
 80042ee:	018a      	lsls	r2, r1, #6
 80042f0:	4651      	mov	r1, sl
 80042f2:	ebb2 0801 	subs.w	r8, r2, r1
 80042f6:	4659      	mov	r1, fp
 80042f8:	eb63 0901 	sbc.w	r9, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004308:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004310:	4690      	mov	r8, r2
 8004312:	4699      	mov	r9, r3
 8004314:	4623      	mov	r3, r4
 8004316:	eb18 0303 	adds.w	r3, r8, r3
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	462b      	mov	r3, r5
 800431e:	eb49 0303 	adc.w	r3, r9, r3
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004330:	4629      	mov	r1, r5
 8004332:	024b      	lsls	r3, r1, #9
 8004334:	4621      	mov	r1, r4
 8004336:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800433a:	4621      	mov	r1, r4
 800433c:	024a      	lsls	r2, r1, #9
 800433e:	4610      	mov	r0, r2
 8004340:	4619      	mov	r1, r3
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004346:	2200      	movs	r2, #0
 8004348:	65bb      	str	r3, [r7, #88]	@ 0x58
 800434a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800434c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004350:	f7fc fc9a 	bl	8000c88 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4613      	mov	r3, r2
 800435a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800435e:	e065      	b.n	800442c <HAL_RCC_GetSysClockFreq+0x420>
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436c:	4b3d      	ldr	r3, [pc, #244]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x458>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	099b      	lsrs	r3, r3, #6
 8004372:	2200      	movs	r2, #0
 8004374:	4618      	mov	r0, r3
 8004376:	4611      	mov	r1, r2
 8004378:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437c:	653b      	str	r3, [r7, #80]	@ 0x50
 800437e:	2300      	movs	r3, #0
 8004380:	657b      	str	r3, [r7, #84]	@ 0x54
 8004382:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	f04f 0000 	mov.w	r0, #0
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	0159      	lsls	r1, r3, #5
 8004394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004398:	0150      	lsls	r0, r2, #5
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4641      	mov	r1, r8
 80043a0:	1a51      	subs	r1, r2, r1
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	4649      	mov	r1, r9
 80043a6:	eb63 0301 	sbc.w	r3, r3, r1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043b8:	4659      	mov	r1, fp
 80043ba:	018b      	lsls	r3, r1, #6
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c2:	4651      	mov	r1, sl
 80043c4:	018a      	lsls	r2, r1, #6
 80043c6:	4651      	mov	r1, sl
 80043c8:	1a54      	subs	r4, r2, r1
 80043ca:	4659      	mov	r1, fp
 80043cc:	eb63 0501 	sbc.w	r5, r3, r1
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	00eb      	lsls	r3, r5, #3
 80043da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043de:	00e2      	lsls	r2, r4, #3
 80043e0:	4614      	mov	r4, r2
 80043e2:	461d      	mov	r5, r3
 80043e4:	4643      	mov	r3, r8
 80043e6:	18e3      	adds	r3, r4, r3
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	464b      	mov	r3, r9
 80043ec:	eb45 0303 	adc.w	r3, r5, r3
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043fe:	4629      	mov	r1, r5
 8004400:	028b      	lsls	r3, r1, #10
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004408:	4621      	mov	r1, r4
 800440a:	028a      	lsls	r2, r1, #10
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004414:	2200      	movs	r2, #0
 8004416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004418:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800441a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800441e:	f7fc fc33 	bl	8000c88 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4613      	mov	r3, r2
 8004428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800442c:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x458>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	0f1b      	lsrs	r3, r3, #28
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800443a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800443e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800444a:	e003      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800444c:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x45c>)
 800444e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004458:	4618      	mov	r0, r3
 800445a:	37b8      	adds	r7, #184	@ 0xb8
 800445c:	46bd      	mov	sp, r7
 800445e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	00f42400 	.word	0x00f42400

0800446c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e28d      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8083 	beq.w	8004592 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800448c:	4b94      	ldr	r3, [pc, #592]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d019      	beq.n	80044cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004498:	4b91      	ldr	r3, [pc, #580]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044a4:	4b8e      	ldr	r3, [pc, #568]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b0:	d00c      	beq.n	80044cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b2:	4b8b      	ldr	r3, [pc, #556]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d112      	bne.n	80044e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044be:	4b88      	ldr	r3, [pc, #544]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ca:	d10b      	bne.n	80044e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	4b84      	ldr	r3, [pc, #528]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05b      	beq.n	8004590 <HAL_RCC_OscConfig+0x124>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d157      	bne.n	8004590 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e25a      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x90>
 80044ee:	4b7c      	ldr	r3, [pc, #496]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xcc>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xb4>
 8004506:	4b76      	ldr	r3, [pc, #472]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b73      	ldr	r3, [pc, #460]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a72      	ldr	r2, [pc, #456]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xcc>
 8004520:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b6c      	ldr	r3, [pc, #432]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7ff f958 	bl	80037f4 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004548:	f7ff f954 	bl	80037f4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	@ 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e21f      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b61      	ldr	r3, [pc, #388]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xdc>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7ff f944 	bl	80037f4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004570:	f7ff f940 	bl	80037f4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e20b      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b57      	ldr	r3, [pc, #348]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x104>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d06f      	beq.n	800467e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800459e:	4b50      	ldr	r3, [pc, #320]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d017      	beq.n	80045da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045aa:	4b4d      	ldr	r3, [pc, #308]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b44      	ldr	r3, [pc, #272]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x186>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1d3      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4937      	ldr	r1, [pc, #220]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <HAL_RCC_OscConfig+0x278>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7ff f8ed 	bl	80037f4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461e:	f7ff f8e9 	bl	80037f4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1b4      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4925      	ldr	r1, [pc, #148]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x278>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7ff f8cc 	bl	80037f4 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004660:	f7ff f8c8 	bl	80037f4 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e193      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d036      	beq.n	80046f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCC_OscConfig+0x27c>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7ff f8ac 	bl	80037f4 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a0:	f7ff f8a8 	bl	80037f4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e173      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x274>)
 80046b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x234>
 80046be:	e01b      	b.n	80046f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_OscConfig+0x27c>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7ff f895 	bl	80037f4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00e      	b.n	80046ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ce:	f7ff f891 	bl	80037f4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d907      	bls.n	80046ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e15c      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ea      	bne.n	80046ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8097 	beq.w	8004834 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b83      	ldr	r3, [pc, #524]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b7f      	ldr	r3, [pc, #508]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a7e      	ldr	r2, [pc, #504]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	@ 0x40
 8004726:	4b7c      	ldr	r3, [pc, #496]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b79      	ldr	r3, [pc, #484]	@ (800491c <HAL_RCC_OscConfig+0x4b0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b76      	ldr	r3, [pc, #472]	@ (800491c <HAL_RCC_OscConfig+0x4b0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a75      	ldr	r2, [pc, #468]	@ (800491c <HAL_RCC_OscConfig+0x4b0>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7ff f851 	bl	80037f4 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7ff f84d 	bl	80037f4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e118      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b6c      	ldr	r3, [pc, #432]	@ (800491c <HAL_RCC_OscConfig+0x4b0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x31e>
 800477c:	4b66      	ldr	r3, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a65      	ldr	r2, [pc, #404]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	@ 0x70
 8004788:	e01c      	b.n	80047c4 <HAL_RCC_OscConfig+0x358>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x340>
 8004792:	4b61      	ldr	r3, [pc, #388]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a60      	ldr	r2, [pc, #384]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	@ 0x70
 800479e:	4b5e      	ldr	r3, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0x358>
 80047ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	4a59      	ldr	r2, [pc, #356]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b8:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a56      	ldr	r2, [pc, #344]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7ff f812 	bl	80037f4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7ff f80e 	bl	80037f4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0d7      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ee      	beq.n	80047d4 <HAL_RCC_OscConfig+0x368>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fe fffc 	bl	80037f4 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fe fff8 	bl	80037f4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0c1      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	4b40      	ldr	r3, [pc, #256]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ee      	bne.n	8004800 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b3b      	ldr	r3, [pc, #236]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	4a3a      	ldr	r2, [pc, #232]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80ad 	beq.w	8004998 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483e:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b08      	cmp	r3, #8
 8004848:	d060      	beq.n	800490c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d145      	bne.n	80048de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b33      	ldr	r3, [pc, #204]	@ (8004920 <HAL_RCC_OscConfig+0x4b4>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe ffcc 	bl	80037f4 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe ffc8 	bl	80037f4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e093      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	071b      	lsls	r3, r3, #28
 80048aa:	491b      	ldr	r1, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004920 <HAL_RCC_OscConfig+0x4b4>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b6:	f7fe ff9d 	bl	80037f4 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048be:	f7fe ff99 	bl	80037f4 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e064      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d0:	4b11      	ldr	r3, [pc, #68]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCC_OscConfig+0x452>
 80048dc:	e05c      	b.n	8004998 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <HAL_RCC_OscConfig+0x4b4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fe ff86 	bl	80037f4 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fe ff82 	bl	80037f4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e04d      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x480>
 800490a:	e045      	b.n	8004998 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d107      	bne.n	8004924 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e040      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000
 8004920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004924:	4b1f      	ldr	r3, [pc, #124]	@ (80049a4 <HAL_RCC_OscConfig+0x538>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d030      	beq.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d129      	bne.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d122      	bne.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800495a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495c:	4293      	cmp	r3, r2
 800495e:	d119      	bne.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d10f      	bne.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07b      	b.n	8004ab2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	e005      	b.n	80049e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fd fdba 	bl	8002574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	ea42 0103 	orr.w	r1, r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0104 	and.w	r1, r3, #4
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0210 	and.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b088      	sub	sp, #32
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_SPI_Transmit+0x22>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e12d      	b.n	8004d38 <HAL_SPI_Transmit+0x27e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ae4:	f7fe fe86 	bl	80037f4 <HAL_GetTick>
 8004ae8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004afe:	e116      	b.n	8004d2e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Transmit+0x52>
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b10:	e10d      	b.n	8004d2e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2203      	movs	r2, #3
 8004b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b58:	d10f      	bne.n	8004b7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b40      	cmp	r3, #64	@ 0x40
 8004b86:	d007      	beq.n	8004b98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ba0:	d14f      	bne.n	8004c42 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_Transmit+0xf6>
 8004baa:	8afb      	ldrh	r3, [r7, #22]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d142      	bne.n	8004c36 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bd4:	e02f      	b.n	8004c36 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d112      	bne.n	8004c0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be8:	881a      	ldrh	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	1c9a      	adds	r2, r3, #2
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c08:	e015      	b.n	8004c36 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c0a:	f7fe fdf3 	bl	80037f4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d803      	bhi.n	8004c22 <HAL_SPI_Transmit+0x168>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c20:	d102      	bne.n	8004c28 <HAL_SPI_Transmit+0x16e>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c34:	e07b      	b.n	8004d2e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ca      	bne.n	8004bd6 <HAL_SPI_Transmit+0x11c>
 8004c40:	e050      	b.n	8004ce4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Transmit+0x196>
 8004c4a:	8afb      	ldrh	r3, [r7, #22]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d144      	bne.n	8004cda <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c76:	e030      	b.n	8004cda <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d113      	bne.n	8004cae <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cac:	e015      	b.n	8004cda <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cae:	f7fe fda1 	bl	80037f4 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d803      	bhi.n	8004cc6 <HAL_SPI_Transmit+0x20c>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d102      	bne.n	8004ccc <HAL_SPI_Transmit+0x212>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004cd8:	e029      	b.n	8004d2e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1c9      	bne.n	8004c78 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fbdf 	bl	80054ac <SPI_EndRxTxTransaction>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e003      	b.n	8004d2e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d002      	beq.n	8004d66 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
 8004d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d64:	e0fb      	b.n	8004f5e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6e:	d112      	bne.n	8004d96 <HAL_SPI_Receive+0x56>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10e      	bne.n	8004d96 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d80:	88fa      	ldrh	r2, [r7, #6]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f8ef 	bl	8004f70 <HAL_SPI_TransmitReceive>
 8004d92:	4603      	mov	r3, r0
 8004d94:	e0e8      	b.n	8004f68 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_SPI_Receive+0x64>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0e1      	b.n	8004f68 <HAL_SPI_Receive+0x228>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dac:	f7fe fd22 	bl	80037f4 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_Receive+0x7e>
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc2:	e0cc      	b.n	8004f5e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d10f      	bne.n	8004e2c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e36:	2b40      	cmp	r3, #64	@ 0x40
 8004e38:	d007      	beq.n	8004e4a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d16a      	bne.n	8004f28 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e52:	e032      	b.n	8004eba <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d115      	bne.n	8004e8e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f103 020c 	add.w	r2, r3, #12
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e8c:	e015      	b.n	8004eba <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8e:	f7fe fcb1 	bl	80037f4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d803      	bhi.n	8004ea6 <HAL_SPI_Receive+0x166>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Receive+0x16c>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004eb8:	e051      	b.n	8004f5e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1c7      	bne.n	8004e54 <HAL_SPI_Receive+0x114>
 8004ec4:	e035      	b.n	8004f32 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d113      	bne.n	8004efc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004efa:	e015      	b.n	8004f28 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004efc:	f7fe fc7a 	bl	80037f4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d803      	bhi.n	8004f14 <HAL_SPI_Receive+0x1d4>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Receive+0x1da>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f26:	e01a      	b.n	8004f5e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1c9      	bne.n	8004ec6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	6839      	ldr	r1, [r7, #0]
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fa52 	bl	80053e0 <SPI_EndRxTransaction>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
 8004f54:	e003      	b.n	8004f5e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	@ 0x30
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x26>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e198      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x358>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9e:	f7fe fc29 	bl	80037f4 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fb4:	887b      	ldrh	r3, [r7, #2]
 8004fb6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d00f      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x70>
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc6:	d107      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x68>
 8004fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d003      	beq.n	8004fe0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004fde:	e16d      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x82>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x82>
 8004fec:	887b      	ldrh	r3, [r7, #2]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ff8:	e160      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2205      	movs	r2, #5
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	887a      	ldrh	r2, [r7, #2]
 800501e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b40      	cmp	r3, #64	@ 0x40
 8005050:	d007      	beq.n	8005062 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800506a:	d17c      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_TransmitReceive+0x10a>
 8005074:	8b7b      	ldrh	r3, [r7, #26]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d16a      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	881a      	ldrh	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	1c9a      	adds	r2, r3, #2
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800509e:	e057      	b.n	8005150 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d11b      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x176>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <HAL_SPI_TransmitReceive+0x176>
 80050b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d113      	bne.n	80050e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	881a      	ldrh	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	1c9a      	adds	r2, r3, #2
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d119      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x1b8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d014      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	b292      	uxth	r2, r2
 800510a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005124:	2301      	movs	r3, #1
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005128:	f7fe fb64 	bl	80037f4 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005134:	429a      	cmp	r2, r3
 8005136:	d80b      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x1e0>
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d007      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800514e:	e0b5      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1a2      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x130>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d19d      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x130>
 8005164:	e080      	b.n	8005268 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x204>
 800516e:	8b7b      	ldrh	r3, [r7, #26]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d16f      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519a:	e05b      	b.n	8005254 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11c      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x274>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d017      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x274>
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d114      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d119      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x2b6>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005222:	2301      	movs	r3, #1
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005226:	f7fe fae5 	bl	80037f4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_TransmitReceive+0x2ce>
 8005236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d102      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x2d4>
 800523e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005252:	e033      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d19e      	bne.n	800519c <HAL_SPI_TransmitReceive+0x22c>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d199      	bne.n	800519c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f91d 	bl	80054ac <SPI_EndRxTxTransaction>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005284:	e01a      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e003      	b.n	80052bc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80052c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3730      	adds	r7, #48	@ 0x30
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052e0:	f7fe fa88 	bl	80037f4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052f0:	f7fe fa80 	bl	80037f4 <HAL_GetTick>
 80052f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052f6:	4b39      	ldr	r3, [pc, #228]	@ (80053dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	015b      	lsls	r3, r3, #5
 80052fc:	0d1b      	lsrs	r3, r3, #20
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005306:	e054      	b.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d050      	beq.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005310:	f7fe fa70 	bl	80037f4 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	429a      	cmp	r2, r3
 800531e:	d902      	bls.n	8005326 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d13d      	bne.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800533e:	d111      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005348:	d004      	beq.n	8005354 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005352:	d107      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536c:	d10f      	bne.n	800538e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800538c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e017      	b.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d19b      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000014 	.word	0x20000014

080053e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053f4:	d111      	bne.n	800541a <SPI_EndRxTransaction+0x3a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053fe:	d004      	beq.n	800540a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005408:	d107      	bne.n	800541a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005418:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005422:	d12a      	bne.n	800547a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542c:	d012      	beq.n	8005454 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	2180      	movs	r1, #128	@ 0x80
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff ff49 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02d      	beq.n	80054a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e026      	b.n	80054a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	2101      	movs	r1, #1
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f7ff ff36 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01a      	beq.n	80054a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	f043 0220 	orr.w	r2, r3, #32
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e013      	b.n	80054a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	2101      	movs	r1, #1
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ff23 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e000      	b.n	80054a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2201      	movs	r2, #1
 80054c0:	2102      	movs	r1, #2
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff ff04 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e032      	b.n	8005544 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054de:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <SPI_EndRxTxTransaction+0xa0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005550 <SPI_EndRxTxTransaction+0xa4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	0d5b      	lsrs	r3, r3, #21
 80054ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054ee:	fb02 f303 	mul.w	r3, r2, r3
 80054f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fc:	d112      	bne.n	8005524 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff fee1 	bl	80052d0 <SPI_WaitFlagStateUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00f      	b.n	8005544 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3b01      	subs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b80      	cmp	r3, #128	@ 0x80
 800553c:	d0f2      	beq.n	8005524 <SPI_EndRxTxTransaction+0x78>
 800553e:	e000      	b.n	8005542 <SPI_EndRxTxTransaction+0x96>
        break;
 8005540:	bf00      	nop
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000014 	.word	0x20000014
 8005550:	165e9f81 	.word	0x165e9f81

08005554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e041      	b.n	80055ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fd f842 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3304      	adds	r3, #4
 8005590:	4619      	mov	r1, r3
 8005592:	4610      	mov	r0, r2
 8005594:	f000 fa7e 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d001      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e04e      	b.n	80056aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a23      	ldr	r2, [pc, #140]	@ (80056b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005636:	d01d      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <HAL_TIM_Base_Start_IT+0xc8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1c      	ldr	r2, [pc, #112]	@ (80056c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a19      	ldr	r2, [pc, #100]	@ (80056cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x80>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d111      	bne.n	8005698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b06      	cmp	r3, #6
 8005684:	d010      	beq.n	80056a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	e007      	b.n	80056a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40010400 	.word	0x40010400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40001800 	.word	0x40001800

080056d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0202 	mvn.w	r2, #2
 8005708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f999 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f98b 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f99c 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0204 	mvn.w	r2, #4
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f973 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f965 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f976 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d020      	beq.n	80057d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0208 	mvn.w	r2, #8
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2204      	movs	r2, #4
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f94d 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f93f 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f950 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d020      	beq.n	800581c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01b      	beq.n	800581c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0210 	mvn.w	r2, #16
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2208      	movs	r2, #8
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f927 	bl	8005a56 <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f919 	bl	8005a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f92a 	bl	8005a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00c      	beq.n	8005840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0201 	mvn.w	r2, #1
 8005838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fdb2 	bl	80023a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00c      	beq.n	8005864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fae4 	bl	8005e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8fb 	bl	8005a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0220 	mvn.w	r2, #32
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fab6 	bl	8005e18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIM_ConfigClockSource+0x1c>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e0b4      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x186>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005908:	d03e      	beq.n	8005988 <HAL_TIM_ConfigClockSource+0xd4>
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590e:	f200 8087 	bhi.w	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005916:	f000 8086 	beq.w	8005a26 <HAL_TIM_ConfigClockSource+0x172>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591e:	d87f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b70      	cmp	r3, #112	@ 0x70
 8005922:	d01a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xa6>
 8005924:	2b70      	cmp	r3, #112	@ 0x70
 8005926:	d87b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b60      	cmp	r3, #96	@ 0x60
 800592a:	d050      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x11a>
 800592c:	2b60      	cmp	r3, #96	@ 0x60
 800592e:	d877      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b50      	cmp	r3, #80	@ 0x50
 8005932:	d03c      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xfa>
 8005934:	2b50      	cmp	r3, #80	@ 0x50
 8005936:	d873      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	d058      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x13a>
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d86f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005940:	2b30      	cmp	r3, #48	@ 0x30
 8005942:	d064      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005944:	2b30      	cmp	r3, #48	@ 0x30
 8005946:	d86b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d060      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d867      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05c      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005954:	2b10      	cmp	r3, #16
 8005956:	d05a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15a>
 8005958:	e062      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800596a:	f000 f9b9 	bl	8005ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800597c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
      break;
 8005986:	e04f      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005998:	f000 f9a2 	bl	8005ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059aa:	609a      	str	r2, [r3, #8]
      break;
 80059ac:	e03c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 f916 	bl	8005bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2150      	movs	r1, #80	@ 0x50
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f96f 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 80059cc:	e02c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 f935 	bl	8005c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2160      	movs	r1, #96	@ 0x60
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f95f 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 80059ec:	e01c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 f8f6 	bl	8005bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f94f 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 f946 	bl	8005caa <TIM_ITRx_SetConfig>
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a46      	ldr	r2, [pc, #280]	@ (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a43      	ldr	r2, [pc, #268]	@ (8005bc4 <TIM_Base_SetConfig+0x130>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a42      	ldr	r2, [pc, #264]	@ (8005bc8 <TIM_Base_SetConfig+0x134>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d007      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a41      	ldr	r2, [pc, #260]	@ (8005bcc <TIM_Base_SetConfig+0x138>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a40      	ldr	r2, [pc, #256]	@ (8005bd0 <TIM_Base_SetConfig+0x13c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d108      	bne.n	8005ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a35      	ldr	r2, [pc, #212]	@ (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af4:	d027      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a32      	ldr	r2, [pc, #200]	@ (8005bc4 <TIM_Base_SetConfig+0x130>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d023      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a31      	ldr	r2, [pc, #196]	@ (8005bc8 <TIM_Base_SetConfig+0x134>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a30      	ldr	r2, [pc, #192]	@ (8005bcc <TIM_Base_SetConfig+0x138>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd0 <TIM_Base_SetConfig+0x13c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d017      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2e      	ldr	r2, [pc, #184]	@ (8005bd4 <TIM_Base_SetConfig+0x140>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd8 <TIM_Base_SetConfig+0x144>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2c      	ldr	r2, [pc, #176]	@ (8005bdc <TIM_Base_SetConfig+0x148>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2b      	ldr	r2, [pc, #172]	@ (8005be0 <TIM_Base_SetConfig+0x14c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2a      	ldr	r2, [pc, #168]	@ (8005be4 <TIM_Base_SetConfig+0x150>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <TIM_Base_SetConfig+0x154>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d108      	bne.n	8005b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	@ (8005bc0 <TIM_Base_SetConfig+0x12c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0xf8>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a12      	ldr	r2, [pc, #72]	@ (8005bd0 <TIM_Base_SetConfig+0x13c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d105      	bne.n	8005bb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f023 0201 	bic.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	611a      	str	r2, [r3, #16]
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800
 8005be0:	40001800 	.word	0x40001800
 8005be4:	40001c00 	.word	0x40001c00
 8005be8:	40002000 	.word	0x40002000

08005bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 030a 	bic.w	r3, r3, #10
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f023 0210 	bic.w	r2, r3, #16
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f043 0307 	orr.w	r3, r3, #7
 8005ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e05a      	b.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a21      	ldr	r2, [pc, #132]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d84:	d01d      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a18      	ldr	r2, [pc, #96]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10c      	bne.n	8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800

08005e18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e042      	b.n	8005ed8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fc fbee 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	@ 0x24
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f973 	bl	8006170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695a      	ldr	r2, [r3, #20]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3708      	adds	r7, #8
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	@ 0x28
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d175      	bne.n	8005fec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Transmit+0x2c>
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e06e      	b.n	8005fee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2221      	movs	r2, #33	@ 0x21
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f1e:	f7fd fc69 	bl	80037f4 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d108      	bne.n	8005f4c <HAL_UART_Transmit+0x6c>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	e003      	b.n	8005f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f54:	e02e      	b.n	8005fb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2180      	movs	r1, #128	@ 0x80
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 f848 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e03a      	b.n	8005fee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10b      	bne.n	8005f96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3302      	adds	r3, #2
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	e007      	b.n	8005fa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	781a      	ldrb	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1cb      	bne.n	8005f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2140      	movs	r1, #64	@ 0x40
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f814 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e006      	b.n	8005fee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e000      	b.n	8005fee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b086      	sub	sp, #24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	e03b      	b.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d037      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006010:	f7fd fbf0 	bl	80037f4 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <UART_WaitOnFlagUntilTimeout+0x30>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e03a      	b.n	80060a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d023      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b80      	cmp	r3, #128	@ 0x80
 800603c:	d020      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b40      	cmp	r3, #64	@ 0x40
 8006042:	d01d      	beq.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d116      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f81d 	bl	80060a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2208      	movs	r2, #8
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e00f      	b.n	80060a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4013      	ands	r3, r2
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	429a      	cmp	r2, r3
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	429a      	cmp	r2, r3
 800609c:	d0b4      	beq.n	8006008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b095      	sub	sp, #84	@ 0x54
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006104:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006106:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800610a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d119      	bne.n	8006154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	@ 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006140:	61ba      	str	r2, [r7, #24]
 8006142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006162:	bf00      	nop
 8006164:	3754      	adds	r7, #84	@ 0x54
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006174:	b0c0      	sub	sp, #256	@ 0x100
 8006176:	af00      	add	r7, sp, #0
 8006178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	68d9      	ldr	r1, [r3, #12]
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	ea40 0301 	orr.w	r3, r0, r1
 8006198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80061c8:	f021 010c 	bic.w	r1, r1, #12
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80061d6:	430b      	orrs	r3, r1
 80061d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ea:	6999      	ldr	r1, [r3, #24]
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	ea40 0301 	orr.w	r3, r0, r1
 80061f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b8f      	ldr	r3, [pc, #572]	@ (800643c <UART_SetConfig+0x2cc>)
 8006200:	429a      	cmp	r2, r3
 8006202:	d005      	beq.n	8006210 <UART_SetConfig+0xa0>
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b8d      	ldr	r3, [pc, #564]	@ (8006440 <UART_SetConfig+0x2d0>)
 800620c:	429a      	cmp	r2, r3
 800620e:	d104      	bne.n	800621a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fd feb6 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 8006214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006218:	e003      	b.n	8006222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800621a:	f7fd fe9d 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 800621e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622c:	f040 810c 	bne.w	8006448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800623a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800623e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006242:	4622      	mov	r2, r4
 8006244:	462b      	mov	r3, r5
 8006246:	1891      	adds	r1, r2, r2
 8006248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800624a:	415b      	adcs	r3, r3
 800624c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800624e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006252:	4621      	mov	r1, r4
 8006254:	eb12 0801 	adds.w	r8, r2, r1
 8006258:	4629      	mov	r1, r5
 800625a:	eb43 0901 	adc.w	r9, r3, r1
 800625e:	f04f 0200 	mov.w	r2, #0
 8006262:	f04f 0300 	mov.w	r3, #0
 8006266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800626a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800626e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006272:	4690      	mov	r8, r2
 8006274:	4699      	mov	r9, r3
 8006276:	4623      	mov	r3, r4
 8006278:	eb18 0303 	adds.w	r3, r8, r3
 800627c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006280:	462b      	mov	r3, r5
 8006282:	eb49 0303 	adc.w	r3, r9, r3
 8006286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800629a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800629e:	460b      	mov	r3, r1
 80062a0:	18db      	adds	r3, r3, r3
 80062a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a4:	4613      	mov	r3, r2
 80062a6:	eb42 0303 	adc.w	r3, r2, r3
 80062aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80062ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80062b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80062b4:	f7fa fce8 	bl	8000c88 <__aeabi_uldivmod>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4b61      	ldr	r3, [pc, #388]	@ (8006444 <UART_SetConfig+0x2d4>)
 80062be:	fba3 2302 	umull	r2, r3, r3, r2
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	011c      	lsls	r4, r3, #4
 80062c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80062d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80062d8:	4642      	mov	r2, r8
 80062da:	464b      	mov	r3, r9
 80062dc:	1891      	adds	r1, r2, r2
 80062de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80062e0:	415b      	adcs	r3, r3
 80062e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e8:	4641      	mov	r1, r8
 80062ea:	eb12 0a01 	adds.w	sl, r2, r1
 80062ee:	4649      	mov	r1, r9
 80062f0:	eb43 0b01 	adc.w	fp, r3, r1
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006308:	4692      	mov	sl, r2
 800630a:	469b      	mov	fp, r3
 800630c:	4643      	mov	r3, r8
 800630e:	eb1a 0303 	adds.w	r3, sl, r3
 8006312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006316:	464b      	mov	r3, r9
 8006318:	eb4b 0303 	adc.w	r3, fp, r3
 800631c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800632c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006334:	460b      	mov	r3, r1
 8006336:	18db      	adds	r3, r3, r3
 8006338:	643b      	str	r3, [r7, #64]	@ 0x40
 800633a:	4613      	mov	r3, r2
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	647b      	str	r3, [r7, #68]	@ 0x44
 8006342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800634a:	f7fa fc9d 	bl	8000c88 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4611      	mov	r1, r2
 8006354:	4b3b      	ldr	r3, [pc, #236]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006356:	fba3 2301 	umull	r2, r3, r3, r1
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	2264      	movs	r2, #100	@ 0x64
 800635e:	fb02 f303 	mul.w	r3, r2, r3
 8006362:	1acb      	subs	r3, r1, r3
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800636a:	4b36      	ldr	r3, [pc, #216]	@ (8006444 <UART_SetConfig+0x2d4>)
 800636c:	fba3 2302 	umull	r2, r3, r3, r2
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006378:	441c      	add	r4, r3
 800637a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637e:	2200      	movs	r2, #0
 8006380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800638c:	4642      	mov	r2, r8
 800638e:	464b      	mov	r3, r9
 8006390:	1891      	adds	r1, r2, r2
 8006392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006394:	415b      	adcs	r3, r3
 8006396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800639c:	4641      	mov	r1, r8
 800639e:	1851      	adds	r1, r2, r1
 80063a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80063a2:	4649      	mov	r1, r9
 80063a4:	414b      	adcs	r3, r1
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80063b4:	4659      	mov	r1, fp
 80063b6:	00cb      	lsls	r3, r1, #3
 80063b8:	4651      	mov	r1, sl
 80063ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063be:	4651      	mov	r1, sl
 80063c0:	00ca      	lsls	r2, r1, #3
 80063c2:	4610      	mov	r0, r2
 80063c4:	4619      	mov	r1, r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	4642      	mov	r2, r8
 80063ca:	189b      	adds	r3, r3, r2
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063d0:	464b      	mov	r3, r9
 80063d2:	460a      	mov	r2, r1
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80063ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006406:	f7fa fc3f 	bl	8000c88 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	@ 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	3332      	adds	r3, #50	@ 0x32
 8006422:	4a08      	ldr	r2, [pc, #32]	@ (8006444 <UART_SetConfig+0x2d4>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f003 0207 	and.w	r2, r3, #7
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4422      	add	r2, r4
 8006436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006438:	e106      	b.n	8006648 <UART_SetConfig+0x4d8>
 800643a:	bf00      	nop
 800643c:	40011000 	.word	0x40011000
 8006440:	40011400 	.word	0x40011400
 8006444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644c:	2200      	movs	r2, #0
 800644e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800645a:	4642      	mov	r2, r8
 800645c:	464b      	mov	r3, r9
 800645e:	1891      	adds	r1, r2, r2
 8006460:	6239      	str	r1, [r7, #32]
 8006462:	415b      	adcs	r3, r3
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
 8006466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800646a:	4641      	mov	r1, r8
 800646c:	1854      	adds	r4, r2, r1
 800646e:	4649      	mov	r1, r9
 8006470:	eb43 0501 	adc.w	r5, r3, r1
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	00eb      	lsls	r3, r5, #3
 800647e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006482:	00e2      	lsls	r2, r4, #3
 8006484:	4614      	mov	r4, r2
 8006486:	461d      	mov	r5, r3
 8006488:	4643      	mov	r3, r8
 800648a:	18e3      	adds	r3, r4, r3
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006490:	464b      	mov	r3, r9
 8006492:	eb45 0303 	adc.w	r3, r5, r3
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80064b6:	4629      	mov	r1, r5
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c0:	4621      	mov	r1, r4
 80064c2:	008a      	lsls	r2, r1, #2
 80064c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80064c8:	f7fa fbde 	bl	8000c88 <__aeabi_uldivmod>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4b60      	ldr	r3, [pc, #384]	@ (8006654 <UART_SetConfig+0x4e4>)
 80064d2:	fba3 2302 	umull	r2, r3, r3, r2
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	011c      	lsls	r4, r3, #4
 80064da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80064ec:	4642      	mov	r2, r8
 80064ee:	464b      	mov	r3, r9
 80064f0:	1891      	adds	r1, r2, r2
 80064f2:	61b9      	str	r1, [r7, #24]
 80064f4:	415b      	adcs	r3, r3
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064fc:	4641      	mov	r1, r8
 80064fe:	1851      	adds	r1, r2, r1
 8006500:	6139      	str	r1, [r7, #16]
 8006502:	4649      	mov	r1, r9
 8006504:	414b      	adcs	r3, r1
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006514:	4659      	mov	r1, fp
 8006516:	00cb      	lsls	r3, r1, #3
 8006518:	4651      	mov	r1, sl
 800651a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651e:	4651      	mov	r1, sl
 8006520:	00ca      	lsls	r2, r1, #3
 8006522:	4610      	mov	r0, r2
 8006524:	4619      	mov	r1, r3
 8006526:	4603      	mov	r3, r0
 8006528:	4642      	mov	r2, r8
 800652a:	189b      	adds	r3, r3, r2
 800652c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006530:	464b      	mov	r3, r9
 8006532:	460a      	mov	r2, r1
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006554:	4649      	mov	r1, r9
 8006556:	008b      	lsls	r3, r1, #2
 8006558:	4641      	mov	r1, r8
 800655a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655e:	4641      	mov	r1, r8
 8006560:	008a      	lsls	r2, r1, #2
 8006562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006566:	f7fa fb8f 	bl	8000c88 <__aeabi_uldivmod>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4611      	mov	r1, r2
 8006570:	4b38      	ldr	r3, [pc, #224]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006572:	fba3 2301 	umull	r2, r3, r3, r1
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	2264      	movs	r2, #100	@ 0x64
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	1acb      	subs	r3, r1, r3
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	3332      	adds	r3, #50	@ 0x32
 8006584:	4a33      	ldr	r2, [pc, #204]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006590:	441c      	add	r4, r3
 8006592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006596:	2200      	movs	r2, #0
 8006598:	673b      	str	r3, [r7, #112]	@ 0x70
 800659a:	677a      	str	r2, [r7, #116]	@ 0x74
 800659c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	1891      	adds	r1, r2, r2
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	415b      	adcs	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065b0:	4641      	mov	r1, r8
 80065b2:	1851      	adds	r1, r2, r1
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	4649      	mov	r1, r9
 80065b8:	414b      	adcs	r3, r1
 80065ba:	607b      	str	r3, [r7, #4]
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065c8:	4659      	mov	r1, fp
 80065ca:	00cb      	lsls	r3, r1, #3
 80065cc:	4651      	mov	r1, sl
 80065ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065d2:	4651      	mov	r1, sl
 80065d4:	00ca      	lsls	r2, r1, #3
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	4603      	mov	r3, r0
 80065dc:	4642      	mov	r2, r8
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065e2:	464b      	mov	r3, r9
 80065e4:	460a      	mov	r2, r1
 80065e6:	eb42 0303 	adc.w	r3, r2, r3
 80065ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80065f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006604:	4649      	mov	r1, r9
 8006606:	008b      	lsls	r3, r1, #2
 8006608:	4641      	mov	r1, r8
 800660a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660e:	4641      	mov	r1, r8
 8006610:	008a      	lsls	r2, r1, #2
 8006612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006616:	f7fa fb37 	bl	8000c88 <__aeabi_uldivmod>
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006620:	fba3 1302 	umull	r1, r3, r3, r2
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	2164      	movs	r1, #100	@ 0x64
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	3332      	adds	r3, #50	@ 0x32
 8006632:	4a08      	ldr	r2, [pc, #32]	@ (8006654 <UART_SetConfig+0x4e4>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	f003 020f 	and.w	r2, r3, #15
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4422      	add	r2, r4
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006654:	51eb851f 	.word	0x51eb851f

08006658 <__NVIC_SetPriority>:
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db0a      	blt.n	8006682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	490c      	ldr	r1, [pc, #48]	@ (80066a4 <__NVIC_SetPriority+0x4c>)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	440b      	add	r3, r1
 800667c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006680:	e00a      	b.n	8006698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4908      	ldr	r1, [pc, #32]	@ (80066a8 <__NVIC_SetPriority+0x50>)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3b04      	subs	r3, #4
 8006690:	0112      	lsls	r2, r2, #4
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	440b      	add	r3, r1
 8006696:	761a      	strb	r2, [r3, #24]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000e100 	.word	0xe000e100
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066b0:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <SysTick_Handler+0x1c>)
 80066b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066b4:	f002 fcd6 	bl	8009064 <xTaskGetSchedulerState>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d001      	beq.n	80066c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066be:	f003 fbcb 	bl	8009e58 <xPortSysTickHandler>
  }
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	e000e010 	.word	0xe000e010

080066cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066d0:	2100      	movs	r1, #0
 80066d2:	f06f 0004 	mvn.w	r0, #4
 80066d6:	f7ff ffbf 	bl	8006658 <__NVIC_SetPriority>
#endif
}
 80066da:	bf00      	nop
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e6:	f3ef 8305 	mrs	r3, IPSR
 80066ea:	603b      	str	r3, [r7, #0]
  return(result);
 80066ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80066f2:	f06f 0305 	mvn.w	r3, #5
 80066f6:	607b      	str	r3, [r7, #4]
 80066f8:	e00c      	b.n	8006714 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <osKernelInitialize+0x44>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006702:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <osKernelInitialize+0x44>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006708:	2300      	movs	r3, #0
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	e002      	b.n	8006714 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006714:	687b      	ldr	r3, [r7, #4]
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	200009c4 	.word	0x200009c4

08006728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800672e:	f3ef 8305 	mrs	r3, IPSR
 8006732:	603b      	str	r3, [r7, #0]
  return(result);
 8006734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <osKernelStart+0x1a>
    stat = osErrorISR;
 800673a:	f06f 0305 	mvn.w	r3, #5
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	e010      	b.n	8006764 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006742:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <osKernelStart+0x48>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d109      	bne.n	800675e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800674a:	f7ff ffbf 	bl	80066cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800674e:	4b08      	ldr	r3, [pc, #32]	@ (8006770 <osKernelStart+0x48>)
 8006750:	2202      	movs	r2, #2
 8006752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006754:	f002 f812 	bl	800877c <vTaskStartScheduler>
      stat = osOK;
 8006758:	2300      	movs	r3, #0
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e002      	b.n	8006764 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006764:	687b      	ldr	r3, [r7, #4]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200009c4 	.word	0x200009c4

08006774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	@ 0x38
 8006778:	af04      	add	r7, sp, #16
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006784:	f3ef 8305 	mrs	r3, IPSR
 8006788:	617b      	str	r3, [r7, #20]
  return(result);
 800678a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800678c:	2b00      	cmp	r3, #0
 800678e:	d17e      	bne.n	800688e <osThreadNew+0x11a>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d07b      	beq.n	800688e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006796:	2380      	movs	r3, #128	@ 0x80
 8006798:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800679a:	2318      	movs	r3, #24
 800679c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80067a2:	f04f 33ff 	mov.w	r3, #4294967295
 80067a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d045      	beq.n	800683a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <osThreadNew+0x48>
        name = attr->name;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <osThreadNew+0x6e>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b38      	cmp	r3, #56	@ 0x38
 80067d4:	d805      	bhi.n	80067e2 <osThreadNew+0x6e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <osThreadNew+0x72>
        return (NULL);
 80067e2:	2300      	movs	r3, #0
 80067e4:	e054      	b.n	8006890 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00e      	beq.n	800681c <osThreadNew+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2ba7      	cmp	r3, #167	@ 0xa7
 8006804:	d90a      	bls.n	800681c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <osThreadNew+0xa8>
        mem = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e010      	b.n	800683e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10c      	bne.n	800683e <osThreadNew+0xca>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <osThreadNew+0xca>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <osThreadNew+0xca>
          mem = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e001      	b.n	800683e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d110      	bne.n	8006866 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800684c:	9202      	str	r2, [sp, #8]
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6a3a      	ldr	r2, [r7, #32]
 8006858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f001 fc30 	bl	80080c0 <xTaskCreateStatic>
 8006860:	4603      	mov	r3, r0
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	e013      	b.n	800688e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d110      	bne.n	800688e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f107 0310 	add.w	r3, r7, #16
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f001 fc7e 	bl	8008180 <xTaskCreate>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d001      	beq.n	800688e <osThreadNew+0x11a>
            hTask = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800688e:	693b      	ldr	r3, [r7, #16]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	@ 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a0:	f3ef 8305 	mrs	r3, IPSR
 80068a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80068a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <osDelay+0x1c>
    stat = osErrorISR;
 80068ac:	f06f 0305 	mvn.w	r3, #5
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e007      	b.n	80068c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 feb0 	bl	8008624 <vTaskDelay>
    }
  }

  return (stat);
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b088      	sub	sp, #32
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068da:	f3ef 8305 	mrs	r3, IPSR
 80068de:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d174      	bne.n	80069d0 <osMutexNew+0x102>
    if (attr != NULL) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e001      	b.n	80068f8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <osMutexNew+0x3a>
      rmtx = 1U;
 8006902:	2301      	movs	r3, #1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e001      	b.n	800690c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d15c      	bne.n	80069d0 <osMutexNew+0x102>
      mem = -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
 800691a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d015      	beq.n	800694e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d006      	beq.n	8006938 <osMutexNew+0x6a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006930:	d902      	bls.n	8006938 <osMutexNew+0x6a>
          mem = 1;
 8006932:	2301      	movs	r3, #1
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	e00c      	b.n	8006952 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d108      	bne.n	8006952 <osMutexNew+0x84>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <osMutexNew+0x84>
            mem = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	e001      	b.n	8006952 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d112      	bne.n	800697e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	4619      	mov	r1, r3
 8006964:	2004      	movs	r0, #4
 8006966:	f000 fc3e 	bl	80071e6 <xQueueCreateMutexStatic>
 800696a:	61f8      	str	r0, [r7, #28]
 800696c:	e016      	b.n	800699c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	4619      	mov	r1, r3
 8006974:	2001      	movs	r0, #1
 8006976:	f000 fc36 	bl	80071e6 <xQueueCreateMutexStatic>
 800697a:	61f8      	str	r0, [r7, #28]
 800697c:	e00e      	b.n	800699c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800698a:	2004      	movs	r0, #4
 800698c:	f000 fc13 	bl	80071b6 <xQueueCreateMutex>
 8006990:	61f8      	str	r0, [r7, #28]
 8006992:	e003      	b.n	800699c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006994:	2001      	movs	r0, #1
 8006996:	f000 fc0e 	bl	80071b6 <xQueueCreateMutex>
 800699a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <osMutexNew+0xee>
        if (attr != NULL) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <osMutexNew+0xe2>
          name = attr->name;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e001      	b.n	80069b4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	69f8      	ldr	r0, [r7, #28]
 80069b8:	f001 fafa 	bl	8007fb0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <osMutexNew+0x102>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f023 0301 	bic.w	r3, r3, #1
 80069ea:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f8:	f3ef 8305 	mrs	r3, IPSR
 80069fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80069fe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006a04:	f06f 0305 	mvn.w	r3, #5
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	e02c      	b.n	8006a66 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006a12:	f06f 0303 	mvn.w	r3, #3
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e025      	b.n	8006a66 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d011      	beq.n	8006a44 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6938      	ldr	r0, [r7, #16]
 8006a24:	f000 fc2f 	bl	8007286 <xQueueTakeMutexRecursive>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d01b      	beq.n	8006a66 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006a34:	f06f 0301 	mvn.w	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e014      	b.n	8006a66 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006a3c:	f06f 0302 	mvn.w	r3, #2
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e010      	b.n	8006a66 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f000 ffd4 	bl	80079f4 <xQueueSemaphoreTake>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d009      	beq.n	8006a66 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006a58:	f06f 0301 	mvn.w	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e002      	b.n	8006a66 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006a60:	f06f 0302 	mvn.w	r3, #2
 8006a64:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a8c:	f3ef 8305 	mrs	r3, IPSR
 8006a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a92:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006a98:	f06f 0305 	mvn.w	r3, #5
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e01f      	b.n	8006ae0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006aa6:	f06f 0303 	mvn.w	r3, #3
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e018      	b.n	8006ae0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f000 fbb1 	bl	800721c <xQueueGiveMutexRecursive>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d00f      	beq.n	8006ae0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006ac0:	f06f 0302 	mvn.w	r3, #2
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e00b      	b.n	8006ae0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	6938      	ldr	r0, [r7, #16]
 8006ad0:	f000 fc7e 	bl	80073d0 <xQueueGenericSend>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d002      	beq.n	8006ae0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006ada:	f06f 0302 	mvn.w	r3, #2
 8006ade:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b08a      	sub	sp, #40	@ 0x28
 8006aee:	af02      	add	r7, sp, #8
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afa:	f3ef 8305 	mrs	r3, IPSR
 8006afe:	613b      	str	r3, [r7, #16]
  return(result);
 8006b00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d175      	bne.n	8006bf2 <osSemaphoreNew+0x108>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d072      	beq.n	8006bf2 <osSemaphoreNew+0x108>
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d86e      	bhi.n	8006bf2 <osSemaphoreNew+0x108>
    mem = -1;
 8006b14:	f04f 33ff 	mov.w	r3, #4294967295
 8006b18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d015      	beq.n	8006b4c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <osSemaphoreNew+0x4c>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b2e:	d902      	bls.n	8006b36 <osSemaphoreNew+0x4c>
        mem = 1;
 8006b30:	2301      	movs	r3, #1
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	e00c      	b.n	8006b50 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d108      	bne.n	8006b50 <osSemaphoreNew+0x66>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <osSemaphoreNew+0x66>
          mem = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	e001      	b.n	8006b50 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d04c      	beq.n	8006bf2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d128      	bne.n	8006bb0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d10a      	bne.n	8006b7a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	9200      	str	r2, [sp, #0]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	2001      	movs	r0, #1
 8006b72:	f000 fa2b 	bl	8006fcc <xQueueGenericCreateStatic>
 8006b76:	61f8      	str	r0, [r7, #28]
 8006b78:	e005      	b.n	8006b86 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	2001      	movs	r0, #1
 8006b80:	f000 faa1 	bl	80070c6 <xQueueGenericCreate>
 8006b84:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d022      	beq.n	8006bd2 <osSemaphoreNew+0xe8>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01f      	beq.n	8006bd2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b92:	2300      	movs	r3, #0
 8006b94:	2200      	movs	r2, #0
 8006b96:	2100      	movs	r1, #0
 8006b98:	69f8      	ldr	r0, [r7, #28]
 8006b9a:	f000 fc19 	bl	80073d0 <xQueueGenericSend>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d016      	beq.n	8006bd2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006ba4:	69f8      	ldr	r0, [r7, #28]
 8006ba6:	f001 f8b7 	bl	8007d18 <vQueueDelete>
            hSemaphore = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	e010      	b.n	8006bd2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d108      	bne.n	8006bc8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fb98 	bl	80072f4 <xQueueCreateCountingSemaphoreStatic>
 8006bc4:	61f8      	str	r0, [r7, #28]
 8006bc6:	e004      	b.n	8006bd2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fbcb 	bl	8007366 <xQueueCreateCountingSemaphore>
 8006bd0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00c      	beq.n	8006bf2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e001      	b.n	8006bea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	69f8      	ldr	r0, [r7, #28]
 8006bee:	f001 f9df 	bl	8007fb0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3720      	adds	r7, #32
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006c14:	f06f 0303 	mvn.w	r3, #3
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e039      	b.n	8006c90 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c1c:	f3ef 8305 	mrs	r3, IPSR
 8006c20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c22:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d022      	beq.n	8006c6e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006c2e:	f06f 0303 	mvn.w	r3, #3
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	e02c      	b.n	8006c90 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c3a:	f107 0308 	add.w	r3, r7, #8
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2100      	movs	r1, #0
 8006c42:	6938      	ldr	r0, [r7, #16]
 8006c44:	f000 ffe6 	bl	8007c14 <xQueueReceiveFromISR>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d003      	beq.n	8006c56 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006c4e:	f06f 0302 	mvn.w	r3, #2
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e01c      	b.n	8006c90 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d019      	beq.n	8006c90 <osSemaphoreAcquire+0x94>
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <osSemaphoreAcquire+0xa0>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	e010      	b.n	8006c90 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f000 febf 	bl	80079f4 <xQueueSemaphoreTake>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d009      	beq.n	8006c90 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006c82:	f06f 0301 	mvn.w	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e002      	b.n	8006c90 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006c8a:	f06f 0302 	mvn.w	r3, #2
 8006c8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c90:	697b      	ldr	r3, [r7, #20]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006cb6:	f06f 0303 	mvn.w	r3, #3
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e02c      	b.n	8006d18 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cbe:	f3ef 8305 	mrs	r3, IPSR
 8006cc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01a      	beq.n	8006d00 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6938      	ldr	r0, [r7, #16]
 8006cd6:	f000 fd1b 	bl	8007710 <xQueueGiveFromISR>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d003      	beq.n	8006ce8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006ce0:	f06f 0302 	mvn.w	r3, #2
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e017      	b.n	8006d18 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <osSemaphoreRelease+0x78>
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <osSemaphoreRelease+0x84>)
 8006cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	e00b      	b.n	8006d18 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d00:	2300      	movs	r3, #0
 8006d02:	2200      	movs	r2, #0
 8006d04:	2100      	movs	r1, #0
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f000 fb62 	bl	80073d0 <xQueueGenericSend>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d002      	beq.n	8006d18 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006d12:	f06f 0302 	mvn.w	r3, #2
 8006d16:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006d18:	697b      	ldr	r3, [r7, #20]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a07      	ldr	r2, [pc, #28]	@ (8006d54 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a06      	ldr	r2, [pc, #24]	@ (8006d58 <vApplicationGetIdleTaskMemory+0x30>)
 8006d3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2280      	movs	r2, #128	@ 0x80
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	200009c8 	.word	0x200009c8
 8006d58:	20000a70 	.word	0x20000a70

08006d5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4a07      	ldr	r2, [pc, #28]	@ (8006d88 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	4a06      	ldr	r2, [pc, #24]	@ (8006d8c <vApplicationGetTimerTaskMemory+0x30>)
 8006d72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d7a:	601a      	str	r2, [r3, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000c70 	.word	0x20000c70
 8006d8c:	20000d18 	.word	0x20000d18

08006d90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f103 0208 	add.w	r2, r3, #8
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295
 8006da8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f103 0208 	add.w	r2, r3, #8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f103 0208 	add.w	r2, r3, #8
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
}
 8006e26:	bf00      	nop
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e00c      	b.n	8006e6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3308      	adds	r3, #8
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e002      	b.n	8006e60 <vListInsert+0x2e>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d2f6      	bcs.n	8006e5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6892      	ldr	r2, [r2, #8]
 8006eba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6852      	ldr	r2, [r2, #4]
 8006ec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d103      	bne.n	8006ed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	1e5a      	subs	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10b      	bne.n	8006f24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f1e:	bf00      	nop
 8006f20:	bf00      	nop
 8006f22:	e7fd      	b.n	8006f20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f24:	f002 ff08 	bl	8009d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	68f9      	ldr	r1, [r7, #12]
 8006f32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f54:	3b01      	subs	r3, #1
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f5a:	fb01 f303 	mul.w	r3, r1, r3
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	22ff      	movs	r2, #255	@ 0xff
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	22ff      	movs	r2, #255	@ 0xff
 8006f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d114      	bne.n	8006fa4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01a      	beq.n	8006fb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3310      	adds	r3, #16
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 fe96 	bl	8008cb8 <xTaskRemoveFromEventList>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d012      	beq.n	8006fb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f92:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc8 <xQueueGenericReset+0xd0>)
 8006f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	e009      	b.n	8006fb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fef1 	bl	8006d90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3324      	adds	r3, #36	@ 0x24
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff feec 	bl	8006d90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fb8:	f002 fef0 	bl	8009d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fbc:	2301      	movs	r3, #1
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08e      	sub	sp, #56	@ 0x38
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <xQueueGenericCreateStatic+0x56>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <xQueueGenericCreateStatic+0x5a>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericCreateStatic+0x5c>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	623b      	str	r3, [r7, #32]
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	e7fd      	b.n	8007040 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d102      	bne.n	8007050 <xQueueGenericCreateStatic+0x84>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <xQueueGenericCreateStatic+0x88>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <xQueueGenericCreateStatic+0x8a>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	61fb      	str	r3, [r7, #28]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007072:	2350      	movs	r3, #80	@ 0x50
 8007074:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b50      	cmp	r3, #80	@ 0x50
 800707a:	d00b      	beq.n	8007094 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	61bb      	str	r3, [r7, #24]
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007094:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f840 	bl	800713c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80070be:	4618      	mov	r0, r3
 80070c0:	3730      	adds	r7, #48	@ 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b08a      	sub	sp, #40	@ 0x28
 80070ca:	af02      	add	r7, sp, #8
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	4613      	mov	r3, r2
 80070d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	613b      	str	r3, [r7, #16]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3350      	adds	r3, #80	@ 0x50
 8007100:	4618      	mov	r0, r3
 8007102:	f002 ff3b 	bl	8009f7c <pvPortMalloc>
 8007106:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d011      	beq.n	8007132 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	3350      	adds	r3, #80	@ 0x50
 8007116:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007120:	79fa      	ldrb	r2, [r7, #7]
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4613      	mov	r3, r2
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f805 	bl	800713c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007132:	69bb      	ldr	r3, [r7, #24]
	}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e002      	b.n	800715e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800716a:	2101      	movs	r1, #1
 800716c:	69b8      	ldr	r0, [r7, #24]
 800716e:	f7ff fec3 	bl	8006ef8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	78fa      	ldrb	r2, [r7, #3]
 8007176:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071a2:	2300      	movs	r3, #0
 80071a4:	2200      	movs	r2, #0
 80071a6:	2100      	movs	r1, #0
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f911 	bl	80073d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b086      	sub	sp, #24
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	4603      	mov	r3, r0
 80071be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6939      	ldr	r1, [r7, #16]
 80071ce:	6978      	ldr	r0, [r7, #20]
 80071d0:	f7ff ff79 	bl	80070c6 <xQueueGenericCreate>
 80071d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff ffd3 	bl	8007182 <prvInitialiseMutex>

		return xNewQueue;
 80071dc:	68fb      	ldr	r3, [r7, #12]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b088      	sub	sp, #32
 80071ea:	af02      	add	r7, sp, #8
 80071ec:	4603      	mov	r3, r0
 80071ee:	6039      	str	r1, [r7, #0]
 80071f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071f2:	2301      	movs	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2200      	movs	r2, #0
 8007202:	6939      	ldr	r1, [r7, #16]
 8007204:	6978      	ldr	r0, [r7, #20]
 8007206:	f7ff fee1 	bl	8006fcc <xQueueGenericCreateStatic>
 800720a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff ffb8 	bl	8007182 <prvInitialiseMutex>

		return xNewQueue;
 8007212:	68fb      	ldr	r3, [r7, #12]
	}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	60fb      	str	r3, [r7, #12]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	689c      	ldr	r4, [r3, #8]
 800724a:	f001 fefb 	bl	8009044 <xTaskGetCurrentTaskHandle>
 800724e:	4603      	mov	r3, r0
 8007250:	429c      	cmp	r4, r3
 8007252:	d111      	bne.n	8007278 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	1e5a      	subs	r2, r3, #1
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007266:	2300      	movs	r3, #0
 8007268:	2200      	movs	r2, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6938      	ldr	r0, [r7, #16]
 800726e:	f000 f8af 	bl	80073d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007272:	2301      	movs	r3, #1
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e001      	b.n	800727c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800727c:	697b      	ldr	r3, [r7, #20]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}

08007286 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007286:	b590      	push	{r4, r7, lr}
 8007288:	b087      	sub	sp, #28
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	60fb      	str	r3, [r7, #12]
}
 80072ac:	bf00      	nop
 80072ae:	bf00      	nop
 80072b0:	e7fd      	b.n	80072ae <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	689c      	ldr	r4, [r3, #8]
 80072b6:	f001 fec5 	bl	8009044 <xTaskGetCurrentTaskHandle>
 80072ba:	4603      	mov	r3, r0
 80072bc:	429c      	cmp	r4, r3
 80072be:	d107      	bne.n	80072d0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e00c      	b.n	80072ea <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6938      	ldr	r0, [r7, #16]
 80072d4:	f000 fb8e 	bl	80079f4 <xQueueSemaphoreTake>
 80072d8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80072ea:	697b      	ldr	r3, [r7, #20]
	}
 80072ec:	4618      	mov	r0, r3
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}

080072f4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	@ 0x28
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	61bb      	str	r3, [r7, #24]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90b      	bls.n	800733e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	617b      	str	r3, [r7, #20]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800733e:	2302      	movs	r3, #2
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff fe3f 	bl	8006fcc <xQueueGenericCreateStatic>
 800734e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800735c:	69fb      	ldr	r3, [r7, #28]
	}
 800735e:	4618      	mov	r0, r3
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10b      	bne.n	800738e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	613b      	str	r3, [r7, #16]
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d90b      	bls.n	80073ae <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60fb      	str	r3, [r7, #12]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80073ae:	2202      	movs	r2, #2
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff fe87 	bl	80070c6 <xQueueGenericCreate>
 80073b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80073c6:	697b      	ldr	r3, [r7, #20]
	}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	@ 0x38
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <xQueueGenericSend+0x34>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	e7fd      	b.n	8007400 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d103      	bne.n	8007412 <xQueueGenericSend+0x42>
 800740a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <xQueueGenericSend+0x46>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <xQueueGenericSend+0x48>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <xQueueGenericSend+0x64>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d103      	bne.n	8007442 <xQueueGenericSend+0x72>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <xQueueGenericSend+0x76>
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <xQueueGenericSend+0x78>
 8007446:	2300      	movs	r3, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <xQueueGenericSend+0x94>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	623b      	str	r3, [r7, #32]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007464:	f001 fdfe 	bl	8009064 <xTaskGetSchedulerState>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <xQueueGenericSend+0xa4>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGenericSend+0xa8>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGenericSend+0xaa>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <xQueueGenericSend+0xc6>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	61fb      	str	r3, [r7, #28]
}
 8007490:	bf00      	nop
 8007492:	bf00      	nop
 8007494:	e7fd      	b.n	8007492 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007496:	f002 fc4f 	bl	8009d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d302      	bcc.n	80074ac <xQueueGenericSend+0xdc>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d129      	bne.n	8007500 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b2:	f000 fc6d 	bl	8007d90 <prvCopyDataToQueue>
 80074b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d010      	beq.n	80074e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	3324      	adds	r3, #36	@ 0x24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fbf7 	bl	8008cb8 <xTaskRemoveFromEventList>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d013      	beq.n	80074f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074d0:	4b3f      	ldr	r3, [pc, #252]	@ (80075d0 <xQueueGenericSend+0x200>)
 80074d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	e00a      	b.n	80074f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074e8:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <xQueueGenericSend+0x200>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074f8:	f002 fc50 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e063      	b.n	80075c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007506:	f002 fc49 	bl	8009d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800750a:	2300      	movs	r3, #0
 800750c:	e05c      	b.n	80075c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007514:	f107 0314 	add.w	r3, r7, #20
 8007518:	4618      	mov	r0, r3
 800751a:	f001 fc31 	bl	8008d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007522:	f002 fc3b 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007526:	f001 f999 	bl	800885c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800752a:	f002 fc05 	bl	8009d38 <vPortEnterCritical>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007534:	b25b      	sxtb	r3, r3
 8007536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753a:	d103      	bne.n	8007544 <xQueueGenericSend+0x174>
 800753c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800754a:	b25b      	sxtb	r3, r3
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d103      	bne.n	800755a <xQueueGenericSend+0x18a>
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800755a:	f002 fc1f 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800755e:	1d3a      	adds	r2, r7, #4
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f001 fc20 	bl	8008dac <xTaskCheckForTimeOut>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d124      	bne.n	80075bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007574:	f000 fd04 	bl	8007f80 <prvIsQueueFull>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d018      	beq.n	80075b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	3310      	adds	r3, #16
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fb44 	bl	8008c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800758c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800758e:	f000 fc8f 	bl	8007eb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007592:	f001 f971 	bl	8008878 <xTaskResumeAll>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f47f af7c 	bne.w	8007496 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800759e:	4b0c      	ldr	r3, [pc, #48]	@ (80075d0 <xQueueGenericSend+0x200>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	e772      	b.n	8007496 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075b2:	f000 fc7d 	bl	8007eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075b6:	f001 f95f 	bl	8008878 <xTaskResumeAll>
 80075ba:	e76c      	b.n	8007496 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075be:	f000 fc77 	bl	8007eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c2:	f001 f959 	bl	8008878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3738      	adds	r7, #56	@ 0x38
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b090      	sub	sp, #64	@ 0x40
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <xQueueGenericSendFromISR+0x3e>
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <xQueueGenericSendFromISR+0x42>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <xQueueGenericSendFromISR+0x44>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d103      	bne.n	8007642 <xQueueGenericSendFromISR+0x6e>
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <xQueueGenericSendFromISR+0x72>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericSendFromISR+0x74>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007664:	f002 fc48 	bl	8009ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007668:	f3ef 8211 	mrs	r2, BASEPRI
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	61fa      	str	r2, [r7, #28]
 800767e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007680:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007686:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <xQueueGenericSendFromISR+0xc2>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d12f      	bne.n	80076f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800769c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076ac:	f000 fb70 	bl	8007d90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d112      	bne.n	80076e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d016      	beq.n	80076f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c4:	3324      	adds	r3, #36	@ 0x24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f001 faf6 	bl	8008cb8 <xTaskRemoveFromEventList>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e007      	b.n	80076f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076e4:	3301      	adds	r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	b25a      	sxtb	r2, r3
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80076f0:	2301      	movs	r3, #1
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80076f4:	e001      	b.n	80076fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007704:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007708:	4618      	mov	r0, r3
 800770a:	3740      	adds	r7, #64	@ 0x40
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08e      	sub	sp, #56	@ 0x38
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	623b      	str	r3, [r7, #32]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	61fb      	str	r3, [r7, #28]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d103      	bne.n	800776c <xQueueGiveFromISR+0x5c>
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <xQueueGiveFromISR+0x60>
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <xQueueGiveFromISR+0x62>
 8007770:	2300      	movs	r3, #0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	61bb      	str	r3, [r7, #24]
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	e7fd      	b.n	800778a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800778e:	f002 fbb3 	bl	8009ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8007792:	f3ef 8211 	mrs	r2, BASEPRI
 8007796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	617a      	str	r2, [r7, #20]
 80077a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d22b      	bcs.n	8007816 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d112      	bne.n	8007800 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	3324      	adds	r3, #36	@ 0x24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fa66 	bl	8008cb8 <xTaskRemoveFromEventList>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e007      	b.n	8007810 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007804:	3301      	adds	r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	b25a      	sxtb	r2, r3
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007810:	2301      	movs	r3, #1
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
 8007814:	e001      	b.n	800781a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007816:	2300      	movs	r3, #0
 8007818:	637b      	str	r3, [r7, #52]	@ 0x34
 800781a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f383 8811 	msr	BASEPRI, r3
}
 8007824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007828:	4618      	mov	r0, r3
 800782a:	3738      	adds	r7, #56	@ 0x38
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08c      	sub	sp, #48	@ 0x30
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <xQueueReceive+0x32>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	623b      	str	r3, [r7, #32]
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	e7fd      	b.n	800785e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <xQueueReceive+0x40>
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <xQueueReceive+0x44>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <xQueueReceive+0x46>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <xQueueReceive+0x62>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	61fb      	str	r3, [r7, #28]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007892:	f001 fbe7 	bl	8009064 <xTaskGetSchedulerState>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <xQueueReceive+0x72>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <xQueueReceive+0x76>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <xQueueReceive+0x78>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10b      	bne.n	80078c4 <xQueueReceive+0x94>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	61bb      	str	r3, [r7, #24]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078c4:	f002 fa38 	bl	8009d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01f      	beq.n	8007914 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d8:	f000 fac4 	bl	8007e64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	1e5a      	subs	r2, r3, #1
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00f      	beq.n	800790c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	3310      	adds	r3, #16
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 f9e1 	bl	8008cb8 <xTaskRemoveFromEventList>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078fc:	4b3c      	ldr	r3, [pc, #240]	@ (80079f0 <xQueueReceive+0x1c0>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800790c:	f002 fa46 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 8007910:	2301      	movs	r3, #1
 8007912:	e069      	b.n	80079e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800791a:	f002 fa3f 	bl	8009d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800791e:	2300      	movs	r3, #0
 8007920:	e062      	b.n	80079e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	4618      	mov	r0, r3
 800792e:	f001 fa27 	bl	8008d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007932:	2301      	movs	r3, #1
 8007934:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007936:	f002 fa31 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800793a:	f000 ff8f 	bl	800885c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800793e:	f002 f9fb 	bl	8009d38 <vPortEnterCritical>
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007948:	b25b      	sxtb	r3, r3
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d103      	bne.n	8007958 <xQueueReceive+0x128>
 8007950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800795e:	b25b      	sxtb	r3, r3
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d103      	bne.n	800796e <xQueueReceive+0x13e>
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800796e:	f002 fa15 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007972:	1d3a      	adds	r2, r7, #4
 8007974:	f107 0310 	add.w	r3, r7, #16
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f001 fa16 	bl	8008dac <xTaskCheckForTimeOut>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d123      	bne.n	80079ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007988:	f000 fae4 	bl	8007f54 <prvIsQueueEmpty>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d017      	beq.n	80079c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	3324      	adds	r3, #36	@ 0x24
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f001 f93a 	bl	8008c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a2:	f000 fa85 	bl	8007eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079a6:	f000 ff67 	bl	8008878 <xTaskResumeAll>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d189      	bne.n	80078c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80079b0:	4b0f      	ldr	r3, [pc, #60]	@ (80079f0 <xQueueReceive+0x1c0>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	e780      	b.n	80078c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c4:	f000 fa74 	bl	8007eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079c8:	f000 ff56 	bl	8008878 <xTaskResumeAll>
 80079cc:	e77a      	b.n	80078c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079d0:	f000 fa6e 	bl	8007eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079d4:	f000 ff50 	bl	8008878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079da:	f000 fabb 	bl	8007f54 <prvIsQueueEmpty>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f43f af6f 	beq.w	80078c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3730      	adds	r7, #48	@ 0x30
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08e      	sub	sp, #56	@ 0x38
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	623b      	str	r3, [r7, #32]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	61fb      	str	r3, [r7, #28]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a48:	f001 fb0c 	bl	8009064 <xTaskGetSchedulerState>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d102      	bne.n	8007a58 <xQueueSemaphoreTake+0x64>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <xQueueSemaphoreTake+0x68>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <xQueueSemaphoreTake+0x6a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61bb      	str	r3, [r7, #24]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a7a:	f002 f95d 	bl	8009d38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d024      	beq.n	8007ad4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d104      	bne.n	8007aa4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a9a:	f001 fc5d 	bl	8009358 <pvTaskIncrementMutexHeldCount>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aae:	3310      	adds	r3, #16
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 f901 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007abc:	4b54      	ldr	r3, [pc, #336]	@ (8007c10 <xQueueSemaphoreTake+0x21c>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007acc:	f002 f966 	bl	8009d9c <vPortExitCritical>
				return pdPASS;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e098      	b.n	8007c06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d112      	bne.n	8007b00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	617b      	str	r3, [r7, #20]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007af8:	f002 f950 	bl	8009d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e082      	b.n	8007c06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b06:	f107 030c 	add.w	r3, r7, #12
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f938 	bl	8008d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b14:	f002 f942 	bl	8009d9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b18:	f000 fea0 	bl	800885c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b1c:	f002 f90c 	bl	8009d38 <vPortEnterCritical>
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d103      	bne.n	8007b36 <xQueueSemaphoreTake+0x142>
 8007b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b3c:	b25b      	sxtb	r3, r3
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d103      	bne.n	8007b4c <xQueueSemaphoreTake+0x158>
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b4c:	f002 f926 	bl	8009d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b50:	463a      	mov	r2, r7
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	4611      	mov	r1, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 f927 	bl	8008dac <xTaskCheckForTimeOut>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d132      	bne.n	8007bca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b66:	f000 f9f5 	bl	8007f54 <prvIsQueueEmpty>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d026      	beq.n	8007bbe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007b78:	f002 f8de 	bl	8009d38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 fa8d 	bl	80090a0 <xTaskPriorityInherit>
 8007b86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007b88:	f002 f908 	bl	8009d9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8e:	3324      	adds	r3, #36	@ 0x24
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 f83d 	bl	8008c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b9c:	f000 f988 	bl	8007eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ba0:	f000 fe6a 	bl	8008878 <xTaskResumeAll>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f47f af67 	bne.w	8007a7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007bac:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <xQueueSemaphoreTake+0x21c>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	e75d      	b.n	8007a7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007bbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bc0:	f000 f976 	bl	8007eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bc4:	f000 fe58 	bl	8008878 <xTaskResumeAll>
 8007bc8:	e757      	b.n	8007a7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007bca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bcc:	f000 f970 	bl	8007eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bd0:	f000 fe52 	bl	8008878 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bd6:	f000 f9bd 	bl	8007f54 <prvIsQueueEmpty>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f43f af4c 	beq.w	8007a7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00d      	beq.n	8007c04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007be8:	f002 f8a6 	bl	8009d38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007bec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bee:	f000 f8b7 	bl	8007d60 <prvGetDisinheritPriorityAfterTimeout>
 8007bf2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 fb28 	bl	8009250 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c00:	f002 f8cc 	bl	8009d9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3738      	adds	r7, #56	@ 0x38
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	@ 0x38
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10b      	bne.n	8007c42 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	623b      	str	r3, [r7, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	bf00      	nop
 8007c40:	e7fd      	b.n	8007c3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d103      	bne.n	8007c50 <xQueueReceiveFromISR+0x3c>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <xQueueReceiveFromISR+0x40>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <xQueueReceiveFromISR+0x42>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	61fb      	str	r3, [r7, #28]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c72:	f002 f941 	bl	8009ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8007c76:	f3ef 8211 	mrs	r2, BASEPRI
 8007c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	61ba      	str	r2, [r7, #24]
 8007c8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02f      	beq.n	8007cfe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007cac:	f000 f8da 	bl	8007e64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	1e5a      	subs	r2, r3, #1
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc0:	d112      	bne.n	8007ce8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ccc:	3310      	adds	r3, #16
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fff2 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00e      	beq.n	8007cf8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e007      	b.n	8007cf8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cec:	3301      	adds	r3, #1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	b25a      	sxtb	r2, r3
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cfc:	e001      	b.n	8007d02 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f383 8811 	msr	BASEPRI, r3
}
 8007d0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3738      	adds	r7, #56	@ 0x38
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <vQueueDelete+0x2a>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60bb      	str	r3, [r7, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f95e 	bl	8008004 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d102      	bne.n	8007d58 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f002 f9e0 	bl	800a118 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d006      	beq.n	8007d7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e001      	b.n	8007d82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d82:	68fb      	ldr	r3, [r7, #12]
	}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10d      	bne.n	8007dca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d14d      	bne.n	8007e52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 f9d8 	bl	8009170 <xTaskPriorityDisinherit>
 8007dc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	609a      	str	r2, [r3, #8]
 8007dc8:	e043      	b.n	8007e52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d119      	bne.n	8007e04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6858      	ldr	r0, [r3, #4]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd8:	461a      	mov	r2, r3
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	f003 f911 	bl	800b002 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de8:	441a      	add	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d32b      	bcc.n	8007e52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	e026      	b.n	8007e52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68d8      	ldr	r0, [r3, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68b9      	ldr	r1, [r7, #8]
 8007e10:	f003 f8f7 	bl	800b002 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	441a      	add	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d207      	bcs.n	8007e40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e38:	425b      	negs	r3, r3
 8007e3a:	441a      	add	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d105      	bne.n	8007e52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e5a:	697b      	ldr	r3, [r7, #20]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d018      	beq.n	8007ea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	441a      	add	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d303      	bcc.n	8007e98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68d9      	ldr	r1, [r3, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6838      	ldr	r0, [r7, #0]
 8007ea4:	f003 f8ad 	bl	800b002 <memcpy>
	}
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007eb8:	f001 ff3e 	bl	8009d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec4:	e011      	b.n	8007eea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d012      	beq.n	8007ef4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3324      	adds	r3, #36	@ 0x24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fef0 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ede:	f000 ffc9 	bl	8008e74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dce9      	bgt.n	8007ec6 <prvUnlockQueue+0x16>
 8007ef2:	e000      	b.n	8007ef6 <prvUnlockQueue+0x46>
					break;
 8007ef4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	22ff      	movs	r2, #255	@ 0xff
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007efe:	f001 ff4d 	bl	8009d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f02:	f001 ff19 	bl	8009d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f0e:	e011      	b.n	8007f34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3310      	adds	r3, #16
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fecb 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f28:	f000 ffa4 	bl	8008e74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	dce9      	bgt.n	8007f10 <prvUnlockQueue+0x60>
 8007f3c:	e000      	b.n	8007f40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	22ff      	movs	r2, #255	@ 0xff
 8007f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f48:	f001 ff28 	bl	8009d9c <vPortExitCritical>
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f5c:	f001 feec 	bl	8009d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d102      	bne.n	8007f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	e001      	b.n	8007f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f72:	f001 ff13 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f88:	f001 fed6 	bl	8009d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d102      	bne.n	8007f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e001      	b.n	8007fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa2:	f001 fefb 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e014      	b.n	8007fea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8008000 <vQueueAddToRegistry+0x50>)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10b      	bne.n	8007fe4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fcc:	490c      	ldr	r1, [pc, #48]	@ (8008000 <vQueueAddToRegistry+0x50>)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8008000 <vQueueAddToRegistry+0x50>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4413      	add	r3, r2
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fe2:	e006      	b.n	8007ff2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b07      	cmp	r3, #7
 8007fee:	d9e7      	bls.n	8007fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3714      	adds	r7, #20
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20001118 	.word	0x20001118

08008004 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e016      	b.n	8008040 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008012:	4a10      	ldr	r2, [pc, #64]	@ (8008054 <vQueueUnregisterQueue+0x50>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	d10b      	bne.n	800803a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008022:	4a0c      	ldr	r2, [pc, #48]	@ (8008054 <vQueueUnregisterQueue+0x50>)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2100      	movs	r1, #0
 8008028:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800802c:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <vQueueUnregisterQueue+0x50>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4413      	add	r3, r2
 8008034:	2200      	movs	r2, #0
 8008036:	605a      	str	r2, [r3, #4]
				break;
 8008038:	e006      	b.n	8008048 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b07      	cmp	r3, #7
 8008044:	d9e5      	bls.n	8008012 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	20001118 	.word	0x20001118

08008058 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008068:	f001 fe66 	bl	8009d38 <vPortEnterCritical>
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008072:	b25b      	sxtb	r3, r3
 8008074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008078:	d103      	bne.n	8008082 <vQueueWaitForMessageRestricted+0x2a>
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008088:	b25b      	sxtb	r3, r3
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d103      	bne.n	8008098 <vQueueWaitForMessageRestricted+0x40>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008098:	f001 fe80 	bl	8009d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	3324      	adds	r3, #36	@ 0x24
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	68b9      	ldr	r1, [r7, #8]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fdd7 	bl	8008c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7ff fefc 	bl	8007eb0 <prvUnlockQueue>
	}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	@ 0x38
 80080c4:	af04      	add	r7, sp, #16
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10b      	bne.n	80080ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	623b      	str	r3, [r7, #32]
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	e7fd      	b.n	80080e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10b      	bne.n	800810a <xTaskCreateStatic+0x4a>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	61fb      	str	r3, [r7, #28]
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	e7fd      	b.n	8008106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800810a:	23a8      	movs	r3, #168	@ 0xa8
 800810c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2ba8      	cmp	r3, #168	@ 0xa8
 8008112:	d00b      	beq.n	800812c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	61bb      	str	r3, [r7, #24]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800812c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01e      	beq.n	8008172 <xTaskCreateStatic+0xb2>
 8008134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01b      	beq.n	8008172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	2202      	movs	r2, #2
 8008148:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800814c:	2300      	movs	r3, #0
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	f107 0314 	add.w	r3, r7, #20
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f851 	bl	800820c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800816a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800816c:	f000 f8f6 	bl	800835c <prvAddNewTaskToReadyList>
 8008170:	e001      	b.n	8008176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008176:	697b      	ldr	r3, [r7, #20]
	}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	@ 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08c      	sub	sp, #48	@ 0x30
 8008184:	af04      	add	r7, sp, #16
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	4613      	mov	r3, r2
 800818e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008190:	88fb      	ldrh	r3, [r7, #6]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4618      	mov	r0, r3
 8008196:	f001 fef1 	bl	8009f7c <pvPortMalloc>
 800819a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00e      	beq.n	80081c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081a2:	20a8      	movs	r0, #168	@ 0xa8
 80081a4:	f001 feea 	bl	8009f7c <pvPortMalloc>
 80081a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80081b6:	e005      	b.n	80081c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081b8:	6978      	ldr	r0, [r7, #20]
 80081ba:	f001 ffad 	bl	800a118 <vPortFree>
 80081be:	e001      	b.n	80081c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d017      	beq.n	80081fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081d2:	88fa      	ldrh	r2, [r7, #6]
 80081d4:	2300      	movs	r3, #0
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	68b9      	ldr	r1, [r7, #8]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f80f 	bl	800820c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081ee:	69f8      	ldr	r0, [r7, #28]
 80081f0:	f000 f8b4 	bl	800835c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081f4:	2301      	movs	r3, #1
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	e002      	b.n	8008200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081fa:	f04f 33ff 	mov.w	r3, #4294967295
 80081fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008200:	69bb      	ldr	r3, [r7, #24]
	}
 8008202:	4618      	mov	r0, r3
 8008204:	3720      	adds	r7, #32
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	461a      	mov	r2, r3
 8008224:	21a5      	movs	r1, #165	@ 0xa5
 8008226:	f002 fe16 	bl	800ae56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008234:	3b01      	subs	r3, #1
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f023 0307 	bic.w	r3, r3, #7
 8008242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	617b      	str	r3, [r7, #20]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01f      	beq.n	80082ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	e012      	b.n	8008298 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	7819      	ldrb	r1, [r3, #0]
 800827a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	4413      	add	r3, r2
 8008280:	3334      	adds	r3, #52	@ 0x34
 8008282:	460a      	mov	r2, r1
 8008284:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	4413      	add	r3, r2
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d006      	beq.n	80082a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d9e9      	bls.n	8008272 <prvInitialiseNewTask+0x66>
 800829e:	e000      	b.n	80082a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80082a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082aa:	e003      	b.n	80082b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	2b37      	cmp	r3, #55	@ 0x37
 80082b8:	d901      	bls.n	80082be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082ba:	2337      	movs	r3, #55	@ 0x37
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2200      	movs	r2, #0
 80082ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fd7b 	bl	8006dd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	3318      	adds	r3, #24
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd76 	bl	8006dd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008304:	2200      	movs	r2, #0
 8008306:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	3354      	adds	r3, #84	@ 0x54
 800830e:	224c      	movs	r2, #76	@ 0x4c
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f002 fd9f 	bl	800ae56 <memset>
 8008318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831a:	4a0d      	ldr	r2, [pc, #52]	@ (8008350 <prvInitialiseNewTask+0x144>)
 800831c:	659a      	str	r2, [r3, #88]	@ 0x58
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	4a0c      	ldr	r2, [pc, #48]	@ (8008354 <prvInitialiseNewTask+0x148>)
 8008322:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	4a0c      	ldr	r2, [pc, #48]	@ (8008358 <prvInitialiseNewTask+0x14c>)
 8008328:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	69b8      	ldr	r0, [r7, #24]
 8008330:	f001 fbd4 	bl	8009adc <pxPortInitialiseStack>
 8008334:	4602      	mov	r2, r0
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20019e4c 	.word	0x20019e4c
 8008354:	20019eb4 	.word	0x20019eb4
 8008358:	20019f1c 	.word	0x20019f1c

0800835c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008364:	f001 fce8 	bl	8009d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008368:	4b2d      	ldr	r3, [pc, #180]	@ (8008420 <prvAddNewTaskToReadyList+0xc4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	4a2c      	ldr	r2, [pc, #176]	@ (8008420 <prvAddNewTaskToReadyList+0xc4>)
 8008370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008372:	4b2c      	ldr	r3, [pc, #176]	@ (8008424 <prvAddNewTaskToReadyList+0xc8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d109      	bne.n	800838e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800837a:	4a2a      	ldr	r2, [pc, #168]	@ (8008424 <prvAddNewTaskToReadyList+0xc8>)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008380:	4b27      	ldr	r3, [pc, #156]	@ (8008420 <prvAddNewTaskToReadyList+0xc4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d110      	bne.n	80083aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008388:	f000 fd98 	bl	8008ebc <prvInitialiseTaskLists>
 800838c:	e00d      	b.n	80083aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800838e:	4b26      	ldr	r3, [pc, #152]	@ (8008428 <prvAddNewTaskToReadyList+0xcc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008396:	4b23      	ldr	r3, [pc, #140]	@ (8008424 <prvAddNewTaskToReadyList+0xc8>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d802      	bhi.n	80083aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008424 <prvAddNewTaskToReadyList+0xc8>)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083aa:	4b20      	ldr	r3, [pc, #128]	@ (800842c <prvAddNewTaskToReadyList+0xd0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	4a1e      	ldr	r2, [pc, #120]	@ (800842c <prvAddNewTaskToReadyList+0xd0>)
 80083b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083b4:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <prvAddNewTaskToReadyList+0xd0>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <prvAddNewTaskToReadyList+0xd4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d903      	bls.n	80083d0 <prvAddNewTaskToReadyList+0x74>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	4a18      	ldr	r2, [pc, #96]	@ (8008430 <prvAddNewTaskToReadyList+0xd4>)
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4a15      	ldr	r2, [pc, #84]	@ (8008434 <prvAddNewTaskToReadyList+0xd8>)
 80083de:	441a      	add	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3304      	adds	r3, #4
 80083e4:	4619      	mov	r1, r3
 80083e6:	4610      	mov	r0, r2
 80083e8:	f7fe fcff 	bl	8006dea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083ec:	f001 fcd6 	bl	8009d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008428 <prvAddNewTaskToReadyList+0xcc>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <prvAddNewTaskToReadyList+0xc8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008402:	429a      	cmp	r2, r3
 8008404:	d207      	bcs.n	8008416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008406:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <prvAddNewTaskToReadyList+0xdc>)
 8008408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	2000162c 	.word	0x2000162c
 8008424:	20001158 	.word	0x20001158
 8008428:	20001638 	.word	0x20001638
 800842c:	20001648 	.word	0x20001648
 8008430:	20001634 	.word	0x20001634
 8008434:	2000115c 	.word	0x2000115c
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008444:	f001 fc78 	bl	8009d38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d102      	bne.n	8008454 <vTaskDelete+0x18>
 800844e:	4b2d      	ldr	r3, [pc, #180]	@ (8008504 <vTaskDelete+0xc8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	e000      	b.n	8008456 <vTaskDelete+0x1a>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fd21 	bl	8006ea4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3318      	adds	r3, #24
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fd18 	bl	8006ea4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008474:	4b24      	ldr	r3, [pc, #144]	@ (8008508 <vTaskDelete+0xcc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	4a23      	ldr	r2, [pc, #140]	@ (8008508 <vTaskDelete+0xcc>)
 800847c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800847e:	4b21      	ldr	r3, [pc, #132]	@ (8008504 <vTaskDelete+0xc8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	429a      	cmp	r2, r3
 8008486:	d10b      	bne.n	80084a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3304      	adds	r3, #4
 800848c:	4619      	mov	r1, r3
 800848e:	481f      	ldr	r0, [pc, #124]	@ (800850c <vTaskDelete+0xd0>)
 8008490:	f7fe fcab 	bl	8006dea <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008494:	4b1e      	ldr	r3, [pc, #120]	@ (8008510 <vTaskDelete+0xd4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	4a1d      	ldr	r2, [pc, #116]	@ (8008510 <vTaskDelete+0xd4>)
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	e009      	b.n	80084b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80084a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <vTaskDelete+0xd8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <vTaskDelete+0xd8>)
 80084a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fd74 	bl	8008f98 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80084b0:	f000 fda8 	bl	8009004 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80084b4:	f001 fc72 	bl	8009d9c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80084b8:	4b17      	ldr	r3, [pc, #92]	@ (8008518 <vTaskDelete+0xdc>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01c      	beq.n	80084fa <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80084c0:	4b10      	ldr	r3, [pc, #64]	@ (8008504 <vTaskDelete+0xc8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d117      	bne.n	80084fa <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80084ca:	4b14      	ldr	r3, [pc, #80]	@ (800851c <vTaskDelete+0xe0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <vTaskDelete+0xae>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60bb      	str	r3, [r7, #8]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80084ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <vTaskDelete+0xe4>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20001158 	.word	0x20001158
 8008508:	20001648 	.word	0x20001648
 800850c:	20001600 	.word	0x20001600
 8008510:	20001614 	.word	0x20001614
 8008514:	2000162c 	.word	0x2000162c
 8008518:	20001638 	.word	0x20001638
 800851c:	20001654 	.word	0x20001654
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	@ 0x28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <vTaskDelayUntil+0x2c>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	617b      	str	r3, [r7, #20]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <vTaskDelayUntil+0x4a>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	613b      	str	r3, [r7, #16]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800856e:	4b2a      	ldr	r3, [pc, #168]	@ (8008618 <vTaskDelayUntil+0xf4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <vTaskDelayUntil+0x6a>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800858e:	f000 f965 	bl	800885c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008592:	4b22      	ldr	r3, [pc, #136]	@ (800861c <vTaskDelayUntil+0xf8>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	4413      	add	r3, r2
 80085a0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d20b      	bcs.n	80085c4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d211      	bcs.n	80085da <vTaskDelayUntil+0xb6>
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d90d      	bls.n	80085da <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80085be:	2301      	movs	r3, #1
 80085c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c2:	e00a      	b.n	80085da <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d303      	bcc.n	80085d6 <vTaskDelayUntil+0xb2>
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d901      	bls.n	80085da <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80085e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d006      	beq.n	80085f4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80085e6:	69fa      	ldr	r2, [r7, #28]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2100      	movs	r1, #0
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fec6 	bl	8009380 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80085f4:	f000 f940 	bl	8008878 <xTaskResumeAll>
 80085f8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008600:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <vTaskDelayUntil+0xfc>)
 8008602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008610:	bf00      	nop
 8008612:	3728      	adds	r7, #40	@ 0x28
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20001654 	.word	0x20001654
 800861c:	20001630 	.word	0x20001630
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d018      	beq.n	8008668 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008636:	4b14      	ldr	r3, [pc, #80]	@ (8008688 <vTaskDelay+0x64>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00b      	beq.n	8008656 <vTaskDelay+0x32>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60bb      	str	r3, [r7, #8]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008656:	f000 f901 	bl	800885c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fe8f 	bl	8009380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008662:	f000 f909 	bl	8008878 <xTaskResumeAll>
 8008666:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800866e:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vTaskDelay+0x68>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20001654 	.word	0x20001654
 800868c:	e000ed04 	.word	0xe000ed04

08008690 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008698:	f001 fb4e 	bl	8009d38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d102      	bne.n	80086a8 <vTaskSuspend+0x18>
 80086a2:	4b30      	ldr	r3, [pc, #192]	@ (8008764 <vTaskSuspend+0xd4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	e000      	b.n	80086aa <vTaskSuspend+0x1a>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fbf7 	bl	8006ea4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d004      	beq.n	80086c8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3318      	adds	r3, #24
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fbee 	bl	8006ea4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4826      	ldr	r0, [pc, #152]	@ (8008768 <vTaskSuspend+0xd8>)
 80086d0:	f7fe fb8b 	bl	8006dea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d103      	bne.n	80086e8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80086e8:	f001 fb58 	bl	8009d9c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80086ec:	4b1f      	ldr	r3, [pc, #124]	@ (800876c <vTaskSuspend+0xdc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80086f4:	f001 fb20 	bl	8009d38 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80086f8:	f000 fc84 	bl	8009004 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80086fc:	f001 fb4e 	bl	8009d9c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8008700:	4b18      	ldr	r3, [pc, #96]	@ (8008764 <vTaskSuspend+0xd4>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	429a      	cmp	r2, r3
 8008708:	d128      	bne.n	800875c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800870a:	4b18      	ldr	r3, [pc, #96]	@ (800876c <vTaskSuspend+0xdc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d018      	beq.n	8008744 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8008712:	4b17      	ldr	r3, [pc, #92]	@ (8008770 <vTaskSuspend+0xe0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00b      	beq.n	8008732 <vTaskSuspend+0xa2>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	60bb      	str	r3, [r7, #8]
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	e7fd      	b.n	800872e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8008732:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <vTaskSuspend+0xe4>)
 8008734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008742:	e00b      	b.n	800875c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8008744:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <vTaskSuspend+0xd8>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b0b      	ldr	r3, [pc, #44]	@ (8008778 <vTaskSuspend+0xe8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d103      	bne.n	8008758 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <vTaskSuspend+0xd4>)
 8008752:	2200      	movs	r2, #0
 8008754:	601a      	str	r2, [r3, #0]
	}
 8008756:	e001      	b.n	800875c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8008758:	f000 f9f6 	bl	8008b48 <vTaskSwitchContext>
	}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20001158 	.word	0x20001158
 8008768:	20001618 	.word	0x20001618
 800876c:	20001638 	.word	0x20001638
 8008770:	20001654 	.word	0x20001654
 8008774:	e000ed04 	.word	0xe000ed04
 8008778:	2000162c 	.word	0x2000162c

0800877c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	@ 0x28
 8008780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800878a:	463a      	mov	r2, r7
 800878c:	1d39      	adds	r1, r7, #4
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fac8 	bl	8006d28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	9202      	str	r2, [sp, #8]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	460a      	mov	r2, r1
 80087aa:	4924      	ldr	r1, [pc, #144]	@ (800883c <vTaskStartScheduler+0xc0>)
 80087ac:	4824      	ldr	r0, [pc, #144]	@ (8008840 <vTaskStartScheduler+0xc4>)
 80087ae:	f7ff fc87 	bl	80080c0 <xTaskCreateStatic>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4a23      	ldr	r2, [pc, #140]	@ (8008844 <vTaskStartScheduler+0xc8>)
 80087b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087b8:	4b22      	ldr	r3, [pc, #136]	@ (8008844 <vTaskStartScheduler+0xc8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087c0:	2301      	movs	r3, #1
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e001      	b.n	80087ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d102      	bne.n	80087d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80087d0:	f000 fe2a 	bl	8009428 <xTimerCreateTimerTask>
 80087d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d11b      	bne.n	8008814 <vTaskStartScheduler+0x98>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	613b      	str	r3, [r7, #16]
}
 80087ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087f0:	4b15      	ldr	r3, [pc, #84]	@ (8008848 <vTaskStartScheduler+0xcc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3354      	adds	r3, #84	@ 0x54
 80087f6:	4a15      	ldr	r2, [pc, #84]	@ (800884c <vTaskStartScheduler+0xd0>)
 80087f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087fa:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <vTaskStartScheduler+0xd4>)
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008802:	4b14      	ldr	r3, [pc, #80]	@ (8008854 <vTaskStartScheduler+0xd8>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008808:	4b13      	ldr	r3, [pc, #76]	@ (8008858 <vTaskStartScheduler+0xdc>)
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800880e:	f001 f9ef 	bl	8009bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008812:	e00f      	b.n	8008834 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881a:	d10b      	bne.n	8008834 <vTaskStartScheduler+0xb8>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60fb      	str	r3, [r7, #12]
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	e7fd      	b.n	8008830 <vTaskStartScheduler+0xb4>
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	0800d7f4 	.word	0x0800d7f4
 8008840:	08008e8d 	.word	0x08008e8d
 8008844:	20001650 	.word	0x20001650
 8008848:	20001158 	.word	0x20001158
 800884c:	20000030 	.word	0x20000030
 8008850:	2000164c 	.word	0x2000164c
 8008854:	20001638 	.word	0x20001638
 8008858:	20001630 	.word	0x20001630

0800885c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008860:	4b04      	ldr	r3, [pc, #16]	@ (8008874 <vTaskSuspendAll+0x18>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3301      	adds	r3, #1
 8008866:	4a03      	ldr	r2, [pc, #12]	@ (8008874 <vTaskSuspendAll+0x18>)
 8008868:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800886a:	bf00      	nop
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	20001654 	.word	0x20001654

08008878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008886:	4b42      	ldr	r3, [pc, #264]	@ (8008990 <xTaskResumeAll+0x118>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	603b      	str	r3, [r7, #0]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088a6:	f001 fa47 	bl	8009d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088aa:	4b39      	ldr	r3, [pc, #228]	@ (8008990 <xTaskResumeAll+0x118>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	4a37      	ldr	r2, [pc, #220]	@ (8008990 <xTaskResumeAll+0x118>)
 80088b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b4:	4b36      	ldr	r3, [pc, #216]	@ (8008990 <xTaskResumeAll+0x118>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d162      	bne.n	8008982 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088bc:	4b35      	ldr	r3, [pc, #212]	@ (8008994 <xTaskResumeAll+0x11c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d05e      	beq.n	8008982 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088c4:	e02f      	b.n	8008926 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c6:	4b34      	ldr	r3, [pc, #208]	@ (8008998 <xTaskResumeAll+0x120>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3318      	adds	r3, #24
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fae6 	bl	8006ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3304      	adds	r3, #4
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fae1 	bl	8006ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e6:	4b2d      	ldr	r3, [pc, #180]	@ (800899c <xTaskResumeAll+0x124>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d903      	bls.n	80088f6 <xTaskResumeAll+0x7e>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f2:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <xTaskResumeAll+0x124>)
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4a27      	ldr	r2, [pc, #156]	@ (80089a0 <xTaskResumeAll+0x128>)
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7fe fa6c 	bl	8006dea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008916:	4b23      	ldr	r3, [pc, #140]	@ (80089a4 <xTaskResumeAll+0x12c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891c:	429a      	cmp	r2, r3
 800891e:	d302      	bcc.n	8008926 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008920:	4b21      	ldr	r3, [pc, #132]	@ (80089a8 <xTaskResumeAll+0x130>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008926:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <xTaskResumeAll+0x120>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1cb      	bne.n	80088c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008934:	f000 fb66 	bl	8009004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008938:	4b1c      	ldr	r3, [pc, #112]	@ (80089ac <xTaskResumeAll+0x134>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d010      	beq.n	8008966 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008944:	f000 f846 	bl	80089d4 <xTaskIncrementTick>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800894e:	4b16      	ldr	r3, [pc, #88]	@ (80089a8 <xTaskResumeAll+0x130>)
 8008950:	2201      	movs	r2, #1
 8008952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3b01      	subs	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1f1      	bne.n	8008944 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008960:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <xTaskResumeAll+0x134>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008966:	4b10      	ldr	r3, [pc, #64]	@ (80089a8 <xTaskResumeAll+0x130>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d009      	beq.n	8008982 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800896e:	2301      	movs	r3, #1
 8008970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008972:	4b0f      	ldr	r3, [pc, #60]	@ (80089b0 <xTaskResumeAll+0x138>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f001 fa0b 	bl	8009d9c <vPortExitCritical>

	return xAlreadyYielded;
 8008986:	68bb      	ldr	r3, [r7, #8]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20001654 	.word	0x20001654
 8008994:	2000162c 	.word	0x2000162c
 8008998:	200015ec 	.word	0x200015ec
 800899c:	20001634 	.word	0x20001634
 80089a0:	2000115c 	.word	0x2000115c
 80089a4:	20001158 	.word	0x20001158
 80089a8:	20001640 	.word	0x20001640
 80089ac:	2000163c 	.word	0x2000163c
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089ba:	4b05      	ldr	r3, [pc, #20]	@ (80089d0 <xTaskGetTickCount+0x1c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089c0:	687b      	ldr	r3, [r7, #4]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20001630 	.word	0x20001630

080089d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089de:	4b4f      	ldr	r3, [pc, #316]	@ (8008b1c <xTaskIncrementTick+0x148>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8090 	bne.w	8008b08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089e8:	4b4d      	ldr	r3, [pc, #308]	@ (8008b20 <xTaskIncrementTick+0x14c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089f0:	4a4b      	ldr	r2, [pc, #300]	@ (8008b20 <xTaskIncrementTick+0x14c>)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d121      	bne.n	8008a40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80089fc:	4b49      	ldr	r3, [pc, #292]	@ (8008b24 <xTaskIncrementTick+0x150>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	603b      	str	r3, [r7, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	bf00      	nop
 8008a1c:	e7fd      	b.n	8008a1a <xTaskIncrementTick+0x46>
 8008a1e:	4b41      	ldr	r3, [pc, #260]	@ (8008b24 <xTaskIncrementTick+0x150>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	4b40      	ldr	r3, [pc, #256]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a3e      	ldr	r2, [pc, #248]	@ (8008b24 <xTaskIncrementTick+0x150>)
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b28 <xTaskIncrementTick+0x154>)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	4b3e      	ldr	r3, [pc, #248]	@ (8008b2c <xTaskIncrementTick+0x158>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a3c      	ldr	r2, [pc, #240]	@ (8008b2c <xTaskIncrementTick+0x158>)
 8008a3a:	6013      	str	r3, [r2, #0]
 8008a3c:	f000 fae2 	bl	8009004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a40:	4b3b      	ldr	r3, [pc, #236]	@ (8008b30 <xTaskIncrementTick+0x15c>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d349      	bcc.n	8008ade <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a4a:	4b36      	ldr	r3, [pc, #216]	@ (8008b24 <xTaskIncrementTick+0x150>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a54:	4b36      	ldr	r3, [pc, #216]	@ (8008b30 <xTaskIncrementTick+0x15c>)
 8008a56:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5a:	601a      	str	r2, [r3, #0]
					break;
 8008a5c:	e03f      	b.n	8008ade <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5e:	4b31      	ldr	r3, [pc, #196]	@ (8008b24 <xTaskIncrementTick+0x150>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d203      	bcs.n	8008a7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a76:	4a2e      	ldr	r2, [pc, #184]	@ (8008b30 <xTaskIncrementTick+0x15c>)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a7c:	e02f      	b.n	8008ade <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fa0e 	bl	8006ea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	3318      	adds	r3, #24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fa05 	bl	8006ea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9e:	4b25      	ldr	r3, [pc, #148]	@ (8008b34 <xTaskIncrementTick+0x160>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d903      	bls.n	8008aae <xTaskIncrementTick+0xda>
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aaa:	4a22      	ldr	r2, [pc, #136]	@ (8008b34 <xTaskIncrementTick+0x160>)
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4a1f      	ldr	r2, [pc, #124]	@ (8008b38 <xTaskIncrementTick+0x164>)
 8008abc:	441a      	add	r2, r3
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7fe f990 	bl	8006dea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	4b1b      	ldr	r3, [pc, #108]	@ (8008b3c <xTaskIncrementTick+0x168>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d3b8      	bcc.n	8008a4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008adc:	e7b5      	b.n	8008a4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ade:	4b17      	ldr	r3, [pc, #92]	@ (8008b3c <xTaskIncrementTick+0x168>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae4:	4914      	ldr	r1, [pc, #80]	@ (8008b38 <xTaskIncrementTick+0x164>)
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d901      	bls.n	8008afa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008afa:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <xTaskIncrementTick+0x16c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d007      	beq.n	8008b12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e004      	b.n	8008b12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b08:	4b0e      	ldr	r3, [pc, #56]	@ (8008b44 <xTaskIncrementTick+0x170>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b44 <xTaskIncrementTick+0x170>)
 8008b10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b12:	697b      	ldr	r3, [r7, #20]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20001654 	.word	0x20001654
 8008b20:	20001630 	.word	0x20001630
 8008b24:	200015e4 	.word	0x200015e4
 8008b28:	200015e8 	.word	0x200015e8
 8008b2c:	20001644 	.word	0x20001644
 8008b30:	2000164c 	.word	0x2000164c
 8008b34:	20001634 	.word	0x20001634
 8008b38:	2000115c 	.word	0x2000115c
 8008b3c:	20001158 	.word	0x20001158
 8008b40:	20001640 	.word	0x20001640
 8008b44:	2000163c 	.word	0x2000163c

08008b48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8008bfc <vTaskSwitchContext+0xb4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b56:	4b2a      	ldr	r3, [pc, #168]	@ (8008c00 <vTaskSwitchContext+0xb8>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b5c:	e047      	b.n	8008bee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008b5e:	4b28      	ldr	r3, [pc, #160]	@ (8008c00 <vTaskSwitchContext+0xb8>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b64:	4b27      	ldr	r3, [pc, #156]	@ (8008c04 <vTaskSwitchContext+0xbc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	e011      	b.n	8008b90 <vTaskSwitchContext+0x48>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <vTaskSwitchContext+0x42>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	607b      	str	r3, [r7, #4]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <vTaskSwitchContext+0x3e>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	491d      	ldr	r1, [pc, #116]	@ (8008c08 <vTaskSwitchContext+0xc0>)
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0e3      	beq.n	8008b6c <vTaskSwitchContext+0x24>
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <vTaskSwitchContext+0xc0>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d104      	bne.n	8008bd4 <vTaskSwitchContext+0x8c>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	605a      	str	r2, [r3, #4]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	4a0c      	ldr	r2, [pc, #48]	@ (8008c0c <vTaskSwitchContext+0xc4>)
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	4a09      	ldr	r2, [pc, #36]	@ (8008c04 <vTaskSwitchContext+0xbc>)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008be4:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <vTaskSwitchContext+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	3354      	adds	r3, #84	@ 0x54
 8008bea:	4a09      	ldr	r2, [pc, #36]	@ (8008c10 <vTaskSwitchContext+0xc8>)
 8008bec:	6013      	str	r3, [r2, #0]
}
 8008bee:	bf00      	nop
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20001654 	.word	0x20001654
 8008c00:	20001640 	.word	0x20001640
 8008c04:	20001634 	.word	0x20001634
 8008c08:	2000115c 	.word	0x2000115c
 8008c0c:	20001158 	.word	0x20001158
 8008c10:	20000030 	.word	0x20000030

08008c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60fb      	str	r3, [r7, #12]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vTaskPlaceOnEventList+0x48>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3318      	adds	r3, #24
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7fe f8f4 	bl	8006e32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	6838      	ldr	r0, [r7, #0]
 8008c4e:	f000 fb97 	bl	8009380 <prvAddCurrentTaskToDelayedList>
}
 8008c52:	bf00      	nop
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20001158 	.word	0x20001158

08008c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	617b      	str	r3, [r7, #20]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3318      	adds	r3, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7fe f8a9 	bl	8006dea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	68b8      	ldr	r0, [r7, #8]
 8008ca8:	f000 fb6a 	bl	8009380 <prvAddCurrentTaskToDelayedList>
	}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20001158 	.word	0x20001158

08008cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3318      	adds	r3, #24
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe f8da 	bl	8006ea4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11d      	bne.n	8008d34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe f8d1 	bl	8006ea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d06:	4b19      	ldr	r3, [pc, #100]	@ (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d903      	bls.n	8008d16 <xTaskRemoveFromEventList+0x5e>
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d12:	4a16      	ldr	r2, [pc, #88]	@ (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4a13      	ldr	r2, [pc, #76]	@ (8008d70 <xTaskRemoveFromEventList+0xb8>)
 8008d24:	441a      	add	r2, r3
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f7fe f85c 	bl	8006dea <vListInsertEnd>
 8008d32:	e005      	b.n	8008d40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3318      	adds	r3, #24
 8008d38:	4619      	mov	r1, r3
 8008d3a:	480e      	ldr	r0, [pc, #56]	@ (8008d74 <xTaskRemoveFromEventList+0xbc>)
 8008d3c:	f7fe f855 	bl	8006dea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d44:	4b0c      	ldr	r3, [pc, #48]	@ (8008d78 <xTaskRemoveFromEventList+0xc0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d905      	bls.n	8008d5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d52:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <xTaskRemoveFromEventList+0xc4>)
 8008d54:	2201      	movs	r2, #1
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e001      	b.n	8008d5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d5e:	697b      	ldr	r3, [r7, #20]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20001654 	.word	0x20001654
 8008d6c:	20001634 	.word	0x20001634
 8008d70:	2000115c 	.word	0x2000115c
 8008d74:	200015ec 	.word	0x200015ec
 8008d78:	20001158 	.word	0x20001158
 8008d7c:	20001640 	.word	0x20001640

08008d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d88:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <vTaskInternalSetTimeOutState+0x24>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d90:	4b05      	ldr	r3, [pc, #20]	@ (8008da8 <vTaskInternalSetTimeOutState+0x28>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	20001644 	.word	0x20001644
 8008da8:	20001630 	.word	0x20001630

08008dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10b      	bne.n	8008dd4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	613b      	str	r3, [r7, #16]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60fb      	str	r3, [r7, #12]
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008df2:	f000 ffa1 	bl	8009d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008df6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e6c <xTaskCheckForTimeOut+0xc0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0e:	d102      	bne.n	8008e16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]
 8008e14:	e023      	b.n	8008e5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b15      	ldr	r3, [pc, #84]	@ (8008e70 <xTaskCheckForTimeOut+0xc4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d007      	beq.n	8008e32 <xTaskCheckForTimeOut+0x86>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d302      	bcc.n	8008e32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	e015      	b.n	8008e5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d20b      	bcs.n	8008e54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff ff99 	bl	8008d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61fb      	str	r3, [r7, #28]
 8008e52:	e004      	b.n	8008e5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e5e:	f000 ff9d 	bl	8009d9c <vPortExitCritical>

	return xReturn;
 8008e62:	69fb      	ldr	r3, [r7, #28]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3720      	adds	r7, #32
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20001630 	.word	0x20001630
 8008e70:	20001644 	.word	0x20001644

08008e74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e78:	4b03      	ldr	r3, [pc, #12]	@ (8008e88 <vTaskMissedYield+0x14>)
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]
}
 8008e7e:	bf00      	nop
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20001640 	.word	0x20001640

08008e8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e94:	f000 f852 	bl	8008f3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e98:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <prvIdleTask+0x28>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d9f9      	bls.n	8008e94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ea0:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <prvIdleTask+0x2c>)
 8008ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eb0:	e7f0      	b.n	8008e94 <prvIdleTask+0x8>
 8008eb2:	bf00      	nop
 8008eb4:	2000115c 	.word	0x2000115c
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	607b      	str	r3, [r7, #4]
 8008ec6:	e00c      	b.n	8008ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4a12      	ldr	r2, [pc, #72]	@ (8008f1c <prvInitialiseTaskLists+0x60>)
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fd ff5a 	bl	8006d90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b37      	cmp	r3, #55	@ 0x37
 8008ee6:	d9ef      	bls.n	8008ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ee8:	480d      	ldr	r0, [pc, #52]	@ (8008f20 <prvInitialiseTaskLists+0x64>)
 8008eea:	f7fd ff51 	bl	8006d90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eee:	480d      	ldr	r0, [pc, #52]	@ (8008f24 <prvInitialiseTaskLists+0x68>)
 8008ef0:	f7fd ff4e 	bl	8006d90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ef4:	480c      	ldr	r0, [pc, #48]	@ (8008f28 <prvInitialiseTaskLists+0x6c>)
 8008ef6:	f7fd ff4b 	bl	8006d90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008efa:	480c      	ldr	r0, [pc, #48]	@ (8008f2c <prvInitialiseTaskLists+0x70>)
 8008efc:	f7fd ff48 	bl	8006d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f00:	480b      	ldr	r0, [pc, #44]	@ (8008f30 <prvInitialiseTaskLists+0x74>)
 8008f02:	f7fd ff45 	bl	8006d90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f06:	4b0b      	ldr	r3, [pc, #44]	@ (8008f34 <prvInitialiseTaskLists+0x78>)
 8008f08:	4a05      	ldr	r2, [pc, #20]	@ (8008f20 <prvInitialiseTaskLists+0x64>)
 8008f0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f38 <prvInitialiseTaskLists+0x7c>)
 8008f0e:	4a05      	ldr	r2, [pc, #20]	@ (8008f24 <prvInitialiseTaskLists+0x68>)
 8008f10:	601a      	str	r2, [r3, #0]
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	2000115c 	.word	0x2000115c
 8008f20:	200015bc 	.word	0x200015bc
 8008f24:	200015d0 	.word	0x200015d0
 8008f28:	200015ec 	.word	0x200015ec
 8008f2c:	20001600 	.word	0x20001600
 8008f30:	20001618 	.word	0x20001618
 8008f34:	200015e4 	.word	0x200015e4
 8008f38:	200015e8 	.word	0x200015e8

08008f3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f42:	e019      	b.n	8008f78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f44:	f000 fef8 	bl	8009d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f48:	4b10      	ldr	r3, [pc, #64]	@ (8008f8c <prvCheckTasksWaitingTermination+0x50>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fd ffa5 	bl	8006ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <prvCheckTasksWaitingTermination+0x54>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	4a0b      	ldr	r2, [pc, #44]	@ (8008f90 <prvCheckTasksWaitingTermination+0x54>)
 8008f62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f64:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <prvCheckTasksWaitingTermination+0x58>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f94 <prvCheckTasksWaitingTermination+0x58>)
 8008f6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f6e:	f000 ff15 	bl	8009d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f810 	bl	8008f98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f78:	4b06      	ldr	r3, [pc, #24]	@ (8008f94 <prvCheckTasksWaitingTermination+0x58>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e1      	bne.n	8008f44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20001600 	.word	0x20001600
 8008f90:	2000162c 	.word	0x2000162c
 8008f94:	20001614 	.word	0x20001614

08008f98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3354      	adds	r3, #84	@ 0x54
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f001 ff73 	bl	800ae90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d108      	bne.n	8008fc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 f8ad 	bl	800a118 <vPortFree>
				vPortFree( pxTCB );
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f8aa 	bl	800a118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fc4:	e019      	b.n	8008ffa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d103      	bne.n	8008fd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 f8a1 	bl	800a118 <vPortFree>
	}
 8008fd6:	e010      	b.n	8008ffa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d00b      	beq.n	8008ffa <prvDeleteTCB+0x62>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	60fb      	str	r3, [r7, #12]
}
 8008ff4:	bf00      	nop
 8008ff6:	bf00      	nop
 8008ff8:	e7fd      	b.n	8008ff6 <prvDeleteTCB+0x5e>
	}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800900a:	4b0c      	ldr	r3, [pc, #48]	@ (800903c <prvResetNextTaskUnblockTime+0x38>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009014:	4b0a      	ldr	r3, [pc, #40]	@ (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800901c:	e008      	b.n	8009030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901e:	4b07      	ldr	r3, [pc, #28]	@ (800903c <prvResetNextTaskUnblockTime+0x38>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 800902e:	6013      	str	r3, [r2, #0]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	200015e4 	.word	0x200015e4
 8009040:	2000164c 	.word	0x2000164c

08009044 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800904a:	4b05      	ldr	r3, [pc, #20]	@ (8009060 <xTaskGetCurrentTaskHandle+0x1c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009050:	687b      	ldr	r3, [r7, #4]
	}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20001158 	.word	0x20001158

08009064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800906a:	4b0b      	ldr	r3, [pc, #44]	@ (8009098 <xTaskGetSchedulerState+0x34>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d102      	bne.n	8009078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009072:	2301      	movs	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	e008      	b.n	800908a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009078:	4b08      	ldr	r3, [pc, #32]	@ (800909c <xTaskGetSchedulerState+0x38>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009080:	2302      	movs	r3, #2
 8009082:	607b      	str	r3, [r7, #4]
 8009084:	e001      	b.n	800908a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009086:	2300      	movs	r3, #0
 8009088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800908a:	687b      	ldr	r3, [r7, #4]
	}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	20001638 	.word	0x20001638
 800909c:	20001654 	.word	0x20001654

080090a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d051      	beq.n	800915a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009164 <xTaskPriorityInherit+0xc4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d241      	bcs.n	8009148 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db06      	blt.n	80090da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090cc:	4b25      	ldr	r3, [pc, #148]	@ (8009164 <xTaskPriorityInherit+0xc4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6959      	ldr	r1, [r3, #20]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009168 <xTaskPriorityInherit+0xc8>)
 80090ec:	4413      	add	r3, r2
 80090ee:	4299      	cmp	r1, r3
 80090f0:	d122      	bne.n	8009138 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fed4 	bl	8006ea4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090fc:	4b19      	ldr	r3, [pc, #100]	@ (8009164 <xTaskPriorityInherit+0xc4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910a:	4b18      	ldr	r3, [pc, #96]	@ (800916c <xTaskPriorityInherit+0xcc>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d903      	bls.n	800911a <xTaskPriorityInherit+0x7a>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	4a15      	ldr	r2, [pc, #84]	@ (800916c <xTaskPriorityInherit+0xcc>)
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4a10      	ldr	r2, [pc, #64]	@ (8009168 <xTaskPriorityInherit+0xc8>)
 8009128:	441a      	add	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3304      	adds	r3, #4
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fd fe5a 	bl	8006dea <vListInsertEnd>
 8009136:	e004      	b.n	8009142 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009138:	4b0a      	ldr	r3, [pc, #40]	@ (8009164 <xTaskPriorityInherit+0xc4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009142:	2301      	movs	r3, #1
 8009144:	60fb      	str	r3, [r7, #12]
 8009146:	e008      	b.n	800915a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800914c:	4b05      	ldr	r3, [pc, #20]	@ (8009164 <xTaskPriorityInherit+0xc4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009152:	429a      	cmp	r2, r3
 8009154:	d201      	bcs.n	800915a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009156:	2301      	movs	r3, #1
 8009158:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800915a:	68fb      	ldr	r3, [r7, #12]
	}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20001158 	.word	0x20001158
 8009168:	2000115c 	.word	0x2000115c
 800916c:	20001634 	.word	0x20001634

08009170 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d058      	beq.n	8009238 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009186:	4b2f      	ldr	r3, [pc, #188]	@ (8009244 <xTaskPriorityDisinherit+0xd4>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	429a      	cmp	r2, r3
 800918e:	d00b      	beq.n	80091a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	e7fd      	b.n	80091a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60bb      	str	r3, [r7, #8]
}
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091cc:	1e5a      	subs	r2, r3, #1
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d02c      	beq.n	8009238 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d128      	bne.n	8009238 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fd fe5a 	bl	8006ea4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009208:	4b0f      	ldr	r3, [pc, #60]	@ (8009248 <xTaskPriorityDisinherit+0xd8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	429a      	cmp	r2, r3
 800920e:	d903      	bls.n	8009218 <xTaskPriorityDisinherit+0xa8>
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	4a0c      	ldr	r2, [pc, #48]	@ (8009248 <xTaskPriorityDisinherit+0xd8>)
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4a09      	ldr	r2, [pc, #36]	@ (800924c <xTaskPriorityDisinherit+0xdc>)
 8009226:	441a      	add	r2, r3
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	3304      	adds	r3, #4
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f7fd fddb 	bl	8006dea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009234:	2301      	movs	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009238:	697b      	ldr	r3, [r7, #20]
	}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20001158 	.word	0x20001158
 8009248:	20001634 	.word	0x20001634
 800924c:	2000115c 	.word	0x2000115c

08009250 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800925e:	2301      	movs	r3, #1
 8009260:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d06c      	beq.n	8009342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10b      	bne.n	8009288 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d902      	bls.n	8009298 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	e002      	b.n	800929e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800929c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d04c      	beq.n	8009342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d147      	bne.n	8009342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092b2:	4b26      	ldr	r3, [pc, #152]	@ (800934c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d10b      	bne.n	80092d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60bb      	str	r3, [r7, #8]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	69fa      	ldr	r2, [r7, #28]
 80092de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	db04      	blt.n	80092f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	6959      	ldr	r1, [r3, #20]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4613      	mov	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a13      	ldr	r2, [pc, #76]	@ (8009350 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009302:	4413      	add	r3, r2
 8009304:	4299      	cmp	r1, r3
 8009306:	d11c      	bne.n	8009342 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fd fdc9 	bl	8006ea4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009316:	4b0f      	ldr	r3, [pc, #60]	@ (8009354 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d903      	bls.n	8009326 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009322:	4a0c      	ldr	r2, [pc, #48]	@ (8009354 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a07      	ldr	r2, [pc, #28]	@ (8009350 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009334:	441a      	add	r2, r3
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fd fd54 	bl	8006dea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009342:	bf00      	nop
 8009344:	3720      	adds	r7, #32
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20001158 	.word	0x20001158
 8009350:	2000115c 	.word	0x2000115c
 8009354:	20001634 	.word	0x20001634

08009358 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800935c:	4b07      	ldr	r3, [pc, #28]	@ (800937c <pvTaskIncrementMutexHeldCount+0x24>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009364:	4b05      	ldr	r3, [pc, #20]	@ (800937c <pvTaskIncrementMutexHeldCount+0x24>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800936a:	3201      	adds	r2, #1
 800936c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800936e:	4b03      	ldr	r3, [pc, #12]	@ (800937c <pvTaskIncrementMutexHeldCount+0x24>)
 8009370:	681b      	ldr	r3, [r3, #0]
	}
 8009372:	4618      	mov	r0, r3
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	20001158 	.word	0x20001158

08009380 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800938a:	4b21      	ldr	r3, [pc, #132]	@ (8009410 <prvAddCurrentTaskToDelayedList+0x90>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009390:	4b20      	ldr	r3, [pc, #128]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x94>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3304      	adds	r3, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7fd fd84 	bl	8006ea4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a2:	d10a      	bne.n	80093ba <prvAddCurrentTaskToDelayedList+0x3a>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d007      	beq.n	80093ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x94>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4819      	ldr	r0, [pc, #100]	@ (8009418 <prvAddCurrentTaskToDelayedList+0x98>)
 80093b4:	f7fd fd19 	bl	8006dea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093b8:	e026      	b.n	8009408 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4413      	add	r3, r2
 80093c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093c2:	4b14      	ldr	r3, [pc, #80]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x94>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d209      	bcs.n	80093e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093d2:	4b12      	ldr	r3, [pc, #72]	@ (800941c <prvAddCurrentTaskToDelayedList+0x9c>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x94>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3304      	adds	r3, #4
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7fd fd27 	bl	8006e32 <vListInsert>
}
 80093e4:	e010      	b.n	8009408 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009420 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009414 <prvAddCurrentTaskToDelayedList+0x94>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f7fd fd1d 	bl	8006e32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009424 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d202      	bcs.n	8009408 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009402:	4a08      	ldr	r2, [pc, #32]	@ (8009424 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6013      	str	r3, [r2, #0]
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20001630 	.word	0x20001630
 8009414:	20001158 	.word	0x20001158
 8009418:	20001618 	.word	0x20001618
 800941c:	200015e8 	.word	0x200015e8
 8009420:	200015e4 	.word	0x200015e4
 8009424:	2000164c 	.word	0x2000164c

08009428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	@ 0x28
 800942c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009432:	f000 fb13 	bl	8009a5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009436:	4b1d      	ldr	r3, [pc, #116]	@ (80094ac <xTimerCreateTimerTask+0x84>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d021      	beq.n	8009482 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009446:	1d3a      	adds	r2, r7, #4
 8009448:	f107 0108 	add.w	r1, r7, #8
 800944c:	f107 030c 	add.w	r3, r7, #12
 8009450:	4618      	mov	r0, r3
 8009452:	f7fd fc83 	bl	8006d5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	9202      	str	r2, [sp, #8]
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	2302      	movs	r3, #2
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	460a      	mov	r2, r1
 8009468:	4911      	ldr	r1, [pc, #68]	@ (80094b0 <xTimerCreateTimerTask+0x88>)
 800946a:	4812      	ldr	r0, [pc, #72]	@ (80094b4 <xTimerCreateTimerTask+0x8c>)
 800946c:	f7fe fe28 	bl	80080c0 <xTaskCreateStatic>
 8009470:	4603      	mov	r3, r0
 8009472:	4a11      	ldr	r2, [pc, #68]	@ (80094b8 <xTimerCreateTimerTask+0x90>)
 8009474:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009476:	4b10      	ldr	r3, [pc, #64]	@ (80094b8 <xTimerCreateTimerTask+0x90>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800947e:	2301      	movs	r3, #1
 8009480:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10b      	bne.n	80094a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	613b      	str	r3, [r7, #16]
}
 800949a:	bf00      	nop
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80094a0:	697b      	ldr	r3, [r7, #20]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001688 	.word	0x20001688
 80094b0:	0800d7fc 	.word	0x0800d7fc
 80094b4:	080095f5 	.word	0x080095f5
 80094b8:	2000168c 	.word	0x2000168c

080094bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b08a      	sub	sp, #40	@ 0x28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <xTimerGenericCommand+0x30>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	623b      	str	r3, [r7, #32]
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	e7fd      	b.n	80094e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094ec:	4b19      	ldr	r3, [pc, #100]	@ (8009554 <xTimerGenericCommand+0x98>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d02a      	beq.n	800954a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b05      	cmp	r3, #5
 8009504:	dc18      	bgt.n	8009538 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009506:	f7ff fdad 	bl	8009064 <xTaskGetSchedulerState>
 800950a:	4603      	mov	r3, r0
 800950c:	2b02      	cmp	r3, #2
 800950e:	d109      	bne.n	8009524 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009510:	4b10      	ldr	r3, [pc, #64]	@ (8009554 <xTimerGenericCommand+0x98>)
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	f107 0110 	add.w	r1, r7, #16
 8009518:	2300      	movs	r3, #0
 800951a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800951c:	f7fd ff58 	bl	80073d0 <xQueueGenericSend>
 8009520:	6278      	str	r0, [r7, #36]	@ 0x24
 8009522:	e012      	b.n	800954a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009524:	4b0b      	ldr	r3, [pc, #44]	@ (8009554 <xTimerGenericCommand+0x98>)
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	f107 0110 	add.w	r1, r7, #16
 800952c:	2300      	movs	r3, #0
 800952e:	2200      	movs	r2, #0
 8009530:	f7fd ff4e 	bl	80073d0 <xQueueGenericSend>
 8009534:	6278      	str	r0, [r7, #36]	@ 0x24
 8009536:	e008      	b.n	800954a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009538:	4b06      	ldr	r3, [pc, #24]	@ (8009554 <xTimerGenericCommand+0x98>)
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	f107 0110 	add.w	r1, r7, #16
 8009540:	2300      	movs	r3, #0
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	f7fe f846 	bl	80075d4 <xQueueGenericSendFromISR>
 8009548:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800954c:	4618      	mov	r0, r3
 800954e:	3728      	adds	r7, #40	@ 0x28
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20001688 	.word	0x20001688

08009558 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009562:	4b23      	ldr	r3, [pc, #140]	@ (80095f0 <prvProcessExpiredTimer+0x98>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	3304      	adds	r3, #4
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd fc97 	bl	8006ea4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800957c:	f003 0304 	and.w	r3, r3, #4
 8009580:	2b00      	cmp	r3, #0
 8009582:	d023      	beq.n	80095cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	18d1      	adds	r1, r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	6978      	ldr	r0, [r7, #20]
 8009592:	f000 f8d5 	bl	8009740 <prvInsertTimerInActiveList>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d020      	beq.n	80095de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800959c:	2300      	movs	r3, #0
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	2300      	movs	r3, #0
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	2100      	movs	r1, #0
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f7ff ff88 	bl	80094bc <xTimerGenericCommand>
 80095ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d114      	bne.n	80095de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095d2:	f023 0301 	bic.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	4798      	blx	r3
}
 80095e6:	bf00      	nop
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20001680 	.word	0x20001680

080095f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095fc:	f107 0308 	add.w	r3, r7, #8
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f859 	bl	80096b8 <prvGetNextExpireTime>
 8009606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	4619      	mov	r1, r3
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f805 	bl	800961c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009612:	f000 f8d7 	bl	80097c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009616:	bf00      	nop
 8009618:	e7f0      	b.n	80095fc <prvTimerTask+0x8>
	...

0800961c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009626:	f7ff f919 	bl	800885c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800962a:	f107 0308 	add.w	r3, r7, #8
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f866 	bl	8009700 <prvSampleTimeNow>
 8009634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d130      	bne.n	800969e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <prvProcessTimerOrBlockTask+0x3c>
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	429a      	cmp	r2, r3
 8009648:	d806      	bhi.n	8009658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800964a:	f7ff f915 	bl	8008878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff81 	bl	8009558 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009656:	e024      	b.n	80096a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d008      	beq.n	8009670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800965e:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <prvProcessTimerOrBlockTask+0x90>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <prvProcessTimerOrBlockTask+0x50>
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <prvProcessTimerOrBlockTask+0x52>
 800966c:	2300      	movs	r3, #0
 800966e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009670:	4b0f      	ldr	r3, [pc, #60]	@ (80096b0 <prvProcessTimerOrBlockTask+0x94>)
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	4619      	mov	r1, r3
 800967e:	f7fe fceb 	bl	8008058 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009682:	f7ff f8f9 	bl	8008878 <xTaskResumeAll>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800968c:	4b09      	ldr	r3, [pc, #36]	@ (80096b4 <prvProcessTimerOrBlockTask+0x98>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
}
 800969c:	e001      	b.n	80096a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800969e:	f7ff f8eb 	bl	8008878 <xTaskResumeAll>
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20001684 	.word	0x20001684
 80096b0:	20001688 	.word	0x20001688
 80096b4:	e000ed04 	.word	0xe000ed04

080096b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096c0:	4b0e      	ldr	r3, [pc, #56]	@ (80096fc <prvGetNextExpireTime+0x44>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <prvGetNextExpireTime+0x16>
 80096ca:	2201      	movs	r2, #1
 80096cc:	e000      	b.n	80096d0 <prvGetNextExpireTime+0x18>
 80096ce:	2200      	movs	r2, #0
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d105      	bne.n	80096e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096dc:	4b07      	ldr	r3, [pc, #28]	@ (80096fc <prvGetNextExpireTime+0x44>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e001      	b.n	80096ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096ec:	68fb      	ldr	r3, [r7, #12]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	20001680 	.word	0x20001680

08009700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009708:	f7ff f954 	bl	80089b4 <xTaskGetTickCount>
 800970c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800970e:	4b0b      	ldr	r3, [pc, #44]	@ (800973c <prvSampleTimeNow+0x3c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	429a      	cmp	r2, r3
 8009716:	d205      	bcs.n	8009724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009718:	f000 f93a 	bl	8009990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	e002      	b.n	800972a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800972a:	4a04      	ldr	r2, [pc, #16]	@ (800973c <prvSampleTimeNow+0x3c>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009730:	68fb      	ldr	r3, [r7, #12]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20001690 	.word	0x20001690

08009740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d812      	bhi.n	800978c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	429a      	cmp	r2, r3
 8009772:	d302      	bcc.n	800977a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e01b      	b.n	80097b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800977a:	4b10      	ldr	r3, [pc, #64]	@ (80097bc <prvInsertTimerInActiveList+0x7c>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3304      	adds	r3, #4
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f7fd fb54 	bl	8006e32 <vListInsert>
 800978a:	e012      	b.n	80097b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d206      	bcs.n	80097a2 <prvInsertTimerInActiveList+0x62>
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d302      	bcc.n	80097a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800979c:	2301      	movs	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e007      	b.n	80097b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097a2:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <prvInsertTimerInActiveList+0x80>)
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3304      	adds	r3, #4
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f7fd fb40 	bl	8006e32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097b2:	697b      	ldr	r3, [r7, #20]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20001684 	.word	0x20001684
 80097c0:	20001680 	.word	0x20001680

080097c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08e      	sub	sp, #56	@ 0x38
 80097c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097ca:	e0ce      	b.n	800996a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da19      	bge.n	8009806 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097d2:	1d3b      	adds	r3, r7, #4
 80097d4:	3304      	adds	r3, #4
 80097d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	61fb      	str	r3, [r7, #28]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fc:	6850      	ldr	r0, [r2, #4]
 80097fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009800:	6892      	ldr	r2, [r2, #8]
 8009802:	4611      	mov	r1, r2
 8009804:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f2c0 80ae 	blt.w	800996a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	3304      	adds	r3, #4
 800981e:	4618      	mov	r0, r3
 8009820:	f7fd fb40 	bl	8006ea4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009824:	463b      	mov	r3, r7
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff ff6a 	bl	8009700 <prvSampleTimeNow>
 800982c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b09      	cmp	r3, #9
 8009832:	f200 8097 	bhi.w	8009964 <prvProcessReceivedCommands+0x1a0>
 8009836:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <prvProcessReceivedCommands+0x78>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009865 	.word	0x08009865
 8009840:	08009865 	.word	0x08009865
 8009844:	08009865 	.word	0x08009865
 8009848:	080098db 	.word	0x080098db
 800984c:	080098ef 	.word	0x080098ef
 8009850:	0800993b 	.word	0x0800993b
 8009854:	08009865 	.word	0x08009865
 8009858:	08009865 	.word	0x08009865
 800985c:	080098db 	.word	0x080098db
 8009860:	080098ef 	.word	0x080098ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800986a:	f043 0301 	orr.w	r3, r3, #1
 800986e:	b2da      	uxtb	r2, r3
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	18d1      	adds	r1, r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009884:	f7ff ff5c 	bl	8009740 <prvInsertTimerInActiveList>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d06c      	beq.n	8009968 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d061      	beq.n	8009968 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	441a      	add	r2, r3
 80098ac:	2300      	movs	r3, #0
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	2300      	movs	r3, #0
 80098b2:	2100      	movs	r1, #0
 80098b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b6:	f7ff fe01 	bl	80094bc <xTimerGenericCommand>
 80098ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d152      	bne.n	8009968 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	61bb      	str	r3, [r7, #24]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098e0:	f023 0301 	bic.w	r3, r3, #1
 80098e4:	b2da      	uxtb	r2, r3
 80098e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098ec:	e03d      	b.n	800996a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f4:	f043 0301 	orr.w	r3, r3, #1
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	617b      	str	r3, [r7, #20]
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	e7fd      	b.n	8009922 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	18d1      	adds	r1, r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009934:	f7ff ff04 	bl	8009740 <prvInsertTimerInActiveList>
					break;
 8009938:	e017      	b.n	800996a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800994a:	f000 fbe5 	bl	800a118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800994e:	e00c      	b.n	800996a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009956:	f023 0301 	bic.w	r3, r3, #1
 800995a:	b2da      	uxtb	r2, r3
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009962:	e002      	b.n	800996a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <prvProcessReceivedCommands+0x1a6>
					break;
 8009968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800996a:	4b08      	ldr	r3, [pc, #32]	@ (800998c <prvProcessReceivedCommands+0x1c8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	1d39      	adds	r1, r7, #4
 8009970:	2200      	movs	r2, #0
 8009972:	4618      	mov	r0, r3
 8009974:	f7fd ff5c 	bl	8007830 <xQueueReceive>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	f47f af26 	bne.w	80097cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	3730      	adds	r7, #48	@ 0x30
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	20001688 	.word	0x20001688

08009990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009996:	e049      	b.n	8009a2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009998:	4b2e      	ldr	r3, [pc, #184]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3304      	adds	r3, #4
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fd fa77 	bl	8006ea4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d02f      	beq.n	8009a2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	4413      	add	r3, r2
 80099d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d90e      	bls.n	80099fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f7fd fa1c 	bl	8006e32 <vListInsert>
 80099fa:	e017      	b.n	8009a2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099fc:	2300      	movs	r3, #0
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	2300      	movs	r3, #0
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	2100      	movs	r1, #0
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7ff fd58 	bl	80094bc <xTimerGenericCommand>
 8009a0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	603b      	str	r3, [r7, #0]
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	e7fd      	b.n	8009a28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a2c:	4b09      	ldr	r3, [pc, #36]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1b0      	bne.n	8009998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a36:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a3c:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <prvSwitchTimerLists+0xc8>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a04      	ldr	r2, [pc, #16]	@ (8009a54 <prvSwitchTimerLists+0xc4>)
 8009a42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a44:	4a04      	ldr	r2, [pc, #16]	@ (8009a58 <prvSwitchTimerLists+0xc8>)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	6013      	str	r3, [r2, #0]
}
 8009a4a:	bf00      	nop
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20001680 	.word	0x20001680
 8009a58:	20001684 	.word	0x20001684

08009a5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a62:	f000 f969 	bl	8009d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a66:	4b15      	ldr	r3, [pc, #84]	@ (8009abc <prvCheckForValidListAndQueue+0x60>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d120      	bne.n	8009ab0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a6e:	4814      	ldr	r0, [pc, #80]	@ (8009ac0 <prvCheckForValidListAndQueue+0x64>)
 8009a70:	f7fd f98e 	bl	8006d90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a74:	4813      	ldr	r0, [pc, #76]	@ (8009ac4 <prvCheckForValidListAndQueue+0x68>)
 8009a76:	f7fd f98b 	bl	8006d90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a7a:	4b13      	ldr	r3, [pc, #76]	@ (8009ac8 <prvCheckForValidListAndQueue+0x6c>)
 8009a7c:	4a10      	ldr	r2, [pc, #64]	@ (8009ac0 <prvCheckForValidListAndQueue+0x64>)
 8009a7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a80:	4b12      	ldr	r3, [pc, #72]	@ (8009acc <prvCheckForValidListAndQueue+0x70>)
 8009a82:	4a10      	ldr	r2, [pc, #64]	@ (8009ac4 <prvCheckForValidListAndQueue+0x68>)
 8009a84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a86:	2300      	movs	r3, #0
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	4b11      	ldr	r3, [pc, #68]	@ (8009ad0 <prvCheckForValidListAndQueue+0x74>)
 8009a8c:	4a11      	ldr	r2, [pc, #68]	@ (8009ad4 <prvCheckForValidListAndQueue+0x78>)
 8009a8e:	2110      	movs	r1, #16
 8009a90:	200a      	movs	r0, #10
 8009a92:	f7fd fa9b 	bl	8006fcc <xQueueGenericCreateStatic>
 8009a96:	4603      	mov	r3, r0
 8009a98:	4a08      	ldr	r2, [pc, #32]	@ (8009abc <prvCheckForValidListAndQueue+0x60>)
 8009a9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a9c:	4b07      	ldr	r3, [pc, #28]	@ (8009abc <prvCheckForValidListAndQueue+0x60>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009aa4:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <prvCheckForValidListAndQueue+0x60>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	490b      	ldr	r1, [pc, #44]	@ (8009ad8 <prvCheckForValidListAndQueue+0x7c>)
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fe fa80 	bl	8007fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ab0:	f000 f974 	bl	8009d9c <vPortExitCritical>
}
 8009ab4:	bf00      	nop
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20001688 	.word	0x20001688
 8009ac0:	20001658 	.word	0x20001658
 8009ac4:	2000166c 	.word	0x2000166c
 8009ac8:	20001680 	.word	0x20001680
 8009acc:	20001684 	.word	0x20001684
 8009ad0:	20001734 	.word	0x20001734
 8009ad4:	20001694 	.word	0x20001694
 8009ad8:	0800d804 	.word	0x0800d804

08009adc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3b04      	subs	r3, #4
 8009afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3b04      	subs	r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b40 <pxPortInitialiseStack+0x64>)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3b14      	subs	r3, #20
 8009b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3b04      	subs	r3, #4
 8009b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f06f 0202 	mvn.w	r2, #2
 8009b2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3b20      	subs	r3, #32
 8009b30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b32:	68fb      	ldr	r3, [r7, #12]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	08009b45 	.word	0x08009b45

08009b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b4e:	4b13      	ldr	r3, [pc, #76]	@ (8009b9c <prvTaskExitError+0x58>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b56:	d00b      	beq.n	8009b70 <prvTaskExitError+0x2c>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	60fb      	str	r3, [r7, #12]
}
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <prvTaskExitError+0x28>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60bb      	str	r3, [r7, #8]
}
 8009b82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b84:	bf00      	nop
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0fc      	beq.n	8009b86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	20000020 	.word	0x20000020

08009ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <pxCurrentTCBConst2>)
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f380 8809 	msr	PSP, r0
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8811 	msr	BASEPRI, r0
 8009bba:	4770      	bx	lr
 8009bbc:	f3af 8000 	nop.w

08009bc0 <pxCurrentTCBConst2>:
 8009bc0:	20001158 	.word	0x20001158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009bc8:	4808      	ldr	r0, [pc, #32]	@ (8009bec <prvPortStartFirstTask+0x24>)
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f380 8808 	msr	MSP, r0
 8009bd2:	f04f 0000 	mov.w	r0, #0
 8009bd6:	f380 8814 	msr	CONTROL, r0
 8009bda:	b662      	cpsie	i
 8009bdc:	b661      	cpsie	f
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	df00      	svc	0
 8009be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bea:	bf00      	nop
 8009bec:	e000ed08 	.word	0xe000ed08

08009bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bf6:	4b47      	ldr	r3, [pc, #284]	@ (8009d14 <xPortStartScheduler+0x124>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a47      	ldr	r2, [pc, #284]	@ (8009d18 <xPortStartScheduler+0x128>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d10b      	bne.n	8009c18 <xPortStartScheduler+0x28>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	613b      	str	r3, [r7, #16]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c18:	4b3e      	ldr	r3, [pc, #248]	@ (8009d14 <xPortStartScheduler+0x124>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d1c <xPortStartScheduler+0x12c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d10b      	bne.n	8009c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60fb      	str	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c3a:	4b39      	ldr	r3, [pc, #228]	@ (8009d20 <xPortStartScheduler+0x130>)
 8009c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	22ff      	movs	r2, #255	@ 0xff
 8009c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c54:	78fb      	ldrb	r3, [r7, #3]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	4b31      	ldr	r3, [pc, #196]	@ (8009d24 <xPortStartScheduler+0x134>)
 8009c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c62:	4b31      	ldr	r3, [pc, #196]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c64:	2207      	movs	r2, #7
 8009c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c68:	e009      	b.n	8009c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	4a2d      	ldr	r2, [pc, #180]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c86:	2b80      	cmp	r3, #128	@ 0x80
 8009c88:	d0ef      	beq.n	8009c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c8a:	4b27      	ldr	r3, [pc, #156]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f1c3 0307 	rsb	r3, r3, #7
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d00b      	beq.n	8009cae <xPortStartScheduler+0xbe>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60bb      	str	r3, [r7, #8]
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	e7fd      	b.n	8009caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cae:	4b1e      	ldr	r3, [pc, #120]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009cc0:	4a19      	ldr	r2, [pc, #100]	@ (8009d28 <xPortStartScheduler+0x138>)
 8009cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ccc:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a16      	ldr	r2, [pc, #88]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cd8:	4b14      	ldr	r3, [pc, #80]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a13      	ldr	r2, [pc, #76]	@ (8009d2c <xPortStartScheduler+0x13c>)
 8009cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ce4:	f000 f8da 	bl	8009e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ce8:	4b11      	ldr	r3, [pc, #68]	@ (8009d30 <xPortStartScheduler+0x140>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009cee:	f000 f8f9 	bl	8009ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cf2:	4b10      	ldr	r3, [pc, #64]	@ (8009d34 <xPortStartScheduler+0x144>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8009d34 <xPortStartScheduler+0x144>)
 8009cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cfe:	f7ff ff63 	bl	8009bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d02:	f7fe ff21 	bl	8008b48 <vTaskSwitchContext>
	prvTaskExitError();
 8009d06:	f7ff ff1d 	bl	8009b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3718      	adds	r7, #24
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed00 	.word	0xe000ed00
 8009d18:	410fc271 	.word	0x410fc271
 8009d1c:	410fc270 	.word	0x410fc270
 8009d20:	e000e400 	.word	0xe000e400
 8009d24:	20001784 	.word	0x20001784
 8009d28:	20001788 	.word	0x20001788
 8009d2c:	e000ed20 	.word	0xe000ed20
 8009d30:	20000020 	.word	0x20000020
 8009d34:	e000ef34 	.word	0xe000ef34

08009d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	607b      	str	r3, [r7, #4]
}
 8009d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d52:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	4a0e      	ldr	r2, [pc, #56]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <vPortEnterCritical+0x5c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d110      	bne.n	8009d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d64:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <vPortEnterCritical+0x60>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	603b      	str	r3, [r7, #0]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <vPortEnterCritical+0x4a>
	}
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000020 	.word	0x20000020
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009da2:	4b12      	ldr	r3, [pc, #72]	@ (8009dec <vPortExitCritical+0x50>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <vPortExitCritical+0x26>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	607b      	str	r3, [r7, #4]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <vPortExitCritical+0x50>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	4a08      	ldr	r2, [pc, #32]	@ (8009dec <vPortExitCritical+0x50>)
 8009dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dcc:	4b07      	ldr	r3, [pc, #28]	@ (8009dec <vPortExitCritical+0x50>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d105      	bne.n	8009de0 <vPortExitCritical+0x44>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	20000020 	.word	0x20000020

08009df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009df0:	f3ef 8009 	mrs	r0, PSP
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4b15      	ldr	r3, [pc, #84]	@ (8009e50 <pxCurrentTCBConst>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	f01e 0f10 	tst.w	lr, #16
 8009e00:	bf08      	it	eq
 8009e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e14:	f380 8811 	msr	BASEPRI, r0
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f7fe fe92 	bl	8008b48 <vTaskSwitchContext>
 8009e24:	f04f 0000 	mov.w	r0, #0
 8009e28:	f380 8811 	msr	BASEPRI, r0
 8009e2c:	bc09      	pop	{r0, r3}
 8009e2e:	6819      	ldr	r1, [r3, #0]
 8009e30:	6808      	ldr	r0, [r1, #0]
 8009e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e36:	f01e 0f10 	tst.w	lr, #16
 8009e3a:	bf08      	it	eq
 8009e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e40:	f380 8809 	msr	PSP, r0
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst>:
 8009e50:	20001158 	.word	0x20001158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	607b      	str	r3, [r7, #4]
}
 8009e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e72:	f7fe fdaf 	bl	80089d4 <xTaskIncrementTick>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e7c:	4b06      	ldr	r3, [pc, #24]	@ (8009e98 <xPortSysTickHandler+0x40>)
 8009e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f383 8811 	msr	BASEPRI, r3
}
 8009e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e90:	bf00      	nop
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed0 <vPortSetupTimerInterrupt+0x34>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed4 <vPortSetupTimerInterrupt+0x38>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed8 <vPortSetupTimerInterrupt+0x3c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8009edc <vPortSetupTimerInterrupt+0x40>)
 8009eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb6:	099b      	lsrs	r3, r3, #6
 8009eb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ee0 <vPortSetupTimerInterrupt+0x44>)
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ebe:	4b04      	ldr	r3, [pc, #16]	@ (8009ed0 <vPortSetupTimerInterrupt+0x34>)
 8009ec0:	2207      	movs	r2, #7
 8009ec2:	601a      	str	r2, [r3, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	e000e010 	.word	0xe000e010
 8009ed4:	e000e018 	.word	0xe000e018
 8009ed8:	20000014 	.word	0x20000014
 8009edc:	10624dd3 	.word	0x10624dd3
 8009ee0:	e000e014 	.word	0xe000e014

08009ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ef4 <vPortEnableVFP+0x10>
 8009ee8:	6801      	ldr	r1, [r0, #0]
 8009eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009eee:	6001      	str	r1, [r0, #0]
 8009ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ef2:	bf00      	nop
 8009ef4:	e000ed88 	.word	0xe000ed88

08009ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009efe:	f3ef 8305 	mrs	r3, IPSR
 8009f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b0f      	cmp	r3, #15
 8009f08:	d915      	bls.n	8009f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f0a:	4a18      	ldr	r2, [pc, #96]	@ (8009f6c <vPortValidateInterruptPriority+0x74>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f14:	4b16      	ldr	r3, [pc, #88]	@ (8009f70 <vPortValidateInterruptPriority+0x78>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	7afa      	ldrb	r2, [r7, #11]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d20b      	bcs.n	8009f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	e7fd      	b.n	8009f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f36:	4b0f      	ldr	r3, [pc, #60]	@ (8009f74 <vPortValidateInterruptPriority+0x7c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f78 <vPortValidateInterruptPriority+0x80>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d90b      	bls.n	8009f5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	603b      	str	r3, [r7, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	bf00      	nop
 8009f5c:	e7fd      	b.n	8009f5a <vPortValidateInterruptPriority+0x62>
	}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	e000e3f0 	.word	0xe000e3f0
 8009f70:	20001784 	.word	0x20001784
 8009f74:	e000ed0c 	.word	0xe000ed0c
 8009f78:	20001788 	.word	0x20001788

08009f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	@ 0x28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f88:	f7fe fc68 	bl	800885c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f8c:	4b5c      	ldr	r3, [pc, #368]	@ (800a100 <pvPortMalloc+0x184>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f94:	f000 f924 	bl	800a1e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f98:	4b5a      	ldr	r3, [pc, #360]	@ (800a104 <pvPortMalloc+0x188>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f040 8095 	bne.w	800a0d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d01e      	beq.n	8009fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009fac:	2208      	movs	r2, #8
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d015      	beq.n	8009fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f023 0307 	bic.w	r3, r3, #7
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <pvPortMalloc+0x6e>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	617b      	str	r3, [r7, #20]
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	e7fd      	b.n	8009fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d06f      	beq.n	800a0d0 <pvPortMalloc+0x154>
 8009ff0:	4b45      	ldr	r3, [pc, #276]	@ (800a108 <pvPortMalloc+0x18c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d86a      	bhi.n	800a0d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ffa:	4b44      	ldr	r3, [pc, #272]	@ (800a10c <pvPortMalloc+0x190>)
 8009ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ffe:	4b43      	ldr	r3, [pc, #268]	@ (800a10c <pvPortMalloc+0x190>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a004:	e004      	b.n	800a010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d903      	bls.n	800a022 <pvPortMalloc+0xa6>
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f1      	bne.n	800a006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a022:	4b37      	ldr	r3, [pc, #220]	@ (800a100 <pvPortMalloc+0x184>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	d051      	beq.n	800a0d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2208      	movs	r2, #8
 800a032:	4413      	add	r3, r2
 800a034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	1ad2      	subs	r2, r2, r3
 800a046:	2308      	movs	r3, #8
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d920      	bls.n	800a090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4413      	add	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <pvPortMalloc+0xfc>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	613b      	str	r3, [r7, #16]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1ad2      	subs	r2, r2, r3
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a08a:	69b8      	ldr	r0, [r7, #24]
 800a08c:	f000 f90c 	bl	800a2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a090:	4b1d      	ldr	r3, [pc, #116]	@ (800a108 <pvPortMalloc+0x18c>)
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	4a1b      	ldr	r2, [pc, #108]	@ (800a108 <pvPortMalloc+0x18c>)
 800a09c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a09e:	4b1a      	ldr	r3, [pc, #104]	@ (800a108 <pvPortMalloc+0x18c>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <pvPortMalloc+0x194>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d203      	bcs.n	800a0b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0aa:	4b17      	ldr	r3, [pc, #92]	@ (800a108 <pvPortMalloc+0x18c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a18      	ldr	r2, [pc, #96]	@ (800a110 <pvPortMalloc+0x194>)
 800a0b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	4b13      	ldr	r3, [pc, #76]	@ (800a104 <pvPortMalloc+0x188>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a0c6:	4b13      	ldr	r3, [pc, #76]	@ (800a114 <pvPortMalloc+0x198>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <pvPortMalloc+0x198>)
 800a0ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0d0:	f7fe fbd2 	bl	8008878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00b      	beq.n	800a0f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	60fb      	str	r3, [r7, #12]
}
 800a0f0:	bf00      	nop
 800a0f2:	bf00      	nop
 800a0f4:	e7fd      	b.n	800a0f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a0f6:	69fb      	ldr	r3, [r7, #28]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3728      	adds	r7, #40	@ 0x28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20019e34 	.word	0x20019e34
 800a104:	20019e48 	.word	0x20019e48
 800a108:	20019e38 	.word	0x20019e38
 800a10c:	20019e2c 	.word	0x20019e2c
 800a110:	20019e3c 	.word	0x20019e3c
 800a114:	20019e40 	.word	0x20019e40

0800a118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d04f      	beq.n	800a1ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a12a:	2308      	movs	r3, #8
 800a12c:	425b      	negs	r3, r3
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4413      	add	r3, r2
 800a132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	4b25      	ldr	r3, [pc, #148]	@ (800a1d4 <vPortFree+0xbc>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10b      	bne.n	800a15e <vPortFree+0x46>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	60fb      	str	r3, [r7, #12]
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <vPortFree+0x66>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	e7fd      	b.n	800a17a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	4b14      	ldr	r3, [pc, #80]	@ (800a1d4 <vPortFree+0xbc>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4013      	ands	r3, r2
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01e      	beq.n	800a1ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d11a      	bne.n	800a1ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d4 <vPortFree+0xbc>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1a4:	f7fe fb5a 	bl	800885c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <vPortFree+0xc0>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4a09      	ldr	r2, [pc, #36]	@ (800a1d8 <vPortFree+0xc0>)
 800a1b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1b6:	6938      	ldr	r0, [r7, #16]
 800a1b8:	f000 f876 	bl	800a2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1bc:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <vPortFree+0xc4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a06      	ldr	r2, [pc, #24]	@ (800a1dc <vPortFree+0xc4>)
 800a1c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a1c6:	f7fe fb57 	bl	8008878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1ca:	bf00      	nop
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20019e48 	.word	0x20019e48
 800a1d8:	20019e38 	.word	0x20019e38
 800a1dc:	20019e44 	.word	0x20019e44

0800a1e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1e6:	4b29      	ldr	r3, [pc, #164]	@ (800a28c <prvHeapInit+0xac>)
 800a1e8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1ea:	4b29      	ldr	r3, [pc, #164]	@ (800a290 <prvHeapInit+0xb0>)
 800a1ec:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00c      	beq.n	800a212 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3307      	adds	r3, #7
 800a1fc:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f023 0307 	bic.w	r3, r3, #7
 800a204:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	4a20      	ldr	r2, [pc, #128]	@ (800a290 <prvHeapInit+0xb0>)
 800a20e:	4413      	add	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a216:	4a1f      	ldr	r2, [pc, #124]	@ (800a294 <prvHeapInit+0xb4>)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a21c:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <prvHeapInit+0xb4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4413      	add	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a22a:	2208      	movs	r2, #8
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	1a9b      	subs	r3, r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f023 0307 	bic.w	r3, r3, #7
 800a238:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a16      	ldr	r2, [pc, #88]	@ (800a298 <prvHeapInit+0xb8>)
 800a23e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a240:	4b15      	ldr	r3, [pc, #84]	@ (800a298 <prvHeapInit+0xb8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2200      	movs	r2, #0
 800a246:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a248:	4b13      	ldr	r3, [pc, #76]	@ (800a298 <prvHeapInit+0xb8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68fa      	ldr	r2, [r7, #12]
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a25e:	4b0e      	ldr	r3, [pc, #56]	@ (800a298 <prvHeapInit+0xb8>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	4a0c      	ldr	r2, [pc, #48]	@ (800a29c <prvHeapInit+0xbc>)
 800a26c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	4a0b      	ldr	r2, [pc, #44]	@ (800a2a0 <prvHeapInit+0xc0>)
 800a274:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a276:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <prvHeapInit+0xc4>)
 800a278:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a27c:	601a      	str	r2, [r3, #0]
}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	000186a0 	.word	0x000186a0
 800a290:	2000178c 	.word	0x2000178c
 800a294:	20019e2c 	.word	0x20019e2c
 800a298:	20019e34 	.word	0x20019e34
 800a29c:	20019e3c 	.word	0x20019e3c
 800a2a0:	20019e38 	.word	0x20019e38
 800a2a4:	20019e48 	.word	0x20019e48

0800a2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2b0:	4b28      	ldr	r3, [pc, #160]	@ (800a354 <prvInsertBlockIntoFreeList+0xac>)
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e002      	b.n	800a2bc <prvInsertBlockIntoFreeList+0x14>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d8f7      	bhi.n	800a2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d108      	bne.n	800a2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	441a      	add	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d118      	bne.n	800a330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b15      	ldr	r3, [pc, #84]	@ (800a358 <prvInsertBlockIntoFreeList+0xb0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d00d      	beq.n	800a326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	441a      	add	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e008      	b.n	800a338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a326:	4b0c      	ldr	r3, [pc, #48]	@ (800a358 <prvInsertBlockIntoFreeList+0xb0>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e003      	b.n	800a338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d002      	beq.n	800a346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a346:	bf00      	nop
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20019e2c 	.word	0x20019e2c
 800a358:	20019e34 	.word	0x20019e34

0800a35c <__cvt>:
 800a35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a360:	ec57 6b10 	vmov	r6, r7, d0
 800a364:	2f00      	cmp	r7, #0
 800a366:	460c      	mov	r4, r1
 800a368:	4619      	mov	r1, r3
 800a36a:	463b      	mov	r3, r7
 800a36c:	bfbb      	ittet	lt
 800a36e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a372:	461f      	movlt	r7, r3
 800a374:	2300      	movge	r3, #0
 800a376:	232d      	movlt	r3, #45	@ 0x2d
 800a378:	700b      	strb	r3, [r1, #0]
 800a37a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a37c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a380:	4691      	mov	r9, r2
 800a382:	f023 0820 	bic.w	r8, r3, #32
 800a386:	bfbc      	itt	lt
 800a388:	4632      	movlt	r2, r6
 800a38a:	4616      	movlt	r6, r2
 800a38c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a390:	d005      	beq.n	800a39e <__cvt+0x42>
 800a392:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a396:	d100      	bne.n	800a39a <__cvt+0x3e>
 800a398:	3401      	adds	r4, #1
 800a39a:	2102      	movs	r1, #2
 800a39c:	e000      	b.n	800a3a0 <__cvt+0x44>
 800a39e:	2103      	movs	r1, #3
 800a3a0:	ab03      	add	r3, sp, #12
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	ab02      	add	r3, sp, #8
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	ec47 6b10 	vmov	d0, r6, r7
 800a3ac:	4653      	mov	r3, sl
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	f000 febe 	bl	800b130 <_dtoa_r>
 800a3b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	d119      	bne.n	800a3f0 <__cvt+0x94>
 800a3bc:	f019 0f01 	tst.w	r9, #1
 800a3c0:	d00e      	beq.n	800a3e0 <__cvt+0x84>
 800a3c2:	eb00 0904 	add.w	r9, r0, r4
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	f7f6 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 800a3d2:	b108      	cbz	r0, 800a3d8 <__cvt+0x7c>
 800a3d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3d8:	2230      	movs	r2, #48	@ 0x30
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	454b      	cmp	r3, r9
 800a3de:	d31e      	bcc.n	800a41e <__cvt+0xc2>
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3e4:	1b5b      	subs	r3, r3, r5
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	b004      	add	sp, #16
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3f4:	eb00 0904 	add.w	r9, r0, r4
 800a3f8:	d1e5      	bne.n	800a3c6 <__cvt+0x6a>
 800a3fa:	7803      	ldrb	r3, [r0, #0]
 800a3fc:	2b30      	cmp	r3, #48	@ 0x30
 800a3fe:	d10a      	bne.n	800a416 <__cvt+0xba>
 800a400:	2200      	movs	r2, #0
 800a402:	2300      	movs	r3, #0
 800a404:	4630      	mov	r0, r6
 800a406:	4639      	mov	r1, r7
 800a408:	f7f6 fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 800a40c:	b918      	cbnz	r0, 800a416 <__cvt+0xba>
 800a40e:	f1c4 0401 	rsb	r4, r4, #1
 800a412:	f8ca 4000 	str.w	r4, [sl]
 800a416:	f8da 3000 	ldr.w	r3, [sl]
 800a41a:	4499      	add	r9, r3
 800a41c:	e7d3      	b.n	800a3c6 <__cvt+0x6a>
 800a41e:	1c59      	adds	r1, r3, #1
 800a420:	9103      	str	r1, [sp, #12]
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e7d9      	b.n	800a3da <__cvt+0x7e>

0800a426 <__exponent>:
 800a426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a428:	2900      	cmp	r1, #0
 800a42a:	bfba      	itte	lt
 800a42c:	4249      	neglt	r1, r1
 800a42e:	232d      	movlt	r3, #45	@ 0x2d
 800a430:	232b      	movge	r3, #43	@ 0x2b
 800a432:	2909      	cmp	r1, #9
 800a434:	7002      	strb	r2, [r0, #0]
 800a436:	7043      	strb	r3, [r0, #1]
 800a438:	dd29      	ble.n	800a48e <__exponent+0x68>
 800a43a:	f10d 0307 	add.w	r3, sp, #7
 800a43e:	461d      	mov	r5, r3
 800a440:	270a      	movs	r7, #10
 800a442:	461a      	mov	r2, r3
 800a444:	fbb1 f6f7 	udiv	r6, r1, r7
 800a448:	fb07 1416 	mls	r4, r7, r6, r1
 800a44c:	3430      	adds	r4, #48	@ 0x30
 800a44e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a452:	460c      	mov	r4, r1
 800a454:	2c63      	cmp	r4, #99	@ 0x63
 800a456:	f103 33ff 	add.w	r3, r3, #4294967295
 800a45a:	4631      	mov	r1, r6
 800a45c:	dcf1      	bgt.n	800a442 <__exponent+0x1c>
 800a45e:	3130      	adds	r1, #48	@ 0x30
 800a460:	1e94      	subs	r4, r2, #2
 800a462:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a466:	1c41      	adds	r1, r0, #1
 800a468:	4623      	mov	r3, r4
 800a46a:	42ab      	cmp	r3, r5
 800a46c:	d30a      	bcc.n	800a484 <__exponent+0x5e>
 800a46e:	f10d 0309 	add.w	r3, sp, #9
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	42ac      	cmp	r4, r5
 800a476:	bf88      	it	hi
 800a478:	2300      	movhi	r3, #0
 800a47a:	3302      	adds	r3, #2
 800a47c:	4403      	add	r3, r0
 800a47e:	1a18      	subs	r0, r3, r0
 800a480:	b003      	add	sp, #12
 800a482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a484:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a488:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a48c:	e7ed      	b.n	800a46a <__exponent+0x44>
 800a48e:	2330      	movs	r3, #48	@ 0x30
 800a490:	3130      	adds	r1, #48	@ 0x30
 800a492:	7083      	strb	r3, [r0, #2]
 800a494:	70c1      	strb	r1, [r0, #3]
 800a496:	1d03      	adds	r3, r0, #4
 800a498:	e7f1      	b.n	800a47e <__exponent+0x58>
	...

0800a49c <_printf_float>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	b08d      	sub	sp, #52	@ 0x34
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a4a8:	4616      	mov	r6, r2
 800a4aa:	461f      	mov	r7, r3
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	f000 fcdb 	bl	800ae68 <_localeconv_r>
 800a4b2:	6803      	ldr	r3, [r0, #0]
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7f5 fefa 	bl	80002b0 <strlen>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4c4:	9005      	str	r0, [sp, #20]
 800a4c6:	3307      	adds	r3, #7
 800a4c8:	f023 0307 	bic.w	r3, r3, #7
 800a4cc:	f103 0208 	add.w	r2, r3, #8
 800a4d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a4d4:	f8d4 b000 	ldr.w	fp, [r4]
 800a4d8:	f8c8 2000 	str.w	r2, [r8]
 800a4dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4e4:	9307      	str	r3, [sp, #28]
 800a4e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4f2:	4b9c      	ldr	r3, [pc, #624]	@ (800a764 <_printf_float+0x2c8>)
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	f7f6 fb38 	bl	8000b6c <__aeabi_dcmpun>
 800a4fc:	bb70      	cbnz	r0, 800a55c <_printf_float+0xc0>
 800a4fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a502:	4b98      	ldr	r3, [pc, #608]	@ (800a764 <_printf_float+0x2c8>)
 800a504:	f04f 32ff 	mov.w	r2, #4294967295
 800a508:	f7f6 fb12 	bl	8000b30 <__aeabi_dcmple>
 800a50c:	bb30      	cbnz	r0, 800a55c <_printf_float+0xc0>
 800a50e:	2200      	movs	r2, #0
 800a510:	2300      	movs	r3, #0
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f6 fb01 	bl	8000b1c <__aeabi_dcmplt>
 800a51a:	b110      	cbz	r0, 800a522 <_printf_float+0x86>
 800a51c:	232d      	movs	r3, #45	@ 0x2d
 800a51e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a522:	4a91      	ldr	r2, [pc, #580]	@ (800a768 <_printf_float+0x2cc>)
 800a524:	4b91      	ldr	r3, [pc, #580]	@ (800a76c <_printf_float+0x2d0>)
 800a526:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a52a:	bf94      	ite	ls
 800a52c:	4690      	movls	r8, r2
 800a52e:	4698      	movhi	r8, r3
 800a530:	2303      	movs	r3, #3
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	f02b 0304 	bic.w	r3, fp, #4
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	9700      	str	r7, [sp, #0]
 800a540:	4633      	mov	r3, r6
 800a542:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a544:	4621      	mov	r1, r4
 800a546:	4628      	mov	r0, r5
 800a548:	f000 f9d2 	bl	800a8f0 <_printf_common>
 800a54c:	3001      	adds	r0, #1
 800a54e:	f040 808d 	bne.w	800a66c <_printf_float+0x1d0>
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	b00d      	add	sp, #52	@ 0x34
 800a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	4642      	mov	r2, r8
 800a55e:	464b      	mov	r3, r9
 800a560:	4640      	mov	r0, r8
 800a562:	4649      	mov	r1, r9
 800a564:	f7f6 fb02 	bl	8000b6c <__aeabi_dcmpun>
 800a568:	b140      	cbz	r0, 800a57c <_printf_float+0xe0>
 800a56a:	464b      	mov	r3, r9
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bfbc      	itt	lt
 800a570:	232d      	movlt	r3, #45	@ 0x2d
 800a572:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a576:	4a7e      	ldr	r2, [pc, #504]	@ (800a770 <_printf_float+0x2d4>)
 800a578:	4b7e      	ldr	r3, [pc, #504]	@ (800a774 <_printf_float+0x2d8>)
 800a57a:	e7d4      	b.n	800a526 <_printf_float+0x8a>
 800a57c:	6863      	ldr	r3, [r4, #4]
 800a57e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a582:	9206      	str	r2, [sp, #24]
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	d13b      	bne.n	800a600 <_printf_float+0x164>
 800a588:	2306      	movs	r3, #6
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a590:	2300      	movs	r3, #0
 800a592:	6022      	str	r2, [r4, #0]
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	ab0a      	add	r3, sp, #40	@ 0x28
 800a598:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a59c:	ab09      	add	r3, sp, #36	@ 0x24
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	6861      	ldr	r1, [r4, #4]
 800a5a2:	ec49 8b10 	vmov	d0, r8, r9
 800a5a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7ff fed6 	bl	800a35c <__cvt>
 800a5b0:	9b06      	ldr	r3, [sp, #24]
 800a5b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5b4:	2b47      	cmp	r3, #71	@ 0x47
 800a5b6:	4680      	mov	r8, r0
 800a5b8:	d129      	bne.n	800a60e <_printf_float+0x172>
 800a5ba:	1cc8      	adds	r0, r1, #3
 800a5bc:	db02      	blt.n	800a5c4 <_printf_float+0x128>
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	dd41      	ble.n	800a648 <_printf_float+0x1ac>
 800a5c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5c8:	fa5f fa8a 	uxtb.w	sl, sl
 800a5cc:	3901      	subs	r1, #1
 800a5ce:	4652      	mov	r2, sl
 800a5d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a5d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a5d6:	f7ff ff26 	bl	800a426 <__exponent>
 800a5da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5dc:	1813      	adds	r3, r2, r0
 800a5de:	2a01      	cmp	r2, #1
 800a5e0:	4681      	mov	r9, r0
 800a5e2:	6123      	str	r3, [r4, #16]
 800a5e4:	dc02      	bgt.n	800a5ec <_printf_float+0x150>
 800a5e6:	6822      	ldr	r2, [r4, #0]
 800a5e8:	07d2      	lsls	r2, r2, #31
 800a5ea:	d501      	bpl.n	800a5f0 <_printf_float+0x154>
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0a2      	beq.n	800a53e <_printf_float+0xa2>
 800a5f8:	232d      	movs	r3, #45	@ 0x2d
 800a5fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5fe:	e79e      	b.n	800a53e <_printf_float+0xa2>
 800a600:	9a06      	ldr	r2, [sp, #24]
 800a602:	2a47      	cmp	r2, #71	@ 0x47
 800a604:	d1c2      	bne.n	800a58c <_printf_float+0xf0>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1c0      	bne.n	800a58c <_printf_float+0xf0>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7bd      	b.n	800a58a <_printf_float+0xee>
 800a60e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a612:	d9db      	bls.n	800a5cc <_printf_float+0x130>
 800a614:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a618:	d118      	bne.n	800a64c <_printf_float+0x1b0>
 800a61a:	2900      	cmp	r1, #0
 800a61c:	6863      	ldr	r3, [r4, #4]
 800a61e:	dd0b      	ble.n	800a638 <_printf_float+0x19c>
 800a620:	6121      	str	r1, [r4, #16]
 800a622:	b913      	cbnz	r3, 800a62a <_printf_float+0x18e>
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	07d0      	lsls	r0, r2, #31
 800a628:	d502      	bpl.n	800a630 <_printf_float+0x194>
 800a62a:	3301      	adds	r3, #1
 800a62c:	440b      	add	r3, r1
 800a62e:	6123      	str	r3, [r4, #16]
 800a630:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	e7db      	b.n	800a5f0 <_printf_float+0x154>
 800a638:	b913      	cbnz	r3, 800a640 <_printf_float+0x1a4>
 800a63a:	6822      	ldr	r2, [r4, #0]
 800a63c:	07d2      	lsls	r2, r2, #31
 800a63e:	d501      	bpl.n	800a644 <_printf_float+0x1a8>
 800a640:	3302      	adds	r3, #2
 800a642:	e7f4      	b.n	800a62e <_printf_float+0x192>
 800a644:	2301      	movs	r3, #1
 800a646:	e7f2      	b.n	800a62e <_printf_float+0x192>
 800a648:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a64e:	4299      	cmp	r1, r3
 800a650:	db05      	blt.n	800a65e <_printf_float+0x1c2>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	6121      	str	r1, [r4, #16]
 800a656:	07d8      	lsls	r0, r3, #31
 800a658:	d5ea      	bpl.n	800a630 <_printf_float+0x194>
 800a65a:	1c4b      	adds	r3, r1, #1
 800a65c:	e7e7      	b.n	800a62e <_printf_float+0x192>
 800a65e:	2900      	cmp	r1, #0
 800a660:	bfd4      	ite	le
 800a662:	f1c1 0202 	rsble	r2, r1, #2
 800a666:	2201      	movgt	r2, #1
 800a668:	4413      	add	r3, r2
 800a66a:	e7e0      	b.n	800a62e <_printf_float+0x192>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	055a      	lsls	r2, r3, #21
 800a670:	d407      	bmi.n	800a682 <_printf_float+0x1e6>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	4642      	mov	r2, r8
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	d12b      	bne.n	800a6d8 <_printf_float+0x23c>
 800a680:	e767      	b.n	800a552 <_printf_float+0xb6>
 800a682:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a686:	f240 80dd 	bls.w	800a844 <_printf_float+0x3a8>
 800a68a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a68e:	2200      	movs	r2, #0
 800a690:	2300      	movs	r3, #0
 800a692:	f7f6 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 800a696:	2800      	cmp	r0, #0
 800a698:	d033      	beq.n	800a702 <_printf_float+0x266>
 800a69a:	4a37      	ldr	r2, [pc, #220]	@ (800a778 <_printf_float+0x2dc>)
 800a69c:	2301      	movs	r3, #1
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47b8      	blx	r7
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f43f af54 	beq.w	800a552 <_printf_float+0xb6>
 800a6aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a6ae:	4543      	cmp	r3, r8
 800a6b0:	db02      	blt.n	800a6b8 <_printf_float+0x21c>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	07d8      	lsls	r0, r3, #31
 800a6b6:	d50f      	bpl.n	800a6d8 <_printf_float+0x23c>
 800a6b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b8      	blx	r7
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	f43f af45 	beq.w	800a552 <_printf_float+0xb6>
 800a6c8:	f04f 0900 	mov.w	r9, #0
 800a6cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a6d0:	f104 0a1a 	add.w	sl, r4, #26
 800a6d4:	45c8      	cmp	r8, r9
 800a6d6:	dc09      	bgt.n	800a6ec <_printf_float+0x250>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	079b      	lsls	r3, r3, #30
 800a6dc:	f100 8103 	bmi.w	800a8e6 <_printf_float+0x44a>
 800a6e0:	68e0      	ldr	r0, [r4, #12]
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e4:	4298      	cmp	r0, r3
 800a6e6:	bfb8      	it	lt
 800a6e8:	4618      	movlt	r0, r3
 800a6ea:	e734      	b.n	800a556 <_printf_float+0xba>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	4652      	mov	r2, sl
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	47b8      	blx	r7
 800a6f6:	3001      	adds	r0, #1
 800a6f8:	f43f af2b 	beq.w	800a552 <_printf_float+0xb6>
 800a6fc:	f109 0901 	add.w	r9, r9, #1
 800a700:	e7e8      	b.n	800a6d4 <_printf_float+0x238>
 800a702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	dc39      	bgt.n	800a77c <_printf_float+0x2e0>
 800a708:	4a1b      	ldr	r2, [pc, #108]	@ (800a778 <_printf_float+0x2dc>)
 800a70a:	2301      	movs	r3, #1
 800a70c:	4631      	mov	r1, r6
 800a70e:	4628      	mov	r0, r5
 800a710:	47b8      	blx	r7
 800a712:	3001      	adds	r0, #1
 800a714:	f43f af1d 	beq.w	800a552 <_printf_float+0xb6>
 800a718:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a71c:	ea59 0303 	orrs.w	r3, r9, r3
 800a720:	d102      	bne.n	800a728 <_printf_float+0x28c>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	d5d7      	bpl.n	800a6d8 <_printf_float+0x23c>
 800a728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a72c:	4631      	mov	r1, r6
 800a72e:	4628      	mov	r0, r5
 800a730:	47b8      	blx	r7
 800a732:	3001      	adds	r0, #1
 800a734:	f43f af0d 	beq.w	800a552 <_printf_float+0xb6>
 800a738:	f04f 0a00 	mov.w	sl, #0
 800a73c:	f104 0b1a 	add.w	fp, r4, #26
 800a740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a742:	425b      	negs	r3, r3
 800a744:	4553      	cmp	r3, sl
 800a746:	dc01      	bgt.n	800a74c <_printf_float+0x2b0>
 800a748:	464b      	mov	r3, r9
 800a74a:	e793      	b.n	800a674 <_printf_float+0x1d8>
 800a74c:	2301      	movs	r3, #1
 800a74e:	465a      	mov	r2, fp
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	47b8      	blx	r7
 800a756:	3001      	adds	r0, #1
 800a758:	f43f aefb 	beq.w	800a552 <_printf_float+0xb6>
 800a75c:	f10a 0a01 	add.w	sl, sl, #1
 800a760:	e7ee      	b.n	800a740 <_printf_float+0x2a4>
 800a762:	bf00      	nop
 800a764:	7fefffff 	.word	0x7fefffff
 800a768:	0800d9bc 	.word	0x0800d9bc
 800a76c:	0800d9c0 	.word	0x0800d9c0
 800a770:	0800d9c4 	.word	0x0800d9c4
 800a774:	0800d9c8 	.word	0x0800d9c8
 800a778:	0800d9cc 	.word	0x0800d9cc
 800a77c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a77e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a782:	4553      	cmp	r3, sl
 800a784:	bfa8      	it	ge
 800a786:	4653      	movge	r3, sl
 800a788:	2b00      	cmp	r3, #0
 800a78a:	4699      	mov	r9, r3
 800a78c:	dc36      	bgt.n	800a7fc <_printf_float+0x360>
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a796:	f104 021a 	add.w	r2, r4, #26
 800a79a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a79c:	9306      	str	r3, [sp, #24]
 800a79e:	eba3 0309 	sub.w	r3, r3, r9
 800a7a2:	455b      	cmp	r3, fp
 800a7a4:	dc31      	bgt.n	800a80a <_printf_float+0x36e>
 800a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a8:	459a      	cmp	sl, r3
 800a7aa:	dc3a      	bgt.n	800a822 <_printf_float+0x386>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	07da      	lsls	r2, r3, #31
 800a7b0:	d437      	bmi.n	800a822 <_printf_float+0x386>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b4:	ebaa 0903 	sub.w	r9, sl, r3
 800a7b8:	9b06      	ldr	r3, [sp, #24]
 800a7ba:	ebaa 0303 	sub.w	r3, sl, r3
 800a7be:	4599      	cmp	r9, r3
 800a7c0:	bfa8      	it	ge
 800a7c2:	4699      	movge	r9, r3
 800a7c4:	f1b9 0f00 	cmp.w	r9, #0
 800a7c8:	dc33      	bgt.n	800a832 <_printf_float+0x396>
 800a7ca:	f04f 0800 	mov.w	r8, #0
 800a7ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7d2:	f104 0b1a 	add.w	fp, r4, #26
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	ebaa 0303 	sub.w	r3, sl, r3
 800a7dc:	eba3 0309 	sub.w	r3, r3, r9
 800a7e0:	4543      	cmp	r3, r8
 800a7e2:	f77f af79 	ble.w	800a6d8 <_printf_float+0x23c>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	465a      	mov	r2, fp
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	47b8      	blx	r7
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	f43f aeae 	beq.w	800a552 <_printf_float+0xb6>
 800a7f6:	f108 0801 	add.w	r8, r8, #1
 800a7fa:	e7ec      	b.n	800a7d6 <_printf_float+0x33a>
 800a7fc:	4642      	mov	r2, r8
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	d1c2      	bne.n	800a78e <_printf_float+0x2f2>
 800a808:	e6a3      	b.n	800a552 <_printf_float+0xb6>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	9206      	str	r2, [sp, #24]
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f ae9c 	beq.w	800a552 <_printf_float+0xb6>
 800a81a:	9a06      	ldr	r2, [sp, #24]
 800a81c:	f10b 0b01 	add.w	fp, fp, #1
 800a820:	e7bb      	b.n	800a79a <_printf_float+0x2fe>
 800a822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	d1c0      	bne.n	800a7b2 <_printf_float+0x316>
 800a830:	e68f      	b.n	800a552 <_printf_float+0xb6>
 800a832:	9a06      	ldr	r2, [sp, #24]
 800a834:	464b      	mov	r3, r9
 800a836:	4442      	add	r2, r8
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	d1c3      	bne.n	800a7ca <_printf_float+0x32e>
 800a842:	e686      	b.n	800a552 <_printf_float+0xb6>
 800a844:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a848:	f1ba 0f01 	cmp.w	sl, #1
 800a84c:	dc01      	bgt.n	800a852 <_printf_float+0x3b6>
 800a84e:	07db      	lsls	r3, r3, #31
 800a850:	d536      	bpl.n	800a8c0 <_printf_float+0x424>
 800a852:	2301      	movs	r3, #1
 800a854:	4642      	mov	r2, r8
 800a856:	4631      	mov	r1, r6
 800a858:	4628      	mov	r0, r5
 800a85a:	47b8      	blx	r7
 800a85c:	3001      	adds	r0, #1
 800a85e:	f43f ae78 	beq.w	800a552 <_printf_float+0xb6>
 800a862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a866:	4631      	mov	r1, r6
 800a868:	4628      	mov	r0, r5
 800a86a:	47b8      	blx	r7
 800a86c:	3001      	adds	r0, #1
 800a86e:	f43f ae70 	beq.w	800a552 <_printf_float+0xb6>
 800a872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a876:	2200      	movs	r2, #0
 800a878:	2300      	movs	r3, #0
 800a87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a87e:	f7f6 f943 	bl	8000b08 <__aeabi_dcmpeq>
 800a882:	b9c0      	cbnz	r0, 800a8b6 <_printf_float+0x41a>
 800a884:	4653      	mov	r3, sl
 800a886:	f108 0201 	add.w	r2, r8, #1
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	d10c      	bne.n	800a8ae <_printf_float+0x412>
 800a894:	e65d      	b.n	800a552 <_printf_float+0xb6>
 800a896:	2301      	movs	r3, #1
 800a898:	465a      	mov	r2, fp
 800a89a:	4631      	mov	r1, r6
 800a89c:	4628      	mov	r0, r5
 800a89e:	47b8      	blx	r7
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	f43f ae56 	beq.w	800a552 <_printf_float+0xb6>
 800a8a6:	f108 0801 	add.w	r8, r8, #1
 800a8aa:	45d0      	cmp	r8, sl
 800a8ac:	dbf3      	blt.n	800a896 <_printf_float+0x3fa>
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a8b4:	e6df      	b.n	800a676 <_printf_float+0x1da>
 800a8b6:	f04f 0800 	mov.w	r8, #0
 800a8ba:	f104 0b1a 	add.w	fp, r4, #26
 800a8be:	e7f4      	b.n	800a8aa <_printf_float+0x40e>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4642      	mov	r2, r8
 800a8c4:	e7e1      	b.n	800a88a <_printf_float+0x3ee>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	464a      	mov	r2, r9
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	47b8      	blx	r7
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f43f ae3e 	beq.w	800a552 <_printf_float+0xb6>
 800a8d6:	f108 0801 	add.w	r8, r8, #1
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8de:	1a5b      	subs	r3, r3, r1
 800a8e0:	4543      	cmp	r3, r8
 800a8e2:	dcf0      	bgt.n	800a8c6 <_printf_float+0x42a>
 800a8e4:	e6fc      	b.n	800a6e0 <_printf_float+0x244>
 800a8e6:	f04f 0800 	mov.w	r8, #0
 800a8ea:	f104 0919 	add.w	r9, r4, #25
 800a8ee:	e7f4      	b.n	800a8da <_printf_float+0x43e>

0800a8f0 <_printf_common>:
 800a8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	4698      	mov	r8, r3
 800a8f8:	688a      	ldr	r2, [r1, #8]
 800a8fa:	690b      	ldr	r3, [r1, #16]
 800a8fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a900:	4293      	cmp	r3, r2
 800a902:	bfb8      	it	lt
 800a904:	4613      	movlt	r3, r2
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a90c:	4607      	mov	r7, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b10a      	cbz	r2, 800a916 <_printf_common+0x26>
 800a912:	3301      	adds	r3, #1
 800a914:	6033      	str	r3, [r6, #0]
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	0699      	lsls	r1, r3, #26
 800a91a:	bf42      	ittt	mi
 800a91c:	6833      	ldrmi	r3, [r6, #0]
 800a91e:	3302      	addmi	r3, #2
 800a920:	6033      	strmi	r3, [r6, #0]
 800a922:	6825      	ldr	r5, [r4, #0]
 800a924:	f015 0506 	ands.w	r5, r5, #6
 800a928:	d106      	bne.n	800a938 <_printf_common+0x48>
 800a92a:	f104 0a19 	add.w	sl, r4, #25
 800a92e:	68e3      	ldr	r3, [r4, #12]
 800a930:	6832      	ldr	r2, [r6, #0]
 800a932:	1a9b      	subs	r3, r3, r2
 800a934:	42ab      	cmp	r3, r5
 800a936:	dc26      	bgt.n	800a986 <_printf_common+0x96>
 800a938:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a93c:	6822      	ldr	r2, [r4, #0]
 800a93e:	3b00      	subs	r3, #0
 800a940:	bf18      	it	ne
 800a942:	2301      	movne	r3, #1
 800a944:	0692      	lsls	r2, r2, #26
 800a946:	d42b      	bmi.n	800a9a0 <_printf_common+0xb0>
 800a948:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a94c:	4641      	mov	r1, r8
 800a94e:	4638      	mov	r0, r7
 800a950:	47c8      	blx	r9
 800a952:	3001      	adds	r0, #1
 800a954:	d01e      	beq.n	800a994 <_printf_common+0xa4>
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	6922      	ldr	r2, [r4, #16]
 800a95a:	f003 0306 	and.w	r3, r3, #6
 800a95e:	2b04      	cmp	r3, #4
 800a960:	bf02      	ittt	eq
 800a962:	68e5      	ldreq	r5, [r4, #12]
 800a964:	6833      	ldreq	r3, [r6, #0]
 800a966:	1aed      	subeq	r5, r5, r3
 800a968:	68a3      	ldr	r3, [r4, #8]
 800a96a:	bf0c      	ite	eq
 800a96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a970:	2500      	movne	r5, #0
 800a972:	4293      	cmp	r3, r2
 800a974:	bfc4      	itt	gt
 800a976:	1a9b      	subgt	r3, r3, r2
 800a978:	18ed      	addgt	r5, r5, r3
 800a97a:	2600      	movs	r6, #0
 800a97c:	341a      	adds	r4, #26
 800a97e:	42b5      	cmp	r5, r6
 800a980:	d11a      	bne.n	800a9b8 <_printf_common+0xc8>
 800a982:	2000      	movs	r0, #0
 800a984:	e008      	b.n	800a998 <_printf_common+0xa8>
 800a986:	2301      	movs	r3, #1
 800a988:	4652      	mov	r2, sl
 800a98a:	4641      	mov	r1, r8
 800a98c:	4638      	mov	r0, r7
 800a98e:	47c8      	blx	r9
 800a990:	3001      	adds	r0, #1
 800a992:	d103      	bne.n	800a99c <_printf_common+0xac>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99c:	3501      	adds	r5, #1
 800a99e:	e7c6      	b.n	800a92e <_printf_common+0x3e>
 800a9a0:	18e1      	adds	r1, r4, r3
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	2030      	movs	r0, #48	@ 0x30
 800a9a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9aa:	4422      	add	r2, r4
 800a9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	e7c7      	b.n	800a948 <_printf_common+0x58>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4641      	mov	r1, r8
 800a9be:	4638      	mov	r0, r7
 800a9c0:	47c8      	blx	r9
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	d0e6      	beq.n	800a994 <_printf_common+0xa4>
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	e7d9      	b.n	800a97e <_printf_common+0x8e>
	...

0800a9cc <_printf_i>:
 800a9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	7e0f      	ldrb	r7, [r1, #24]
 800a9d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9d4:	2f78      	cmp	r7, #120	@ 0x78
 800a9d6:	4691      	mov	r9, r2
 800a9d8:	4680      	mov	r8, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	469a      	mov	sl, r3
 800a9de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9e2:	d807      	bhi.n	800a9f4 <_printf_i+0x28>
 800a9e4:	2f62      	cmp	r7, #98	@ 0x62
 800a9e6:	d80a      	bhi.n	800a9fe <_printf_i+0x32>
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	f000 80d2 	beq.w	800ab92 <_printf_i+0x1c6>
 800a9ee:	2f58      	cmp	r7, #88	@ 0x58
 800a9f0:	f000 80b9 	beq.w	800ab66 <_printf_i+0x19a>
 800a9f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9fc:	e03a      	b.n	800aa74 <_printf_i+0xa8>
 800a9fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa02:	2b15      	cmp	r3, #21
 800aa04:	d8f6      	bhi.n	800a9f4 <_printf_i+0x28>
 800aa06:	a101      	add	r1, pc, #4	@ (adr r1, 800aa0c <_printf_i+0x40>)
 800aa08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800a9f5 	.word	0x0800a9f5
 800aa18:	0800a9f5 	.word	0x0800a9f5
 800aa1c:	0800a9f5 	.word	0x0800a9f5
 800aa20:	0800a9f5 	.word	0x0800a9f5
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800a9f5 	.word	0x0800a9f5
 800aa2c:	0800a9f5 	.word	0x0800a9f5
 800aa30:	0800a9f5 	.word	0x0800a9f5
 800aa34:	0800a9f5 	.word	0x0800a9f5
 800aa38:	0800ab79 	.word	0x0800ab79
 800aa3c:	0800aaa3 	.word	0x0800aaa3
 800aa40:	0800ab33 	.word	0x0800ab33
 800aa44:	0800a9f5 	.word	0x0800a9f5
 800aa48:	0800a9f5 	.word	0x0800a9f5
 800aa4c:	0800ab9b 	.word	0x0800ab9b
 800aa50:	0800a9f5 	.word	0x0800a9f5
 800aa54:	0800aaa3 	.word	0x0800aaa3
 800aa58:	0800a9f5 	.word	0x0800a9f5
 800aa5c:	0800a9f5 	.word	0x0800a9f5
 800aa60:	0800ab3b 	.word	0x0800ab3b
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6032      	str	r2, [r6, #0]
 800aa6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa74:	2301      	movs	r3, #1
 800aa76:	e09d      	b.n	800abb4 <_printf_i+0x1e8>
 800aa78:	6833      	ldr	r3, [r6, #0]
 800aa7a:	6820      	ldr	r0, [r4, #0]
 800aa7c:	1d19      	adds	r1, r3, #4
 800aa7e:	6031      	str	r1, [r6, #0]
 800aa80:	0606      	lsls	r6, r0, #24
 800aa82:	d501      	bpl.n	800aa88 <_printf_i+0xbc>
 800aa84:	681d      	ldr	r5, [r3, #0]
 800aa86:	e003      	b.n	800aa90 <_printf_i+0xc4>
 800aa88:	0645      	lsls	r5, r0, #25
 800aa8a:	d5fb      	bpl.n	800aa84 <_printf_i+0xb8>
 800aa8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	da03      	bge.n	800aa9c <_printf_i+0xd0>
 800aa94:	232d      	movs	r3, #45	@ 0x2d
 800aa96:	426d      	negs	r5, r5
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa9c:	4859      	ldr	r0, [pc, #356]	@ (800ac04 <_printf_i+0x238>)
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e011      	b.n	800aac6 <_printf_i+0xfa>
 800aaa2:	6821      	ldr	r1, [r4, #0]
 800aaa4:	6833      	ldr	r3, [r6, #0]
 800aaa6:	0608      	lsls	r0, r1, #24
 800aaa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaac:	d402      	bmi.n	800aab4 <_printf_i+0xe8>
 800aaae:	0649      	lsls	r1, r1, #25
 800aab0:	bf48      	it	mi
 800aab2:	b2ad      	uxthmi	r5, r5
 800aab4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aab6:	4853      	ldr	r0, [pc, #332]	@ (800ac04 <_printf_i+0x238>)
 800aab8:	6033      	str	r3, [r6, #0]
 800aaba:	bf14      	ite	ne
 800aabc:	230a      	movne	r3, #10
 800aabe:	2308      	moveq	r3, #8
 800aac0:	2100      	movs	r1, #0
 800aac2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aac6:	6866      	ldr	r6, [r4, #4]
 800aac8:	60a6      	str	r6, [r4, #8]
 800aaca:	2e00      	cmp	r6, #0
 800aacc:	bfa2      	ittt	ge
 800aace:	6821      	ldrge	r1, [r4, #0]
 800aad0:	f021 0104 	bicge.w	r1, r1, #4
 800aad4:	6021      	strge	r1, [r4, #0]
 800aad6:	b90d      	cbnz	r5, 800aadc <_printf_i+0x110>
 800aad8:	2e00      	cmp	r6, #0
 800aada:	d04b      	beq.n	800ab74 <_printf_i+0x1a8>
 800aadc:	4616      	mov	r6, r2
 800aade:	fbb5 f1f3 	udiv	r1, r5, r3
 800aae2:	fb03 5711 	mls	r7, r3, r1, r5
 800aae6:	5dc7      	ldrb	r7, [r0, r7]
 800aae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaec:	462f      	mov	r7, r5
 800aaee:	42bb      	cmp	r3, r7
 800aaf0:	460d      	mov	r5, r1
 800aaf2:	d9f4      	bls.n	800aade <_printf_i+0x112>
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d10b      	bne.n	800ab10 <_printf_i+0x144>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	07df      	lsls	r7, r3, #31
 800aafc:	d508      	bpl.n	800ab10 <_printf_i+0x144>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6861      	ldr	r1, [r4, #4]
 800ab02:	4299      	cmp	r1, r3
 800ab04:	bfde      	ittt	le
 800ab06:	2330      	movle	r3, #48	@ 0x30
 800ab08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab10:	1b92      	subs	r2, r2, r6
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	f8cd a000 	str.w	sl, [sp]
 800ab18:	464b      	mov	r3, r9
 800ab1a:	aa03      	add	r2, sp, #12
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7ff fee6 	bl	800a8f0 <_printf_common>
 800ab24:	3001      	adds	r0, #1
 800ab26:	d14a      	bne.n	800abbe <_printf_i+0x1f2>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	b004      	add	sp, #16
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f043 0320 	orr.w	r3, r3, #32
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	4833      	ldr	r0, [pc, #204]	@ (800ac08 <_printf_i+0x23c>)
 800ab3c:	2778      	movs	r7, #120	@ 0x78
 800ab3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab42:	6823      	ldr	r3, [r4, #0]
 800ab44:	6831      	ldr	r1, [r6, #0]
 800ab46:	061f      	lsls	r7, r3, #24
 800ab48:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab4c:	d402      	bmi.n	800ab54 <_printf_i+0x188>
 800ab4e:	065f      	lsls	r7, r3, #25
 800ab50:	bf48      	it	mi
 800ab52:	b2ad      	uxthmi	r5, r5
 800ab54:	6031      	str	r1, [r6, #0]
 800ab56:	07d9      	lsls	r1, r3, #31
 800ab58:	bf44      	itt	mi
 800ab5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5e:	6023      	strmi	r3, [r4, #0]
 800ab60:	b11d      	cbz	r5, 800ab6a <_printf_i+0x19e>
 800ab62:	2310      	movs	r3, #16
 800ab64:	e7ac      	b.n	800aac0 <_printf_i+0xf4>
 800ab66:	4827      	ldr	r0, [pc, #156]	@ (800ac04 <_printf_i+0x238>)
 800ab68:	e7e9      	b.n	800ab3e <_printf_i+0x172>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f023 0320 	bic.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	e7f6      	b.n	800ab62 <_printf_i+0x196>
 800ab74:	4616      	mov	r6, r2
 800ab76:	e7bd      	b.n	800aaf4 <_printf_i+0x128>
 800ab78:	6833      	ldr	r3, [r6, #0]
 800ab7a:	6825      	ldr	r5, [r4, #0]
 800ab7c:	6961      	ldr	r1, [r4, #20]
 800ab7e:	1d18      	adds	r0, r3, #4
 800ab80:	6030      	str	r0, [r6, #0]
 800ab82:	062e      	lsls	r6, r5, #24
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	d501      	bpl.n	800ab8c <_printf_i+0x1c0>
 800ab88:	6019      	str	r1, [r3, #0]
 800ab8a:	e002      	b.n	800ab92 <_printf_i+0x1c6>
 800ab8c:	0668      	lsls	r0, r5, #25
 800ab8e:	d5fb      	bpl.n	800ab88 <_printf_i+0x1bc>
 800ab90:	8019      	strh	r1, [r3, #0]
 800ab92:	2300      	movs	r3, #0
 800ab94:	6123      	str	r3, [r4, #16]
 800ab96:	4616      	mov	r6, r2
 800ab98:	e7bc      	b.n	800ab14 <_printf_i+0x148>
 800ab9a:	6833      	ldr	r3, [r6, #0]
 800ab9c:	1d1a      	adds	r2, r3, #4
 800ab9e:	6032      	str	r2, [r6, #0]
 800aba0:	681e      	ldr	r6, [r3, #0]
 800aba2:	6862      	ldr	r2, [r4, #4]
 800aba4:	2100      	movs	r1, #0
 800aba6:	4630      	mov	r0, r6
 800aba8:	f7f5 fb32 	bl	8000210 <memchr>
 800abac:	b108      	cbz	r0, 800abb2 <_printf_i+0x1e6>
 800abae:	1b80      	subs	r0, r0, r6
 800abb0:	6060      	str	r0, [r4, #4]
 800abb2:	6863      	ldr	r3, [r4, #4]
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	2300      	movs	r3, #0
 800abb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abbc:	e7aa      	b.n	800ab14 <_printf_i+0x148>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	4632      	mov	r2, r6
 800abc2:	4649      	mov	r1, r9
 800abc4:	4640      	mov	r0, r8
 800abc6:	47d0      	blx	sl
 800abc8:	3001      	adds	r0, #1
 800abca:	d0ad      	beq.n	800ab28 <_printf_i+0x15c>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	079b      	lsls	r3, r3, #30
 800abd0:	d413      	bmi.n	800abfa <_printf_i+0x22e>
 800abd2:	68e0      	ldr	r0, [r4, #12]
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	4298      	cmp	r0, r3
 800abd8:	bfb8      	it	lt
 800abda:	4618      	movlt	r0, r3
 800abdc:	e7a6      	b.n	800ab2c <_printf_i+0x160>
 800abde:	2301      	movs	r3, #1
 800abe0:	4632      	mov	r2, r6
 800abe2:	4649      	mov	r1, r9
 800abe4:	4640      	mov	r0, r8
 800abe6:	47d0      	blx	sl
 800abe8:	3001      	adds	r0, #1
 800abea:	d09d      	beq.n	800ab28 <_printf_i+0x15c>
 800abec:	3501      	adds	r5, #1
 800abee:	68e3      	ldr	r3, [r4, #12]
 800abf0:	9903      	ldr	r1, [sp, #12]
 800abf2:	1a5b      	subs	r3, r3, r1
 800abf4:	42ab      	cmp	r3, r5
 800abf6:	dcf2      	bgt.n	800abde <_printf_i+0x212>
 800abf8:	e7eb      	b.n	800abd2 <_printf_i+0x206>
 800abfa:	2500      	movs	r5, #0
 800abfc:	f104 0619 	add.w	r6, r4, #25
 800ac00:	e7f5      	b.n	800abee <_printf_i+0x222>
 800ac02:	bf00      	nop
 800ac04:	0800d9ce 	.word	0x0800d9ce
 800ac08:	0800d9df 	.word	0x0800d9df

0800ac0c <std>:
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	e9c0 3300 	strd	r3, r3, [r0]
 800ac16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1a:	6083      	str	r3, [r0, #8]
 800ac1c:	8181      	strh	r1, [r0, #12]
 800ac1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac20:	81c2      	strh	r2, [r0, #14]
 800ac22:	6183      	str	r3, [r0, #24]
 800ac24:	4619      	mov	r1, r3
 800ac26:	2208      	movs	r2, #8
 800ac28:	305c      	adds	r0, #92	@ 0x5c
 800ac2a:	f000 f914 	bl	800ae56 <memset>
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <std+0x58>)
 800ac30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac32:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <std+0x5c>)
 800ac34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <std+0x60>)
 800ac38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac70 <std+0x64>)
 800ac3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac74 <std+0x68>)
 800ac40:	6224      	str	r4, [r4, #32]
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d006      	beq.n	800ac54 <std+0x48>
 800ac46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac4a:	4294      	cmp	r4, r2
 800ac4c:	d002      	beq.n	800ac54 <std+0x48>
 800ac4e:	33d0      	adds	r3, #208	@ 0xd0
 800ac50:	429c      	cmp	r4, r3
 800ac52:	d105      	bne.n	800ac60 <std+0x54>
 800ac54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac5c:	f000 b9ce 	b.w	800affc <__retarget_lock_init_recursive>
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	bf00      	nop
 800ac64:	0800add1 	.word	0x0800add1
 800ac68:	0800adf3 	.word	0x0800adf3
 800ac6c:	0800ae2b 	.word	0x0800ae2b
 800ac70:	0800ae4f 	.word	0x0800ae4f
 800ac74:	20019e4c 	.word	0x20019e4c

0800ac78 <stdio_exit_handler>:
 800ac78:	4a02      	ldr	r2, [pc, #8]	@ (800ac84 <stdio_exit_handler+0xc>)
 800ac7a:	4903      	ldr	r1, [pc, #12]	@ (800ac88 <stdio_exit_handler+0x10>)
 800ac7c:	4803      	ldr	r0, [pc, #12]	@ (800ac8c <stdio_exit_handler+0x14>)
 800ac7e:	f000 b869 	b.w	800ad54 <_fwalk_sglue>
 800ac82:	bf00      	nop
 800ac84:	20000024 	.word	0x20000024
 800ac88:	0800c975 	.word	0x0800c975
 800ac8c:	20000034 	.word	0x20000034

0800ac90 <cleanup_stdio>:
 800ac90:	6841      	ldr	r1, [r0, #4]
 800ac92:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <cleanup_stdio+0x34>)
 800ac94:	4299      	cmp	r1, r3
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	d001      	beq.n	800aca0 <cleanup_stdio+0x10>
 800ac9c:	f001 fe6a 	bl	800c974 <_fflush_r>
 800aca0:	68a1      	ldr	r1, [r4, #8]
 800aca2:	4b09      	ldr	r3, [pc, #36]	@ (800acc8 <cleanup_stdio+0x38>)
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d002      	beq.n	800acae <cleanup_stdio+0x1e>
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 fe63 	bl	800c974 <_fflush_r>
 800acae:	68e1      	ldr	r1, [r4, #12]
 800acb0:	4b06      	ldr	r3, [pc, #24]	@ (800accc <cleanup_stdio+0x3c>)
 800acb2:	4299      	cmp	r1, r3
 800acb4:	d004      	beq.n	800acc0 <cleanup_stdio+0x30>
 800acb6:	4620      	mov	r0, r4
 800acb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acbc:	f001 be5a 	b.w	800c974 <_fflush_r>
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	20019e4c 	.word	0x20019e4c
 800acc8:	20019eb4 	.word	0x20019eb4
 800accc:	20019f1c 	.word	0x20019f1c

0800acd0 <global_stdio_init.part.0>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <global_stdio_init.part.0+0x30>)
 800acd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ad04 <global_stdio_init.part.0+0x34>)
 800acd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ad08 <global_stdio_init.part.0+0x38>)
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	2200      	movs	r2, #0
 800acde:	2104      	movs	r1, #4
 800ace0:	f7ff ff94 	bl	800ac0c <std>
 800ace4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ace8:	2201      	movs	r2, #1
 800acea:	2109      	movs	r1, #9
 800acec:	f7ff ff8e 	bl	800ac0c <std>
 800acf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acf4:	2202      	movs	r2, #2
 800acf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfa:	2112      	movs	r1, #18
 800acfc:	f7ff bf86 	b.w	800ac0c <std>
 800ad00:	20019f84 	.word	0x20019f84
 800ad04:	20019e4c 	.word	0x20019e4c
 800ad08:	0800ac79 	.word	0x0800ac79

0800ad0c <__sfp_lock_acquire>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	@ (800ad14 <__sfp_lock_acquire+0x8>)
 800ad0e:	f000 b976 	b.w	800affe <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	20019f8d 	.word	0x20019f8d

0800ad18 <__sfp_lock_release>:
 800ad18:	4801      	ldr	r0, [pc, #4]	@ (800ad20 <__sfp_lock_release+0x8>)
 800ad1a:	f000 b971 	b.w	800b000 <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20019f8d 	.word	0x20019f8d

0800ad24 <__sinit>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4604      	mov	r4, r0
 800ad28:	f7ff fff0 	bl	800ad0c <__sfp_lock_acquire>
 800ad2c:	6a23      	ldr	r3, [r4, #32]
 800ad2e:	b11b      	cbz	r3, 800ad38 <__sinit+0x14>
 800ad30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad34:	f7ff bff0 	b.w	800ad18 <__sfp_lock_release>
 800ad38:	4b04      	ldr	r3, [pc, #16]	@ (800ad4c <__sinit+0x28>)
 800ad3a:	6223      	str	r3, [r4, #32]
 800ad3c:	4b04      	ldr	r3, [pc, #16]	@ (800ad50 <__sinit+0x2c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f5      	bne.n	800ad30 <__sinit+0xc>
 800ad44:	f7ff ffc4 	bl	800acd0 <global_stdio_init.part.0>
 800ad48:	e7f2      	b.n	800ad30 <__sinit+0xc>
 800ad4a:	bf00      	nop
 800ad4c:	0800ac91 	.word	0x0800ac91
 800ad50:	20019f84 	.word	0x20019f84

0800ad54 <_fwalk_sglue>:
 800ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	4607      	mov	r7, r0
 800ad5a:	4688      	mov	r8, r1
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	2600      	movs	r6, #0
 800ad60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad64:	f1b9 0901 	subs.w	r9, r9, #1
 800ad68:	d505      	bpl.n	800ad76 <_fwalk_sglue+0x22>
 800ad6a:	6824      	ldr	r4, [r4, #0]
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	d1f7      	bne.n	800ad60 <_fwalk_sglue+0xc>
 800ad70:	4630      	mov	r0, r6
 800ad72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d907      	bls.n	800ad8c <_fwalk_sglue+0x38>
 800ad7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad80:	3301      	adds	r3, #1
 800ad82:	d003      	beq.n	800ad8c <_fwalk_sglue+0x38>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	4306      	orrs	r6, r0
 800ad8c:	3568      	adds	r5, #104	@ 0x68
 800ad8e:	e7e9      	b.n	800ad64 <_fwalk_sglue+0x10>

0800ad90 <siprintf>:
 800ad90:	b40e      	push	{r1, r2, r3}
 800ad92:	b500      	push	{lr}
 800ad94:	b09c      	sub	sp, #112	@ 0x70
 800ad96:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	9006      	str	r0, [sp, #24]
 800ad9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ada0:	4809      	ldr	r0, [pc, #36]	@ (800adc8 <siprintf+0x38>)
 800ada2:	9107      	str	r1, [sp, #28]
 800ada4:	9104      	str	r1, [sp, #16]
 800ada6:	4909      	ldr	r1, [pc, #36]	@ (800adcc <siprintf+0x3c>)
 800ada8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	a902      	add	r1, sp, #8
 800adb4:	f001 fc5e 	bl	800c674 <_svfiprintf_r>
 800adb8:	9b02      	ldr	r3, [sp, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	b01c      	add	sp, #112	@ 0x70
 800adc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc4:	b003      	add	sp, #12
 800adc6:	4770      	bx	lr
 800adc8:	20000030 	.word	0x20000030
 800adcc:	ffff0208 	.word	0xffff0208

0800add0 <__sread>:
 800add0:	b510      	push	{r4, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f000 f8c2 	bl	800af60 <_read_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	bfab      	itete	ge
 800ade0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ade2:	89a3      	ldrhlt	r3, [r4, #12]
 800ade4:	181b      	addge	r3, r3, r0
 800ade6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adea:	bfac      	ite	ge
 800adec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800adee:	81a3      	strhlt	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__swrite>:
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	461f      	mov	r7, r3
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	05db      	lsls	r3, r3, #23
 800adfc:	4605      	mov	r5, r0
 800adfe:	460c      	mov	r4, r1
 800ae00:	4616      	mov	r6, r2
 800ae02:	d505      	bpl.n	800ae10 <__swrite+0x1e>
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	2302      	movs	r3, #2
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f000 f896 	bl	800af3c <_lseek_r>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae1a:	81a3      	strh	r3, [r4, #12]
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	463b      	mov	r3, r7
 800ae20:	4628      	mov	r0, r5
 800ae22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	f000 b8ad 	b.w	800af84 <_write_r>

0800ae2a <__sseek>:
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae32:	f000 f883 	bl	800af3c <_lseek_r>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	bf15      	itete	ne
 800ae3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae46:	81a3      	strheq	r3, [r4, #12]
 800ae48:	bf18      	it	ne
 800ae4a:	81a3      	strhne	r3, [r4, #12]
 800ae4c:	bd10      	pop	{r4, pc}

0800ae4e <__sclose>:
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 b80d 	b.w	800ae70 <_close_r>

0800ae56 <memset>:
 800ae56:	4402      	add	r2, r0
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d100      	bne.n	800ae60 <memset+0xa>
 800ae5e:	4770      	bx	lr
 800ae60:	f803 1b01 	strb.w	r1, [r3], #1
 800ae64:	e7f9      	b.n	800ae5a <memset+0x4>
	...

0800ae68 <_localeconv_r>:
 800ae68:	4800      	ldr	r0, [pc, #0]	@ (800ae6c <_localeconv_r+0x4>)
 800ae6a:	4770      	bx	lr
 800ae6c:	20000170 	.word	0x20000170

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	@ (800ae8c <_close_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f7 fd2a 	bl	80028d4 <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20019f88 	.word	0x20019f88

0800ae90 <_reclaim_reent>:
 800ae90:	4b29      	ldr	r3, [pc, #164]	@ (800af38 <_reclaim_reent+0xa8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4283      	cmp	r3, r0
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	d04b      	beq.n	800af34 <_reclaim_reent+0xa4>
 800ae9c:	69c3      	ldr	r3, [r0, #28]
 800ae9e:	b1ab      	cbz	r3, 800aecc <_reclaim_reent+0x3c>
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	b16b      	cbz	r3, 800aec0 <_reclaim_reent+0x30>
 800aea4:	2500      	movs	r5, #0
 800aea6:	69e3      	ldr	r3, [r4, #28]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	5959      	ldr	r1, [r3, r5]
 800aeac:	2900      	cmp	r1, #0
 800aeae:	d13b      	bne.n	800af28 <_reclaim_reent+0x98>
 800aeb0:	3504      	adds	r5, #4
 800aeb2:	2d80      	cmp	r5, #128	@ 0x80
 800aeb4:	d1f7      	bne.n	800aea6 <_reclaim_reent+0x16>
 800aeb6:	69e3      	ldr	r3, [r4, #28]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	68d9      	ldr	r1, [r3, #12]
 800aebc:	f000 fefc 	bl	800bcb8 <_free_r>
 800aec0:	69e3      	ldr	r3, [r4, #28]
 800aec2:	6819      	ldr	r1, [r3, #0]
 800aec4:	b111      	cbz	r1, 800aecc <_reclaim_reent+0x3c>
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fef6 	bl	800bcb8 <_free_r>
 800aecc:	6961      	ldr	r1, [r4, #20]
 800aece:	b111      	cbz	r1, 800aed6 <_reclaim_reent+0x46>
 800aed0:	4620      	mov	r0, r4
 800aed2:	f000 fef1 	bl	800bcb8 <_free_r>
 800aed6:	69e1      	ldr	r1, [r4, #28]
 800aed8:	b111      	cbz	r1, 800aee0 <_reclaim_reent+0x50>
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 feec 	bl	800bcb8 <_free_r>
 800aee0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aee2:	b111      	cbz	r1, 800aeea <_reclaim_reent+0x5a>
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 fee7 	bl	800bcb8 <_free_r>
 800aeea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeec:	b111      	cbz	r1, 800aef4 <_reclaim_reent+0x64>
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 fee2 	bl	800bcb8 <_free_r>
 800aef4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aef6:	b111      	cbz	r1, 800aefe <_reclaim_reent+0x6e>
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fedd 	bl	800bcb8 <_free_r>
 800aefe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800af00:	b111      	cbz	r1, 800af08 <_reclaim_reent+0x78>
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fed8 	bl	800bcb8 <_free_r>
 800af08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800af0a:	b111      	cbz	r1, 800af12 <_reclaim_reent+0x82>
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fed3 	bl	800bcb8 <_free_r>
 800af12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af14:	b111      	cbz	r1, 800af1c <_reclaim_reent+0x8c>
 800af16:	4620      	mov	r0, r4
 800af18:	f000 fece 	bl	800bcb8 <_free_r>
 800af1c:	6a23      	ldr	r3, [r4, #32]
 800af1e:	b14b      	cbz	r3, 800af34 <_reclaim_reent+0xa4>
 800af20:	4620      	mov	r0, r4
 800af22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af26:	4718      	bx	r3
 800af28:	680e      	ldr	r6, [r1, #0]
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fec4 	bl	800bcb8 <_free_r>
 800af30:	4631      	mov	r1, r6
 800af32:	e7bb      	b.n	800aeac <_reclaim_reent+0x1c>
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	bf00      	nop
 800af38:	20000030 	.word	0x20000030

0800af3c <_lseek_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	@ (800af5c <_lseek_r+0x20>)
 800af40:	4604      	mov	r4, r0
 800af42:	4608      	mov	r0, r1
 800af44:	4611      	mov	r1, r2
 800af46:	2200      	movs	r2, #0
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f7f7 fce9 	bl	8002922 <_lseek>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_lseek_r+0x1e>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_lseek_r+0x1e>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20019f88 	.word	0x20019f88

0800af60 <_read_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	@ (800af80 <_read_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f7 fc77 	bl	8002862 <_read>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_read_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_read_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20019f88 	.word	0x20019f88

0800af84 <_write_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	@ (800afa4 <_write_r+0x20>)
 800af88:	4604      	mov	r4, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	602a      	str	r2, [r5, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f7 fc82 	bl	800289c <_write>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_write_r+0x1e>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_write_r+0x1e>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20019f88 	.word	0x20019f88

0800afa8 <__errno>:
 800afa8:	4b01      	ldr	r3, [pc, #4]	@ (800afb0 <__errno+0x8>)
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20000030 	.word	0x20000030

0800afb4 <__libc_init_array>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4d0d      	ldr	r5, [pc, #52]	@ (800afec <__libc_init_array+0x38>)
 800afb8:	4c0d      	ldr	r4, [pc, #52]	@ (800aff0 <__libc_init_array+0x3c>)
 800afba:	1b64      	subs	r4, r4, r5
 800afbc:	10a4      	asrs	r4, r4, #2
 800afbe:	2600      	movs	r6, #0
 800afc0:	42a6      	cmp	r6, r4
 800afc2:	d109      	bne.n	800afd8 <__libc_init_array+0x24>
 800afc4:	4d0b      	ldr	r5, [pc, #44]	@ (800aff4 <__libc_init_array+0x40>)
 800afc6:	4c0c      	ldr	r4, [pc, #48]	@ (800aff8 <__libc_init_array+0x44>)
 800afc8:	f002 f9e2 	bl	800d390 <_init>
 800afcc:	1b64      	subs	r4, r4, r5
 800afce:	10a4      	asrs	r4, r4, #2
 800afd0:	2600      	movs	r6, #0
 800afd2:	42a6      	cmp	r6, r4
 800afd4:	d105      	bne.n	800afe2 <__libc_init_array+0x2e>
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afdc:	4798      	blx	r3
 800afde:	3601      	adds	r6, #1
 800afe0:	e7ee      	b.n	800afc0 <__libc_init_array+0xc>
 800afe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe6:	4798      	blx	r3
 800afe8:	3601      	adds	r6, #1
 800afea:	e7f2      	b.n	800afd2 <__libc_init_array+0x1e>
 800afec:	0800dd70 	.word	0x0800dd70
 800aff0:	0800dd70 	.word	0x0800dd70
 800aff4:	0800dd70 	.word	0x0800dd70
 800aff8:	0800dd74 	.word	0x0800dd74

0800affc <__retarget_lock_init_recursive>:
 800affc:	4770      	bx	lr

0800affe <__retarget_lock_acquire_recursive>:
 800affe:	4770      	bx	lr

0800b000 <__retarget_lock_release_recursive>:
 800b000:	4770      	bx	lr

0800b002 <memcpy>:
 800b002:	440a      	add	r2, r1
 800b004:	4291      	cmp	r1, r2
 800b006:	f100 33ff 	add.w	r3, r0, #4294967295
 800b00a:	d100      	bne.n	800b00e <memcpy+0xc>
 800b00c:	4770      	bx	lr
 800b00e:	b510      	push	{r4, lr}
 800b010:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b014:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b018:	4291      	cmp	r1, r2
 800b01a:	d1f9      	bne.n	800b010 <memcpy+0xe>
 800b01c:	bd10      	pop	{r4, pc}

0800b01e <quorem>:
 800b01e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b022:	6903      	ldr	r3, [r0, #16]
 800b024:	690c      	ldr	r4, [r1, #16]
 800b026:	42a3      	cmp	r3, r4
 800b028:	4607      	mov	r7, r0
 800b02a:	db7e      	blt.n	800b12a <quorem+0x10c>
 800b02c:	3c01      	subs	r4, #1
 800b02e:	f101 0814 	add.w	r8, r1, #20
 800b032:	00a3      	lsls	r3, r4, #2
 800b034:	f100 0514 	add.w	r5, r0, #20
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b048:	3301      	adds	r3, #1
 800b04a:	429a      	cmp	r2, r3
 800b04c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b050:	fbb2 f6f3 	udiv	r6, r2, r3
 800b054:	d32e      	bcc.n	800b0b4 <quorem+0x96>
 800b056:	f04f 0a00 	mov.w	sl, #0
 800b05a:	46c4      	mov	ip, r8
 800b05c:	46ae      	mov	lr, r5
 800b05e:	46d3      	mov	fp, sl
 800b060:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b064:	b298      	uxth	r0, r3
 800b066:	fb06 a000 	mla	r0, r6, r0, sl
 800b06a:	0c02      	lsrs	r2, r0, #16
 800b06c:	0c1b      	lsrs	r3, r3, #16
 800b06e:	fb06 2303 	mla	r3, r6, r3, r2
 800b072:	f8de 2000 	ldr.w	r2, [lr]
 800b076:	b280      	uxth	r0, r0
 800b078:	b292      	uxth	r2, r2
 800b07a:	1a12      	subs	r2, r2, r0
 800b07c:	445a      	add	r2, fp
 800b07e:	f8de 0000 	ldr.w	r0, [lr]
 800b082:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b086:	b29b      	uxth	r3, r3
 800b088:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b08c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b090:	b292      	uxth	r2, r2
 800b092:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b096:	45e1      	cmp	r9, ip
 800b098:	f84e 2b04 	str.w	r2, [lr], #4
 800b09c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0a0:	d2de      	bcs.n	800b060 <quorem+0x42>
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	58eb      	ldr	r3, [r5, r3]
 800b0a6:	b92b      	cbnz	r3, 800b0b4 <quorem+0x96>
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	3b04      	subs	r3, #4
 800b0ac:	429d      	cmp	r5, r3
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	d32f      	bcc.n	800b112 <quorem+0xf4>
 800b0b2:	613c      	str	r4, [r7, #16]
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f001 f979 	bl	800c3ac <__mcmp>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	db25      	blt.n	800b10a <quorem+0xec>
 800b0be:	4629      	mov	r1, r5
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0c6:	f8d1 c000 	ldr.w	ip, [r1]
 800b0ca:	fa1f fe82 	uxth.w	lr, r2
 800b0ce:	fa1f f38c 	uxth.w	r3, ip
 800b0d2:	eba3 030e 	sub.w	r3, r3, lr
 800b0d6:	4403      	add	r3, r0
 800b0d8:	0c12      	lsrs	r2, r2, #16
 800b0da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0e8:	45c1      	cmp	r9, r8
 800b0ea:	f841 3b04 	str.w	r3, [r1], #4
 800b0ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0f2:	d2e6      	bcs.n	800b0c2 <quorem+0xa4>
 800b0f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0fc:	b922      	cbnz	r2, 800b108 <quorem+0xea>
 800b0fe:	3b04      	subs	r3, #4
 800b100:	429d      	cmp	r5, r3
 800b102:	461a      	mov	r2, r3
 800b104:	d30b      	bcc.n	800b11e <quorem+0x100>
 800b106:	613c      	str	r4, [r7, #16]
 800b108:	3601      	adds	r6, #1
 800b10a:	4630      	mov	r0, r6
 800b10c:	b003      	add	sp, #12
 800b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	3b04      	subs	r3, #4
 800b116:	2a00      	cmp	r2, #0
 800b118:	d1cb      	bne.n	800b0b2 <quorem+0x94>
 800b11a:	3c01      	subs	r4, #1
 800b11c:	e7c6      	b.n	800b0ac <quorem+0x8e>
 800b11e:	6812      	ldr	r2, [r2, #0]
 800b120:	3b04      	subs	r3, #4
 800b122:	2a00      	cmp	r2, #0
 800b124:	d1ef      	bne.n	800b106 <quorem+0xe8>
 800b126:	3c01      	subs	r4, #1
 800b128:	e7ea      	b.n	800b100 <quorem+0xe2>
 800b12a:	2000      	movs	r0, #0
 800b12c:	e7ee      	b.n	800b10c <quorem+0xee>
	...

0800b130 <_dtoa_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	69c7      	ldr	r7, [r0, #28]
 800b136:	b099      	sub	sp, #100	@ 0x64
 800b138:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b13c:	ec55 4b10 	vmov	r4, r5, d0
 800b140:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b142:	9109      	str	r1, [sp, #36]	@ 0x24
 800b144:	4683      	mov	fp, r0
 800b146:	920e      	str	r2, [sp, #56]	@ 0x38
 800b148:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b14a:	b97f      	cbnz	r7, 800b16c <_dtoa_r+0x3c>
 800b14c:	2010      	movs	r0, #16
 800b14e:	f000 fdfd 	bl	800bd4c <malloc>
 800b152:	4602      	mov	r2, r0
 800b154:	f8cb 001c 	str.w	r0, [fp, #28]
 800b158:	b920      	cbnz	r0, 800b164 <_dtoa_r+0x34>
 800b15a:	4ba7      	ldr	r3, [pc, #668]	@ (800b3f8 <_dtoa_r+0x2c8>)
 800b15c:	21ef      	movs	r1, #239	@ 0xef
 800b15e:	48a7      	ldr	r0, [pc, #668]	@ (800b3fc <_dtoa_r+0x2cc>)
 800b160:	f001 fc5a 	bl	800ca18 <__assert_func>
 800b164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b168:	6007      	str	r7, [r0, #0]
 800b16a:	60c7      	str	r7, [r0, #12]
 800b16c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b170:	6819      	ldr	r1, [r3, #0]
 800b172:	b159      	cbz	r1, 800b18c <_dtoa_r+0x5c>
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	604a      	str	r2, [r1, #4]
 800b178:	2301      	movs	r3, #1
 800b17a:	4093      	lsls	r3, r2
 800b17c:	608b      	str	r3, [r1, #8]
 800b17e:	4658      	mov	r0, fp
 800b180:	f000 feda 	bl	800bf38 <_Bfree>
 800b184:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]
 800b18c:	1e2b      	subs	r3, r5, #0
 800b18e:	bfb9      	ittee	lt
 800b190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b194:	9303      	strlt	r3, [sp, #12]
 800b196:	2300      	movge	r3, #0
 800b198:	6033      	strge	r3, [r6, #0]
 800b19a:	9f03      	ldr	r7, [sp, #12]
 800b19c:	4b98      	ldr	r3, [pc, #608]	@ (800b400 <_dtoa_r+0x2d0>)
 800b19e:	bfbc      	itt	lt
 800b1a0:	2201      	movlt	r2, #1
 800b1a2:	6032      	strlt	r2, [r6, #0]
 800b1a4:	43bb      	bics	r3, r7
 800b1a6:	d112      	bne.n	800b1ce <_dtoa_r+0x9e>
 800b1a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1b4:	4323      	orrs	r3, r4
 800b1b6:	f000 854d 	beq.w	800bc54 <_dtoa_r+0xb24>
 800b1ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b414 <_dtoa_r+0x2e4>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 854f 	beq.w	800bc64 <_dtoa_r+0xb34>
 800b1c6:	f10a 0303 	add.w	r3, sl, #3
 800b1ca:	f000 bd49 	b.w	800bc60 <_dtoa_r+0xb30>
 800b1ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	ec51 0b17 	vmov	r0, r1, d7
 800b1d8:	2300      	movs	r3, #0
 800b1da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b1de:	f7f5 fc93 	bl	8000b08 <__aeabi_dcmpeq>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	b158      	cbz	r0, 800b1fe <_dtoa_r+0xce>
 800b1e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ee:	b113      	cbz	r3, 800b1f6 <_dtoa_r+0xc6>
 800b1f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1f2:	4b84      	ldr	r3, [pc, #528]	@ (800b404 <_dtoa_r+0x2d4>)
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b418 <_dtoa_r+0x2e8>
 800b1fa:	f000 bd33 	b.w	800bc64 <_dtoa_r+0xb34>
 800b1fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b202:	aa16      	add	r2, sp, #88	@ 0x58
 800b204:	a917      	add	r1, sp, #92	@ 0x5c
 800b206:	4658      	mov	r0, fp
 800b208:	f001 f980 	bl	800c50c <__d2b>
 800b20c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b210:	4681      	mov	r9, r0
 800b212:	2e00      	cmp	r6, #0
 800b214:	d077      	beq.n	800b306 <_dtoa_r+0x1d6>
 800b216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b218:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b22c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b230:	4619      	mov	r1, r3
 800b232:	2200      	movs	r2, #0
 800b234:	4b74      	ldr	r3, [pc, #464]	@ (800b408 <_dtoa_r+0x2d8>)
 800b236:	f7f5 f847 	bl	80002c8 <__aeabi_dsub>
 800b23a:	a369      	add	r3, pc, #420	@ (adr r3, 800b3e0 <_dtoa_r+0x2b0>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	f7f5 f9fa 	bl	8000638 <__aeabi_dmul>
 800b244:	a368      	add	r3, pc, #416	@ (adr r3, 800b3e8 <_dtoa_r+0x2b8>)
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	f7f5 f83f 	bl	80002cc <__adddf3>
 800b24e:	4604      	mov	r4, r0
 800b250:	4630      	mov	r0, r6
 800b252:	460d      	mov	r5, r1
 800b254:	f7f5 f986 	bl	8000564 <__aeabi_i2d>
 800b258:	a365      	add	r3, pc, #404	@ (adr r3, 800b3f0 <_dtoa_r+0x2c0>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f9eb 	bl	8000638 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f82f 	bl	80002cc <__adddf3>
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	f7f5 fc91 	bl	8000b98 <__aeabi_d2iz>
 800b276:	2200      	movs	r2, #0
 800b278:	4607      	mov	r7, r0
 800b27a:	2300      	movs	r3, #0
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f5 fc4c 	bl	8000b1c <__aeabi_dcmplt>
 800b284:	b140      	cbz	r0, 800b298 <_dtoa_r+0x168>
 800b286:	4638      	mov	r0, r7
 800b288:	f7f5 f96c 	bl	8000564 <__aeabi_i2d>
 800b28c:	4622      	mov	r2, r4
 800b28e:	462b      	mov	r3, r5
 800b290:	f7f5 fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 800b294:	b900      	cbnz	r0, 800b298 <_dtoa_r+0x168>
 800b296:	3f01      	subs	r7, #1
 800b298:	2f16      	cmp	r7, #22
 800b29a:	d851      	bhi.n	800b340 <_dtoa_r+0x210>
 800b29c:	4b5b      	ldr	r3, [pc, #364]	@ (800b40c <_dtoa_r+0x2dc>)
 800b29e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2aa:	f7f5 fc37 	bl	8000b1c <__aeabi_dcmplt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d048      	beq.n	800b344 <_dtoa_r+0x214>
 800b2b2:	3f01      	subs	r7, #1
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b2b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2ba:	1b9b      	subs	r3, r3, r6
 800b2bc:	1e5a      	subs	r2, r3, #1
 800b2be:	bf44      	itt	mi
 800b2c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b2c4:	2300      	movmi	r3, #0
 800b2c6:	9208      	str	r2, [sp, #32]
 800b2c8:	bf54      	ite	pl
 800b2ca:	f04f 0800 	movpl.w	r8, #0
 800b2ce:	9308      	strmi	r3, [sp, #32]
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	db39      	blt.n	800b348 <_dtoa_r+0x218>
 800b2d4:	9b08      	ldr	r3, [sp, #32]
 800b2d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b2d8:	443b      	add	r3, r7
 800b2da:	9308      	str	r3, [sp, #32]
 800b2dc:	2300      	movs	r3, #0
 800b2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e2:	2b09      	cmp	r3, #9
 800b2e4:	d864      	bhi.n	800b3b0 <_dtoa_r+0x280>
 800b2e6:	2b05      	cmp	r3, #5
 800b2e8:	bfc4      	itt	gt
 800b2ea:	3b04      	subgt	r3, #4
 800b2ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f0:	f1a3 0302 	sub.w	r3, r3, #2
 800b2f4:	bfcc      	ite	gt
 800b2f6:	2400      	movgt	r4, #0
 800b2f8:	2401      	movle	r4, #1
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d863      	bhi.n	800b3c6 <_dtoa_r+0x296>
 800b2fe:	e8df f003 	tbb	[pc, r3]
 800b302:	372a      	.short	0x372a
 800b304:	5535      	.short	0x5535
 800b306:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b30a:	441e      	add	r6, r3
 800b30c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b310:	2b20      	cmp	r3, #32
 800b312:	bfc1      	itttt	gt
 800b314:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b318:	409f      	lslgt	r7, r3
 800b31a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b31e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b322:	bfd6      	itet	le
 800b324:	f1c3 0320 	rsble	r3, r3, #32
 800b328:	ea47 0003 	orrgt.w	r0, r7, r3
 800b32c:	fa04 f003 	lslle.w	r0, r4, r3
 800b330:	f7f5 f908 	bl	8000544 <__aeabi_ui2d>
 800b334:	2201      	movs	r2, #1
 800b336:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b33a:	3e01      	subs	r6, #1
 800b33c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b33e:	e777      	b.n	800b230 <_dtoa_r+0x100>
 800b340:	2301      	movs	r3, #1
 800b342:	e7b8      	b.n	800b2b6 <_dtoa_r+0x186>
 800b344:	9012      	str	r0, [sp, #72]	@ 0x48
 800b346:	e7b7      	b.n	800b2b8 <_dtoa_r+0x188>
 800b348:	427b      	negs	r3, r7
 800b34a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b34c:	2300      	movs	r3, #0
 800b34e:	eba8 0807 	sub.w	r8, r8, r7
 800b352:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b354:	e7c4      	b.n	800b2e0 <_dtoa_r+0x1b0>
 800b356:	2300      	movs	r3, #0
 800b358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b35a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	dc35      	bgt.n	800b3cc <_dtoa_r+0x29c>
 800b360:	2301      	movs	r3, #1
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	9307      	str	r3, [sp, #28]
 800b366:	461a      	mov	r2, r3
 800b368:	920e      	str	r2, [sp, #56]	@ 0x38
 800b36a:	e00b      	b.n	800b384 <_dtoa_r+0x254>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e7f3      	b.n	800b358 <_dtoa_r+0x228>
 800b370:	2300      	movs	r3, #0
 800b372:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b376:	18fb      	adds	r3, r7, r3
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	3301      	adds	r3, #1
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	9307      	str	r3, [sp, #28]
 800b380:	bfb8      	it	lt
 800b382:	2301      	movlt	r3, #1
 800b384:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b388:	2100      	movs	r1, #0
 800b38a:	2204      	movs	r2, #4
 800b38c:	f102 0514 	add.w	r5, r2, #20
 800b390:	429d      	cmp	r5, r3
 800b392:	d91f      	bls.n	800b3d4 <_dtoa_r+0x2a4>
 800b394:	6041      	str	r1, [r0, #4]
 800b396:	4658      	mov	r0, fp
 800b398:	f000 fd8e 	bl	800beb8 <_Balloc>
 800b39c:	4682      	mov	sl, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d13c      	bne.n	800b41c <_dtoa_r+0x2ec>
 800b3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b410 <_dtoa_r+0x2e0>)
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3aa:	e6d8      	b.n	800b15e <_dtoa_r+0x2e>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e7e0      	b.n	800b372 <_dtoa_r+0x242>
 800b3b0:	2401      	movs	r4, #1
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2312      	movs	r3, #18
 800b3c4:	e7d0      	b.n	800b368 <_dtoa_r+0x238>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3ca:	e7f5      	b.n	800b3b8 <_dtoa_r+0x288>
 800b3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	9307      	str	r3, [sp, #28]
 800b3d2:	e7d7      	b.n	800b384 <_dtoa_r+0x254>
 800b3d4:	3101      	adds	r1, #1
 800b3d6:	0052      	lsls	r2, r2, #1
 800b3d8:	e7d8      	b.n	800b38c <_dtoa_r+0x25c>
 800b3da:	bf00      	nop
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	636f4361 	.word	0x636f4361
 800b3e4:	3fd287a7 	.word	0x3fd287a7
 800b3e8:	8b60c8b3 	.word	0x8b60c8b3
 800b3ec:	3fc68a28 	.word	0x3fc68a28
 800b3f0:	509f79fb 	.word	0x509f79fb
 800b3f4:	3fd34413 	.word	0x3fd34413
 800b3f8:	0800d9fd 	.word	0x0800d9fd
 800b3fc:	0800da14 	.word	0x0800da14
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	0800d9cd 	.word	0x0800d9cd
 800b408:	3ff80000 	.word	0x3ff80000
 800b40c:	0800db10 	.word	0x0800db10
 800b410:	0800da6c 	.word	0x0800da6c
 800b414:	0800d9f9 	.word	0x0800d9f9
 800b418:	0800d9cc 	.word	0x0800d9cc
 800b41c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b420:	6018      	str	r0, [r3, #0]
 800b422:	9b07      	ldr	r3, [sp, #28]
 800b424:	2b0e      	cmp	r3, #14
 800b426:	f200 80a4 	bhi.w	800b572 <_dtoa_r+0x442>
 800b42a:	2c00      	cmp	r4, #0
 800b42c:	f000 80a1 	beq.w	800b572 <_dtoa_r+0x442>
 800b430:	2f00      	cmp	r7, #0
 800b432:	dd33      	ble.n	800b49c <_dtoa_r+0x36c>
 800b434:	4bad      	ldr	r3, [pc, #692]	@ (800b6ec <_dtoa_r+0x5bc>)
 800b436:	f007 020f 	and.w	r2, r7, #15
 800b43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43e:	ed93 7b00 	vldr	d7, [r3]
 800b442:	05f8      	lsls	r0, r7, #23
 800b444:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b448:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b44c:	d516      	bpl.n	800b47c <_dtoa_r+0x34c>
 800b44e:	4ba8      	ldr	r3, [pc, #672]	@ (800b6f0 <_dtoa_r+0x5c0>)
 800b450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b458:	f7f5 fa18 	bl	800088c <__aeabi_ddiv>
 800b45c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b460:	f004 040f 	and.w	r4, r4, #15
 800b464:	2603      	movs	r6, #3
 800b466:	4da2      	ldr	r5, [pc, #648]	@ (800b6f0 <_dtoa_r+0x5c0>)
 800b468:	b954      	cbnz	r4, 800b480 <_dtoa_r+0x350>
 800b46a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b472:	f7f5 fa0b 	bl	800088c <__aeabi_ddiv>
 800b476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b47a:	e028      	b.n	800b4ce <_dtoa_r+0x39e>
 800b47c:	2602      	movs	r6, #2
 800b47e:	e7f2      	b.n	800b466 <_dtoa_r+0x336>
 800b480:	07e1      	lsls	r1, r4, #31
 800b482:	d508      	bpl.n	800b496 <_dtoa_r+0x366>
 800b484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b494:	3601      	adds	r6, #1
 800b496:	1064      	asrs	r4, r4, #1
 800b498:	3508      	adds	r5, #8
 800b49a:	e7e5      	b.n	800b468 <_dtoa_r+0x338>
 800b49c:	f000 80d2 	beq.w	800b644 <_dtoa_r+0x514>
 800b4a0:	427c      	negs	r4, r7
 800b4a2:	4b92      	ldr	r3, [pc, #584]	@ (800b6ec <_dtoa_r+0x5bc>)
 800b4a4:	4d92      	ldr	r5, [pc, #584]	@ (800b6f0 <_dtoa_r+0x5c0>)
 800b4a6:	f004 020f 	and.w	r2, r4, #15
 800b4aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4b6:	f7f5 f8bf 	bl	8000638 <__aeabi_dmul>
 800b4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4be:	1124      	asrs	r4, r4, #4
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	2602      	movs	r6, #2
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	f040 80b2 	bne.w	800b62e <_dtoa_r+0x4fe>
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1d3      	bne.n	800b476 <_dtoa_r+0x346>
 800b4ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f000 80b7 	beq.w	800b648 <_dtoa_r+0x518>
 800b4da:	4b86      	ldr	r3, [pc, #536]	@ (800b6f4 <_dtoa_r+0x5c4>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4620      	mov	r0, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7f5 fb1b 	bl	8000b1c <__aeabi_dcmplt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f000 80ae 	beq.w	800b648 <_dtoa_r+0x518>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 80aa 	beq.w	800b648 <_dtoa_r+0x518>
 800b4f4:	9b00      	ldr	r3, [sp, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dd37      	ble.n	800b56a <_dtoa_r+0x43a>
 800b4fa:	1e7b      	subs	r3, r7, #1
 800b4fc:	9304      	str	r3, [sp, #16]
 800b4fe:	4620      	mov	r0, r4
 800b500:	4b7d      	ldr	r3, [pc, #500]	@ (800b6f8 <_dtoa_r+0x5c8>)
 800b502:	2200      	movs	r2, #0
 800b504:	4629      	mov	r1, r5
 800b506:	f7f5 f897 	bl	8000638 <__aeabi_dmul>
 800b50a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b50e:	9c00      	ldr	r4, [sp, #0]
 800b510:	3601      	adds	r6, #1
 800b512:	4630      	mov	r0, r6
 800b514:	f7f5 f826 	bl	8000564 <__aeabi_i2d>
 800b518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51c:	f7f5 f88c 	bl	8000638 <__aeabi_dmul>
 800b520:	4b76      	ldr	r3, [pc, #472]	@ (800b6fc <_dtoa_r+0x5cc>)
 800b522:	2200      	movs	r2, #0
 800b524:	f7f4 fed2 	bl	80002cc <__adddf3>
 800b528:	4605      	mov	r5, r0
 800b52a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b52e:	2c00      	cmp	r4, #0
 800b530:	f040 808d 	bne.w	800b64e <_dtoa_r+0x51e>
 800b534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b538:	4b71      	ldr	r3, [pc, #452]	@ (800b700 <_dtoa_r+0x5d0>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	f7f4 fec4 	bl	80002c8 <__aeabi_dsub>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b548:	462a      	mov	r2, r5
 800b54a:	4633      	mov	r3, r6
 800b54c:	f7f5 fb04 	bl	8000b58 <__aeabi_dcmpgt>
 800b550:	2800      	cmp	r0, #0
 800b552:	f040 828b 	bne.w	800ba6c <_dtoa_r+0x93c>
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	462a      	mov	r2, r5
 800b55c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b560:	f7f5 fadc 	bl	8000b1c <__aeabi_dcmplt>
 800b564:	2800      	cmp	r0, #0
 800b566:	f040 8128 	bne.w	800b7ba <_dtoa_r+0x68a>
 800b56a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b56e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b572:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b574:	2b00      	cmp	r3, #0
 800b576:	f2c0 815a 	blt.w	800b82e <_dtoa_r+0x6fe>
 800b57a:	2f0e      	cmp	r7, #14
 800b57c:	f300 8157 	bgt.w	800b82e <_dtoa_r+0x6fe>
 800b580:	4b5a      	ldr	r3, [pc, #360]	@ (800b6ec <_dtoa_r+0x5bc>)
 800b582:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b586:	ed93 7b00 	vldr	d7, [r3]
 800b58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	ed8d 7b00 	vstr	d7, [sp]
 800b592:	da03      	bge.n	800b59c <_dtoa_r+0x46c>
 800b594:	9b07      	ldr	r3, [sp, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f340 8101 	ble.w	800b79e <_dtoa_r+0x66e>
 800b59c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5a0:	4656      	mov	r6, sl
 800b5a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7f5 f96f 	bl	800088c <__aeabi_ddiv>
 800b5ae:	f7f5 faf3 	bl	8000b98 <__aeabi_d2iz>
 800b5b2:	4680      	mov	r8, r0
 800b5b4:	f7f4 ffd6 	bl	8000564 <__aeabi_i2d>
 800b5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5bc:	f7f5 f83c 	bl	8000638 <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b5cc:	f7f4 fe7c 	bl	80002c8 <__aeabi_dsub>
 800b5d0:	f806 4b01 	strb.w	r4, [r6], #1
 800b5d4:	9d07      	ldr	r5, [sp, #28]
 800b5d6:	eba6 040a 	sub.w	r4, r6, sl
 800b5da:	42a5      	cmp	r5, r4
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	f040 8117 	bne.w	800b812 <_dtoa_r+0x6e2>
 800b5e4:	f7f4 fe72 	bl	80002cc <__adddf3>
 800b5e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	f7f5 fab2 	bl	8000b58 <__aeabi_dcmpgt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	f040 80f9 	bne.w	800b7ec <_dtoa_r+0x6bc>
 800b5fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f5 fa81 	bl	8000b08 <__aeabi_dcmpeq>
 800b606:	b118      	cbz	r0, 800b610 <_dtoa_r+0x4e0>
 800b608:	f018 0f01 	tst.w	r8, #1
 800b60c:	f040 80ee 	bne.w	800b7ec <_dtoa_r+0x6bc>
 800b610:	4649      	mov	r1, r9
 800b612:	4658      	mov	r0, fp
 800b614:	f000 fc90 	bl	800bf38 <_Bfree>
 800b618:	2300      	movs	r3, #0
 800b61a:	7033      	strb	r3, [r6, #0]
 800b61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b61e:	3701      	adds	r7, #1
 800b620:	601f      	str	r7, [r3, #0]
 800b622:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 831d 	beq.w	800bc64 <_dtoa_r+0xb34>
 800b62a:	601e      	str	r6, [r3, #0]
 800b62c:	e31a      	b.n	800bc64 <_dtoa_r+0xb34>
 800b62e:	07e2      	lsls	r2, r4, #31
 800b630:	d505      	bpl.n	800b63e <_dtoa_r+0x50e>
 800b632:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	3601      	adds	r6, #1
 800b63c:	2301      	movs	r3, #1
 800b63e:	1064      	asrs	r4, r4, #1
 800b640:	3508      	adds	r5, #8
 800b642:	e73f      	b.n	800b4c4 <_dtoa_r+0x394>
 800b644:	2602      	movs	r6, #2
 800b646:	e742      	b.n	800b4ce <_dtoa_r+0x39e>
 800b648:	9c07      	ldr	r4, [sp, #28]
 800b64a:	9704      	str	r7, [sp, #16]
 800b64c:	e761      	b.n	800b512 <_dtoa_r+0x3e2>
 800b64e:	4b27      	ldr	r3, [pc, #156]	@ (800b6ec <_dtoa_r+0x5bc>)
 800b650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b656:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b65a:	4454      	add	r4, sl
 800b65c:	2900      	cmp	r1, #0
 800b65e:	d053      	beq.n	800b708 <_dtoa_r+0x5d8>
 800b660:	4928      	ldr	r1, [pc, #160]	@ (800b704 <_dtoa_r+0x5d4>)
 800b662:	2000      	movs	r0, #0
 800b664:	f7f5 f912 	bl	800088c <__aeabi_ddiv>
 800b668:	4633      	mov	r3, r6
 800b66a:	462a      	mov	r2, r5
 800b66c:	f7f4 fe2c 	bl	80002c8 <__aeabi_dsub>
 800b670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b674:	4656      	mov	r6, sl
 800b676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b67a:	f7f5 fa8d 	bl	8000b98 <__aeabi_d2iz>
 800b67e:	4605      	mov	r5, r0
 800b680:	f7f4 ff70 	bl	8000564 <__aeabi_i2d>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b68c:	f7f4 fe1c 	bl	80002c8 <__aeabi_dsub>
 800b690:	3530      	adds	r5, #48	@ 0x30
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b69a:	f806 5b01 	strb.w	r5, [r6], #1
 800b69e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6a2:	f7f5 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d171      	bne.n	800b78e <_dtoa_r+0x65e>
 800b6aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6ae:	4911      	ldr	r1, [pc, #68]	@ (800b6f4 <_dtoa_r+0x5c4>)
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f7f4 fe09 	bl	80002c8 <__aeabi_dsub>
 800b6b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ba:	f7f5 fa2f 	bl	8000b1c <__aeabi_dcmplt>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f040 8095 	bne.w	800b7ee <_dtoa_r+0x6be>
 800b6c4:	42a6      	cmp	r6, r4
 800b6c6:	f43f af50 	beq.w	800b56a <_dtoa_r+0x43a>
 800b6ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <_dtoa_r+0x5c8>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f7f4 ffb1 	bl	8000638 <__aeabi_dmul>
 800b6d6:	4b08      	ldr	r3, [pc, #32]	@ (800b6f8 <_dtoa_r+0x5c8>)
 800b6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6dc:	2200      	movs	r2, #0
 800b6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e2:	f7f4 ffa9 	bl	8000638 <__aeabi_dmul>
 800b6e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ea:	e7c4      	b.n	800b676 <_dtoa_r+0x546>
 800b6ec:	0800db10 	.word	0x0800db10
 800b6f0:	0800dae8 	.word	0x0800dae8
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	40240000 	.word	0x40240000
 800b6fc:	401c0000 	.word	0x401c0000
 800b700:	40140000 	.word	0x40140000
 800b704:	3fe00000 	.word	0x3fe00000
 800b708:	4631      	mov	r1, r6
 800b70a:	4628      	mov	r0, r5
 800b70c:	f7f4 ff94 	bl	8000638 <__aeabi_dmul>
 800b710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b714:	9415      	str	r4, [sp, #84]	@ 0x54
 800b716:	4656      	mov	r6, sl
 800b718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71c:	f7f5 fa3c 	bl	8000b98 <__aeabi_d2iz>
 800b720:	4605      	mov	r5, r0
 800b722:	f7f4 ff1f 	bl	8000564 <__aeabi_i2d>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72e:	f7f4 fdcb 	bl	80002c8 <__aeabi_dsub>
 800b732:	3530      	adds	r5, #48	@ 0x30
 800b734:	f806 5b01 	strb.w	r5, [r6], #1
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	42a6      	cmp	r6, r4
 800b73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b742:	f04f 0200 	mov.w	r2, #0
 800b746:	d124      	bne.n	800b792 <_dtoa_r+0x662>
 800b748:	4bac      	ldr	r3, [pc, #688]	@ (800b9fc <_dtoa_r+0x8cc>)
 800b74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b74e:	f7f4 fdbd 	bl	80002cc <__adddf3>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b75a:	f7f5 f9fd 	bl	8000b58 <__aeabi_dcmpgt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d145      	bne.n	800b7ee <_dtoa_r+0x6be>
 800b762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b766:	49a5      	ldr	r1, [pc, #660]	@ (800b9fc <_dtoa_r+0x8cc>)
 800b768:	2000      	movs	r0, #0
 800b76a:	f7f4 fdad 	bl	80002c8 <__aeabi_dsub>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b776:	f7f5 f9d1 	bl	8000b1c <__aeabi_dcmplt>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f43f aef5 	beq.w	800b56a <_dtoa_r+0x43a>
 800b780:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b782:	1e73      	subs	r3, r6, #1
 800b784:	9315      	str	r3, [sp, #84]	@ 0x54
 800b786:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b78a:	2b30      	cmp	r3, #48	@ 0x30
 800b78c:	d0f8      	beq.n	800b780 <_dtoa_r+0x650>
 800b78e:	9f04      	ldr	r7, [sp, #16]
 800b790:	e73e      	b.n	800b610 <_dtoa_r+0x4e0>
 800b792:	4b9b      	ldr	r3, [pc, #620]	@ (800ba00 <_dtoa_r+0x8d0>)
 800b794:	f7f4 ff50 	bl	8000638 <__aeabi_dmul>
 800b798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b79c:	e7bc      	b.n	800b718 <_dtoa_r+0x5e8>
 800b79e:	d10c      	bne.n	800b7ba <_dtoa_r+0x68a>
 800b7a0:	4b98      	ldr	r3, [pc, #608]	@ (800ba04 <_dtoa_r+0x8d4>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7a8:	f7f4 ff46 	bl	8000638 <__aeabi_dmul>
 800b7ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7b0:	f7f5 f9c8 	bl	8000b44 <__aeabi_dcmpge>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f000 8157 	beq.w	800ba68 <_dtoa_r+0x938>
 800b7ba:	2400      	movs	r4, #0
 800b7bc:	4625      	mov	r5, r4
 800b7be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	4656      	mov	r6, sl
 800b7c6:	2700      	movs	r7, #0
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f000 fbb4 	bl	800bf38 <_Bfree>
 800b7d0:	2d00      	cmp	r5, #0
 800b7d2:	d0dc      	beq.n	800b78e <_dtoa_r+0x65e>
 800b7d4:	b12f      	cbz	r7, 800b7e2 <_dtoa_r+0x6b2>
 800b7d6:	42af      	cmp	r7, r5
 800b7d8:	d003      	beq.n	800b7e2 <_dtoa_r+0x6b2>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4658      	mov	r0, fp
 800b7de:	f000 fbab 	bl	800bf38 <_Bfree>
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4658      	mov	r0, fp
 800b7e6:	f000 fba7 	bl	800bf38 <_Bfree>
 800b7ea:	e7d0      	b.n	800b78e <_dtoa_r+0x65e>
 800b7ec:	9704      	str	r7, [sp, #16]
 800b7ee:	4633      	mov	r3, r6
 800b7f0:	461e      	mov	r6, r3
 800b7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7f6:	2a39      	cmp	r2, #57	@ 0x39
 800b7f8:	d107      	bne.n	800b80a <_dtoa_r+0x6da>
 800b7fa:	459a      	cmp	sl, r3
 800b7fc:	d1f8      	bne.n	800b7f0 <_dtoa_r+0x6c0>
 800b7fe:	9a04      	ldr	r2, [sp, #16]
 800b800:	3201      	adds	r2, #1
 800b802:	9204      	str	r2, [sp, #16]
 800b804:	2230      	movs	r2, #48	@ 0x30
 800b806:	f88a 2000 	strb.w	r2, [sl]
 800b80a:	781a      	ldrb	r2, [r3, #0]
 800b80c:	3201      	adds	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e7bd      	b.n	800b78e <_dtoa_r+0x65e>
 800b812:	4b7b      	ldr	r3, [pc, #492]	@ (800ba00 <_dtoa_r+0x8d0>)
 800b814:	2200      	movs	r2, #0
 800b816:	f7f4 ff0f 	bl	8000638 <__aeabi_dmul>
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	460d      	mov	r5, r1
 800b822:	f7f5 f971 	bl	8000b08 <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	f43f aebb 	beq.w	800b5a2 <_dtoa_r+0x472>
 800b82c:	e6f0      	b.n	800b610 <_dtoa_r+0x4e0>
 800b82e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b830:	2a00      	cmp	r2, #0
 800b832:	f000 80db 	beq.w	800b9ec <_dtoa_r+0x8bc>
 800b836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b838:	2a01      	cmp	r2, #1
 800b83a:	f300 80bf 	bgt.w	800b9bc <_dtoa_r+0x88c>
 800b83e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b840:	2a00      	cmp	r2, #0
 800b842:	f000 80b7 	beq.w	800b9b4 <_dtoa_r+0x884>
 800b846:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b84a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b84c:	4646      	mov	r6, r8
 800b84e:	9a08      	ldr	r2, [sp, #32]
 800b850:	2101      	movs	r1, #1
 800b852:	441a      	add	r2, r3
 800b854:	4658      	mov	r0, fp
 800b856:	4498      	add	r8, r3
 800b858:	9208      	str	r2, [sp, #32]
 800b85a:	f000 fc21 	bl	800c0a0 <__i2b>
 800b85e:	4605      	mov	r5, r0
 800b860:	b15e      	cbz	r6, 800b87a <_dtoa_r+0x74a>
 800b862:	9b08      	ldr	r3, [sp, #32]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd08      	ble.n	800b87a <_dtoa_r+0x74a>
 800b868:	42b3      	cmp	r3, r6
 800b86a:	9a08      	ldr	r2, [sp, #32]
 800b86c:	bfa8      	it	ge
 800b86e:	4633      	movge	r3, r6
 800b870:	eba8 0803 	sub.w	r8, r8, r3
 800b874:	1af6      	subs	r6, r6, r3
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	9308      	str	r3, [sp, #32]
 800b87a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87c:	b1f3      	cbz	r3, 800b8bc <_dtoa_r+0x78c>
 800b87e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 80b7 	beq.w	800b9f4 <_dtoa_r+0x8c4>
 800b886:	b18c      	cbz	r4, 800b8ac <_dtoa_r+0x77c>
 800b888:	4629      	mov	r1, r5
 800b88a:	4622      	mov	r2, r4
 800b88c:	4658      	mov	r0, fp
 800b88e:	f000 fcc7 	bl	800c220 <__pow5mult>
 800b892:	464a      	mov	r2, r9
 800b894:	4601      	mov	r1, r0
 800b896:	4605      	mov	r5, r0
 800b898:	4658      	mov	r0, fp
 800b89a:	f000 fc17 	bl	800c0cc <__multiply>
 800b89e:	4649      	mov	r1, r9
 800b8a0:	9004      	str	r0, [sp, #16]
 800b8a2:	4658      	mov	r0, fp
 800b8a4:	f000 fb48 	bl	800bf38 <_Bfree>
 800b8a8:	9b04      	ldr	r3, [sp, #16]
 800b8aa:	4699      	mov	r9, r3
 800b8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ae:	1b1a      	subs	r2, r3, r4
 800b8b0:	d004      	beq.n	800b8bc <_dtoa_r+0x78c>
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4658      	mov	r0, fp
 800b8b6:	f000 fcb3 	bl	800c220 <__pow5mult>
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	2101      	movs	r1, #1
 800b8be:	4658      	mov	r0, fp
 800b8c0:	f000 fbee 	bl	800c0a0 <__i2b>
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 81cf 	beq.w	800bc6c <_dtoa_r+0xb3c>
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	4601      	mov	r1, r0
 800b8d2:	4658      	mov	r0, fp
 800b8d4:	f000 fca4 	bl	800c220 <__pow5mult>
 800b8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	4604      	mov	r4, r0
 800b8de:	f300 8095 	bgt.w	800ba0c <_dtoa_r+0x8dc>
 800b8e2:	9b02      	ldr	r3, [sp, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 8087 	bne.w	800b9f8 <_dtoa_r+0x8c8>
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f040 8089 	bne.w	800ba08 <_dtoa_r+0x8d8>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8fc:	0d1b      	lsrs	r3, r3, #20
 800b8fe:	051b      	lsls	r3, r3, #20
 800b900:	b12b      	cbz	r3, 800b90e <_dtoa_r+0x7de>
 800b902:	9b08      	ldr	r3, [sp, #32]
 800b904:	3301      	adds	r3, #1
 800b906:	9308      	str	r3, [sp, #32]
 800b908:	f108 0801 	add.w	r8, r8, #1
 800b90c:	2301      	movs	r3, #1
 800b90e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 81b0 	beq.w	800bc78 <_dtoa_r+0xb48>
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b91e:	6918      	ldr	r0, [r3, #16]
 800b920:	f000 fb72 	bl	800c008 <__hi0bits>
 800b924:	f1c0 0020 	rsb	r0, r0, #32
 800b928:	9b08      	ldr	r3, [sp, #32]
 800b92a:	4418      	add	r0, r3
 800b92c:	f010 001f 	ands.w	r0, r0, #31
 800b930:	d077      	beq.n	800ba22 <_dtoa_r+0x8f2>
 800b932:	f1c0 0320 	rsb	r3, r0, #32
 800b936:	2b04      	cmp	r3, #4
 800b938:	dd6b      	ble.n	800ba12 <_dtoa_r+0x8e2>
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	f1c0 001c 	rsb	r0, r0, #28
 800b940:	4403      	add	r3, r0
 800b942:	4480      	add	r8, r0
 800b944:	4406      	add	r6, r0
 800b946:	9308      	str	r3, [sp, #32]
 800b948:	f1b8 0f00 	cmp.w	r8, #0
 800b94c:	dd05      	ble.n	800b95a <_dtoa_r+0x82a>
 800b94e:	4649      	mov	r1, r9
 800b950:	4642      	mov	r2, r8
 800b952:	4658      	mov	r0, fp
 800b954:	f000 fcbe 	bl	800c2d4 <__lshift>
 800b958:	4681      	mov	r9, r0
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	dd05      	ble.n	800b96c <_dtoa_r+0x83c>
 800b960:	4621      	mov	r1, r4
 800b962:	461a      	mov	r2, r3
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fcb5 	bl	800c2d4 <__lshift>
 800b96a:	4604      	mov	r4, r0
 800b96c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d059      	beq.n	800ba26 <_dtoa_r+0x8f6>
 800b972:	4621      	mov	r1, r4
 800b974:	4648      	mov	r0, r9
 800b976:	f000 fd19 	bl	800c3ac <__mcmp>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	da53      	bge.n	800ba26 <_dtoa_r+0x8f6>
 800b97e:	1e7b      	subs	r3, r7, #1
 800b980:	9304      	str	r3, [sp, #16]
 800b982:	4649      	mov	r1, r9
 800b984:	2300      	movs	r3, #0
 800b986:	220a      	movs	r2, #10
 800b988:	4658      	mov	r0, fp
 800b98a:	f000 faf7 	bl	800bf7c <__multadd>
 800b98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b990:	4681      	mov	r9, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 8172 	beq.w	800bc7c <_dtoa_r+0xb4c>
 800b998:	2300      	movs	r3, #0
 800b99a:	4629      	mov	r1, r5
 800b99c:	220a      	movs	r2, #10
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f000 faec 	bl	800bf7c <__multadd>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	dc67      	bgt.n	800ba7c <_dtoa_r+0x94c>
 800b9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	dc41      	bgt.n	800ba36 <_dtoa_r+0x906>
 800b9b2:	e063      	b.n	800ba7c <_dtoa_r+0x94c>
 800b9b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9ba:	e746      	b.n	800b84a <_dtoa_r+0x71a>
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	1e5c      	subs	r4, r3, #1
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	bfbf      	itttt	lt
 800b9c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b9c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b9ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b9cc:	1ae3      	sublt	r3, r4, r3
 800b9ce:	bfb4      	ite	lt
 800b9d0:	18d2      	addlt	r2, r2, r3
 800b9d2:	1b1c      	subge	r4, r3, r4
 800b9d4:	9b07      	ldr	r3, [sp, #28]
 800b9d6:	bfbc      	itt	lt
 800b9d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b9da:	2400      	movlt	r4, #0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	bfb5      	itete	lt
 800b9e0:	eba8 0603 	sublt.w	r6, r8, r3
 800b9e4:	9b07      	ldrge	r3, [sp, #28]
 800b9e6:	2300      	movlt	r3, #0
 800b9e8:	4646      	movge	r6, r8
 800b9ea:	e730      	b.n	800b84e <_dtoa_r+0x71e>
 800b9ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b9ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b9f0:	4646      	mov	r6, r8
 800b9f2:	e735      	b.n	800b860 <_dtoa_r+0x730>
 800b9f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9f6:	e75c      	b.n	800b8b2 <_dtoa_r+0x782>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	e788      	b.n	800b90e <_dtoa_r+0x7de>
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	40240000 	.word	0x40240000
 800ba04:	40140000 	.word	0x40140000
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	e780      	b.n	800b90e <_dtoa_r+0x7de>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba10:	e782      	b.n	800b918 <_dtoa_r+0x7e8>
 800ba12:	d099      	beq.n	800b948 <_dtoa_r+0x818>
 800ba14:	9a08      	ldr	r2, [sp, #32]
 800ba16:	331c      	adds	r3, #28
 800ba18:	441a      	add	r2, r3
 800ba1a:	4498      	add	r8, r3
 800ba1c:	441e      	add	r6, r3
 800ba1e:	9208      	str	r2, [sp, #32]
 800ba20:	e792      	b.n	800b948 <_dtoa_r+0x818>
 800ba22:	4603      	mov	r3, r0
 800ba24:	e7f6      	b.n	800ba14 <_dtoa_r+0x8e4>
 800ba26:	9b07      	ldr	r3, [sp, #28]
 800ba28:	9704      	str	r7, [sp, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dc20      	bgt.n	800ba70 <_dtoa_r+0x940>
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	dd1e      	ble.n	800ba74 <_dtoa_r+0x944>
 800ba36:	9b00      	ldr	r3, [sp, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f47f aec0 	bne.w	800b7be <_dtoa_r+0x68e>
 800ba3e:	4621      	mov	r1, r4
 800ba40:	2205      	movs	r2, #5
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 fa9a 	bl	800bf7c <__multadd>
 800ba48:	4601      	mov	r1, r0
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 fcad 	bl	800c3ac <__mcmp>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	f77f aeb3 	ble.w	800b7be <_dtoa_r+0x68e>
 800ba58:	4656      	mov	r6, sl
 800ba5a:	2331      	movs	r3, #49	@ 0x31
 800ba5c:	f806 3b01 	strb.w	r3, [r6], #1
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	3301      	adds	r3, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	e6ae      	b.n	800b7c6 <_dtoa_r+0x696>
 800ba68:	9c07      	ldr	r4, [sp, #28]
 800ba6a:	9704      	str	r7, [sp, #16]
 800ba6c:	4625      	mov	r5, r4
 800ba6e:	e7f3      	b.n	800ba58 <_dtoa_r+0x928>
 800ba70:	9b07      	ldr	r3, [sp, #28]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8104 	beq.w	800bc84 <_dtoa_r+0xb54>
 800ba7c:	2e00      	cmp	r6, #0
 800ba7e:	dd05      	ble.n	800ba8c <_dtoa_r+0x95c>
 800ba80:	4629      	mov	r1, r5
 800ba82:	4632      	mov	r2, r6
 800ba84:	4658      	mov	r0, fp
 800ba86:	f000 fc25 	bl	800c2d4 <__lshift>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d05a      	beq.n	800bb48 <_dtoa_r+0xa18>
 800ba92:	6869      	ldr	r1, [r5, #4]
 800ba94:	4658      	mov	r0, fp
 800ba96:	f000 fa0f 	bl	800beb8 <_Balloc>
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	b928      	cbnz	r0, 800baaa <_dtoa_r+0x97a>
 800ba9e:	4b84      	ldr	r3, [pc, #528]	@ (800bcb0 <_dtoa_r+0xb80>)
 800baa0:	4602      	mov	r2, r0
 800baa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800baa6:	f7ff bb5a 	b.w	800b15e <_dtoa_r+0x2e>
 800baaa:	692a      	ldr	r2, [r5, #16]
 800baac:	3202      	adds	r2, #2
 800baae:	0092      	lsls	r2, r2, #2
 800bab0:	f105 010c 	add.w	r1, r5, #12
 800bab4:	300c      	adds	r0, #12
 800bab6:	f7ff faa4 	bl	800b002 <memcpy>
 800baba:	2201      	movs	r2, #1
 800babc:	4631      	mov	r1, r6
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 fc08 	bl	800c2d4 <__lshift>
 800bac4:	f10a 0301 	add.w	r3, sl, #1
 800bac8:	9307      	str	r3, [sp, #28]
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	4453      	add	r3, sl
 800bace:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bad0:	9b02      	ldr	r3, [sp, #8]
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	462f      	mov	r7, r5
 800bad8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bada:	4605      	mov	r5, r0
 800badc:	9b07      	ldr	r3, [sp, #28]
 800bade:	4621      	mov	r1, r4
 800bae0:	3b01      	subs	r3, #1
 800bae2:	4648      	mov	r0, r9
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	f7ff fa9a 	bl	800b01e <quorem>
 800baea:	4639      	mov	r1, r7
 800baec:	9002      	str	r0, [sp, #8]
 800baee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baf2:	4648      	mov	r0, r9
 800baf4:	f000 fc5a 	bl	800c3ac <__mcmp>
 800baf8:	462a      	mov	r2, r5
 800bafa:	9008      	str	r0, [sp, #32]
 800bafc:	4621      	mov	r1, r4
 800bafe:	4658      	mov	r0, fp
 800bb00:	f000 fc70 	bl	800c3e4 <__mdiff>
 800bb04:	68c2      	ldr	r2, [r0, #12]
 800bb06:	4606      	mov	r6, r0
 800bb08:	bb02      	cbnz	r2, 800bb4c <_dtoa_r+0xa1c>
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4648      	mov	r0, r9
 800bb0e:	f000 fc4d 	bl	800c3ac <__mcmp>
 800bb12:	4602      	mov	r2, r0
 800bb14:	4631      	mov	r1, r6
 800bb16:	4658      	mov	r0, fp
 800bb18:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb1a:	f000 fa0d 	bl	800bf38 <_Bfree>
 800bb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb22:	9e07      	ldr	r6, [sp, #28]
 800bb24:	ea43 0102 	orr.w	r1, r3, r2
 800bb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb2a:	4319      	orrs	r1, r3
 800bb2c:	d110      	bne.n	800bb50 <_dtoa_r+0xa20>
 800bb2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb32:	d029      	beq.n	800bb88 <_dtoa_r+0xa58>
 800bb34:	9b08      	ldr	r3, [sp, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	dd02      	ble.n	800bb40 <_dtoa_r+0xa10>
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb40:	9b00      	ldr	r3, [sp, #0]
 800bb42:	f883 8000 	strb.w	r8, [r3]
 800bb46:	e63f      	b.n	800b7c8 <_dtoa_r+0x698>
 800bb48:	4628      	mov	r0, r5
 800bb4a:	e7bb      	b.n	800bac4 <_dtoa_r+0x994>
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	e7e1      	b.n	800bb14 <_dtoa_r+0x9e4>
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	db04      	blt.n	800bb60 <_dtoa_r+0xa30>
 800bb56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb5c:	430b      	orrs	r3, r1
 800bb5e:	d120      	bne.n	800bba2 <_dtoa_r+0xa72>
 800bb60:	2a00      	cmp	r2, #0
 800bb62:	dded      	ble.n	800bb40 <_dtoa_r+0xa10>
 800bb64:	4649      	mov	r1, r9
 800bb66:	2201      	movs	r2, #1
 800bb68:	4658      	mov	r0, fp
 800bb6a:	f000 fbb3 	bl	800c2d4 <__lshift>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4681      	mov	r9, r0
 800bb72:	f000 fc1b 	bl	800c3ac <__mcmp>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	dc03      	bgt.n	800bb82 <_dtoa_r+0xa52>
 800bb7a:	d1e1      	bne.n	800bb40 <_dtoa_r+0xa10>
 800bb7c:	f018 0f01 	tst.w	r8, #1
 800bb80:	d0de      	beq.n	800bb40 <_dtoa_r+0xa10>
 800bb82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb86:	d1d8      	bne.n	800bb3a <_dtoa_r+0xa0a>
 800bb88:	9a00      	ldr	r2, [sp, #0]
 800bb8a:	2339      	movs	r3, #57	@ 0x39
 800bb8c:	7013      	strb	r3, [r2, #0]
 800bb8e:	4633      	mov	r3, r6
 800bb90:	461e      	mov	r6, r3
 800bb92:	3b01      	subs	r3, #1
 800bb94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb98:	2a39      	cmp	r2, #57	@ 0x39
 800bb9a:	d052      	beq.n	800bc42 <_dtoa_r+0xb12>
 800bb9c:	3201      	adds	r2, #1
 800bb9e:	701a      	strb	r2, [r3, #0]
 800bba0:	e612      	b.n	800b7c8 <_dtoa_r+0x698>
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	dd07      	ble.n	800bbb6 <_dtoa_r+0xa86>
 800bba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbaa:	d0ed      	beq.n	800bb88 <_dtoa_r+0xa58>
 800bbac:	9a00      	ldr	r2, [sp, #0]
 800bbae:	f108 0301 	add.w	r3, r8, #1
 800bbb2:	7013      	strb	r3, [r2, #0]
 800bbb4:	e608      	b.n	800b7c8 <_dtoa_r+0x698>
 800bbb6:	9b07      	ldr	r3, [sp, #28]
 800bbb8:	9a07      	ldr	r2, [sp, #28]
 800bbba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d028      	beq.n	800bc16 <_dtoa_r+0xae6>
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	220a      	movs	r2, #10
 800bbca:	4658      	mov	r0, fp
 800bbcc:	f000 f9d6 	bl	800bf7c <__multadd>
 800bbd0:	42af      	cmp	r7, r5
 800bbd2:	4681      	mov	r9, r0
 800bbd4:	f04f 0300 	mov.w	r3, #0
 800bbd8:	f04f 020a 	mov.w	r2, #10
 800bbdc:	4639      	mov	r1, r7
 800bbde:	4658      	mov	r0, fp
 800bbe0:	d107      	bne.n	800bbf2 <_dtoa_r+0xac2>
 800bbe2:	f000 f9cb 	bl	800bf7c <__multadd>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	4605      	mov	r5, r0
 800bbea:	9b07      	ldr	r3, [sp, #28]
 800bbec:	3301      	adds	r3, #1
 800bbee:	9307      	str	r3, [sp, #28]
 800bbf0:	e774      	b.n	800badc <_dtoa_r+0x9ac>
 800bbf2:	f000 f9c3 	bl	800bf7c <__multadd>
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4607      	mov	r7, r0
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	220a      	movs	r2, #10
 800bbfe:	4658      	mov	r0, fp
 800bc00:	f000 f9bc 	bl	800bf7c <__multadd>
 800bc04:	4605      	mov	r5, r0
 800bc06:	e7f0      	b.n	800bbea <_dtoa_r+0xaba>
 800bc08:	9b00      	ldr	r3, [sp, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfcc      	ite	gt
 800bc0e:	461e      	movgt	r6, r3
 800bc10:	2601      	movle	r6, #1
 800bc12:	4456      	add	r6, sl
 800bc14:	2700      	movs	r7, #0
 800bc16:	4649      	mov	r1, r9
 800bc18:	2201      	movs	r2, #1
 800bc1a:	4658      	mov	r0, fp
 800bc1c:	f000 fb5a 	bl	800c2d4 <__lshift>
 800bc20:	4621      	mov	r1, r4
 800bc22:	4681      	mov	r9, r0
 800bc24:	f000 fbc2 	bl	800c3ac <__mcmp>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	dcb0      	bgt.n	800bb8e <_dtoa_r+0xa5e>
 800bc2c:	d102      	bne.n	800bc34 <_dtoa_r+0xb04>
 800bc2e:	f018 0f01 	tst.w	r8, #1
 800bc32:	d1ac      	bne.n	800bb8e <_dtoa_r+0xa5e>
 800bc34:	4633      	mov	r3, r6
 800bc36:	461e      	mov	r6, r3
 800bc38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc3c:	2a30      	cmp	r2, #48	@ 0x30
 800bc3e:	d0fa      	beq.n	800bc36 <_dtoa_r+0xb06>
 800bc40:	e5c2      	b.n	800b7c8 <_dtoa_r+0x698>
 800bc42:	459a      	cmp	sl, r3
 800bc44:	d1a4      	bne.n	800bb90 <_dtoa_r+0xa60>
 800bc46:	9b04      	ldr	r3, [sp, #16]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	2331      	movs	r3, #49	@ 0x31
 800bc4e:	f88a 3000 	strb.w	r3, [sl]
 800bc52:	e5b9      	b.n	800b7c8 <_dtoa_r+0x698>
 800bc54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bcb4 <_dtoa_r+0xb84>
 800bc5a:	b11b      	cbz	r3, 800bc64 <_dtoa_r+0xb34>
 800bc5c:	f10a 0308 	add.w	r3, sl, #8
 800bc60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	4650      	mov	r0, sl
 800bc66:	b019      	add	sp, #100	@ 0x64
 800bc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	f77f ae37 	ble.w	800b8e2 <_dtoa_r+0x7b2>
 800bc74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc76:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc78:	2001      	movs	r0, #1
 800bc7a:	e655      	b.n	800b928 <_dtoa_r+0x7f8>
 800bc7c:	9b00      	ldr	r3, [sp, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f77f aed6 	ble.w	800ba30 <_dtoa_r+0x900>
 800bc84:	4656      	mov	r6, sl
 800bc86:	4621      	mov	r1, r4
 800bc88:	4648      	mov	r0, r9
 800bc8a:	f7ff f9c8 	bl	800b01e <quorem>
 800bc8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc92:	f806 8b01 	strb.w	r8, [r6], #1
 800bc96:	9b00      	ldr	r3, [sp, #0]
 800bc98:	eba6 020a 	sub.w	r2, r6, sl
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	ddb3      	ble.n	800bc08 <_dtoa_r+0xad8>
 800bca0:	4649      	mov	r1, r9
 800bca2:	2300      	movs	r3, #0
 800bca4:	220a      	movs	r2, #10
 800bca6:	4658      	mov	r0, fp
 800bca8:	f000 f968 	bl	800bf7c <__multadd>
 800bcac:	4681      	mov	r9, r0
 800bcae:	e7ea      	b.n	800bc86 <_dtoa_r+0xb56>
 800bcb0:	0800da6c 	.word	0x0800da6c
 800bcb4:	0800d9f0 	.word	0x0800d9f0

0800bcb8 <_free_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4605      	mov	r5, r0
 800bcbc:	2900      	cmp	r1, #0
 800bcbe:	d041      	beq.n	800bd44 <_free_r+0x8c>
 800bcc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc4:	1f0c      	subs	r4, r1, #4
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bfb8      	it	lt
 800bcca:	18e4      	addlt	r4, r4, r3
 800bccc:	f000 f8e8 	bl	800bea0 <__malloc_lock>
 800bcd0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd48 <_free_r+0x90>)
 800bcd2:	6813      	ldr	r3, [r2, #0]
 800bcd4:	b933      	cbnz	r3, 800bce4 <_free_r+0x2c>
 800bcd6:	6063      	str	r3, [r4, #4]
 800bcd8:	6014      	str	r4, [r2, #0]
 800bcda:	4628      	mov	r0, r5
 800bcdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce0:	f000 b8e4 	b.w	800beac <__malloc_unlock>
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d908      	bls.n	800bcfa <_free_r+0x42>
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	1821      	adds	r1, r4, r0
 800bcec:	428b      	cmp	r3, r1
 800bcee:	bf01      	itttt	eq
 800bcf0:	6819      	ldreq	r1, [r3, #0]
 800bcf2:	685b      	ldreq	r3, [r3, #4]
 800bcf4:	1809      	addeq	r1, r1, r0
 800bcf6:	6021      	streq	r1, [r4, #0]
 800bcf8:	e7ed      	b.n	800bcd6 <_free_r+0x1e>
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	b10b      	cbz	r3, 800bd04 <_free_r+0x4c>
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	d9fa      	bls.n	800bcfa <_free_r+0x42>
 800bd04:	6811      	ldr	r1, [r2, #0]
 800bd06:	1850      	adds	r0, r2, r1
 800bd08:	42a0      	cmp	r0, r4
 800bd0a:	d10b      	bne.n	800bd24 <_free_r+0x6c>
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	4401      	add	r1, r0
 800bd10:	1850      	adds	r0, r2, r1
 800bd12:	4283      	cmp	r3, r0
 800bd14:	6011      	str	r1, [r2, #0]
 800bd16:	d1e0      	bne.n	800bcda <_free_r+0x22>
 800bd18:	6818      	ldr	r0, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	6053      	str	r3, [r2, #4]
 800bd1e:	4408      	add	r0, r1
 800bd20:	6010      	str	r0, [r2, #0]
 800bd22:	e7da      	b.n	800bcda <_free_r+0x22>
 800bd24:	d902      	bls.n	800bd2c <_free_r+0x74>
 800bd26:	230c      	movs	r3, #12
 800bd28:	602b      	str	r3, [r5, #0]
 800bd2a:	e7d6      	b.n	800bcda <_free_r+0x22>
 800bd2c:	6820      	ldr	r0, [r4, #0]
 800bd2e:	1821      	adds	r1, r4, r0
 800bd30:	428b      	cmp	r3, r1
 800bd32:	bf04      	itt	eq
 800bd34:	6819      	ldreq	r1, [r3, #0]
 800bd36:	685b      	ldreq	r3, [r3, #4]
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	bf04      	itt	eq
 800bd3c:	1809      	addeq	r1, r1, r0
 800bd3e:	6021      	streq	r1, [r4, #0]
 800bd40:	6054      	str	r4, [r2, #4]
 800bd42:	e7ca      	b.n	800bcda <_free_r+0x22>
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
 800bd46:	bf00      	nop
 800bd48:	20019f94 	.word	0x20019f94

0800bd4c <malloc>:
 800bd4c:	4b02      	ldr	r3, [pc, #8]	@ (800bd58 <malloc+0xc>)
 800bd4e:	4601      	mov	r1, r0
 800bd50:	6818      	ldr	r0, [r3, #0]
 800bd52:	f000 b825 	b.w	800bda0 <_malloc_r>
 800bd56:	bf00      	nop
 800bd58:	20000030 	.word	0x20000030

0800bd5c <sbrk_aligned>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	4e0f      	ldr	r6, [pc, #60]	@ (800bd9c <sbrk_aligned+0x40>)
 800bd60:	460c      	mov	r4, r1
 800bd62:	6831      	ldr	r1, [r6, #0]
 800bd64:	4605      	mov	r5, r0
 800bd66:	b911      	cbnz	r1, 800bd6e <sbrk_aligned+0x12>
 800bd68:	f000 fe46 	bl	800c9f8 <_sbrk_r>
 800bd6c:	6030      	str	r0, [r6, #0]
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4628      	mov	r0, r5
 800bd72:	f000 fe41 	bl	800c9f8 <_sbrk_r>
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	d103      	bne.n	800bd82 <sbrk_aligned+0x26>
 800bd7a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd7e:	4620      	mov	r0, r4
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	1cc4      	adds	r4, r0, #3
 800bd84:	f024 0403 	bic.w	r4, r4, #3
 800bd88:	42a0      	cmp	r0, r4
 800bd8a:	d0f8      	beq.n	800bd7e <sbrk_aligned+0x22>
 800bd8c:	1a21      	subs	r1, r4, r0
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f000 fe32 	bl	800c9f8 <_sbrk_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	d1f2      	bne.n	800bd7e <sbrk_aligned+0x22>
 800bd98:	e7ef      	b.n	800bd7a <sbrk_aligned+0x1e>
 800bd9a:	bf00      	nop
 800bd9c:	20019f90 	.word	0x20019f90

0800bda0 <_malloc_r>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	1ccd      	adds	r5, r1, #3
 800bda6:	f025 0503 	bic.w	r5, r5, #3
 800bdaa:	3508      	adds	r5, #8
 800bdac:	2d0c      	cmp	r5, #12
 800bdae:	bf38      	it	cc
 800bdb0:	250c      	movcc	r5, #12
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	db01      	blt.n	800bdbc <_malloc_r+0x1c>
 800bdb8:	42a9      	cmp	r1, r5
 800bdba:	d904      	bls.n	800bdc6 <_malloc_r+0x26>
 800bdbc:	230c      	movs	r3, #12
 800bdbe:	6033      	str	r3, [r6, #0]
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be9c <_malloc_r+0xfc>
 800bdca:	f000 f869 	bl	800bea0 <__malloc_lock>
 800bdce:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd2:	461c      	mov	r4, r3
 800bdd4:	bb44      	cbnz	r4, 800be28 <_malloc_r+0x88>
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff ffbf 	bl	800bd5c <sbrk_aligned>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	4604      	mov	r4, r0
 800bde2:	d158      	bne.n	800be96 <_malloc_r+0xf6>
 800bde4:	f8d8 4000 	ldr.w	r4, [r8]
 800bde8:	4627      	mov	r7, r4
 800bdea:	2f00      	cmp	r7, #0
 800bdec:	d143      	bne.n	800be76 <_malloc_r+0xd6>
 800bdee:	2c00      	cmp	r4, #0
 800bdf0:	d04b      	beq.n	800be8a <_malloc_r+0xea>
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	4639      	mov	r1, r7
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	eb04 0903 	add.w	r9, r4, r3
 800bdfc:	f000 fdfc 	bl	800c9f8 <_sbrk_r>
 800be00:	4581      	cmp	r9, r0
 800be02:	d142      	bne.n	800be8a <_malloc_r+0xea>
 800be04:	6821      	ldr	r1, [r4, #0]
 800be06:	1a6d      	subs	r5, r5, r1
 800be08:	4629      	mov	r1, r5
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff ffa6 	bl	800bd5c <sbrk_aligned>
 800be10:	3001      	adds	r0, #1
 800be12:	d03a      	beq.n	800be8a <_malloc_r+0xea>
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	442b      	add	r3, r5
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	f8d8 3000 	ldr.w	r3, [r8]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	bb62      	cbnz	r2, 800be7c <_malloc_r+0xdc>
 800be22:	f8c8 7000 	str.w	r7, [r8]
 800be26:	e00f      	b.n	800be48 <_malloc_r+0xa8>
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	1b52      	subs	r2, r2, r5
 800be2c:	d420      	bmi.n	800be70 <_malloc_r+0xd0>
 800be2e:	2a0b      	cmp	r2, #11
 800be30:	d917      	bls.n	800be62 <_malloc_r+0xc2>
 800be32:	1961      	adds	r1, r4, r5
 800be34:	42a3      	cmp	r3, r4
 800be36:	6025      	str	r5, [r4, #0]
 800be38:	bf18      	it	ne
 800be3a:	6059      	strne	r1, [r3, #4]
 800be3c:	6863      	ldr	r3, [r4, #4]
 800be3e:	bf08      	it	eq
 800be40:	f8c8 1000 	streq.w	r1, [r8]
 800be44:	5162      	str	r2, [r4, r5]
 800be46:	604b      	str	r3, [r1, #4]
 800be48:	4630      	mov	r0, r6
 800be4a:	f000 f82f 	bl	800beac <__malloc_unlock>
 800be4e:	f104 000b 	add.w	r0, r4, #11
 800be52:	1d23      	adds	r3, r4, #4
 800be54:	f020 0007 	bic.w	r0, r0, #7
 800be58:	1ac2      	subs	r2, r0, r3
 800be5a:	bf1c      	itt	ne
 800be5c:	1a1b      	subne	r3, r3, r0
 800be5e:	50a3      	strne	r3, [r4, r2]
 800be60:	e7af      	b.n	800bdc2 <_malloc_r+0x22>
 800be62:	6862      	ldr	r2, [r4, #4]
 800be64:	42a3      	cmp	r3, r4
 800be66:	bf0c      	ite	eq
 800be68:	f8c8 2000 	streq.w	r2, [r8]
 800be6c:	605a      	strne	r2, [r3, #4]
 800be6e:	e7eb      	b.n	800be48 <_malloc_r+0xa8>
 800be70:	4623      	mov	r3, r4
 800be72:	6864      	ldr	r4, [r4, #4]
 800be74:	e7ae      	b.n	800bdd4 <_malloc_r+0x34>
 800be76:	463c      	mov	r4, r7
 800be78:	687f      	ldr	r7, [r7, #4]
 800be7a:	e7b6      	b.n	800bdea <_malloc_r+0x4a>
 800be7c:	461a      	mov	r2, r3
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	42a3      	cmp	r3, r4
 800be82:	d1fb      	bne.n	800be7c <_malloc_r+0xdc>
 800be84:	2300      	movs	r3, #0
 800be86:	6053      	str	r3, [r2, #4]
 800be88:	e7de      	b.n	800be48 <_malloc_r+0xa8>
 800be8a:	230c      	movs	r3, #12
 800be8c:	6033      	str	r3, [r6, #0]
 800be8e:	4630      	mov	r0, r6
 800be90:	f000 f80c 	bl	800beac <__malloc_unlock>
 800be94:	e794      	b.n	800bdc0 <_malloc_r+0x20>
 800be96:	6005      	str	r5, [r0, #0]
 800be98:	e7d6      	b.n	800be48 <_malloc_r+0xa8>
 800be9a:	bf00      	nop
 800be9c:	20019f94 	.word	0x20019f94

0800bea0 <__malloc_lock>:
 800bea0:	4801      	ldr	r0, [pc, #4]	@ (800bea8 <__malloc_lock+0x8>)
 800bea2:	f7ff b8ac 	b.w	800affe <__retarget_lock_acquire_recursive>
 800bea6:	bf00      	nop
 800bea8:	20019f8c 	.word	0x20019f8c

0800beac <__malloc_unlock>:
 800beac:	4801      	ldr	r0, [pc, #4]	@ (800beb4 <__malloc_unlock+0x8>)
 800beae:	f7ff b8a7 	b.w	800b000 <__retarget_lock_release_recursive>
 800beb2:	bf00      	nop
 800beb4:	20019f8c 	.word	0x20019f8c

0800beb8 <_Balloc>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	69c6      	ldr	r6, [r0, #28]
 800bebc:	4604      	mov	r4, r0
 800bebe:	460d      	mov	r5, r1
 800bec0:	b976      	cbnz	r6, 800bee0 <_Balloc+0x28>
 800bec2:	2010      	movs	r0, #16
 800bec4:	f7ff ff42 	bl	800bd4c <malloc>
 800bec8:	4602      	mov	r2, r0
 800beca:	61e0      	str	r0, [r4, #28]
 800becc:	b920      	cbnz	r0, 800bed8 <_Balloc+0x20>
 800bece:	4b18      	ldr	r3, [pc, #96]	@ (800bf30 <_Balloc+0x78>)
 800bed0:	4818      	ldr	r0, [pc, #96]	@ (800bf34 <_Balloc+0x7c>)
 800bed2:	216b      	movs	r1, #107	@ 0x6b
 800bed4:	f000 fda0 	bl	800ca18 <__assert_func>
 800bed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bedc:	6006      	str	r6, [r0, #0]
 800bede:	60c6      	str	r6, [r0, #12]
 800bee0:	69e6      	ldr	r6, [r4, #28]
 800bee2:	68f3      	ldr	r3, [r6, #12]
 800bee4:	b183      	cbz	r3, 800bf08 <_Balloc+0x50>
 800bee6:	69e3      	ldr	r3, [r4, #28]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beee:	b9b8      	cbnz	r0, 800bf20 <_Balloc+0x68>
 800bef0:	2101      	movs	r1, #1
 800bef2:	fa01 f605 	lsl.w	r6, r1, r5
 800bef6:	1d72      	adds	r2, r6, #5
 800bef8:	0092      	lsls	r2, r2, #2
 800befa:	4620      	mov	r0, r4
 800befc:	f000 fdaa 	bl	800ca54 <_calloc_r>
 800bf00:	b160      	cbz	r0, 800bf1c <_Balloc+0x64>
 800bf02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf06:	e00e      	b.n	800bf26 <_Balloc+0x6e>
 800bf08:	2221      	movs	r2, #33	@ 0x21
 800bf0a:	2104      	movs	r1, #4
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fda1 	bl	800ca54 <_calloc_r>
 800bf12:	69e3      	ldr	r3, [r4, #28]
 800bf14:	60f0      	str	r0, [r6, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e4      	bne.n	800bee6 <_Balloc+0x2e>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	bd70      	pop	{r4, r5, r6, pc}
 800bf20:	6802      	ldr	r2, [r0, #0]
 800bf22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf26:	2300      	movs	r3, #0
 800bf28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf2c:	e7f7      	b.n	800bf1e <_Balloc+0x66>
 800bf2e:	bf00      	nop
 800bf30:	0800d9fd 	.word	0x0800d9fd
 800bf34:	0800da7d 	.word	0x0800da7d

0800bf38 <_Bfree>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	69c6      	ldr	r6, [r0, #28]
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	b976      	cbnz	r6, 800bf60 <_Bfree+0x28>
 800bf42:	2010      	movs	r0, #16
 800bf44:	f7ff ff02 	bl	800bd4c <malloc>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	61e8      	str	r0, [r5, #28]
 800bf4c:	b920      	cbnz	r0, 800bf58 <_Bfree+0x20>
 800bf4e:	4b09      	ldr	r3, [pc, #36]	@ (800bf74 <_Bfree+0x3c>)
 800bf50:	4809      	ldr	r0, [pc, #36]	@ (800bf78 <_Bfree+0x40>)
 800bf52:	218f      	movs	r1, #143	@ 0x8f
 800bf54:	f000 fd60 	bl	800ca18 <__assert_func>
 800bf58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf5c:	6006      	str	r6, [r0, #0]
 800bf5e:	60c6      	str	r6, [r0, #12]
 800bf60:	b13c      	cbz	r4, 800bf72 <_Bfree+0x3a>
 800bf62:	69eb      	ldr	r3, [r5, #28]
 800bf64:	6862      	ldr	r2, [r4, #4]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf6c:	6021      	str	r1, [r4, #0]
 800bf6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	0800d9fd 	.word	0x0800d9fd
 800bf78:	0800da7d 	.word	0x0800da7d

0800bf7c <__multadd>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	690d      	ldr	r5, [r1, #16]
 800bf82:	4607      	mov	r7, r0
 800bf84:	460c      	mov	r4, r1
 800bf86:	461e      	mov	r6, r3
 800bf88:	f101 0c14 	add.w	ip, r1, #20
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf92:	b299      	uxth	r1, r3
 800bf94:	fb02 6101 	mla	r1, r2, r1, r6
 800bf98:	0c1e      	lsrs	r6, r3, #16
 800bf9a:	0c0b      	lsrs	r3, r1, #16
 800bf9c:	fb02 3306 	mla	r3, r2, r6, r3
 800bfa0:	b289      	uxth	r1, r1
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfa8:	4285      	cmp	r5, r0
 800bfaa:	f84c 1b04 	str.w	r1, [ip], #4
 800bfae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfb2:	dcec      	bgt.n	800bf8e <__multadd+0x12>
 800bfb4:	b30e      	cbz	r6, 800bffa <__multadd+0x7e>
 800bfb6:	68a3      	ldr	r3, [r4, #8]
 800bfb8:	42ab      	cmp	r3, r5
 800bfba:	dc19      	bgt.n	800bff0 <__multadd+0x74>
 800bfbc:	6861      	ldr	r1, [r4, #4]
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	3101      	adds	r1, #1
 800bfc2:	f7ff ff79 	bl	800beb8 <_Balloc>
 800bfc6:	4680      	mov	r8, r0
 800bfc8:	b928      	cbnz	r0, 800bfd6 <__multadd+0x5a>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <__multadd+0x84>)
 800bfce:	480d      	ldr	r0, [pc, #52]	@ (800c004 <__multadd+0x88>)
 800bfd0:	21ba      	movs	r1, #186	@ 0xba
 800bfd2:	f000 fd21 	bl	800ca18 <__assert_func>
 800bfd6:	6922      	ldr	r2, [r4, #16]
 800bfd8:	3202      	adds	r2, #2
 800bfda:	f104 010c 	add.w	r1, r4, #12
 800bfde:	0092      	lsls	r2, r2, #2
 800bfe0:	300c      	adds	r0, #12
 800bfe2:	f7ff f80e 	bl	800b002 <memcpy>
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f7ff ffa5 	bl	800bf38 <_Bfree>
 800bfee:	4644      	mov	r4, r8
 800bff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bff4:	3501      	adds	r5, #1
 800bff6:	615e      	str	r6, [r3, #20]
 800bff8:	6125      	str	r5, [r4, #16]
 800bffa:	4620      	mov	r0, r4
 800bffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c000:	0800da6c 	.word	0x0800da6c
 800c004:	0800da7d 	.word	0x0800da7d

0800c008 <__hi0bits>:
 800c008:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c00c:	4603      	mov	r3, r0
 800c00e:	bf36      	itet	cc
 800c010:	0403      	lslcc	r3, r0, #16
 800c012:	2000      	movcs	r0, #0
 800c014:	2010      	movcc	r0, #16
 800c016:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c01a:	bf3c      	itt	cc
 800c01c:	021b      	lslcc	r3, r3, #8
 800c01e:	3008      	addcc	r0, #8
 800c020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c024:	bf3c      	itt	cc
 800c026:	011b      	lslcc	r3, r3, #4
 800c028:	3004      	addcc	r0, #4
 800c02a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02e:	bf3c      	itt	cc
 800c030:	009b      	lslcc	r3, r3, #2
 800c032:	3002      	addcc	r0, #2
 800c034:	2b00      	cmp	r3, #0
 800c036:	db05      	blt.n	800c044 <__hi0bits+0x3c>
 800c038:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c03c:	f100 0001 	add.w	r0, r0, #1
 800c040:	bf08      	it	eq
 800c042:	2020      	moveq	r0, #32
 800c044:	4770      	bx	lr

0800c046 <__lo0bits>:
 800c046:	6803      	ldr	r3, [r0, #0]
 800c048:	4602      	mov	r2, r0
 800c04a:	f013 0007 	ands.w	r0, r3, #7
 800c04e:	d00b      	beq.n	800c068 <__lo0bits+0x22>
 800c050:	07d9      	lsls	r1, r3, #31
 800c052:	d421      	bmi.n	800c098 <__lo0bits+0x52>
 800c054:	0798      	lsls	r0, r3, #30
 800c056:	bf49      	itett	mi
 800c058:	085b      	lsrmi	r3, r3, #1
 800c05a:	089b      	lsrpl	r3, r3, #2
 800c05c:	2001      	movmi	r0, #1
 800c05e:	6013      	strmi	r3, [r2, #0]
 800c060:	bf5c      	itt	pl
 800c062:	6013      	strpl	r3, [r2, #0]
 800c064:	2002      	movpl	r0, #2
 800c066:	4770      	bx	lr
 800c068:	b299      	uxth	r1, r3
 800c06a:	b909      	cbnz	r1, 800c070 <__lo0bits+0x2a>
 800c06c:	0c1b      	lsrs	r3, r3, #16
 800c06e:	2010      	movs	r0, #16
 800c070:	b2d9      	uxtb	r1, r3
 800c072:	b909      	cbnz	r1, 800c078 <__lo0bits+0x32>
 800c074:	3008      	adds	r0, #8
 800c076:	0a1b      	lsrs	r3, r3, #8
 800c078:	0719      	lsls	r1, r3, #28
 800c07a:	bf04      	itt	eq
 800c07c:	091b      	lsreq	r3, r3, #4
 800c07e:	3004      	addeq	r0, #4
 800c080:	0799      	lsls	r1, r3, #30
 800c082:	bf04      	itt	eq
 800c084:	089b      	lsreq	r3, r3, #2
 800c086:	3002      	addeq	r0, #2
 800c088:	07d9      	lsls	r1, r3, #31
 800c08a:	d403      	bmi.n	800c094 <__lo0bits+0x4e>
 800c08c:	085b      	lsrs	r3, r3, #1
 800c08e:	f100 0001 	add.w	r0, r0, #1
 800c092:	d003      	beq.n	800c09c <__lo0bits+0x56>
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	4770      	bx	lr
 800c098:	2000      	movs	r0, #0
 800c09a:	4770      	bx	lr
 800c09c:	2020      	movs	r0, #32
 800c09e:	4770      	bx	lr

0800c0a0 <__i2b>:
 800c0a0:	b510      	push	{r4, lr}
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	f7ff ff07 	bl	800beb8 <_Balloc>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	b928      	cbnz	r0, 800c0ba <__i2b+0x1a>
 800c0ae:	4b05      	ldr	r3, [pc, #20]	@ (800c0c4 <__i2b+0x24>)
 800c0b0:	4805      	ldr	r0, [pc, #20]	@ (800c0c8 <__i2b+0x28>)
 800c0b2:	f240 1145 	movw	r1, #325	@ 0x145
 800c0b6:	f000 fcaf 	bl	800ca18 <__assert_func>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	6144      	str	r4, [r0, #20]
 800c0be:	6103      	str	r3, [r0, #16]
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	bf00      	nop
 800c0c4:	0800da6c 	.word	0x0800da6c
 800c0c8:	0800da7d 	.word	0x0800da7d

0800c0cc <__multiply>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4614      	mov	r4, r2
 800c0d2:	690a      	ldr	r2, [r1, #16]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	bfa8      	it	ge
 800c0da:	4623      	movge	r3, r4
 800c0dc:	460f      	mov	r7, r1
 800c0de:	bfa4      	itt	ge
 800c0e0:	460c      	movge	r4, r1
 800c0e2:	461f      	movge	r7, r3
 800c0e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	6861      	ldr	r1, [r4, #4]
 800c0f0:	eb0a 0609 	add.w	r6, sl, r9
 800c0f4:	42b3      	cmp	r3, r6
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	bfb8      	it	lt
 800c0fa:	3101      	addlt	r1, #1
 800c0fc:	f7ff fedc 	bl	800beb8 <_Balloc>
 800c100:	b930      	cbnz	r0, 800c110 <__multiply+0x44>
 800c102:	4602      	mov	r2, r0
 800c104:	4b44      	ldr	r3, [pc, #272]	@ (800c218 <__multiply+0x14c>)
 800c106:	4845      	ldr	r0, [pc, #276]	@ (800c21c <__multiply+0x150>)
 800c108:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c10c:	f000 fc84 	bl	800ca18 <__assert_func>
 800c110:	f100 0514 	add.w	r5, r0, #20
 800c114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c118:	462b      	mov	r3, r5
 800c11a:	2200      	movs	r2, #0
 800c11c:	4543      	cmp	r3, r8
 800c11e:	d321      	bcc.n	800c164 <__multiply+0x98>
 800c120:	f107 0114 	add.w	r1, r7, #20
 800c124:	f104 0214 	add.w	r2, r4, #20
 800c128:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c12c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c130:	9302      	str	r3, [sp, #8]
 800c132:	1b13      	subs	r3, r2, r4
 800c134:	3b15      	subs	r3, #21
 800c136:	f023 0303 	bic.w	r3, r3, #3
 800c13a:	3304      	adds	r3, #4
 800c13c:	f104 0715 	add.w	r7, r4, #21
 800c140:	42ba      	cmp	r2, r7
 800c142:	bf38      	it	cc
 800c144:	2304      	movcc	r3, #4
 800c146:	9301      	str	r3, [sp, #4]
 800c148:	9b02      	ldr	r3, [sp, #8]
 800c14a:	9103      	str	r1, [sp, #12]
 800c14c:	428b      	cmp	r3, r1
 800c14e:	d80c      	bhi.n	800c16a <__multiply+0x9e>
 800c150:	2e00      	cmp	r6, #0
 800c152:	dd03      	ble.n	800c15c <__multiply+0x90>
 800c154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d05b      	beq.n	800c214 <__multiply+0x148>
 800c15c:	6106      	str	r6, [r0, #16]
 800c15e:	b005      	add	sp, #20
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c164:	f843 2b04 	str.w	r2, [r3], #4
 800c168:	e7d8      	b.n	800c11c <__multiply+0x50>
 800c16a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c16e:	f1ba 0f00 	cmp.w	sl, #0
 800c172:	d024      	beq.n	800c1be <__multiply+0xf2>
 800c174:	f104 0e14 	add.w	lr, r4, #20
 800c178:	46a9      	mov	r9, r5
 800c17a:	f04f 0c00 	mov.w	ip, #0
 800c17e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c182:	f8d9 3000 	ldr.w	r3, [r9]
 800c186:	fa1f fb87 	uxth.w	fp, r7
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c190:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c194:	f8d9 7000 	ldr.w	r7, [r9]
 800c198:	4463      	add	r3, ip
 800c19a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c19e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1ac:	4572      	cmp	r2, lr
 800c1ae:	f849 3b04 	str.w	r3, [r9], #4
 800c1b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1b6:	d8e2      	bhi.n	800c17e <__multiply+0xb2>
 800c1b8:	9b01      	ldr	r3, [sp, #4]
 800c1ba:	f845 c003 	str.w	ip, [r5, r3]
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1c4:	3104      	adds	r1, #4
 800c1c6:	f1b9 0f00 	cmp.w	r9, #0
 800c1ca:	d021      	beq.n	800c210 <__multiply+0x144>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	f104 0c14 	add.w	ip, r4, #20
 800c1d2:	46ae      	mov	lr, r5
 800c1d4:	f04f 0a00 	mov.w	sl, #0
 800c1d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c1dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1e0:	fb09 770b 	mla	r7, r9, fp, r7
 800c1e4:	4457      	add	r7, sl
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1ec:	f84e 3b04 	str.w	r3, [lr], #4
 800c1f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1f8:	f8be 3000 	ldrh.w	r3, [lr]
 800c1fc:	fb09 330a 	mla	r3, r9, sl, r3
 800c200:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c204:	4562      	cmp	r2, ip
 800c206:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c20a:	d8e5      	bhi.n	800c1d8 <__multiply+0x10c>
 800c20c:	9f01      	ldr	r7, [sp, #4]
 800c20e:	51eb      	str	r3, [r5, r7]
 800c210:	3504      	adds	r5, #4
 800c212:	e799      	b.n	800c148 <__multiply+0x7c>
 800c214:	3e01      	subs	r6, #1
 800c216:	e79b      	b.n	800c150 <__multiply+0x84>
 800c218:	0800da6c 	.word	0x0800da6c
 800c21c:	0800da7d 	.word	0x0800da7d

0800c220 <__pow5mult>:
 800c220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c224:	4615      	mov	r5, r2
 800c226:	f012 0203 	ands.w	r2, r2, #3
 800c22a:	4607      	mov	r7, r0
 800c22c:	460e      	mov	r6, r1
 800c22e:	d007      	beq.n	800c240 <__pow5mult+0x20>
 800c230:	4c25      	ldr	r4, [pc, #148]	@ (800c2c8 <__pow5mult+0xa8>)
 800c232:	3a01      	subs	r2, #1
 800c234:	2300      	movs	r3, #0
 800c236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c23a:	f7ff fe9f 	bl	800bf7c <__multadd>
 800c23e:	4606      	mov	r6, r0
 800c240:	10ad      	asrs	r5, r5, #2
 800c242:	d03d      	beq.n	800c2c0 <__pow5mult+0xa0>
 800c244:	69fc      	ldr	r4, [r7, #28]
 800c246:	b97c      	cbnz	r4, 800c268 <__pow5mult+0x48>
 800c248:	2010      	movs	r0, #16
 800c24a:	f7ff fd7f 	bl	800bd4c <malloc>
 800c24e:	4602      	mov	r2, r0
 800c250:	61f8      	str	r0, [r7, #28]
 800c252:	b928      	cbnz	r0, 800c260 <__pow5mult+0x40>
 800c254:	4b1d      	ldr	r3, [pc, #116]	@ (800c2cc <__pow5mult+0xac>)
 800c256:	481e      	ldr	r0, [pc, #120]	@ (800c2d0 <__pow5mult+0xb0>)
 800c258:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c25c:	f000 fbdc 	bl	800ca18 <__assert_func>
 800c260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c264:	6004      	str	r4, [r0, #0]
 800c266:	60c4      	str	r4, [r0, #12]
 800c268:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c270:	b94c      	cbnz	r4, 800c286 <__pow5mult+0x66>
 800c272:	f240 2171 	movw	r1, #625	@ 0x271
 800c276:	4638      	mov	r0, r7
 800c278:	f7ff ff12 	bl	800c0a0 <__i2b>
 800c27c:	2300      	movs	r3, #0
 800c27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c282:	4604      	mov	r4, r0
 800c284:	6003      	str	r3, [r0, #0]
 800c286:	f04f 0900 	mov.w	r9, #0
 800c28a:	07eb      	lsls	r3, r5, #31
 800c28c:	d50a      	bpl.n	800c2a4 <__pow5mult+0x84>
 800c28e:	4631      	mov	r1, r6
 800c290:	4622      	mov	r2, r4
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff ff1a 	bl	800c0cc <__multiply>
 800c298:	4631      	mov	r1, r6
 800c29a:	4680      	mov	r8, r0
 800c29c:	4638      	mov	r0, r7
 800c29e:	f7ff fe4b 	bl	800bf38 <_Bfree>
 800c2a2:	4646      	mov	r6, r8
 800c2a4:	106d      	asrs	r5, r5, #1
 800c2a6:	d00b      	beq.n	800c2c0 <__pow5mult+0xa0>
 800c2a8:	6820      	ldr	r0, [r4, #0]
 800c2aa:	b938      	cbnz	r0, 800c2bc <__pow5mult+0x9c>
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ff0b 	bl	800c0cc <__multiply>
 800c2b6:	6020      	str	r0, [r4, #0]
 800c2b8:	f8c0 9000 	str.w	r9, [r0]
 800c2bc:	4604      	mov	r4, r0
 800c2be:	e7e4      	b.n	800c28a <__pow5mult+0x6a>
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c6:	bf00      	nop
 800c2c8:	0800dad8 	.word	0x0800dad8
 800c2cc:	0800d9fd 	.word	0x0800d9fd
 800c2d0:	0800da7d 	.word	0x0800da7d

0800c2d4 <__lshift>:
 800c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d8:	460c      	mov	r4, r1
 800c2da:	6849      	ldr	r1, [r1, #4]
 800c2dc:	6923      	ldr	r3, [r4, #16]
 800c2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2e2:	68a3      	ldr	r3, [r4, #8]
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	4691      	mov	r9, r2
 800c2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2ec:	f108 0601 	add.w	r6, r8, #1
 800c2f0:	42b3      	cmp	r3, r6
 800c2f2:	db0b      	blt.n	800c30c <__lshift+0x38>
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f7ff fddf 	bl	800beb8 <_Balloc>
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	b948      	cbnz	r0, 800c312 <__lshift+0x3e>
 800c2fe:	4602      	mov	r2, r0
 800c300:	4b28      	ldr	r3, [pc, #160]	@ (800c3a4 <__lshift+0xd0>)
 800c302:	4829      	ldr	r0, [pc, #164]	@ (800c3a8 <__lshift+0xd4>)
 800c304:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c308:	f000 fb86 	bl	800ca18 <__assert_func>
 800c30c:	3101      	adds	r1, #1
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	e7ee      	b.n	800c2f0 <__lshift+0x1c>
 800c312:	2300      	movs	r3, #0
 800c314:	f100 0114 	add.w	r1, r0, #20
 800c318:	f100 0210 	add.w	r2, r0, #16
 800c31c:	4618      	mov	r0, r3
 800c31e:	4553      	cmp	r3, sl
 800c320:	db33      	blt.n	800c38a <__lshift+0xb6>
 800c322:	6920      	ldr	r0, [r4, #16]
 800c324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c328:	f104 0314 	add.w	r3, r4, #20
 800c32c:	f019 091f 	ands.w	r9, r9, #31
 800c330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c334:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c338:	d02b      	beq.n	800c392 <__lshift+0xbe>
 800c33a:	f1c9 0e20 	rsb	lr, r9, #32
 800c33e:	468a      	mov	sl, r1
 800c340:	2200      	movs	r2, #0
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	fa00 f009 	lsl.w	r0, r0, r9
 800c348:	4310      	orrs	r0, r2
 800c34a:	f84a 0b04 	str.w	r0, [sl], #4
 800c34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c352:	459c      	cmp	ip, r3
 800c354:	fa22 f20e 	lsr.w	r2, r2, lr
 800c358:	d8f3      	bhi.n	800c342 <__lshift+0x6e>
 800c35a:	ebac 0304 	sub.w	r3, ip, r4
 800c35e:	3b15      	subs	r3, #21
 800c360:	f023 0303 	bic.w	r3, r3, #3
 800c364:	3304      	adds	r3, #4
 800c366:	f104 0015 	add.w	r0, r4, #21
 800c36a:	4584      	cmp	ip, r0
 800c36c:	bf38      	it	cc
 800c36e:	2304      	movcc	r3, #4
 800c370:	50ca      	str	r2, [r1, r3]
 800c372:	b10a      	cbz	r2, 800c378 <__lshift+0xa4>
 800c374:	f108 0602 	add.w	r6, r8, #2
 800c378:	3e01      	subs	r6, #1
 800c37a:	4638      	mov	r0, r7
 800c37c:	612e      	str	r6, [r5, #16]
 800c37e:	4621      	mov	r1, r4
 800c380:	f7ff fdda 	bl	800bf38 <_Bfree>
 800c384:	4628      	mov	r0, r5
 800c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c38e:	3301      	adds	r3, #1
 800c390:	e7c5      	b.n	800c31e <__lshift+0x4a>
 800c392:	3904      	subs	r1, #4
 800c394:	f853 2b04 	ldr.w	r2, [r3], #4
 800c398:	f841 2f04 	str.w	r2, [r1, #4]!
 800c39c:	459c      	cmp	ip, r3
 800c39e:	d8f9      	bhi.n	800c394 <__lshift+0xc0>
 800c3a0:	e7ea      	b.n	800c378 <__lshift+0xa4>
 800c3a2:	bf00      	nop
 800c3a4:	0800da6c 	.word	0x0800da6c
 800c3a8:	0800da7d 	.word	0x0800da7d

0800c3ac <__mcmp>:
 800c3ac:	690a      	ldr	r2, [r1, #16]
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	6900      	ldr	r0, [r0, #16]
 800c3b2:	1a80      	subs	r0, r0, r2
 800c3b4:	b530      	push	{r4, r5, lr}
 800c3b6:	d10e      	bne.n	800c3d6 <__mcmp+0x2a>
 800c3b8:	3314      	adds	r3, #20
 800c3ba:	3114      	adds	r1, #20
 800c3bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3cc:	4295      	cmp	r5, r2
 800c3ce:	d003      	beq.n	800c3d8 <__mcmp+0x2c>
 800c3d0:	d205      	bcs.n	800c3de <__mcmp+0x32>
 800c3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d6:	bd30      	pop	{r4, r5, pc}
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d3f3      	bcc.n	800c3c4 <__mcmp+0x18>
 800c3dc:	e7fb      	b.n	800c3d6 <__mcmp+0x2a>
 800c3de:	2001      	movs	r0, #1
 800c3e0:	e7f9      	b.n	800c3d6 <__mcmp+0x2a>
	...

0800c3e4 <__mdiff>:
 800c3e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	4689      	mov	r9, r1
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	f7ff ffdb 	bl	800c3ac <__mcmp>
 800c3f6:	1e05      	subs	r5, r0, #0
 800c3f8:	d112      	bne.n	800c420 <__mdiff+0x3c>
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff fd5b 	bl	800beb8 <_Balloc>
 800c402:	4602      	mov	r2, r0
 800c404:	b928      	cbnz	r0, 800c412 <__mdiff+0x2e>
 800c406:	4b3f      	ldr	r3, [pc, #252]	@ (800c504 <__mdiff+0x120>)
 800c408:	f240 2137 	movw	r1, #567	@ 0x237
 800c40c:	483e      	ldr	r0, [pc, #248]	@ (800c508 <__mdiff+0x124>)
 800c40e:	f000 fb03 	bl	800ca18 <__assert_func>
 800c412:	2301      	movs	r3, #1
 800c414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c418:	4610      	mov	r0, r2
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c420:	bfbc      	itt	lt
 800c422:	464b      	movlt	r3, r9
 800c424:	46a1      	movlt	r9, r4
 800c426:	4630      	mov	r0, r6
 800c428:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c42c:	bfba      	itte	lt
 800c42e:	461c      	movlt	r4, r3
 800c430:	2501      	movlt	r5, #1
 800c432:	2500      	movge	r5, #0
 800c434:	f7ff fd40 	bl	800beb8 <_Balloc>
 800c438:	4602      	mov	r2, r0
 800c43a:	b918      	cbnz	r0, 800c444 <__mdiff+0x60>
 800c43c:	4b31      	ldr	r3, [pc, #196]	@ (800c504 <__mdiff+0x120>)
 800c43e:	f240 2145 	movw	r1, #581	@ 0x245
 800c442:	e7e3      	b.n	800c40c <__mdiff+0x28>
 800c444:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c448:	6926      	ldr	r6, [r4, #16]
 800c44a:	60c5      	str	r5, [r0, #12]
 800c44c:	f109 0310 	add.w	r3, r9, #16
 800c450:	f109 0514 	add.w	r5, r9, #20
 800c454:	f104 0e14 	add.w	lr, r4, #20
 800c458:	f100 0b14 	add.w	fp, r0, #20
 800c45c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c460:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	46d9      	mov	r9, fp
 800c468:	f04f 0c00 	mov.w	ip, #0
 800c46c:	9b01      	ldr	r3, [sp, #4]
 800c46e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c472:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	fa1f f38a 	uxth.w	r3, sl
 800c47c:	4619      	mov	r1, r3
 800c47e:	b283      	uxth	r3, r0
 800c480:	1acb      	subs	r3, r1, r3
 800c482:	0c00      	lsrs	r0, r0, #16
 800c484:	4463      	add	r3, ip
 800c486:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c48a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c48e:	b29b      	uxth	r3, r3
 800c490:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c494:	4576      	cmp	r6, lr
 800c496:	f849 3b04 	str.w	r3, [r9], #4
 800c49a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c49e:	d8e5      	bhi.n	800c46c <__mdiff+0x88>
 800c4a0:	1b33      	subs	r3, r6, r4
 800c4a2:	3b15      	subs	r3, #21
 800c4a4:	f023 0303 	bic.w	r3, r3, #3
 800c4a8:	3415      	adds	r4, #21
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	42a6      	cmp	r6, r4
 800c4ae:	bf38      	it	cc
 800c4b0:	2304      	movcc	r3, #4
 800c4b2:	441d      	add	r5, r3
 800c4b4:	445b      	add	r3, fp
 800c4b6:	461e      	mov	r6, r3
 800c4b8:	462c      	mov	r4, r5
 800c4ba:	4544      	cmp	r4, r8
 800c4bc:	d30e      	bcc.n	800c4dc <__mdiff+0xf8>
 800c4be:	f108 0103 	add.w	r1, r8, #3
 800c4c2:	1b49      	subs	r1, r1, r5
 800c4c4:	f021 0103 	bic.w	r1, r1, #3
 800c4c8:	3d03      	subs	r5, #3
 800c4ca:	45a8      	cmp	r8, r5
 800c4cc:	bf38      	it	cc
 800c4ce:	2100      	movcc	r1, #0
 800c4d0:	440b      	add	r3, r1
 800c4d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4d6:	b191      	cbz	r1, 800c4fe <__mdiff+0x11a>
 800c4d8:	6117      	str	r7, [r2, #16]
 800c4da:	e79d      	b.n	800c418 <__mdiff+0x34>
 800c4dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4e0:	46e6      	mov	lr, ip
 800c4e2:	0c08      	lsrs	r0, r1, #16
 800c4e4:	fa1c fc81 	uxtah	ip, ip, r1
 800c4e8:	4471      	add	r1, lr
 800c4ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4ee:	b289      	uxth	r1, r1
 800c4f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c4f4:	f846 1b04 	str.w	r1, [r6], #4
 800c4f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4fc:	e7dd      	b.n	800c4ba <__mdiff+0xd6>
 800c4fe:	3f01      	subs	r7, #1
 800c500:	e7e7      	b.n	800c4d2 <__mdiff+0xee>
 800c502:	bf00      	nop
 800c504:	0800da6c 	.word	0x0800da6c
 800c508:	0800da7d 	.word	0x0800da7d

0800c50c <__d2b>:
 800c50c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c510:	460f      	mov	r7, r1
 800c512:	2101      	movs	r1, #1
 800c514:	ec59 8b10 	vmov	r8, r9, d0
 800c518:	4616      	mov	r6, r2
 800c51a:	f7ff fccd 	bl	800beb8 <_Balloc>
 800c51e:	4604      	mov	r4, r0
 800c520:	b930      	cbnz	r0, 800c530 <__d2b+0x24>
 800c522:	4602      	mov	r2, r0
 800c524:	4b23      	ldr	r3, [pc, #140]	@ (800c5b4 <__d2b+0xa8>)
 800c526:	4824      	ldr	r0, [pc, #144]	@ (800c5b8 <__d2b+0xac>)
 800c528:	f240 310f 	movw	r1, #783	@ 0x30f
 800c52c:	f000 fa74 	bl	800ca18 <__assert_func>
 800c530:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c534:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c538:	b10d      	cbz	r5, 800c53e <__d2b+0x32>
 800c53a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c53e:	9301      	str	r3, [sp, #4]
 800c540:	f1b8 0300 	subs.w	r3, r8, #0
 800c544:	d023      	beq.n	800c58e <__d2b+0x82>
 800c546:	4668      	mov	r0, sp
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	f7ff fd7c 	bl	800c046 <__lo0bits>
 800c54e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c552:	b1d0      	cbz	r0, 800c58a <__d2b+0x7e>
 800c554:	f1c0 0320 	rsb	r3, r0, #32
 800c558:	fa02 f303 	lsl.w	r3, r2, r3
 800c55c:	430b      	orrs	r3, r1
 800c55e:	40c2      	lsrs	r2, r0
 800c560:	6163      	str	r3, [r4, #20]
 800c562:	9201      	str	r2, [sp, #4]
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	61a3      	str	r3, [r4, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	bf0c      	ite	eq
 800c56c:	2201      	moveq	r2, #1
 800c56e:	2202      	movne	r2, #2
 800c570:	6122      	str	r2, [r4, #16]
 800c572:	b1a5      	cbz	r5, 800c59e <__d2b+0x92>
 800c574:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c578:	4405      	add	r5, r0
 800c57a:	603d      	str	r5, [r7, #0]
 800c57c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c580:	6030      	str	r0, [r6, #0]
 800c582:	4620      	mov	r0, r4
 800c584:	b003      	add	sp, #12
 800c586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c58a:	6161      	str	r1, [r4, #20]
 800c58c:	e7ea      	b.n	800c564 <__d2b+0x58>
 800c58e:	a801      	add	r0, sp, #4
 800c590:	f7ff fd59 	bl	800c046 <__lo0bits>
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	6163      	str	r3, [r4, #20]
 800c598:	3020      	adds	r0, #32
 800c59a:	2201      	movs	r2, #1
 800c59c:	e7e8      	b.n	800c570 <__d2b+0x64>
 800c59e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5a6:	6038      	str	r0, [r7, #0]
 800c5a8:	6918      	ldr	r0, [r3, #16]
 800c5aa:	f7ff fd2d 	bl	800c008 <__hi0bits>
 800c5ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5b2:	e7e5      	b.n	800c580 <__d2b+0x74>
 800c5b4:	0800da6c 	.word	0x0800da6c
 800c5b8:	0800da7d 	.word	0x0800da7d

0800c5bc <__ssputs_r>:
 800c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c0:	688e      	ldr	r6, [r1, #8]
 800c5c2:	461f      	mov	r7, r3
 800c5c4:	42be      	cmp	r6, r7
 800c5c6:	680b      	ldr	r3, [r1, #0]
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	460c      	mov	r4, r1
 800c5cc:	4690      	mov	r8, r2
 800c5ce:	d82d      	bhi.n	800c62c <__ssputs_r+0x70>
 800c5d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5d8:	d026      	beq.n	800c628 <__ssputs_r+0x6c>
 800c5da:	6965      	ldr	r5, [r4, #20]
 800c5dc:	6909      	ldr	r1, [r1, #16]
 800c5de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5e2:	eba3 0901 	sub.w	r9, r3, r1
 800c5e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5ea:	1c7b      	adds	r3, r7, #1
 800c5ec:	444b      	add	r3, r9
 800c5ee:	106d      	asrs	r5, r5, #1
 800c5f0:	429d      	cmp	r5, r3
 800c5f2:	bf38      	it	cc
 800c5f4:	461d      	movcc	r5, r3
 800c5f6:	0553      	lsls	r3, r2, #21
 800c5f8:	d527      	bpl.n	800c64a <__ssputs_r+0x8e>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	f7ff fbd0 	bl	800bda0 <_malloc_r>
 800c600:	4606      	mov	r6, r0
 800c602:	b360      	cbz	r0, 800c65e <__ssputs_r+0xa2>
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	464a      	mov	r2, r9
 800c608:	f7fe fcfb 	bl	800b002 <memcpy>
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	6126      	str	r6, [r4, #16]
 800c61a:	6165      	str	r5, [r4, #20]
 800c61c:	444e      	add	r6, r9
 800c61e:	eba5 0509 	sub.w	r5, r5, r9
 800c622:	6026      	str	r6, [r4, #0]
 800c624:	60a5      	str	r5, [r4, #8]
 800c626:	463e      	mov	r6, r7
 800c628:	42be      	cmp	r6, r7
 800c62a:	d900      	bls.n	800c62e <__ssputs_r+0x72>
 800c62c:	463e      	mov	r6, r7
 800c62e:	6820      	ldr	r0, [r4, #0]
 800c630:	4632      	mov	r2, r6
 800c632:	4641      	mov	r1, r8
 800c634:	f000 f9c6 	bl	800c9c4 <memmove>
 800c638:	68a3      	ldr	r3, [r4, #8]
 800c63a:	1b9b      	subs	r3, r3, r6
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	4433      	add	r3, r6
 800c642:	6023      	str	r3, [r4, #0]
 800c644:	2000      	movs	r0, #0
 800c646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64a:	462a      	mov	r2, r5
 800c64c:	f000 fa28 	bl	800caa0 <_realloc_r>
 800c650:	4606      	mov	r6, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d1e0      	bne.n	800c618 <__ssputs_r+0x5c>
 800c656:	6921      	ldr	r1, [r4, #16]
 800c658:	4650      	mov	r0, sl
 800c65a:	f7ff fb2d 	bl	800bcb8 <_free_r>
 800c65e:	230c      	movs	r3, #12
 800c660:	f8ca 3000 	str.w	r3, [sl]
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c66a:	81a3      	strh	r3, [r4, #12]
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	e7e9      	b.n	800c646 <__ssputs_r+0x8a>
	...

0800c674 <_svfiprintf_r>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4698      	mov	r8, r3
 800c67a:	898b      	ldrh	r3, [r1, #12]
 800c67c:	061b      	lsls	r3, r3, #24
 800c67e:	b09d      	sub	sp, #116	@ 0x74
 800c680:	4607      	mov	r7, r0
 800c682:	460d      	mov	r5, r1
 800c684:	4614      	mov	r4, r2
 800c686:	d510      	bpl.n	800c6aa <_svfiprintf_r+0x36>
 800c688:	690b      	ldr	r3, [r1, #16]
 800c68a:	b973      	cbnz	r3, 800c6aa <_svfiprintf_r+0x36>
 800c68c:	2140      	movs	r1, #64	@ 0x40
 800c68e:	f7ff fb87 	bl	800bda0 <_malloc_r>
 800c692:	6028      	str	r0, [r5, #0]
 800c694:	6128      	str	r0, [r5, #16]
 800c696:	b930      	cbnz	r0, 800c6a6 <_svfiprintf_r+0x32>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a0:	b01d      	add	sp, #116	@ 0x74
 800c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a6:	2340      	movs	r3, #64	@ 0x40
 800c6a8:	616b      	str	r3, [r5, #20]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ae:	2320      	movs	r3, #32
 800c6b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6b8:	2330      	movs	r3, #48	@ 0x30
 800c6ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c858 <_svfiprintf_r+0x1e4>
 800c6be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6c2:	f04f 0901 	mov.w	r9, #1
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	469a      	mov	sl, r3
 800c6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ce:	b10a      	cbz	r2, 800c6d4 <_svfiprintf_r+0x60>
 800c6d0:	2a25      	cmp	r2, #37	@ 0x25
 800c6d2:	d1f9      	bne.n	800c6c8 <_svfiprintf_r+0x54>
 800c6d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d8:	d00b      	beq.n	800c6f2 <_svfiprintf_r+0x7e>
 800c6da:	465b      	mov	r3, fp
 800c6dc:	4622      	mov	r2, r4
 800c6de:	4629      	mov	r1, r5
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	f7ff ff6b 	bl	800c5bc <__ssputs_r>
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f000 80a7 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6ee:	445a      	add	r2, fp
 800c6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 809f 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c706:	f10a 0a01 	add.w	sl, sl, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	9307      	str	r3, [sp, #28]
 800c70e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c712:	931a      	str	r3, [sp, #104]	@ 0x68
 800c714:	4654      	mov	r4, sl
 800c716:	2205      	movs	r2, #5
 800c718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71c:	484e      	ldr	r0, [pc, #312]	@ (800c858 <_svfiprintf_r+0x1e4>)
 800c71e:	f7f3 fd77 	bl	8000210 <memchr>
 800c722:	9a04      	ldr	r2, [sp, #16]
 800c724:	b9d8      	cbnz	r0, 800c75e <_svfiprintf_r+0xea>
 800c726:	06d0      	lsls	r0, r2, #27
 800c728:	bf44      	itt	mi
 800c72a:	2320      	movmi	r3, #32
 800c72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c730:	0711      	lsls	r1, r2, #28
 800c732:	bf44      	itt	mi
 800c734:	232b      	movmi	r3, #43	@ 0x2b
 800c736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c73a:	f89a 3000 	ldrb.w	r3, [sl]
 800c73e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c740:	d015      	beq.n	800c76e <_svfiprintf_r+0xfa>
 800c742:	9a07      	ldr	r2, [sp, #28]
 800c744:	4654      	mov	r4, sl
 800c746:	2000      	movs	r0, #0
 800c748:	f04f 0c0a 	mov.w	ip, #10
 800c74c:	4621      	mov	r1, r4
 800c74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c752:	3b30      	subs	r3, #48	@ 0x30
 800c754:	2b09      	cmp	r3, #9
 800c756:	d94b      	bls.n	800c7f0 <_svfiprintf_r+0x17c>
 800c758:	b1b0      	cbz	r0, 800c788 <_svfiprintf_r+0x114>
 800c75a:	9207      	str	r2, [sp, #28]
 800c75c:	e014      	b.n	800c788 <_svfiprintf_r+0x114>
 800c75e:	eba0 0308 	sub.w	r3, r0, r8
 800c762:	fa09 f303 	lsl.w	r3, r9, r3
 800c766:	4313      	orrs	r3, r2
 800c768:	9304      	str	r3, [sp, #16]
 800c76a:	46a2      	mov	sl, r4
 800c76c:	e7d2      	b.n	800c714 <_svfiprintf_r+0xa0>
 800c76e:	9b03      	ldr	r3, [sp, #12]
 800c770:	1d19      	adds	r1, r3, #4
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	9103      	str	r1, [sp, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	bfbb      	ittet	lt
 800c77a:	425b      	neglt	r3, r3
 800c77c:	f042 0202 	orrlt.w	r2, r2, #2
 800c780:	9307      	strge	r3, [sp, #28]
 800c782:	9307      	strlt	r3, [sp, #28]
 800c784:	bfb8      	it	lt
 800c786:	9204      	strlt	r2, [sp, #16]
 800c788:	7823      	ldrb	r3, [r4, #0]
 800c78a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c78c:	d10a      	bne.n	800c7a4 <_svfiprintf_r+0x130>
 800c78e:	7863      	ldrb	r3, [r4, #1]
 800c790:	2b2a      	cmp	r3, #42	@ 0x2a
 800c792:	d132      	bne.n	800c7fa <_svfiprintf_r+0x186>
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	1d1a      	adds	r2, r3, #4
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	9203      	str	r2, [sp, #12]
 800c79c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7a0:	3402      	adds	r4, #2
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c868 <_svfiprintf_r+0x1f4>
 800c7a8:	7821      	ldrb	r1, [r4, #0]
 800c7aa:	2203      	movs	r2, #3
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	f7f3 fd2f 	bl	8000210 <memchr>
 800c7b2:	b138      	cbz	r0, 800c7c4 <_svfiprintf_r+0x150>
 800c7b4:	9b04      	ldr	r3, [sp, #16]
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	2240      	movs	r2, #64	@ 0x40
 800c7bc:	4082      	lsls	r2, r0
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	3401      	adds	r4, #1
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c8:	4824      	ldr	r0, [pc, #144]	@ (800c85c <_svfiprintf_r+0x1e8>)
 800c7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7ce:	2206      	movs	r2, #6
 800c7d0:	f7f3 fd1e 	bl	8000210 <memchr>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d036      	beq.n	800c846 <_svfiprintf_r+0x1d2>
 800c7d8:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <_svfiprintf_r+0x1ec>)
 800c7da:	bb1b      	cbnz	r3, 800c824 <_svfiprintf_r+0x1b0>
 800c7dc:	9b03      	ldr	r3, [sp, #12]
 800c7de:	3307      	adds	r3, #7
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ea:	4433      	add	r3, r6
 800c7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ee:	e76a      	b.n	800c6c6 <_svfiprintf_r+0x52>
 800c7f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	2001      	movs	r0, #1
 800c7f8:	e7a8      	b.n	800c74c <_svfiprintf_r+0xd8>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	4619      	mov	r1, r3
 800c802:	f04f 0c0a 	mov.w	ip, #10
 800c806:	4620      	mov	r0, r4
 800c808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80c:	3a30      	subs	r2, #48	@ 0x30
 800c80e:	2a09      	cmp	r2, #9
 800c810:	d903      	bls.n	800c81a <_svfiprintf_r+0x1a6>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0c6      	beq.n	800c7a4 <_svfiprintf_r+0x130>
 800c816:	9105      	str	r1, [sp, #20]
 800c818:	e7c4      	b.n	800c7a4 <_svfiprintf_r+0x130>
 800c81a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c81e:	4604      	mov	r4, r0
 800c820:	2301      	movs	r3, #1
 800c822:	e7f0      	b.n	800c806 <_svfiprintf_r+0x192>
 800c824:	ab03      	add	r3, sp, #12
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	462a      	mov	r2, r5
 800c82a:	4b0e      	ldr	r3, [pc, #56]	@ (800c864 <_svfiprintf_r+0x1f0>)
 800c82c:	a904      	add	r1, sp, #16
 800c82e:	4638      	mov	r0, r7
 800c830:	f7fd fe34 	bl	800a49c <_printf_float>
 800c834:	1c42      	adds	r2, r0, #1
 800c836:	4606      	mov	r6, r0
 800c838:	d1d6      	bne.n	800c7e8 <_svfiprintf_r+0x174>
 800c83a:	89ab      	ldrh	r3, [r5, #12]
 800c83c:	065b      	lsls	r3, r3, #25
 800c83e:	f53f af2d 	bmi.w	800c69c <_svfiprintf_r+0x28>
 800c842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c844:	e72c      	b.n	800c6a0 <_svfiprintf_r+0x2c>
 800c846:	ab03      	add	r3, sp, #12
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	462a      	mov	r2, r5
 800c84c:	4b05      	ldr	r3, [pc, #20]	@ (800c864 <_svfiprintf_r+0x1f0>)
 800c84e:	a904      	add	r1, sp, #16
 800c850:	4638      	mov	r0, r7
 800c852:	f7fe f8bb 	bl	800a9cc <_printf_i>
 800c856:	e7ed      	b.n	800c834 <_svfiprintf_r+0x1c0>
 800c858:	0800dbd8 	.word	0x0800dbd8
 800c85c:	0800dbe2 	.word	0x0800dbe2
 800c860:	0800a49d 	.word	0x0800a49d
 800c864:	0800c5bd 	.word	0x0800c5bd
 800c868:	0800dbde 	.word	0x0800dbde

0800c86c <__sflush_r>:
 800c86c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c874:	0716      	lsls	r6, r2, #28
 800c876:	4605      	mov	r5, r0
 800c878:	460c      	mov	r4, r1
 800c87a:	d454      	bmi.n	800c926 <__sflush_r+0xba>
 800c87c:	684b      	ldr	r3, [r1, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	dc02      	bgt.n	800c888 <__sflush_r+0x1c>
 800c882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c884:	2b00      	cmp	r3, #0
 800c886:	dd48      	ble.n	800c91a <__sflush_r+0xae>
 800c888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c88a:	2e00      	cmp	r6, #0
 800c88c:	d045      	beq.n	800c91a <__sflush_r+0xae>
 800c88e:	2300      	movs	r3, #0
 800c890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c894:	682f      	ldr	r7, [r5, #0]
 800c896:	6a21      	ldr	r1, [r4, #32]
 800c898:	602b      	str	r3, [r5, #0]
 800c89a:	d030      	beq.n	800c8fe <__sflush_r+0x92>
 800c89c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c89e:	89a3      	ldrh	r3, [r4, #12]
 800c8a0:	0759      	lsls	r1, r3, #29
 800c8a2:	d505      	bpl.n	800c8b0 <__sflush_r+0x44>
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	1ad2      	subs	r2, r2, r3
 800c8a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8aa:	b10b      	cbz	r3, 800c8b0 <__sflush_r+0x44>
 800c8ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8b4:	6a21      	ldr	r1, [r4, #32]
 800c8b6:	4628      	mov	r0, r5
 800c8b8:	47b0      	blx	r6
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	d106      	bne.n	800c8ce <__sflush_r+0x62>
 800c8c0:	6829      	ldr	r1, [r5, #0]
 800c8c2:	291d      	cmp	r1, #29
 800c8c4:	d82b      	bhi.n	800c91e <__sflush_r+0xb2>
 800c8c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c970 <__sflush_r+0x104>)
 800c8c8:	410a      	asrs	r2, r1
 800c8ca:	07d6      	lsls	r6, r2, #31
 800c8cc:	d427      	bmi.n	800c91e <__sflush_r+0xb2>
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	6062      	str	r2, [r4, #4]
 800c8d2:	04d9      	lsls	r1, r3, #19
 800c8d4:	6922      	ldr	r2, [r4, #16]
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	d504      	bpl.n	800c8e4 <__sflush_r+0x78>
 800c8da:	1c42      	adds	r2, r0, #1
 800c8dc:	d101      	bne.n	800c8e2 <__sflush_r+0x76>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	b903      	cbnz	r3, 800c8e4 <__sflush_r+0x78>
 800c8e2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8e6:	602f      	str	r7, [r5, #0]
 800c8e8:	b1b9      	cbz	r1, 800c91a <__sflush_r+0xae>
 800c8ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8ee:	4299      	cmp	r1, r3
 800c8f0:	d002      	beq.n	800c8f8 <__sflush_r+0x8c>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f7ff f9e0 	bl	800bcb8 <_free_r>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8fc:	e00d      	b.n	800c91a <__sflush_r+0xae>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4628      	mov	r0, r5
 800c902:	47b0      	blx	r6
 800c904:	4602      	mov	r2, r0
 800c906:	1c50      	adds	r0, r2, #1
 800c908:	d1c9      	bne.n	800c89e <__sflush_r+0x32>
 800c90a:	682b      	ldr	r3, [r5, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0c6      	beq.n	800c89e <__sflush_r+0x32>
 800c910:	2b1d      	cmp	r3, #29
 800c912:	d001      	beq.n	800c918 <__sflush_r+0xac>
 800c914:	2b16      	cmp	r3, #22
 800c916:	d11e      	bne.n	800c956 <__sflush_r+0xea>
 800c918:	602f      	str	r7, [r5, #0]
 800c91a:	2000      	movs	r0, #0
 800c91c:	e022      	b.n	800c964 <__sflush_r+0xf8>
 800c91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c922:	b21b      	sxth	r3, r3
 800c924:	e01b      	b.n	800c95e <__sflush_r+0xf2>
 800c926:	690f      	ldr	r7, [r1, #16]
 800c928:	2f00      	cmp	r7, #0
 800c92a:	d0f6      	beq.n	800c91a <__sflush_r+0xae>
 800c92c:	0793      	lsls	r3, r2, #30
 800c92e:	680e      	ldr	r6, [r1, #0]
 800c930:	bf08      	it	eq
 800c932:	694b      	ldreq	r3, [r1, #20]
 800c934:	600f      	str	r7, [r1, #0]
 800c936:	bf18      	it	ne
 800c938:	2300      	movne	r3, #0
 800c93a:	eba6 0807 	sub.w	r8, r6, r7
 800c93e:	608b      	str	r3, [r1, #8]
 800c940:	f1b8 0f00 	cmp.w	r8, #0
 800c944:	dde9      	ble.n	800c91a <__sflush_r+0xae>
 800c946:	6a21      	ldr	r1, [r4, #32]
 800c948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c94a:	4643      	mov	r3, r8
 800c94c:	463a      	mov	r2, r7
 800c94e:	4628      	mov	r0, r5
 800c950:	47b0      	blx	r6
 800c952:	2800      	cmp	r0, #0
 800c954:	dc08      	bgt.n	800c968 <__sflush_r+0xfc>
 800c956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c95e:	81a3      	strh	r3, [r4, #12]
 800c960:	f04f 30ff 	mov.w	r0, #4294967295
 800c964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c968:	4407      	add	r7, r0
 800c96a:	eba8 0800 	sub.w	r8, r8, r0
 800c96e:	e7e7      	b.n	800c940 <__sflush_r+0xd4>
 800c970:	dfbffffe 	.word	0xdfbffffe

0800c974 <_fflush_r>:
 800c974:	b538      	push	{r3, r4, r5, lr}
 800c976:	690b      	ldr	r3, [r1, #16]
 800c978:	4605      	mov	r5, r0
 800c97a:	460c      	mov	r4, r1
 800c97c:	b913      	cbnz	r3, 800c984 <_fflush_r+0x10>
 800c97e:	2500      	movs	r5, #0
 800c980:	4628      	mov	r0, r5
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	b118      	cbz	r0, 800c98e <_fflush_r+0x1a>
 800c986:	6a03      	ldr	r3, [r0, #32]
 800c988:	b90b      	cbnz	r3, 800c98e <_fflush_r+0x1a>
 800c98a:	f7fe f9cb 	bl	800ad24 <__sinit>
 800c98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d0f3      	beq.n	800c97e <_fflush_r+0xa>
 800c996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c998:	07d0      	lsls	r0, r2, #31
 800c99a:	d404      	bmi.n	800c9a6 <_fflush_r+0x32>
 800c99c:	0599      	lsls	r1, r3, #22
 800c99e:	d402      	bmi.n	800c9a6 <_fflush_r+0x32>
 800c9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9a2:	f7fe fb2c 	bl	800affe <__retarget_lock_acquire_recursive>
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	f7ff ff5f 	bl	800c86c <__sflush_r>
 800c9ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9b0:	07da      	lsls	r2, r3, #31
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	d4e4      	bmi.n	800c980 <_fflush_r+0xc>
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	059b      	lsls	r3, r3, #22
 800c9ba:	d4e1      	bmi.n	800c980 <_fflush_r+0xc>
 800c9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9be:	f7fe fb1f 	bl	800b000 <__retarget_lock_release_recursive>
 800c9c2:	e7dd      	b.n	800c980 <_fflush_r+0xc>

0800c9c4 <memmove>:
 800c9c4:	4288      	cmp	r0, r1
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	eb01 0402 	add.w	r4, r1, r2
 800c9cc:	d902      	bls.n	800c9d4 <memmove+0x10>
 800c9ce:	4284      	cmp	r4, r0
 800c9d0:	4623      	mov	r3, r4
 800c9d2:	d807      	bhi.n	800c9e4 <memmove+0x20>
 800c9d4:	1e43      	subs	r3, r0, #1
 800c9d6:	42a1      	cmp	r1, r4
 800c9d8:	d008      	beq.n	800c9ec <memmove+0x28>
 800c9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9e2:	e7f8      	b.n	800c9d6 <memmove+0x12>
 800c9e4:	4402      	add	r2, r0
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	428a      	cmp	r2, r1
 800c9ea:	d100      	bne.n	800c9ee <memmove+0x2a>
 800c9ec:	bd10      	pop	{r4, pc}
 800c9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9f6:	e7f7      	b.n	800c9e8 <memmove+0x24>

0800c9f8 <_sbrk_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d06      	ldr	r5, [pc, #24]	@ (800ca14 <_sbrk_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	f7f5 ff9a 	bl	800293c <_sbrk>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_sbrk_r+0x1a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_sbrk_r+0x1a>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20019f88 	.word	0x20019f88

0800ca18 <__assert_func>:
 800ca18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca1a:	4614      	mov	r4, r2
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	4b09      	ldr	r3, [pc, #36]	@ (800ca44 <__assert_func+0x2c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4605      	mov	r5, r0
 800ca24:	68d8      	ldr	r0, [r3, #12]
 800ca26:	b954      	cbnz	r4, 800ca3e <__assert_func+0x26>
 800ca28:	4b07      	ldr	r3, [pc, #28]	@ (800ca48 <__assert_func+0x30>)
 800ca2a:	461c      	mov	r4, r3
 800ca2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca30:	9100      	str	r1, [sp, #0]
 800ca32:	462b      	mov	r3, r5
 800ca34:	4905      	ldr	r1, [pc, #20]	@ (800ca4c <__assert_func+0x34>)
 800ca36:	f000 f86f 	bl	800cb18 <fiprintf>
 800ca3a:	f000 f87f 	bl	800cb3c <abort>
 800ca3e:	4b04      	ldr	r3, [pc, #16]	@ (800ca50 <__assert_func+0x38>)
 800ca40:	e7f4      	b.n	800ca2c <__assert_func+0x14>
 800ca42:	bf00      	nop
 800ca44:	20000030 	.word	0x20000030
 800ca48:	0800dc2e 	.word	0x0800dc2e
 800ca4c:	0800dc00 	.word	0x0800dc00
 800ca50:	0800dbf3 	.word	0x0800dbf3

0800ca54 <_calloc_r>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	fba1 5402 	umull	r5, r4, r1, r2
 800ca5a:	b93c      	cbnz	r4, 800ca6c <_calloc_r+0x18>
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	f7ff f99f 	bl	800bda0 <_malloc_r>
 800ca62:	4606      	mov	r6, r0
 800ca64:	b928      	cbnz	r0, 800ca72 <_calloc_r+0x1e>
 800ca66:	2600      	movs	r6, #0
 800ca68:	4630      	mov	r0, r6
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	220c      	movs	r2, #12
 800ca6e:	6002      	str	r2, [r0, #0]
 800ca70:	e7f9      	b.n	800ca66 <_calloc_r+0x12>
 800ca72:	462a      	mov	r2, r5
 800ca74:	4621      	mov	r1, r4
 800ca76:	f7fe f9ee 	bl	800ae56 <memset>
 800ca7a:	e7f5      	b.n	800ca68 <_calloc_r+0x14>

0800ca7c <__ascii_mbtowc>:
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	b901      	cbnz	r1, 800ca82 <__ascii_mbtowc+0x6>
 800ca80:	a901      	add	r1, sp, #4
 800ca82:	b142      	cbz	r2, 800ca96 <__ascii_mbtowc+0x1a>
 800ca84:	b14b      	cbz	r3, 800ca9a <__ascii_mbtowc+0x1e>
 800ca86:	7813      	ldrb	r3, [r2, #0]
 800ca88:	600b      	str	r3, [r1, #0]
 800ca8a:	7812      	ldrb	r2, [r2, #0]
 800ca8c:	1e10      	subs	r0, r2, #0
 800ca8e:	bf18      	it	ne
 800ca90:	2001      	movne	r0, #1
 800ca92:	b002      	add	sp, #8
 800ca94:	4770      	bx	lr
 800ca96:	4610      	mov	r0, r2
 800ca98:	e7fb      	b.n	800ca92 <__ascii_mbtowc+0x16>
 800ca9a:	f06f 0001 	mvn.w	r0, #1
 800ca9e:	e7f8      	b.n	800ca92 <__ascii_mbtowc+0x16>

0800caa0 <_realloc_r>:
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	4680      	mov	r8, r0
 800caa6:	4615      	mov	r5, r2
 800caa8:	460c      	mov	r4, r1
 800caaa:	b921      	cbnz	r1, 800cab6 <_realloc_r+0x16>
 800caac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	4611      	mov	r1, r2
 800cab2:	f7ff b975 	b.w	800bda0 <_malloc_r>
 800cab6:	b92a      	cbnz	r2, 800cac4 <_realloc_r+0x24>
 800cab8:	f7ff f8fe 	bl	800bcb8 <_free_r>
 800cabc:	2400      	movs	r4, #0
 800cabe:	4620      	mov	r0, r4
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	f000 f841 	bl	800cb4a <_malloc_usable_size_r>
 800cac8:	4285      	cmp	r5, r0
 800caca:	4606      	mov	r6, r0
 800cacc:	d802      	bhi.n	800cad4 <_realloc_r+0x34>
 800cace:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cad2:	d8f4      	bhi.n	800cabe <_realloc_r+0x1e>
 800cad4:	4629      	mov	r1, r5
 800cad6:	4640      	mov	r0, r8
 800cad8:	f7ff f962 	bl	800bda0 <_malloc_r>
 800cadc:	4607      	mov	r7, r0
 800cade:	2800      	cmp	r0, #0
 800cae0:	d0ec      	beq.n	800cabc <_realloc_r+0x1c>
 800cae2:	42b5      	cmp	r5, r6
 800cae4:	462a      	mov	r2, r5
 800cae6:	4621      	mov	r1, r4
 800cae8:	bf28      	it	cs
 800caea:	4632      	movcs	r2, r6
 800caec:	f7fe fa89 	bl	800b002 <memcpy>
 800caf0:	4621      	mov	r1, r4
 800caf2:	4640      	mov	r0, r8
 800caf4:	f7ff f8e0 	bl	800bcb8 <_free_r>
 800caf8:	463c      	mov	r4, r7
 800cafa:	e7e0      	b.n	800cabe <_realloc_r+0x1e>

0800cafc <__ascii_wctomb>:
 800cafc:	4603      	mov	r3, r0
 800cafe:	4608      	mov	r0, r1
 800cb00:	b141      	cbz	r1, 800cb14 <__ascii_wctomb+0x18>
 800cb02:	2aff      	cmp	r2, #255	@ 0xff
 800cb04:	d904      	bls.n	800cb10 <__ascii_wctomb+0x14>
 800cb06:	228a      	movs	r2, #138	@ 0x8a
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0e:	4770      	bx	lr
 800cb10:	700a      	strb	r2, [r1, #0]
 800cb12:	2001      	movs	r0, #1
 800cb14:	4770      	bx	lr
	...

0800cb18 <fiprintf>:
 800cb18:	b40e      	push	{r1, r2, r3}
 800cb1a:	b503      	push	{r0, r1, lr}
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	ab03      	add	r3, sp, #12
 800cb20:	4805      	ldr	r0, [pc, #20]	@ (800cb38 <fiprintf+0x20>)
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	6800      	ldr	r0, [r0, #0]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	f000 f83f 	bl	800cbac <_vfiprintf_r>
 800cb2e:	b002      	add	sp, #8
 800cb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb34:	b003      	add	sp, #12
 800cb36:	4770      	bx	lr
 800cb38:	20000030 	.word	0x20000030

0800cb3c <abort>:
 800cb3c:	b508      	push	{r3, lr}
 800cb3e:	2006      	movs	r0, #6
 800cb40:	f000 fa08 	bl	800cf54 <raise>
 800cb44:	2001      	movs	r0, #1
 800cb46:	f7f5 fe81 	bl	800284c <_exit>

0800cb4a <_malloc_usable_size_r>:
 800cb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb4e:	1f18      	subs	r0, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfbc      	itt	lt
 800cb54:	580b      	ldrlt	r3, [r1, r0]
 800cb56:	18c0      	addlt	r0, r0, r3
 800cb58:	4770      	bx	lr

0800cb5a <__sfputc_r>:
 800cb5a:	6893      	ldr	r3, [r2, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	b410      	push	{r4}
 800cb62:	6093      	str	r3, [r2, #8]
 800cb64:	da08      	bge.n	800cb78 <__sfputc_r+0x1e>
 800cb66:	6994      	ldr	r4, [r2, #24]
 800cb68:	42a3      	cmp	r3, r4
 800cb6a:	db01      	blt.n	800cb70 <__sfputc_r+0x16>
 800cb6c:	290a      	cmp	r1, #10
 800cb6e:	d103      	bne.n	800cb78 <__sfputc_r+0x1e>
 800cb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb74:	f000 b932 	b.w	800cddc <__swbuf_r>
 800cb78:	6813      	ldr	r3, [r2, #0]
 800cb7a:	1c58      	adds	r0, r3, #1
 800cb7c:	6010      	str	r0, [r2, #0]
 800cb7e:	7019      	strb	r1, [r3, #0]
 800cb80:	4608      	mov	r0, r1
 800cb82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <__sfputs_r>:
 800cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	460f      	mov	r7, r1
 800cb8e:	4614      	mov	r4, r2
 800cb90:	18d5      	adds	r5, r2, r3
 800cb92:	42ac      	cmp	r4, r5
 800cb94:	d101      	bne.n	800cb9a <__sfputs_r+0x12>
 800cb96:	2000      	movs	r0, #0
 800cb98:	e007      	b.n	800cbaa <__sfputs_r+0x22>
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	463a      	mov	r2, r7
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ffda 	bl	800cb5a <__sfputc_r>
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	d1f3      	bne.n	800cb92 <__sfputs_r+0xa>
 800cbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbac <_vfiprintf_r>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	b09d      	sub	sp, #116	@ 0x74
 800cbb4:	4614      	mov	r4, r2
 800cbb6:	4698      	mov	r8, r3
 800cbb8:	4606      	mov	r6, r0
 800cbba:	b118      	cbz	r0, 800cbc4 <_vfiprintf_r+0x18>
 800cbbc:	6a03      	ldr	r3, [r0, #32]
 800cbbe:	b90b      	cbnz	r3, 800cbc4 <_vfiprintf_r+0x18>
 800cbc0:	f7fe f8b0 	bl	800ad24 <__sinit>
 800cbc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbc6:	07d9      	lsls	r1, r3, #31
 800cbc8:	d405      	bmi.n	800cbd6 <_vfiprintf_r+0x2a>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	059a      	lsls	r2, r3, #22
 800cbce:	d402      	bmi.n	800cbd6 <_vfiprintf_r+0x2a>
 800cbd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbd2:	f7fe fa14 	bl	800affe <__retarget_lock_acquire_recursive>
 800cbd6:	89ab      	ldrh	r3, [r5, #12]
 800cbd8:	071b      	lsls	r3, r3, #28
 800cbda:	d501      	bpl.n	800cbe0 <_vfiprintf_r+0x34>
 800cbdc:	692b      	ldr	r3, [r5, #16]
 800cbde:	b99b      	cbnz	r3, 800cc08 <_vfiprintf_r+0x5c>
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f000 f938 	bl	800ce58 <__swsetup_r>
 800cbe8:	b170      	cbz	r0, 800cc08 <_vfiprintf_r+0x5c>
 800cbea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbec:	07dc      	lsls	r4, r3, #31
 800cbee:	d504      	bpl.n	800cbfa <_vfiprintf_r+0x4e>
 800cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf4:	b01d      	add	sp, #116	@ 0x74
 800cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfa:	89ab      	ldrh	r3, [r5, #12]
 800cbfc:	0598      	lsls	r0, r3, #22
 800cbfe:	d4f7      	bmi.n	800cbf0 <_vfiprintf_r+0x44>
 800cc00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc02:	f7fe f9fd 	bl	800b000 <__retarget_lock_release_recursive>
 800cc06:	e7f3      	b.n	800cbf0 <_vfiprintf_r+0x44>
 800cc08:	2300      	movs	r3, #0
 800cc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc12:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc16:	2330      	movs	r3, #48	@ 0x30
 800cc18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cdc8 <_vfiprintf_r+0x21c>
 800cc1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc20:	f04f 0901 	mov.w	r9, #1
 800cc24:	4623      	mov	r3, r4
 800cc26:	469a      	mov	sl, r3
 800cc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc2c:	b10a      	cbz	r2, 800cc32 <_vfiprintf_r+0x86>
 800cc2e:	2a25      	cmp	r2, #37	@ 0x25
 800cc30:	d1f9      	bne.n	800cc26 <_vfiprintf_r+0x7a>
 800cc32:	ebba 0b04 	subs.w	fp, sl, r4
 800cc36:	d00b      	beq.n	800cc50 <_vfiprintf_r+0xa4>
 800cc38:	465b      	mov	r3, fp
 800cc3a:	4622      	mov	r2, r4
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f7ff ffa2 	bl	800cb88 <__sfputs_r>
 800cc44:	3001      	adds	r0, #1
 800cc46:	f000 80a7 	beq.w	800cd98 <_vfiprintf_r+0x1ec>
 800cc4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc4c:	445a      	add	r2, fp
 800cc4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc50:	f89a 3000 	ldrb.w	r3, [sl]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f000 809f 	beq.w	800cd98 <_vfiprintf_r+0x1ec>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc64:	f10a 0a01 	add.w	sl, sl, #1
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9307      	str	r3, [sp, #28]
 800cc6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc70:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc72:	4654      	mov	r4, sl
 800cc74:	2205      	movs	r2, #5
 800cc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7a:	4853      	ldr	r0, [pc, #332]	@ (800cdc8 <_vfiprintf_r+0x21c>)
 800cc7c:	f7f3 fac8 	bl	8000210 <memchr>
 800cc80:	9a04      	ldr	r2, [sp, #16]
 800cc82:	b9d8      	cbnz	r0, 800ccbc <_vfiprintf_r+0x110>
 800cc84:	06d1      	lsls	r1, r2, #27
 800cc86:	bf44      	itt	mi
 800cc88:	2320      	movmi	r3, #32
 800cc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc8e:	0713      	lsls	r3, r2, #28
 800cc90:	bf44      	itt	mi
 800cc92:	232b      	movmi	r3, #43	@ 0x2b
 800cc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc98:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc9e:	d015      	beq.n	800cccc <_vfiprintf_r+0x120>
 800cca0:	9a07      	ldr	r2, [sp, #28]
 800cca2:	4654      	mov	r4, sl
 800cca4:	2000      	movs	r0, #0
 800cca6:	f04f 0c0a 	mov.w	ip, #10
 800ccaa:	4621      	mov	r1, r4
 800ccac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccb0:	3b30      	subs	r3, #48	@ 0x30
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	d94b      	bls.n	800cd4e <_vfiprintf_r+0x1a2>
 800ccb6:	b1b0      	cbz	r0, 800cce6 <_vfiprintf_r+0x13a>
 800ccb8:	9207      	str	r2, [sp, #28]
 800ccba:	e014      	b.n	800cce6 <_vfiprintf_r+0x13a>
 800ccbc:	eba0 0308 	sub.w	r3, r0, r8
 800ccc0:	fa09 f303 	lsl.w	r3, r9, r3
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	9304      	str	r3, [sp, #16]
 800ccc8:	46a2      	mov	sl, r4
 800ccca:	e7d2      	b.n	800cc72 <_vfiprintf_r+0xc6>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	1d19      	adds	r1, r3, #4
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	9103      	str	r1, [sp, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	bfbb      	ittet	lt
 800ccd8:	425b      	neglt	r3, r3
 800ccda:	f042 0202 	orrlt.w	r2, r2, #2
 800ccde:	9307      	strge	r3, [sp, #28]
 800cce0:	9307      	strlt	r3, [sp, #28]
 800cce2:	bfb8      	it	lt
 800cce4:	9204      	strlt	r2, [sp, #16]
 800cce6:	7823      	ldrb	r3, [r4, #0]
 800cce8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccea:	d10a      	bne.n	800cd02 <_vfiprintf_r+0x156>
 800ccec:	7863      	ldrb	r3, [r4, #1]
 800ccee:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccf0:	d132      	bne.n	800cd58 <_vfiprintf_r+0x1ac>
 800ccf2:	9b03      	ldr	r3, [sp, #12]
 800ccf4:	1d1a      	adds	r2, r3, #4
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	9203      	str	r2, [sp, #12]
 800ccfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ccfe:	3402      	adds	r4, #2
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cdd8 <_vfiprintf_r+0x22c>
 800cd06:	7821      	ldrb	r1, [r4, #0]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	4650      	mov	r0, sl
 800cd0c:	f7f3 fa80 	bl	8000210 <memchr>
 800cd10:	b138      	cbz	r0, 800cd22 <_vfiprintf_r+0x176>
 800cd12:	9b04      	ldr	r3, [sp, #16]
 800cd14:	eba0 000a 	sub.w	r0, r0, sl
 800cd18:	2240      	movs	r2, #64	@ 0x40
 800cd1a:	4082      	lsls	r2, r0
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	3401      	adds	r4, #1
 800cd20:	9304      	str	r3, [sp, #16]
 800cd22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd26:	4829      	ldr	r0, [pc, #164]	@ (800cdcc <_vfiprintf_r+0x220>)
 800cd28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd2c:	2206      	movs	r2, #6
 800cd2e:	f7f3 fa6f 	bl	8000210 <memchr>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d03f      	beq.n	800cdb6 <_vfiprintf_r+0x20a>
 800cd36:	4b26      	ldr	r3, [pc, #152]	@ (800cdd0 <_vfiprintf_r+0x224>)
 800cd38:	bb1b      	cbnz	r3, 800cd82 <_vfiprintf_r+0x1d6>
 800cd3a:	9b03      	ldr	r3, [sp, #12]
 800cd3c:	3307      	adds	r3, #7
 800cd3e:	f023 0307 	bic.w	r3, r3, #7
 800cd42:	3308      	adds	r3, #8
 800cd44:	9303      	str	r3, [sp, #12]
 800cd46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd48:	443b      	add	r3, r7
 800cd4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd4c:	e76a      	b.n	800cc24 <_vfiprintf_r+0x78>
 800cd4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd52:	460c      	mov	r4, r1
 800cd54:	2001      	movs	r0, #1
 800cd56:	e7a8      	b.n	800ccaa <_vfiprintf_r+0xfe>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	3401      	adds	r4, #1
 800cd5c:	9305      	str	r3, [sp, #20]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	f04f 0c0a 	mov.w	ip, #10
 800cd64:	4620      	mov	r0, r4
 800cd66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd6a:	3a30      	subs	r2, #48	@ 0x30
 800cd6c:	2a09      	cmp	r2, #9
 800cd6e:	d903      	bls.n	800cd78 <_vfiprintf_r+0x1cc>
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0c6      	beq.n	800cd02 <_vfiprintf_r+0x156>
 800cd74:	9105      	str	r1, [sp, #20]
 800cd76:	e7c4      	b.n	800cd02 <_vfiprintf_r+0x156>
 800cd78:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e7f0      	b.n	800cd64 <_vfiprintf_r+0x1b8>
 800cd82:	ab03      	add	r3, sp, #12
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	462a      	mov	r2, r5
 800cd88:	4b12      	ldr	r3, [pc, #72]	@ (800cdd4 <_vfiprintf_r+0x228>)
 800cd8a:	a904      	add	r1, sp, #16
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7fd fb85 	bl	800a49c <_printf_float>
 800cd92:	4607      	mov	r7, r0
 800cd94:	1c78      	adds	r0, r7, #1
 800cd96:	d1d6      	bne.n	800cd46 <_vfiprintf_r+0x19a>
 800cd98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd9a:	07d9      	lsls	r1, r3, #31
 800cd9c:	d405      	bmi.n	800cdaa <_vfiprintf_r+0x1fe>
 800cd9e:	89ab      	ldrh	r3, [r5, #12]
 800cda0:	059a      	lsls	r2, r3, #22
 800cda2:	d402      	bmi.n	800cdaa <_vfiprintf_r+0x1fe>
 800cda4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cda6:	f7fe f92b 	bl	800b000 <__retarget_lock_release_recursive>
 800cdaa:	89ab      	ldrh	r3, [r5, #12]
 800cdac:	065b      	lsls	r3, r3, #25
 800cdae:	f53f af1f 	bmi.w	800cbf0 <_vfiprintf_r+0x44>
 800cdb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cdb4:	e71e      	b.n	800cbf4 <_vfiprintf_r+0x48>
 800cdb6:	ab03      	add	r3, sp, #12
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	462a      	mov	r2, r5
 800cdbc:	4b05      	ldr	r3, [pc, #20]	@ (800cdd4 <_vfiprintf_r+0x228>)
 800cdbe:	a904      	add	r1, sp, #16
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7fd fe03 	bl	800a9cc <_printf_i>
 800cdc6:	e7e4      	b.n	800cd92 <_vfiprintf_r+0x1e6>
 800cdc8:	0800dbd8 	.word	0x0800dbd8
 800cdcc:	0800dbe2 	.word	0x0800dbe2
 800cdd0:	0800a49d 	.word	0x0800a49d
 800cdd4:	0800cb89 	.word	0x0800cb89
 800cdd8:	0800dbde 	.word	0x0800dbde

0800cddc <__swbuf_r>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	460e      	mov	r6, r1
 800cde0:	4614      	mov	r4, r2
 800cde2:	4605      	mov	r5, r0
 800cde4:	b118      	cbz	r0, 800cdee <__swbuf_r+0x12>
 800cde6:	6a03      	ldr	r3, [r0, #32]
 800cde8:	b90b      	cbnz	r3, 800cdee <__swbuf_r+0x12>
 800cdea:	f7fd ff9b 	bl	800ad24 <__sinit>
 800cdee:	69a3      	ldr	r3, [r4, #24]
 800cdf0:	60a3      	str	r3, [r4, #8]
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	071a      	lsls	r2, r3, #28
 800cdf6:	d501      	bpl.n	800cdfc <__swbuf_r+0x20>
 800cdf8:	6923      	ldr	r3, [r4, #16]
 800cdfa:	b943      	cbnz	r3, 800ce0e <__swbuf_r+0x32>
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 f82a 	bl	800ce58 <__swsetup_r>
 800ce04:	b118      	cbz	r0, 800ce0e <__swbuf_r+0x32>
 800ce06:	f04f 37ff 	mov.w	r7, #4294967295
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	6922      	ldr	r2, [r4, #16]
 800ce12:	1a98      	subs	r0, r3, r2
 800ce14:	6963      	ldr	r3, [r4, #20]
 800ce16:	b2f6      	uxtb	r6, r6
 800ce18:	4283      	cmp	r3, r0
 800ce1a:	4637      	mov	r7, r6
 800ce1c:	dc05      	bgt.n	800ce2a <__swbuf_r+0x4e>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f7ff fda7 	bl	800c974 <_fflush_r>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d1ed      	bne.n	800ce06 <__swbuf_r+0x2a>
 800ce2a:	68a3      	ldr	r3, [r4, #8]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	60a3      	str	r3, [r4, #8]
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	6022      	str	r2, [r4, #0]
 800ce36:	701e      	strb	r6, [r3, #0]
 800ce38:	6962      	ldr	r2, [r4, #20]
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d004      	beq.n	800ce4a <__swbuf_r+0x6e>
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	07db      	lsls	r3, r3, #31
 800ce44:	d5e1      	bpl.n	800ce0a <__swbuf_r+0x2e>
 800ce46:	2e0a      	cmp	r6, #10
 800ce48:	d1df      	bne.n	800ce0a <__swbuf_r+0x2e>
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7ff fd91 	bl	800c974 <_fflush_r>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d0d9      	beq.n	800ce0a <__swbuf_r+0x2e>
 800ce56:	e7d6      	b.n	800ce06 <__swbuf_r+0x2a>

0800ce58 <__swsetup_r>:
 800ce58:	b538      	push	{r3, r4, r5, lr}
 800ce5a:	4b29      	ldr	r3, [pc, #164]	@ (800cf00 <__swsetup_r+0xa8>)
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	6818      	ldr	r0, [r3, #0]
 800ce60:	460c      	mov	r4, r1
 800ce62:	b118      	cbz	r0, 800ce6c <__swsetup_r+0x14>
 800ce64:	6a03      	ldr	r3, [r0, #32]
 800ce66:	b90b      	cbnz	r3, 800ce6c <__swsetup_r+0x14>
 800ce68:	f7fd ff5c 	bl	800ad24 <__sinit>
 800ce6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce70:	0719      	lsls	r1, r3, #28
 800ce72:	d422      	bmi.n	800ceba <__swsetup_r+0x62>
 800ce74:	06da      	lsls	r2, r3, #27
 800ce76:	d407      	bmi.n	800ce88 <__swsetup_r+0x30>
 800ce78:	2209      	movs	r2, #9
 800ce7a:	602a      	str	r2, [r5, #0]
 800ce7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	f04f 30ff 	mov.w	r0, #4294967295
 800ce86:	e033      	b.n	800cef0 <__swsetup_r+0x98>
 800ce88:	0758      	lsls	r0, r3, #29
 800ce8a:	d512      	bpl.n	800ceb2 <__swsetup_r+0x5a>
 800ce8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce8e:	b141      	cbz	r1, 800cea2 <__swsetup_r+0x4a>
 800ce90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce94:	4299      	cmp	r1, r3
 800ce96:	d002      	beq.n	800ce9e <__swsetup_r+0x46>
 800ce98:	4628      	mov	r0, r5
 800ce9a:	f7fe ff0d 	bl	800bcb8 <_free_r>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cea8:	81a3      	strh	r3, [r4, #12]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6063      	str	r3, [r4, #4]
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	f043 0308 	orr.w	r3, r3, #8
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	b94b      	cbnz	r3, 800ced2 <__swsetup_r+0x7a>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cec8:	d003      	beq.n	800ced2 <__swsetup_r+0x7a>
 800ceca:	4621      	mov	r1, r4
 800cecc:	4628      	mov	r0, r5
 800cece:	f000 f883 	bl	800cfd8 <__smakebuf_r>
 800ced2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced6:	f013 0201 	ands.w	r2, r3, #1
 800ceda:	d00a      	beq.n	800cef2 <__swsetup_r+0x9a>
 800cedc:	2200      	movs	r2, #0
 800cede:	60a2      	str	r2, [r4, #8]
 800cee0:	6962      	ldr	r2, [r4, #20]
 800cee2:	4252      	negs	r2, r2
 800cee4:	61a2      	str	r2, [r4, #24]
 800cee6:	6922      	ldr	r2, [r4, #16]
 800cee8:	b942      	cbnz	r2, 800cefc <__swsetup_r+0xa4>
 800ceea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ceee:	d1c5      	bne.n	800ce7c <__swsetup_r+0x24>
 800cef0:	bd38      	pop	{r3, r4, r5, pc}
 800cef2:	0799      	lsls	r1, r3, #30
 800cef4:	bf58      	it	pl
 800cef6:	6962      	ldrpl	r2, [r4, #20]
 800cef8:	60a2      	str	r2, [r4, #8]
 800cefa:	e7f4      	b.n	800cee6 <__swsetup_r+0x8e>
 800cefc:	2000      	movs	r0, #0
 800cefe:	e7f7      	b.n	800cef0 <__swsetup_r+0x98>
 800cf00:	20000030 	.word	0x20000030

0800cf04 <_raise_r>:
 800cf04:	291f      	cmp	r1, #31
 800cf06:	b538      	push	{r3, r4, r5, lr}
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	d904      	bls.n	800cf18 <_raise_r+0x14>
 800cf0e:	2316      	movs	r3, #22
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	f04f 30ff 	mov.w	r0, #4294967295
 800cf16:	bd38      	pop	{r3, r4, r5, pc}
 800cf18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf1a:	b112      	cbz	r2, 800cf22 <_raise_r+0x1e>
 800cf1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf20:	b94b      	cbnz	r3, 800cf36 <_raise_r+0x32>
 800cf22:	4628      	mov	r0, r5
 800cf24:	f000 f830 	bl	800cf88 <_getpid_r>
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf32:	f000 b817 	b.w	800cf64 <_kill_r>
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d00a      	beq.n	800cf50 <_raise_r+0x4c>
 800cf3a:	1c59      	adds	r1, r3, #1
 800cf3c:	d103      	bne.n	800cf46 <_raise_r+0x42>
 800cf3e:	2316      	movs	r3, #22
 800cf40:	6003      	str	r3, [r0, #0]
 800cf42:	2001      	movs	r0, #1
 800cf44:	e7e7      	b.n	800cf16 <_raise_r+0x12>
 800cf46:	2100      	movs	r1, #0
 800cf48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	4798      	blx	r3
 800cf50:	2000      	movs	r0, #0
 800cf52:	e7e0      	b.n	800cf16 <_raise_r+0x12>

0800cf54 <raise>:
 800cf54:	4b02      	ldr	r3, [pc, #8]	@ (800cf60 <raise+0xc>)
 800cf56:	4601      	mov	r1, r0
 800cf58:	6818      	ldr	r0, [r3, #0]
 800cf5a:	f7ff bfd3 	b.w	800cf04 <_raise_r>
 800cf5e:	bf00      	nop
 800cf60:	20000030 	.word	0x20000030

0800cf64 <_kill_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	@ (800cf84 <_kill_r+0x20>)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	4611      	mov	r1, r2
 800cf70:	602b      	str	r3, [r5, #0]
 800cf72:	f7f5 fc5b 	bl	800282c <_kill>
 800cf76:	1c43      	adds	r3, r0, #1
 800cf78:	d102      	bne.n	800cf80 <_kill_r+0x1c>
 800cf7a:	682b      	ldr	r3, [r5, #0]
 800cf7c:	b103      	cbz	r3, 800cf80 <_kill_r+0x1c>
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	bd38      	pop	{r3, r4, r5, pc}
 800cf82:	bf00      	nop
 800cf84:	20019f88 	.word	0x20019f88

0800cf88 <_getpid_r>:
 800cf88:	f7f5 bc48 	b.w	800281c <_getpid>

0800cf8c <__swhatbuf_r>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	460c      	mov	r4, r1
 800cf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf94:	2900      	cmp	r1, #0
 800cf96:	b096      	sub	sp, #88	@ 0x58
 800cf98:	4615      	mov	r5, r2
 800cf9a:	461e      	mov	r6, r3
 800cf9c:	da0d      	bge.n	800cfba <__swhatbuf_r+0x2e>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfa4:	f04f 0100 	mov.w	r1, #0
 800cfa8:	bf14      	ite	ne
 800cfaa:	2340      	movne	r3, #64	@ 0x40
 800cfac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	6031      	str	r1, [r6, #0]
 800cfb4:	602b      	str	r3, [r5, #0]
 800cfb6:	b016      	add	sp, #88	@ 0x58
 800cfb8:	bd70      	pop	{r4, r5, r6, pc}
 800cfba:	466a      	mov	r2, sp
 800cfbc:	f000 f848 	bl	800d050 <_fstat_r>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	dbec      	blt.n	800cf9e <__swhatbuf_r+0x12>
 800cfc4:	9901      	ldr	r1, [sp, #4]
 800cfc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfce:	4259      	negs	r1, r3
 800cfd0:	4159      	adcs	r1, r3
 800cfd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfd6:	e7eb      	b.n	800cfb0 <__swhatbuf_r+0x24>

0800cfd8 <__smakebuf_r>:
 800cfd8:	898b      	ldrh	r3, [r1, #12]
 800cfda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfdc:	079d      	lsls	r5, r3, #30
 800cfde:	4606      	mov	r6, r0
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	d507      	bpl.n	800cff4 <__smakebuf_r+0x1c>
 800cfe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	6123      	str	r3, [r4, #16]
 800cfec:	2301      	movs	r3, #1
 800cfee:	6163      	str	r3, [r4, #20]
 800cff0:	b003      	add	sp, #12
 800cff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff4:	ab01      	add	r3, sp, #4
 800cff6:	466a      	mov	r2, sp
 800cff8:	f7ff ffc8 	bl	800cf8c <__swhatbuf_r>
 800cffc:	9f00      	ldr	r7, [sp, #0]
 800cffe:	4605      	mov	r5, r0
 800d000:	4639      	mov	r1, r7
 800d002:	4630      	mov	r0, r6
 800d004:	f7fe fecc 	bl	800bda0 <_malloc_r>
 800d008:	b948      	cbnz	r0, 800d01e <__smakebuf_r+0x46>
 800d00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00e:	059a      	lsls	r2, r3, #22
 800d010:	d4ee      	bmi.n	800cff0 <__smakebuf_r+0x18>
 800d012:	f023 0303 	bic.w	r3, r3, #3
 800d016:	f043 0302 	orr.w	r3, r3, #2
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	e7e2      	b.n	800cfe4 <__smakebuf_r+0xc>
 800d01e:	89a3      	ldrh	r3, [r4, #12]
 800d020:	6020      	str	r0, [r4, #0]
 800d022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	9b01      	ldr	r3, [sp, #4]
 800d02a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d02e:	b15b      	cbz	r3, 800d048 <__smakebuf_r+0x70>
 800d030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d034:	4630      	mov	r0, r6
 800d036:	f000 f81d 	bl	800d074 <_isatty_r>
 800d03a:	b128      	cbz	r0, 800d048 <__smakebuf_r+0x70>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	f043 0301 	orr.w	r3, r3, #1
 800d046:	81a3      	strh	r3, [r4, #12]
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	431d      	orrs	r5, r3
 800d04c:	81a5      	strh	r5, [r4, #12]
 800d04e:	e7cf      	b.n	800cff0 <__smakebuf_r+0x18>

0800d050 <_fstat_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d07      	ldr	r5, [pc, #28]	@ (800d070 <_fstat_r+0x20>)
 800d054:	2300      	movs	r3, #0
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	4611      	mov	r1, r2
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	f7f5 fc45 	bl	80028ec <_fstat>
 800d062:	1c43      	adds	r3, r0, #1
 800d064:	d102      	bne.n	800d06c <_fstat_r+0x1c>
 800d066:	682b      	ldr	r3, [r5, #0]
 800d068:	b103      	cbz	r3, 800d06c <_fstat_r+0x1c>
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	20019f88 	.word	0x20019f88

0800d074 <_isatty_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4d06      	ldr	r5, [pc, #24]	@ (800d090 <_isatty_r+0x1c>)
 800d078:	2300      	movs	r3, #0
 800d07a:	4604      	mov	r4, r0
 800d07c:	4608      	mov	r0, r1
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	f7f5 fc44 	bl	800290c <_isatty>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_isatty_r+0x1a>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_isatty_r+0x1a>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20019f88 	.word	0x20019f88

0800d094 <atan2f>:
 800d094:	f000 b800 	b.w	800d098 <__ieee754_atan2f>

0800d098 <__ieee754_atan2f>:
 800d098:	ee10 2a90 	vmov	r2, s1
 800d09c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d0a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	eef0 7a40 	vmov.f32	s15, s0
 800d0aa:	d806      	bhi.n	800d0ba <__ieee754_atan2f+0x22>
 800d0ac:	ee10 0a10 	vmov	r0, s0
 800d0b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d0b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d0b8:	d904      	bls.n	800d0c4 <__ieee754_atan2f+0x2c>
 800d0ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d0be:	eeb0 0a67 	vmov.f32	s0, s15
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d0c8:	d103      	bne.n	800d0d2 <__ieee754_atan2f+0x3a>
 800d0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0ce:	f000 b883 	b.w	800d1d8 <atanf>
 800d0d2:	1794      	asrs	r4, r2, #30
 800d0d4:	f004 0402 	and.w	r4, r4, #2
 800d0d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d0dc:	b943      	cbnz	r3, 800d0f0 <__ieee754_atan2f+0x58>
 800d0de:	2c02      	cmp	r4, #2
 800d0e0:	d05e      	beq.n	800d1a0 <__ieee754_atan2f+0x108>
 800d0e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d1b4 <__ieee754_atan2f+0x11c>
 800d0e6:	2c03      	cmp	r4, #3
 800d0e8:	bf08      	it	eq
 800d0ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800d0ee:	e7e6      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d0f0:	b941      	cbnz	r1, 800d104 <__ieee754_atan2f+0x6c>
 800d0f2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d1b8 <__ieee754_atan2f+0x120>
 800d0f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d1bc <__ieee754_atan2f+0x124>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	bfb8      	it	lt
 800d0fe:	eef0 7a47 	vmovlt.f32	s15, s14
 800d102:	e7dc      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d104:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d108:	d110      	bne.n	800d12c <__ieee754_atan2f+0x94>
 800d10a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d10e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d112:	d107      	bne.n	800d124 <__ieee754_atan2f+0x8c>
 800d114:	2c02      	cmp	r4, #2
 800d116:	d846      	bhi.n	800d1a6 <__ieee754_atan2f+0x10e>
 800d118:	4b29      	ldr	r3, [pc, #164]	@ (800d1c0 <__ieee754_atan2f+0x128>)
 800d11a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d11e:	edd3 7a00 	vldr	s15, [r3]
 800d122:	e7cc      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d124:	2c02      	cmp	r4, #2
 800d126:	d841      	bhi.n	800d1ac <__ieee754_atan2f+0x114>
 800d128:	4b26      	ldr	r3, [pc, #152]	@ (800d1c4 <__ieee754_atan2f+0x12c>)
 800d12a:	e7f6      	b.n	800d11a <__ieee754_atan2f+0x82>
 800d12c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d130:	d0df      	beq.n	800d0f2 <__ieee754_atan2f+0x5a>
 800d132:	1a5b      	subs	r3, r3, r1
 800d134:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d138:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d13c:	da1a      	bge.n	800d174 <__ieee754_atan2f+0xdc>
 800d13e:	2a00      	cmp	r2, #0
 800d140:	da01      	bge.n	800d146 <__ieee754_atan2f+0xae>
 800d142:	313c      	adds	r1, #60	@ 0x3c
 800d144:	db19      	blt.n	800d17a <__ieee754_atan2f+0xe2>
 800d146:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d14a:	f000 f919 	bl	800d380 <fabsf>
 800d14e:	f000 f843 	bl	800d1d8 <atanf>
 800d152:	eef0 7a40 	vmov.f32	s15, s0
 800d156:	2c01      	cmp	r4, #1
 800d158:	d012      	beq.n	800d180 <__ieee754_atan2f+0xe8>
 800d15a:	2c02      	cmp	r4, #2
 800d15c:	d017      	beq.n	800d18e <__ieee754_atan2f+0xf6>
 800d15e:	2c00      	cmp	r4, #0
 800d160:	d0ad      	beq.n	800d0be <__ieee754_atan2f+0x26>
 800d162:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d1c8 <__ieee754_atan2f+0x130>
 800d166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d16a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d1cc <__ieee754_atan2f+0x134>
 800d16e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d172:	e7a4      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d174:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d1b8 <__ieee754_atan2f+0x120>
 800d178:	e7ed      	b.n	800d156 <__ieee754_atan2f+0xbe>
 800d17a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d1d0 <__ieee754_atan2f+0x138>
 800d17e:	e7ea      	b.n	800d156 <__ieee754_atan2f+0xbe>
 800d180:	ee17 3a90 	vmov	r3, s15
 800d184:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d188:	ee07 3a90 	vmov	s15, r3
 800d18c:	e797      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d18e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d1c8 <__ieee754_atan2f+0x130>
 800d192:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d196:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d1cc <__ieee754_atan2f+0x134>
 800d19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d19e:	e78e      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d1a0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d1cc <__ieee754_atan2f+0x134>
 800d1a4:	e78b      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d1a6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d1d4 <__ieee754_atan2f+0x13c>
 800d1aa:	e788      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d1ac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d1d0 <__ieee754_atan2f+0x138>
 800d1b0:	e785      	b.n	800d0be <__ieee754_atan2f+0x26>
 800d1b2:	bf00      	nop
 800d1b4:	c0490fdb 	.word	0xc0490fdb
 800d1b8:	3fc90fdb 	.word	0x3fc90fdb
 800d1bc:	bfc90fdb 	.word	0xbfc90fdb
 800d1c0:	0800dd3c 	.word	0x0800dd3c
 800d1c4:	0800dd30 	.word	0x0800dd30
 800d1c8:	33bbbd2e 	.word	0x33bbbd2e
 800d1cc:	40490fdb 	.word	0x40490fdb
 800d1d0:	00000000 	.word	0x00000000
 800d1d4:	3f490fdb 	.word	0x3f490fdb

0800d1d8 <atanf>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	ee10 5a10 	vmov	r5, s0
 800d1de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d1e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d1e6:	eef0 7a40 	vmov.f32	s15, s0
 800d1ea:	d310      	bcc.n	800d20e <atanf+0x36>
 800d1ec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d1f0:	d904      	bls.n	800d1fc <atanf+0x24>
 800d1f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d334 <atanf+0x15c>
 800d200:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d338 <atanf+0x160>
 800d204:	2d00      	cmp	r5, #0
 800d206:	bfc8      	it	gt
 800d208:	eef0 7a47 	vmovgt.f32	s15, s14
 800d20c:	e7f3      	b.n	800d1f6 <atanf+0x1e>
 800d20e:	4b4b      	ldr	r3, [pc, #300]	@ (800d33c <atanf+0x164>)
 800d210:	429c      	cmp	r4, r3
 800d212:	d810      	bhi.n	800d236 <atanf+0x5e>
 800d214:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d218:	d20a      	bcs.n	800d230 <atanf+0x58>
 800d21a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d340 <atanf+0x168>
 800d21e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d226:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22e:	dce2      	bgt.n	800d1f6 <atanf+0x1e>
 800d230:	f04f 33ff 	mov.w	r3, #4294967295
 800d234:	e013      	b.n	800d25e <atanf+0x86>
 800d236:	f000 f8a3 	bl	800d380 <fabsf>
 800d23a:	4b42      	ldr	r3, [pc, #264]	@ (800d344 <atanf+0x16c>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d84f      	bhi.n	800d2e0 <atanf+0x108>
 800d240:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d244:	429c      	cmp	r4, r3
 800d246:	d841      	bhi.n	800d2cc <atanf+0xf4>
 800d248:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d24c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d250:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d254:	2300      	movs	r3, #0
 800d256:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d25a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d264:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d348 <atanf+0x170>
 800d268:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d34c <atanf+0x174>
 800d26c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d350 <atanf+0x178>
 800d270:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d274:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d278:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d354 <atanf+0x17c>
 800d27c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d280:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d358 <atanf+0x180>
 800d284:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d288:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d35c <atanf+0x184>
 800d28c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d290:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d360 <atanf+0x188>
 800d294:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d298:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d364 <atanf+0x18c>
 800d29c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d2a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d368 <atanf+0x190>
 800d2a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d2a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d36c <atanf+0x194>
 800d2ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d2b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d370 <atanf+0x198>
 800d2b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d2b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d2bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d2c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d2c4:	d121      	bne.n	800d30a <atanf+0x132>
 800d2c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2ca:	e794      	b.n	800d1f6 <atanf+0x1e>
 800d2cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d2d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d2d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d2d8:	2301      	movs	r3, #1
 800d2da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d2de:	e7be      	b.n	800d25e <atanf+0x86>
 800d2e0:	4b24      	ldr	r3, [pc, #144]	@ (800d374 <atanf+0x19c>)
 800d2e2:	429c      	cmp	r4, r3
 800d2e4:	d80b      	bhi.n	800d2fe <atanf+0x126>
 800d2e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d2ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d2f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2fc:	e7af      	b.n	800d25e <atanf+0x86>
 800d2fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d302:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d306:	2303      	movs	r3, #3
 800d308:	e7a9      	b.n	800d25e <atanf+0x86>
 800d30a:	4a1b      	ldr	r2, [pc, #108]	@ (800d378 <atanf+0x1a0>)
 800d30c:	491b      	ldr	r1, [pc, #108]	@ (800d37c <atanf+0x1a4>)
 800d30e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d312:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d316:	edd3 6a00 	vldr	s13, [r3]
 800d31a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d31e:	2d00      	cmp	r5, #0
 800d320:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d324:	edd2 7a00 	vldr	s15, [r2]
 800d328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d32c:	bfb8      	it	lt
 800d32e:	eef1 7a67 	vneglt.f32	s15, s15
 800d332:	e760      	b.n	800d1f6 <atanf+0x1e>
 800d334:	bfc90fdb 	.word	0xbfc90fdb
 800d338:	3fc90fdb 	.word	0x3fc90fdb
 800d33c:	3edfffff 	.word	0x3edfffff
 800d340:	7149f2ca 	.word	0x7149f2ca
 800d344:	3f97ffff 	.word	0x3f97ffff
 800d348:	3c8569d7 	.word	0x3c8569d7
 800d34c:	3d4bda59 	.word	0x3d4bda59
 800d350:	bd6ef16b 	.word	0xbd6ef16b
 800d354:	3d886b35 	.word	0x3d886b35
 800d358:	3dba2e6e 	.word	0x3dba2e6e
 800d35c:	3e124925 	.word	0x3e124925
 800d360:	3eaaaaab 	.word	0x3eaaaaab
 800d364:	bd15a221 	.word	0xbd15a221
 800d368:	bd9d8795 	.word	0xbd9d8795
 800d36c:	bde38e38 	.word	0xbde38e38
 800d370:	be4ccccd 	.word	0xbe4ccccd
 800d374:	401bffff 	.word	0x401bffff
 800d378:	0800dd58 	.word	0x0800dd58
 800d37c:	0800dd48 	.word	0x0800dd48

0800d380 <fabsf>:
 800d380:	ee10 3a10 	vmov	r3, s0
 800d384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d388:	ee00 3a10 	vmov	s0, r3
 800d38c:	4770      	bx	lr
	...

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr

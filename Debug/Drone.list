
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800bef8  0800bef8  0000cef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c790  0800c790  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c790  0800c790  0000d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c798  0800c798  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c798  0800c798  0000d798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c79c  0800c79c  0000d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c7a0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012724  200001e8  0800c988  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001290c  0800c988  0000e90c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020933  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000489a  00000000  00000000  0002eb4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fd  00000000  00000000  00034c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d17  00000000  00000000  00035f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f404  00000000  00000000  0005cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e020a  00000000  00000000  0007c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  0015c2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00163aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bee0 	.word	0x0800bee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800bee0 	.word	0x0800bee0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <compute_compensations>:
/*      HELPER FUNCTIONS      */
/******************************/

static void compute_compensations(BMP388_COMP * const bmp388_comp,
                                  uint8_t const * const DATA)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    bmp388_comp->T1 =  (float)((DATA[2] << 8) | DATA[1]) * 256.f;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	3201      	adds	r2, #1
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efa:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80010cc <compute_compensations+0x1f4>
 8000efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	edc3 7a00 	vstr	s15, [r3]
    bmp388_comp->T2 =  (float)((DATA[4] << 8) | DATA[3]) / 1073741824.f;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	3203      	adds	r2, #3
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f20:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80010d0 <compute_compensations+0x1f8>
 8000f24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edc3 7a01 	vstr	s15, [r3, #4]
    bmp388_comp->T3 =  (float)(DATA[5]) / 281474976710656.f;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	3305      	adds	r3, #5
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f3c:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80010d4 <compute_compensations+0x1fc>
 8000f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	edc3 7a02 	vstr	s15, [r3, #8]
    bmp388_comp->P1 = ((float)((DATA[7] << 8) | DATA[6]) - 16384.f) / 1048576.f;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3307      	adds	r3, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	3206      	adds	r2, #6
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80010d8 <compute_compensations+0x200>
 8000f66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f6a:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80010dc <compute_compensations+0x204>
 8000f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edc3 7a03 	vstr	s15, [r3, #12]
    bmp388_comp->P2 = ((float)((DATA[9] << 8) | DATA[8]) - 16384.f) / 536870912.f;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3309      	adds	r3, #9
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	3208      	adds	r2, #8
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80010d8 <compute_compensations+0x200>
 8000f94:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000f98:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80010e0 <compute_compensations+0x208>
 8000f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a04 	vstr	s15, [r3, #16]
    bmp388_comp->P3 =  (float)(DATA[10]) / 4294967296.f;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	330a      	adds	r3, #10
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb4:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80010e4 <compute_compensations+0x20c>
 8000fb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edc3 7a05 	vstr	s15, [r3, #20]
    bmp388_comp->P4 =  (float)(DATA[11]) / 137438953472.f;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	330b      	adds	r3, #11
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fd0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80010e8 <compute_compensations+0x210>
 8000fd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edc3 7a06 	vstr	s15, [r3, #24]
    bmp388_comp->P5 =  (float)((DATA[13] << 8) | DATA[12]) * 8.f;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	330d      	adds	r3, #13
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	320c      	adds	r2, #12
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edc3 7a07 	vstr	s15, [r3, #28]
    bmp388_comp->P6 =  (float)((DATA[15] << 8) | DATA[14]) / 64.f;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	330f      	adds	r3, #15
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	320e      	adds	r2, #14
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	4313      	orrs	r3, r2
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80010ec <compute_compensations+0x214>
 8001020:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edc3 7a08 	vstr	s15, [r3, #32]
    bmp388_comp->P7 =  (float)(DATA[16]) / 256.f;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3310      	adds	r3, #16
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001038:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80010cc <compute_compensations+0x1f4>
 800103c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bmp388_comp->P8 =  (float)(DATA[17]) / 32768.f;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3311      	adds	r3, #17
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001054:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80010f0 <compute_compensations+0x218>
 8001058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    bmp388_comp->P9 =  (float)((DATA[19] << 8) | DATA[18]) / 281474976710656.f;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3313      	adds	r3, #19
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	3212      	adds	r2, #18
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	4313      	orrs	r3, r2
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80010d4 <compute_compensations+0x1fc>
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    bmp388_comp->P10 = (float)(DATA[20]) / 281474976710656.f;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3314      	adds	r3, #20
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001096:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80010d4 <compute_compensations+0x1fc>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    bmp388_comp->P11 = (float)(DATA[21]) / 36893488147419103232.f;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3315      	adds	r3, #21
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80010f4 <compute_compensations+0x21c>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	43800000 	.word	0x43800000
 80010d0:	4e800000 	.word	0x4e800000
 80010d4:	57800000 	.word	0x57800000
 80010d8:	46800000 	.word	0x46800000
 80010dc:	49800000 	.word	0x49800000
 80010e0:	4e000000 	.word	0x4e000000
 80010e4:	4f800000 	.word	0x4f800000
 80010e8:	52000000 	.word	0x52000000
 80010ec:	42800000 	.word	0x42800000
 80010f0:	47000000 	.word	0x47000000
 80010f4:	60000000 	.word	0x60000000

080010f8 <compensate_temperature>:

static void compensate_temperature(BMP388 * const bmp388,
                                   BMP388_COMP const * const bmp388_comp,
                                   float const uncomp_temp)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
    float const partial_data1 = uncomp_temp - bmp388_comp->T1;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	edc7 7a05 	vstr	s15, [r7, #20]
    bmp388->temperature = \
        (partial_data1 * bmp388_comp->T2) + \
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	ed93 7a01 	vldr	s14, [r3, #4]
 800111e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001122:	ee27 7a27 	vmul.f32	s14, s14, s15
        (partial_data1 * partial_data1) * bmp388_comp->T3;
 8001126:	edd7 7a05 	vldr	s15, [r7, #20]
 800112a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	edd3 7a02 	vldr	s15, [r3, #8]
 8001134:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (partial_data1 * bmp388_comp->T2) + \
 8001138:	ee77 7a27 	vadd.f32	s15, s14, s15
    bmp388->temperature = \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <compensate_pressure>:

static void compensate_pressure(BMP388 * const bmp388,
                                BMP388_COMP const * const bmp388_comp,
                                float const uncomp_pres)
{
 800114e:	b480      	push	{r7}
 8001150:	b089      	sub	sp, #36	@ 0x24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	ed87 0a01 	vstr	s0, [r7, #4]
    float const temperature = bmp388->temperature;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61fb      	str	r3, [r7, #28]
    float const partial_out1 = \
        (bmp388_comp->P5) + \
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ed93 7a07 	vldr	s14, [r3, #28]
        (bmp388_comp->P6 * temperature) + \
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	edd3 6a08 	vldr	s13, [r3, #32]
 800116e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001172:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P5) + \
 8001176:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P7 * temperature * temperature) + \
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001180:	edd7 7a07 	vldr	s15, [r7, #28]
 8001184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001188:	edd7 7a07 	vldr	s15, [r7, #28]
 800118c:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P6 * temperature) + \
 8001190:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P8 * temperature * temperature * temperature);
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800119a:	edd7 7a07 	vldr	s15, [r7, #28]
 800119e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out1 = \
 80011b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b6:	edc7 7a06 	vstr	s15, [r7, #24]
    float const partial_out2 = uncomp_pres * \
        (bmp388_comp->P1 + \
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	ed93 7a03 	vldr	s14, [r3, #12]
        (bmp388_comp->P2 * temperature) + \
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80011c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P1 + \
 80011ce:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80011dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P2 * temperature) + \
 80011e8:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bmp388_comp->P4 * temperature * temperature * temperature));
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	edd3 6a06 	vldr	s13, [r3, #24]
 80011f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001202:	edd7 7a07 	vldr	s15, [r7, #28]
 8001206:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bmp388_comp->P3 * temperature * temperature) + \
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
    float const partial_out2 = uncomp_pres * \
 800120e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001216:	edc7 7a05 	vstr	s15, [r7, #20]
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	ee27 7aa7 	vmul.f32	s14, s15, s15
        (bmp388_comp->P9 + bmp388_comp->P10 * temperature) + \
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 800122e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001232:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001236:	ee76 7aa7 	vadd.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 800123a:	ee27 7a27 	vmul.f32	s14, s14, s15
        (uncomp_pres * uncomp_pres * uncomp_pres * bmp388_comp->P11);
 800123e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001242:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001246:	edd7 7a01 	vldr	s15, [r7, #4]
 800124a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001254:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float const partial_out3 = (uncomp_pres * uncomp_pres) * \
 8001258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125c:	edc7 7a04 	vstr	s15, [r7, #16]
    bmp388->pressure = partial_out1 + partial_out2 + partial_out3;
 8001260:	ed97 7a06 	vldr	s14, [r7, #24]
 8001264:	edd7 7a05 	vldr	s15, [r7, #20]
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <transmit_receive>:
static BMP388_STATUS transmit_receive(uint8_t const * const TX,
                                      uint8_t const NUM_TX,
                                      uint8_t * const RX,
                                      uint8_t const NUM_RX,
                                      SPI_HandleTypeDef * const hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	461a      	mov	r2, r3
 8001294:	460b      	mov	r3, r1
 8001296:	72fb      	strb	r3, [r7, #11]
 8001298:	4613      	mov	r3, r2
 800129a:	72bb      	strb	r3, [r7, #10]
    BMP388_STATUS status = BMP388_SUCCESS;
 800129c:	2300      	movs	r3, #0
 800129e:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80012a0:	f007 faf2 	bl	8008888 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012aa:	4815      	ldr	r0, [pc, #84]	@ (8001300 <transmit_receive+0x78>)
 80012ac:	f001 ff8e 	bl	80031cc <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, (uint8_t *)TX, NUM_TX, HAL_MAX_DELAY) != HAL_OK) {
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	6a38      	ldr	r0, [r7, #32]
 80012bc:	f002 fe43 	bl	8003f46 <HAL_SPI_Transmit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <transmit_receive+0x44>
        status = BMP388_FAILURE;
 80012c6:	2301      	movs	r3, #1
 80012c8:	75fb      	strb	r3, [r7, #23]
 80012ca:	e00c      	b.n	80012e6 <transmit_receive+0x5e>
    } else {
        if(HAL_SPI_Receive(hspi, (uint8_t *)RX, NUM_RX, HAL_MAX_DELAY) != HAL_OK) {
 80012cc:	7abb      	ldrb	r3, [r7, #10]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	6a38      	ldr	r0, [r7, #32]
 80012d8:	f002 ff78 	bl	80041cc <HAL_SPI_Receive>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <transmit_receive+0x5e>
            status = BMP388_FAILURE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <transmit_receive+0x78>)
 80012ee:	f001 ff6d 	bl	80031cc <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 80012f2:	f007 fafb 	bl	80088ec <vPortExitCritical>

    return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40020400 	.word	0x40020400

08001304 <BMP388_Setup>:
/*       CORE FUNCTIONS       */
/******************************/

BMP388_STATUS BMP388_Setup(BMP388_COMP * const bmp388_comp,
                           SPI_HandleTypeDef * const hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	@ 0x30
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    // If expected CHIP ID is not received, return failure.
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t RX[22] = {0};
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	821a      	strh	r2, [r3, #16]

    if(transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2316      	movs	r3, #22
 8001336:	2101      	movs	r1, #1
 8001338:	f7ff ffa6 	bl	8001288 <transmit_receive>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <BMP388_Setup+0x42>
                        RX,  sizeof(RX)  / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 8001342:	2301      	movs	r3, #1
 8001344:	e023      	b.n	800138e <BMP388_Setup+0x8a>
    }

    if(RX[1] != 0x50) return BMP388_FAILURE;
 8001346:	7b7b      	ldrb	r3, [r7, #13]
 8001348:	2b50      	cmp	r3, #80	@ 0x50
 800134a:	d001      	beq.n	8001350 <BMP388_Setup+0x4c>
 800134c:	2301      	movs	r3, #1
 800134e:	e01e      	b.n	800138e <BMP388_Setup+0x8a>

    // Otherwise, configure the sensor and receive calibration values.
    uint8_t const TX2[] = {
 8001350:	4a11      	ldr	r2, [pc, #68]	@ (8001398 <BMP388_Setup+0x94>)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	8019      	strh	r1, [r3, #0]
 800135c:	3302      	adds	r3, #2
 800135e:	0c12      	lsrs	r2, r2, #16
 8001360:	701a      	strb	r2, [r3, #0]
        WRITE | REG_PWR_CTRL,
        WRITE | ENABLE_PRESSURE | ENABLE_TEMPERATURE | NORMAL_MODE,
        READ  | REG_CALIBRATION
    };

    if(transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 8001362:	f107 020c 	add.w	r2, r7, #12
 8001366:	f107 0008 	add.w	r0, r7, #8
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2316      	movs	r3, #22
 8001370:	2103      	movs	r1, #3
 8001372:	f7ff ff89 	bl	8001288 <transmit_receive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <BMP388_Setup+0x7c>
                        RX,  sizeof(RX)  / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 800137c:	2301      	movs	r3, #1
 800137e:	e006      	b.n	800138e <BMP388_Setup+0x8a>
    }

    compute_compensations(bmp388_comp, RX);
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fda6 	bl	8000ed8 <compute_compensations>

    return BMP388_SUCCESS;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3728      	adds	r7, #40	@ 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	0800bef8 	.word	0x0800bef8

0800139c <BMP388_ReadTemp>:

BMP388_STATUS BMP388_ReadTemp(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_TEMPERATURE };
 80013ac:	2387      	movs	r3, #135	@ 0x87
 80013ae:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80013b4:	f107 0214 	add.w	r2, r7, #20
 80013b8:	f107 0018 	add.w	r0, r7, #24
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2304      	movs	r3, #4
 80013c2:	2101      	movs	r1, #1
 80013c4:	f7ff ff60 	bl	8001288 <transmit_receive>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <BMP388_ReadTemp+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e01f      	b.n	8001412 <BMP388_ReadTemp+0x76>
    }

    float const uncomp_temp = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	4313      	orrs	r3, r2
 80013dc:	7d7a      	ldrb	r2, [r7, #21]
 80013de:	4313      	orrs	r3, r2
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <BMP388_ReadTemp+0x68>
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10a      	bne.n	800140c <BMP388_ReadTemp+0x70>
    case BMP388_COMPENSATED:
        compensate_temperature(bmp388, bmp388_comp, uncomp_temp);
 80013f6:	ed97 0a07 	vldr	s0, [r7, #28]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f7ff fe7b 	bl	80010f8 <compensate_temperature>
        break;
 8001402:	e005      	b.n	8001410 <BMP388_ReadTemp+0x74>
    case BMP388_RAW:
        bmp388->temperature = uncomp_temp;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	605a      	str	r2, [r3, #4]
        break;
 800140a:	e001      	b.n	8001410 <BMP388_ReadTemp+0x74>
    default:
        return BMP388_FAILURE;
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <BMP388_ReadTemp+0x76>
    }

    return BMP388_SUCCESS;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <BMP388_ReadPres>:

BMP388_STATUS BMP388_ReadPres(BMP388 * const bmp388,
                              BMP388_COMP const * const bmp388_comp,
                              BMP388_DATA_TYPE const data_type,
                              SPI_HandleTypeDef * const hspi)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b08a      	sub	sp, #40	@ 0x28
 800141e:	af02      	add	r7, sp, #8
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4613      	mov	r3, r2
 8001428:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ | REG_PRESSURE };
 800142a:	2384      	movs	r3, #132	@ 0x84
 800142c:	763b      	strb	r3, [r7, #24]
    uint8_t RX[4] = {0};
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 8001432:	f107 0214 	add.w	r2, r7, #20
 8001436:	f107 0018 	add.w	r0, r7, #24
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2304      	movs	r3, #4
 8001440:	2101      	movs	r1, #1
 8001442:	f7ff ff21 	bl	8001288 <transmit_receive>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <BMP388_ReadPres+0x36>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != BMP388_SUCCESS) {
        return BMP388_FAILURE;
 800144c:	2301      	movs	r3, #1
 800144e:	e01f      	b.n	8001490 <BMP388_ReadPres+0x76>
    }

    float const uncomp_pres = (float)((RX[3] << 16) | (RX[2] << 8) | RX[1]);
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	041a      	lsls	r2, r3, #16
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4313      	orrs	r3, r2
 800145a:	7d7a      	ldrb	r2, [r7, #21]
 800145c:	4313      	orrs	r3, r2
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	edc7 7a07 	vstr	s15, [r7, #28]

    switch (data_type) {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <BMP388_ReadPres+0x68>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d10a      	bne.n	800148a <BMP388_ReadPres+0x70>
    case BMP388_COMPENSATED:
        compensate_pressure(bmp388, bmp388_comp, uncomp_pres);
 8001474:	ed97 0a07 	vldr	s0, [r7, #28]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fe67 	bl	800114e <compensate_pressure>
        break;
 8001480:	e005      	b.n	800148e <BMP388_ReadPres+0x74>
    case BMP388_RAW:
        bmp388->pressure = uncomp_pres;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	605a      	str	r2, [r3, #4]
        break;
 8001488:	e001      	b.n	800148e <BMP388_ReadPres+0x74>
    default:
        return BMP388_FAILURE;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <BMP388_ReadPres+0x76>
    }

    return BMP388_SUCCESS;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <transmit_receive>:
static LIS2MDL_STATUS transmit_receive(uint8_t const * const TX,
                                       uint8_t const NUM_TX,
                                       uint8_t * const RX,
                                       uint8_t const NUM_RX,
                                       SPI_HandleTypeDef * const hspi)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	72fb      	strb	r3, [r7, #11]
 80014a8:	4613      	mov	r3, r2
 80014aa:	72bb      	strb	r3, [r7, #10]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 80014ac:	2300      	movs	r3, #0
 80014ae:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80014b0:	f007 f9ea 	bl	8008888 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2110      	movs	r1, #16
 80014b8:	4814      	ldr	r0, [pc, #80]	@ (800150c <transmit_receive+0x74>)
 80014ba:	f001 fe87 	bl	80031cc <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, (uint8_t *)TX, NUM_TX, HAL_MAX_DELAY) != HAL_OK) {
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	6a38      	ldr	r0, [r7, #32]
 80014ca:	f002 fd3c 	bl	8003f46 <HAL_SPI_Transmit>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <transmit_receive+0x42>
        status = LIS2MDL_FAILURE;
 80014d4:	2301      	movs	r3, #1
 80014d6:	75fb      	strb	r3, [r7, #23]
 80014d8:	e00c      	b.n	80014f4 <transmit_receive+0x5c>
    } else {
        if(HAL_SPI_Receive(hspi, (uint8_t *)RX, NUM_RX, HAL_MAX_DELAY) != HAL_OK) {
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	6a38      	ldr	r0, [r7, #32]
 80014e6:	f002 fe71 	bl	80041cc <HAL_SPI_Receive>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <transmit_receive+0x5c>
            status = LIS2MDL_FAILURE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2110      	movs	r1, #16
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <transmit_receive+0x74>)
 80014fa:	f001 fe67 	bl	80031cc <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 80014fe:	f007 f9f5 	bl	80088ec <vPortExitCritical>

    return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40020400 	.word	0x40020400

08001510 <transmit>:

static LIS2MDL_STATUS transmit(uint8_t const * const TX,
                               uint8_t const NUM_TX,
                               SPI_HandleTypeDef * const hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	460b      	mov	r3, r1
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	72fb      	strb	r3, [r7, #11]
    LIS2MDL_STATUS status = LIS2MDL_SUCCESS;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001522:	f007 f9b1 	bl	8008888 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2110      	movs	r1, #16
 800152a:	480e      	ldr	r0, [pc, #56]	@ (8001564 <transmit+0x54>)
 800152c:	f001 fe4e 	bl	80031cc <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, (uint8_t *)TX, NUM_TX, HAL_MAX_DELAY) != HAL_OK) {
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	b29a      	uxth	r2, r3
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f002 fd03 	bl	8003f46 <HAL_SPI_Transmit>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <transmit+0x3a>
        status = LIS2MDL_FAILURE;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2110      	movs	r1, #16
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <transmit+0x54>)
 8001550:	f001 fe3c 	bl	80031cc <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8001554:	f007 f9ca 	bl	80088ec <vPortExitCritical>

    return status;
 8001558:	7dfb      	ldrb	r3, [r7, #23]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40020400 	.word	0x40020400

08001568 <LIS2MDL_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LIS2MDL_STATUS LIS2MDL_Setup(SPI_HandleTypeDef * const hspi)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
    // Configure LIS2MDL sensor.
    uint8_t const TX1[] = {
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <LIS2MDL_Setup+0x5c>)
 8001572:	617b      	str	r3, [r7, #20]
        WRITE | ENABLE_SENSOR,
        WRITE | ENABLE_OFFSET,
        WRITE | SET_SPI_4WIRE
    };

    if(transmit(TX1, sizeof(TX1) / sizeof(TX1[0]), hspi)
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	2104      	movs	r1, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ffc7 	bl	8001510 <transmit>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <LIS2MDL_Setup+0x24>
                != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 8001588:	2301      	movs	r3, #1
 800158a:	e016      	b.n	80015ba <LIS2MDL_Setup+0x52>
    }

    // If expected WHO_AM_I value is not received, return failure.
    uint8_t const TX2[] = { READ | REG_WHO_AM_I };
 800158c:	23cf      	movs	r3, #207	@ 0xcf
 800158e:	743b      	strb	r3, [r7, #16]
    uint8_t RX[1];

    if(transmit_receive(TX2, sizeof(TX2) / sizeof(TX2[0]),
 8001590:	f107 020c 	add.w	r2, r7, #12
 8001594:	f107 0010 	add.w	r0, r7, #16
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	2101      	movs	r1, #1
 80015a0:	f7ff ff7a 	bl	8001498 <transmit_receive>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <LIS2MDL_Setup+0x46>
                        RX,  sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e005      	b.n	80015ba <LIS2MDL_Setup+0x52>
    }

    if(RX[0] != 0x40) return LIS2MDL_FAILURE;
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	2b40      	cmp	r3, #64	@ 0x40
 80015b2:	d001      	beq.n	80015b8 <LIS2MDL_Setup+0x50>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LIS2MDL_Setup+0x52>

    return LIS2MDL_SUCCESS;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	04028060 	.word	0x04028060

080015c8 <LIS2MDL_Read>:

LIS2MDL_STATUS LIS2MDL_Read(LIS2MDL * const lis2mdl,
                            SPI_HandleTypeDef * const hspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    uint8_t const TX[] = { READ | REG_OUTPUTS };
 80015d2:	23e8      	movs	r3, #232	@ 0xe8
 80015d4:	753b      	strb	r3, [r7, #20]
    uint8_t RX[6] = {0};
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	2300      	movs	r3, #0
 80015dc:	823b      	strh	r3, [r7, #16]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80015de:	f107 020c 	add.w	r2, r7, #12
 80015e2:	f107 0014 	add.w	r0, r7, #20
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2306      	movs	r3, #6
 80015ec:	2101      	movs	r1, #1
 80015ee:	f7ff ff53 	bl	8001498 <transmit_receive>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <LIS2MDL_Read+0x34>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LIS2MDL_SUCCESS) {
        return LIS2MDL_FAILURE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e034      	b.n	8001666 <LIS2MDL_Read+0x9e>
    }

    lis2mdl->X = (int16_t)(((uint16_t)RX[1] << 8) | RX[0]);
 80015fc:	7b7b      	ldrb	r3, [r7, #13]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	7b3b      	ldrb	r3, [r7, #12]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21a      	sxth	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	801a      	strh	r2, [r3, #0]
    lis2mdl->Y = (int16_t)(((uint16_t)RX[3] << 8) | RX[2]);
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	7bbb      	ldrb	r3, [r7, #14]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	805a      	strh	r2, [r3, #2]
    lis2mdl->Z = (int16_t)(((uint16_t)RX[5] << 8) | RX[4]);
 8001620:	7c7b      	ldrb	r3, [r7, #17]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	7c3b      	ldrb	r3, [r7, #16]
 8001628:	b21b      	sxth	r3, r3
 800162a:	4313      	orrs	r3, r2
 800162c:	b21a      	sxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	809a      	strh	r2, [r3, #4]
    lis2mdl->heading = atan2f((float)lis2mdl->Y, (float)lis2mdl->X);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	ee07 3a10 	vmov	s14, r3
 800164a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800164e:	eef0 0a47 	vmov.f32	s1, s14
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f00a fac5 	bl	800bbe4 <atan2f>
 800165a:	eef0 7a40 	vmov.f32	s15, s0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edc3 7a02 	vstr	s15, [r3, #8]

    return LIS2MDL_SUCCESS;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <transmit_receive>:
static LSM6DSO32_STATUS transmit_receive(uint8_t const * const TX,
                                         uint8_t const NUM_TX,
                                         uint8_t * const RX,
                                         uint8_t const NUM_RX,
                                         SPI_HandleTypeDef * const hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	72fb      	strb	r3, [r7, #11]
 8001680:	4613      	mov	r3, r2
 8001682:	72bb      	strb	r3, [r7, #10]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 8001684:	2300      	movs	r3, #0
 8001686:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 8001688:	f007 f8fe 	bl	8008888 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001692:	4815      	ldr	r0, [pc, #84]	@ (80016e8 <transmit_receive+0x78>)
 8001694:	f001 fd9a 	bl	80031cc <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, (uint8_t *)TX, NUM_TX, HAL_MAX_DELAY) != HAL_OK) {
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	6a38      	ldr	r0, [r7, #32]
 80016a4:	f002 fc4f 	bl	8003f46 <HAL_SPI_Transmit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <transmit_receive+0x44>
        status = LSM6DSO32_FAILURE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
 80016b2:	e00c      	b.n	80016ce <transmit_receive+0x5e>
    } else {
        if(HAL_SPI_Receive(hspi, (uint8_t *)RX, NUM_RX, HAL_MAX_DELAY) != HAL_OK) {
 80016b4:	7abb      	ldrb	r3, [r7, #10]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	6a38      	ldr	r0, [r7, #32]
 80016c0:	f002 fd84 	bl	80041cc <HAL_SPI_Receive>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <transmit_receive+0x5e>
            status = LSM6DSO32_FAILURE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
        }
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <transmit_receive+0x78>)
 80016d6:	f001 fd79 	bl	80031cc <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 80016da:	f007 f907 	bl	80088ec <vPortExitCritical>

    return status;
 80016de:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020000 	.word	0x40020000

080016ec <transmit>:

static LSM6DSO32_STATUS transmit(uint8_t const * const TX,
                                 uint8_t const NUM_TX,
                                 SPI_HandleTypeDef * const hspi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	460b      	mov	r3, r1
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	72fb      	strb	r3, [r7, #11]
    LSM6DSO32_STATUS status = LSM6DSO32_SUCCESS;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]

    taskENTER_CRITICAL();
 80016fe:	f007 f8c3 	bl	8008888 <vPortEnterCritical>
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001708:	480e      	ldr	r0, [pc, #56]	@ (8001744 <transmit+0x58>)
 800170a:	f001 fd5f 	bl	80031cc <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(hspi, (uint8_t *)TX, NUM_TX, HAL_MAX_DELAY) != HAL_OK) {
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	b29a      	uxth	r2, r3
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f002 fc14 	bl	8003f46 <HAL_SPI_Transmit>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <transmit+0x3c>
        status = LSM6DSO32_FAILURE;
 8001724:	2301      	movs	r3, #1
 8001726:	75fb      	strb	r3, [r7, #23]
    }
    HAL_GPIO_WritePin(GPIOx, GPIO_PINx, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800172e:	4805      	ldr	r0, [pc, #20]	@ (8001744 <transmit+0x58>)
 8001730:	f001 fd4c 	bl	80031cc <HAL_GPIO_WritePin>
    taskEXIT_CRITICAL();
 8001734:	f007 f8da 	bl	80088ec <vPortExitCritical>

    return status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40020000 	.word	0x40020000

08001748 <LSM6DSO32_Setup>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

LSM6DSO32_STATUS LSM6DSO32_Setup(SPI_HandleTypeDef * const hspi)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
 800174e:	6078      	str	r0, [r7, #4]
    // If expected WHO_AM_I value is not read, return failure
    uint8_t const TX1[] = { READ | REG_WHO_AM_I };
 8001750:	238f      	movs	r3, #143	@ 0x8f
 8001752:	753b      	strb	r3, [r7, #20]
    uint8_t RX[1] = {0};
 8001754:	2300      	movs	r3, #0
 8001756:	743b      	strb	r3, [r7, #16]

    if(transmit_receive(TX1, sizeof(TX1) / sizeof(TX1[0]),
 8001758:	f107 0210 	add.w	r2, r7, #16
 800175c:	f107 0014 	add.w	r0, r7, #20
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2301      	movs	r3, #1
 8001766:	2101      	movs	r1, #1
 8001768:	f7ff ff82 	bl	8001670 <transmit_receive>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <LSM6DSO32_Setup+0x2e>
                        RX,  sizeof(RX)  / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 8001772:	2301      	movs	r3, #1
 8001774:	e018      	b.n	80017a8 <LSM6DSO32_Setup+0x60>
    }

    if(RX[0] != 0x6C) return LSM6DSO32_FAILURE;
 8001776:	7c3b      	ldrb	r3, [r7, #16]
 8001778:	2b6c      	cmp	r3, #108	@ 0x6c
 800177a:	d001      	beq.n	8001780 <LSM6DSO32_Setup+0x38>
 800177c:	2301      	movs	r3, #1
 800177e:	e013      	b.n	80017a8 <LSM6DSO32_Setup+0x60>

    // Otherwise, configure the sensor
    uint8_t const TX2[] = {
 8001780:	4a0b      	ldr	r2, [pc, #44]	@ (80017b0 <LSM6DSO32_Setup+0x68>)
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	e892 0003 	ldmia.w	r2, {r0, r1}
 800178a:	e883 0003 	stmia.w	r3, {r0, r1}
        WRITE | SET_REG_CTRL5_DEFAULT,                         // REG CTRL 5 C
        WRITE | SET_REG_CTRL6_DEFAULT,                         // REG CTRL 6 C
        WRITE | ENABLE_GYROSCOPE_HPFILTER                      // REG CTRL 7 G
    };

    if(transmit(TX2, sizeof(TX2) / sizeof(TX2[0]), hspi)
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	2108      	movs	r1, #8
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffa8 	bl	80016ec <transmit>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <LSM6DSO32_Setup+0x5e>
                != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LSM6DSO32_Setup+0x60>
    }

    return LSM6DSO32_SUCCESS;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800befc 	.word	0x0800befc

080017b4 <LSM6DSO32_ReadGyro>:

LSM6DSO32_STATUS LSM6DSO32_ReadGyro(LSM6DSO32 * const lsm6dso32_gyro,
                                    SPI_HandleTypeDef * const hspi,
                                    LSM6DSO32_DATA_TYPE const data_type)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	71fb      	strb	r3, [r7, #7]
    const uint8_t TX[] = { READ  | REG_GYROSCOPE };
 80017c2:	23a2      	movs	r3, #162	@ 0xa2
 80017c4:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	2300      	movs	r3, #0
 80017cc:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80017ce:	f107 0210 	add.w	r2, r7, #16
 80017d2:	f107 0018 	add.w	r0, r7, #24
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2306      	movs	r3, #6
 80017dc:	2101      	movs	r1, #1
 80017de:	f7ff ff47 	bl	8001670 <transmit_receive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <LSM6DSO32_ReadGyro+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04b      	b.n	8001884 <LSM6DSO32_ReadGyro+0xd0>
    }

    float sensitivity;
    switch(data_type) {
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <LSM6DSO32_ReadGyro+0x44>
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d004      	beq.n	8001800 <LSM6DSO32_ReadGyro+0x4c>
 80017f6:	e006      	b.n	8001806 <LSM6DSO32_ReadGyro+0x52>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 80017f8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017fc:	61fb      	str	r3, [r7, #28]
        break;
 80017fe:	e004      	b.n	800180a <LSM6DSO32_ReadGyro+0x56>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 4.375f;
 8001800:	4b22      	ldr	r3, [pc, #136]	@ (800188c <LSM6DSO32_ReadGyro+0xd8>)
 8001802:	61fb      	str	r3, [r7, #28]
        break;
 8001804:	e001      	b.n	800180a <LSM6DSO32_ReadGyro+0x56>
    default:
        return LSM6DSO32_FAILURE;
 8001806:	2301      	movs	r3, #1
 8001808:	e03c      	b.n	8001884 <LSM6DSO32_ReadGyro+0xd0>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 800180a:	7c7b      	ldrb	r3, [r7, #17]
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b29b      	uxth	r3, r3
 8001810:	7c3a      	ldrb	r2, [r7, #16]
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->X = (float)temporary * sensitivity;
 8001818:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001824:	edd7 7a07 	vldr	s15, [r7, #28]
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	edc3 7a01 	vstr	s15, [r3, #4]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	7cba      	ldrb	r2, [r7, #18]
 800183a:	4413      	add	r3, r2
 800183c:	b29b      	uxth	r3, r3
 800183e:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Y = (float)temporary * sensitivity;
 8001840:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	7d3a      	ldrb	r2, [r7, #20]
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	837b      	strh	r3, [r7, #26]
    lsm6dso32_gyro->Z = (float)temporary * sensitivity;
 8001868:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	edd7 7a07 	vldr	s15, [r7, #28]
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	408c0000 	.word	0x408c0000

08001890 <LSM6DSO32_ReadAccel>:

LSM6DSO32_STATUS LSM6DSO32_ReadAccel(LSM6DSO32 * const lsm6dso32_accel,
                                     SPI_HandleTypeDef * const hspi,
                                     LSM6DSO32_DATA_TYPE const data_type)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
    uint8_t const TX[] = { READ  | REG_ACCELEROMETER };
 800189e:	23a8      	movs	r3, #168	@ 0xa8
 80018a0:	763b      	strb	r3, [r7, #24]
    uint8_t RX[6] = {0};
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	2300      	movs	r3, #0
 80018a8:	82bb      	strh	r3, [r7, #20]

    if(transmit_receive(TX, sizeof(TX) / sizeof(TX[0]),
 80018aa:	f107 0210 	add.w	r2, r7, #16
 80018ae:	f107 0018 	add.w	r0, r7, #24
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2306      	movs	r3, #6
 80018b8:	2101      	movs	r1, #1
 80018ba:	f7ff fed9 	bl	8001670 <transmit_receive>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <LSM6DSO32_ReadAccel+0x38>
                        RX, sizeof(RX) / sizeof(RX[0]),
                        hspi) != LSM6DSO32_SUCCESS) {
        return LSM6DSO32_FAILURE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e04b      	b.n	8001960 <LSM6DSO32_ReadAccel+0xd0>
    }

    float sensitivity;
    switch(data_type) {
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <LSM6DSO32_ReadAccel+0x44>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d004      	beq.n	80018dc <LSM6DSO32_ReadAccel+0x4c>
 80018d2:	e006      	b.n	80018e2 <LSM6DSO32_ReadAccel+0x52>
    case LSM6DSO32_RAW:
        sensitivity = 1.f;
 80018d4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018d8:	61fb      	str	r3, [r7, #28]
        break;
 80018da:	e004      	b.n	80018e6 <LSM6DSO32_ReadAccel+0x56>
    case LSM6DSO32_COMPENSATED:
        sensitivity = 0.122f;
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <LSM6DSO32_ReadAccel+0xd8>)
 80018de:	61fb      	str	r3, [r7, #28]
        break;
 80018e0:	e001      	b.n	80018e6 <LSM6DSO32_ReadAccel+0x56>
    default:
        return LSM6DSO32_FAILURE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e03c      	b.n	8001960 <LSM6DSO32_ReadAccel+0xd0>
    }

    int16_t temporary;
    temporary = (int16_t)RX[1] * 256 + (int16_t)RX[0];
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	7c3a      	ldrb	r2, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->X = (float)temporary * sensitivity;
 80018f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001900:	edd7 7a07 	vldr	s15, [r7, #28]
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	edc3 7a01 	vstr	s15, [r3, #4]
    temporary = (int16_t)RX[3] * 256 + (int16_t)RX[2];
 800190e:	7cfb      	ldrb	r3, [r7, #19]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	7cba      	ldrb	r2, [r7, #18]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Y = (float)temporary * sensitivity;
 800191c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001928:	edd7 7a07 	vldr	s15, [r7, #28]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	edc3 7a02 	vstr	s15, [r3, #8]
    temporary = (int16_t)RX[5] * 256 + (int16_t)RX[4];
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b29b      	uxth	r3, r3
 800193c:	7d3a      	ldrb	r2, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	837b      	strh	r3, [r7, #26]
    lsm6dso32_accel->Z = (float)temporary * sensitivity;
 8001944:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	edd7 7a07 	vldr	s15, [r7, #28]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	3df9db23 	.word	0x3df9db23

0800196c <LSM6DSO32_CalibrateOffset>:

LSM6DSO32_STATUS LSM6DSO32_CalibrateOffset(LSM6DSO32 * const lsm6dso32,
                                           LSM6DSO32_OFFSET * const offset,
                                           SPI_HandleTypeDef * const hspi,
                                           LSM6DSO32_DATA_TYPE const data_type)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	70fb      	strb	r3, [r7, #3]
    LSM6DSO32_STATUS (*readSensor)(LSM6DSO32 * const,
                                   SPI_HandleTypeDef * const,
                                   LSM6DSO32_DATA_TYPE const);

    if(lsm6dso32->sensor == LSM6DSO32_GYROSCOPE) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <LSM6DSO32_CalibrateOffset+0x1c>
        readSensor = LSM6DSO32_ReadGyro;
 8001982:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <LSM6DSO32_CalibrateOffset+0xbc>)
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
 8001986:	e001      	b.n	800198c <LSM6DSO32_CalibrateOffset+0x20>
    } else {
        readSensor = LSM6DSO32_ReadAccel;
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <LSM6DSO32_CalibrateOffset+0xc0>)
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    float X, Y, Z;
    for(int i = 0; i < 100; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e027      	b.n	80019e2 <LSM6DSO32_CalibrateOffset+0x76>
        if(readSensor(lsm6dso32, hspi, data_type) != LSM6DSO32_SUCCESS) {
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	4798      	blx	r3
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <LSM6DSO32_CalibrateOffset+0x3a>
            return LSM6DSO32_FAILURE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e03c      	b.n	8001a20 <LSM6DSO32_CalibrateOffset+0xb4>
        }

        X += lsm6dso32->X;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ac:	ed97 7a08 	vldr	s14, [r7, #32]
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	edc7 7a08 	vstr	s15, [r7, #32]
        Y += lsm6dso32->Y;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80019be:	ed97 7a07 	vldr	s14, [r7, #28]
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	edc7 7a07 	vstr	s15, [r7, #28]
        Z += lsm6dso32->Z;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a06 	vstr	s15, [r7, #24]
    for(int i = 0; i < 100; i++) {
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2b63      	cmp	r3, #99	@ 0x63
 80019e6:	ddd4      	ble.n	8001992 <LSM6DSO32_CalibrateOffset+0x26>
    }

    offset->X = X / 100.f;
 80019e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ec:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001a30 <LSM6DSO32_CalibrateOffset+0xc4>
 80019f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	edc3 7a00 	vstr	s15, [r3]
    offset->Y = Y / 100.f;
 80019fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80019fe:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001a30 <LSM6DSO32_CalibrateOffset+0xc4>
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	edc3 7a01 	vstr	s15, [r3, #4]
    offset->Z = Z / 100.f;
 8001a0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a10:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001a30 <LSM6DSO32_CalibrateOffset+0xc4>
 8001a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	edc3 7a02 	vstr	s15, [r3, #8]

    return LSM6DSO32_SUCCESS;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3728      	adds	r7, #40	@ 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	080017b5 	.word	0x080017b5
 8001a2c:	08001891 	.word	0x08001891
 8001a30:	42c80000 	.word	0x42c80000

08001a34 <LSM6DSO32_UseOffset>:

LSM6DSO32_STATUS LSM6DSO32_UseOffset(LSM6DSO32 * const lsm6dso32,
                                     LSM6DSO32_OFFSET * const offset)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
    lsm6dso32->X -= offset->X;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edc3 7a01 	vstr	s15, [r3, #4]
    lsm6dso32->Y -= offset->Y;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a02 	vstr	s15, [r3, #8]
    lsm6dso32->Z -= offset->Z;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edc3 7a03 	vstr	s15, [r3, #12]

    return LSM6DSO32_SUCCESS;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f001 f8be 	bl	8002c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f870 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 f93c 	bl	8001d18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aa0:	f000 f910 	bl	8001cc4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001aa4:	f000 f8d8 	bl	8001c58 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  RingBuffer_ctor(&uart_rb, 64, rb_buf);
 8001aa8:	4a20      	ldr	r2, [pc, #128]	@ (8001b2c <main+0x9c>)
 8001aaa:	2140      	movs	r1, #64	@ 0x40
 8001aac:	4820      	ldr	r0, [pc, #128]	@ (8001b30 <main+0xa0>)
 8001aae:	f000 f9db 	bl	8001e68 <RingBuffer_ctor>
  HAL_Delay(100);
 8001ab2:	2064      	movs	r0, #100	@ 0x64
 8001ab4:	f001 f8f0 	bl	8002c98 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ab8:	f003 fe84 	bl	80057c4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSemaphore */
  uartSemaphoreHandle = osSemaphoreNew(64, 0, &uartSemaphore_attributes);
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <main+0xa4>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2040      	movs	r0, #64	@ 0x40
 8001ac2:	f003 ff76 	bl	80059b2 <osSemaphoreNew>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <main+0xa8>)
 8001aca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001acc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b3c <main+0xac>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	481b      	ldr	r0, [pc, #108]	@ (8001b40 <main+0xb0>)
 8001ad2:	f003 fec1 	bl	8005858 <osThreadNew>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b44 <main+0xb4>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* creation of TaskUART */
  TaskUARTHandle = osThreadNew(StartTaskUART, (void*) sensor_args, &TaskUART_attributes);
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <main+0xb8>)
 8001ade:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <main+0xbc>)
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481b      	ldr	r0, [pc, #108]	@ (8001b50 <main+0xc0>)
 8001ae4:	f003 feb8 	bl	8005858 <osThreadNew>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <main+0xc4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* creation of TaskBMP388 */
  TaskBMP388Handle = osThreadNew(StartTaskBMP388, (void*) sensor_args, &TaskBMP388_attributes);
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <main+0xb8>)
 8001af0:	4a19      	ldr	r2, [pc, #100]	@ (8001b58 <main+0xc8>)
 8001af2:	4619      	mov	r1, r3
 8001af4:	4819      	ldr	r0, [pc, #100]	@ (8001b5c <main+0xcc>)
 8001af6:	f003 feaf 	bl	8005858 <osThreadNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <main+0xd0>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* creation of TaskLIS2MDL */
  TaskLIS2MDLHandle = osThreadNew(StartTaskLIS2MDL, (void*) sensor_args, &TaskLIS2MDL_attributes);
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <main+0xb8>)
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <main+0xd4>)
 8001b04:	4619      	mov	r1, r3
 8001b06:	4818      	ldr	r0, [pc, #96]	@ (8001b68 <main+0xd8>)
 8001b08:	f003 fea6 	bl	8005858 <osThreadNew>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <main+0xdc>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* creation of TaskLSM6DSO32 */
  TaskLSM6DSO32Handle = osThreadNew(StartTaskLSM6DSO32, (void*) sensor_args, &TaskLSM6DSO32_attributes);
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <main+0xb8>)
 8001b14:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <main+0xe0>)
 8001b16:	4619      	mov	r1, r3
 8001b18:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <main+0xe4>)
 8001b1a:	f003 fe9d 	bl	8005858 <osThreadNew>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a15      	ldr	r2, [pc, #84]	@ (8001b78 <main+0xe8>)
 8001b22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b24:	f003 fe72 	bl	800580c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <main+0x98>
 8001b2c:	200002d0 	.word	0x200002d0
 8001b30:	200002bc 	.word	0x200002bc
 8001b34:	0800c330 	.word	0x0800c330
 8001b38:	200002b8 	.word	0x200002b8
 8001b3c:	0800c27c 	.word	0x0800c27c
 8001b40:	08001e29 	.word	0x08001e29
 8001b44:	200002a4 	.word	0x200002a4
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	0800c2a0 	.word	0x0800c2a0
 8001b50:	080029b9 	.word	0x080029b9
 8001b54:	200002a8 	.word	0x200002a8
 8001b58:	0800c2c4 	.word	0x0800c2c4
 8001b5c:	080025a5 	.word	0x080025a5
 8001b60:	200002ac 	.word	0x200002ac
 8001b64:	0800c2e8 	.word	0x0800c2e8
 8001b68:	080026dd 	.word	0x080026dd
 8001b6c:	200002b0 	.word	0x200002b0
 8001b70:	0800c30c 	.word	0x0800c30c
 8001b74:	08002901 	.word	0x08002901
 8001b78:	200002b4 	.word	0x200002b4

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	@ 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	@ 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f007 ff0b 	bl	80099a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	4a29      	ldr	r2, [pc, #164]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb0:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <SystemClock_Config+0xd4>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <SystemClock_Config+0xd8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bc8:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <SystemClock_Config+0xd8>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <SystemClock_Config+0xd8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be4:	2310      	movs	r3, #16
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be8:	2302      	movs	r3, #2
 8001bea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bf4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fe74 	bl	80038f8 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c16:	f000 f921 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2102      	movs	r1, #2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fae2 	bl	8003200 <HAL_RCC_ClockConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c42:	f000 f90b 	bl	8001e5c <Error_Handler>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3750      	adds	r7, #80	@ 0x50
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <MX_SPI1_Init+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001caa:	f002 f8c3 	bl	8003e34 <HAL_SPI_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cb4:	f000 f8d2 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000204 	.word	0x20000204
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	@ (8001d14 <MX_USART2_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f003 f912 	bl	8004f24 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d06:	f000 f8a9 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000025c 	.word	0x2000025c
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	@ 0x28
 8001d1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a38      	ldr	r2, [pc, #224]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a31      	ldr	r2, [pc, #196]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <MX_GPIO_Init+0x100>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001da4:	481d      	ldr	r0, [pc, #116]	@ (8001e1c <MX_GPIO_Init+0x104>)
 8001da6:	f001 fa11 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db0:	481b      	ldr	r0, [pc, #108]	@ (8001e20 <MX_GPIO_Init+0x108>)
 8001db2:	f001 fa0b 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4815      	ldr	r0, [pc, #84]	@ (8001e24 <MX_GPIO_Init+0x10c>)
 8001dce:	f001 f869 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001dd2:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <MX_GPIO_Init+0x104>)
 8001dec:	f001 f85a 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_GPIO_Init+0x108>)
 8001e0a:	f001 f84b 	bl	8002ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	@ 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020800 	.word	0x40020800

08001e28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;) {
    osDelay(1);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f003 fda3 	bl	800597c <osDelay>
 8001e36:	e7fb      	b.n	8001e30 <StartDefaultTask+0x8>

08001e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4a:	f000 ff05 	bl	8002c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40001000 	.word	0x40001000

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <Error_Handler+0x8>

08001e68 <RingBuffer_ctor>:
#include <ringbufferUART.h>

RB_STATUS RingBuffer_ctor(RingBuffer * const rb,
                          uint32_t const capacity,
                          RingBuffer_t * const buffer)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
    // If capacity is 0 or buffer is a nullptr, return failure.
    if(!capacity || !buffer) {
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <RingBuffer_ctor+0x18>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <RingBuffer_ctor+0x1c>
        return RB_FAILURE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e00f      	b.n	8001ea4 <RingBuffer_ctor+0x3c>
    }
    // Else, initialize values and return success.
    rb->capacity = capacity;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	601a      	str	r2, [r3, #0]
    rb->buffer   = buffer;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	611a      	str	r2, [r3, #16]
    rb->size     = (uint32_t)0;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
    rb->head     = (uint32_t)0;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
    rb->tail     = (uint32_t)0;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]

    return RB_SUCCESS;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <RingBuffer_enqueue>:

RB_STATUS RingBuffer_enqueue(RingBuffer * const rb,
                             RingBuffer_t const item)
{
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	b4b0      	push	{r4, r5, r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	f107 001c 	add.w	r0, r7, #28
 8001ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    // Add item to head end of RingBuffer. Overwrite old data if necessary.
    rb->buffer[rb->head] = item;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6919      	ldr	r1, [r3, #16]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	f107 041c 	add.w	r4, r7, #28
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	602b      	str	r3, [r5, #0]
    // If head is at the end of memory, wrap around to 0.
    if(++rb->head == rb->capacity) {
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d102      	bne.n	8001efe <RingBuffer_enqueue+0x4e>
        rb->head = 0;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    }
    // Increment size if not already at capacity.
    if(rb->size < rb->capacity) {
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d205      	bcs.n	8001f16 <RingBuffer_enqueue+0x66>
        rb->size++;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e00d      	b.n	8001f32 <RingBuffer_enqueue+0x82>
    } else {
        // Otherwise, increment tail so that we're still reading oldest data.
        if(++rb->tail == rb->capacity) {
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d102      	bne.n	8001f32 <RingBuffer_enqueue+0x82>
            rb->tail = 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
        }
    }
    // Return success to calling function.
    return RB_SUCCESS;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bcb0      	pop	{r4, r5, r7}
 8001f3c:	b004      	add	sp, #16
 8001f3e:	4770      	bx	lr

08001f40 <RingBuffer_dequeue>:

RB_STATUS RingBuffer_dequeue(RingBuffer * const rb,
                             RingBuffer_t * const item)
{
 8001f40:	b4b0      	push	{r4, r5, r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    // If RingBuffer is empty, return failure.
    if(!rb->size) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <RingBuffer_dequeue+0x16>
        return RB_FAILURE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e023      	b.n	8001f9e <RingBuffer_dequeue+0x5e>
    } else {
        // Otherwise, take item from tail end of RingBuffer.
        *item = rb->buffer[rb->tail];
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6919      	ldr	r1, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4614      	mov	r4, r2
 8001f6c:	461d      	mov	r5, r3
 8001f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f72:	682b      	ldr	r3, [r5, #0]
 8001f74:	6023      	str	r3, [r4, #0]
        // If tail is at the end of memory, wrap around to 0.
        if(++rb->tail == rb->capacity) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d102      	bne.n	8001f92 <RingBuffer_dequeue+0x52>
          rb->tail = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
        }
        // Decrement the size of the buffer.
        rb->size--;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	1e5a      	subs	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	605a      	str	r2, [r3, #4]
    }
    // Return success to calling function.
    return RB_SUCCESS;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bcb0      	pop	{r4, r5, r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <HAL_MspInit+0x54>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	210f      	movs	r1, #15
 8001fea:	f06f 0001 	mvn.w	r0, #1
 8001fee:	f000 ff2f 	bl	8002e50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <HAL_SPI_MspInit+0x84>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12b      	bne.n	800207a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 800202c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_SPI_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800205a:	23e0      	movs	r3, #224	@ 0xe0
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800206a:	2305      	movs	r3, #5
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <HAL_SPI_MspInit+0x8c>)
 8002076:	f000 ff15 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	@ 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40013000 	.word	0x40013000
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000

08002090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a19      	ldr	r2, [pc, #100]	@ (8002114 <HAL_UART_MspInit+0x84>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12b      	bne.n	800210a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a10      	ldr	r2, [pc, #64]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_UART_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020ea:	230c      	movs	r3, #12
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <HAL_UART_MspInit+0x8c>)
 8002106:	f000 fecd 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	@ 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40004400 	.word	0x40004400
 8002118:	40023800 	.word	0x40023800
 800211c:	40020000 	.word	0x40020000

08002120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	@ 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <HAL_InitTick+0xe4>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	4a32      	ldr	r2, [pc, #200]	@ (8002204 <HAL_InitTick+0xe4>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <HAL_InitTick+0xe4>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214c:	f107 0210 	add.w	r2, r7, #16
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f001 f96c 	bl	8003434 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002166:	f001 f93d 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800216a:	6378      	str	r0, [r7, #52]	@ 0x34
 800216c:	e004      	b.n	8002178 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800216e:	f001 f939 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8002172:	4603      	mov	r3, r0
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217a:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <HAL_InitTick+0xe8>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	3b01      	subs	r3, #1
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_InitTick+0xec>)
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <HAL_InitTick+0xf0>)
 800218a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800218c:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <HAL_InitTick+0xec>)
 800218e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002192:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002194:	4a1d      	ldr	r2, [pc, #116]	@ (800220c <HAL_InitTick+0xec>)
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <HAL_InitTick+0xec>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_InitTick+0xec>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_InitTick+0xec>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021ac:	4817      	ldr	r0, [pc, #92]	@ (800220c <HAL_InitTick+0xec>)
 80021ae:	f002 fc17 	bl	80049e0 <HAL_TIM_Base_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80021b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11b      	bne.n	80021f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021c0:	4812      	ldr	r0, [pc, #72]	@ (800220c <HAL_InitTick+0xec>)
 80021c2:	f002 fc67 	bl	8004a94 <HAL_TIM_Base_Start_IT>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80021cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d111      	bne.n	80021f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d4:	2036      	movs	r0, #54	@ 0x36
 80021d6:	f000 fe57 	bl	8002e88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d808      	bhi.n	80021f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021e0:	2200      	movs	r2, #0
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	2036      	movs	r0, #54	@ 0x36
 80021e6:	f000 fe33 	bl	8002e50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_InitTick+0xf4>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e002      	b.n	80021f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3738      	adds	r7, #56	@ 0x38
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	431bde83 	.word	0x431bde83
 800220c:	200007d0 	.word	0x200007d0
 8002210:	40001000 	.word	0x40001000
 8002214:	20000014 	.word	0x20000014

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <TIM6_DAC_IRQHandler+0x10>)
 8002256:	f002 fc8d 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200007d0 	.word	0x200007d0

08002264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_kill>:

int _kill(int pid, int sig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800227e:	f007 fc3b 	bl	8009af8 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2216      	movs	r2, #22
 8002286:	601a      	str	r2, [r3, #0]
  return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_exit>:

void _exit (int status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a6:	bf00      	nop
 80022a8:	e7fd      	b.n	80022a6 <_exit+0x12>

080022aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e00a      	b.n	80022d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022bc:	f3af 8000 	nop.w
 80022c0:	4601      	mov	r1, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	b2ca      	uxtb	r2, r1
 80022ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	dbf0      	blt.n	80022bc <_read+0x12>
  }

  return len;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e009      	b.n	800230a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	60ba      	str	r2, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbf1      	blt.n	80022f6 <_write+0x12>
  }
  return len;
 8002312:	687b      	ldr	r3, [r7, #4]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_close>:

int _close(int file)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002344:	605a      	str	r2, [r3, #4]
  return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_isatty>:

int _isatty(int file)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f007 fba0 	bl	8009af8 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20020000 	.word	0x20020000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000818 	.word	0x20000818
 80023ec:	20012910 	.word	0x20012910

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b08d      	sub	sp, #52	@ 0x34
 8002418:	af02      	add	r7, sp, #8
 800241a:	463c      	mov	r4, r7
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	2303      	movs	r3, #3
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002436:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002438:	68bc      	ldr	r4, [r7, #8]
 800243a:	466a      	mov	r2, sp
 800243c:	f107 0320 	add.w	r3, r7, #32
 8002440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002444:	e882 0003 	stmia.w	r2, {r0, r1}
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff fd2e 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fb85 	bl	8005b68 <osSemaphoreRelease>
}
 800245e:	bf00      	nop
 8002460:	372c      	adds	r7, #44	@ 0x2c
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}

08002466 <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               BMP388 const bmp388)
{
 8002466:	b590      	push	{r4, r7, lr}
 8002468:	b08d      	sub	sp, #52	@ 0x34
 800246a:	af02      	add	r7, sp, #8
 800246c:	463c      	mov	r4, r7
 800246e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_BMP388,
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800248a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800248e:	e883 0003 	stmia.w	r3, {r0, r1}
                              .bmp388 = bmp388};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002492:	68bc      	ldr	r4, [r7, #8]
 8002494:	466a      	mov	r2, sp
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800249e:	e882 0003 	stmia.w	r2, {r0, r1}
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff fd01 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fb58 	bl	8005b68 <osSemaphoreRelease>
}
 80024b8:	bf00      	nop
 80024ba:	372c      	adds	r7, #44	@ 0x2c
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <StartTaskTemperature>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTaskTemperature(void *argument)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08b      	sub	sp, #44	@ 0x2c
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f107 0410 	add.w	r4, r7, #16
 80024ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BMP388 bmp388 = {.sensor = BMP388_TEMPERATURE};
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]

    for(;;) {
        if(BMP388_ReadTemp(&bmp388,
                           &bmp388_comp,
                           TEMPERATURE_DATA_TYPE,
                           args.hspi)
 80024de:	693b      	ldr	r3, [r7, #16]
        if(BMP388_ReadTemp(&bmp388,
 80024e0:	f107 0008 	add.w	r0, r7, #8
 80024e4:	2201      	movs	r2, #1
 80024e6:	4910      	ldr	r1, [pc, #64]	@ (8002528 <StartTaskTemperature+0x68>)
 80024e8:	f7fe ff58 	bl	800139c <BMP388_ReadTemp>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <StartTaskTemperature+0x46>
                           != BMP388_SUCCESS) {
            report_error(args, "TEMPERATURE READ ERROR");
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <StartTaskTemperature+0x6c>)
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fc:	f7ff ff8a 	bl	8002414 <report_error>
            vTaskSuspend(NULL);
 8002500:	2000      	movs	r0, #0
 8002502:	f004 fe7d 	bl	8007200 <vTaskSuspend>
        }

        send_update(args, bmp388);
 8002506:	466a      	mov	r2, sp
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002510:	e882 0003 	stmia.w	r2, {r0, r1}
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251a:	f7ff ffa4 	bl	8002466 <send_update>
        osDelay(1000);
 800251e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002522:	f003 fa2b 	bl	800597c <osDelay>
        if(BMP388_ReadTemp(&bmp388,
 8002526:	e7da      	b.n	80024de <StartTaskTemperature+0x1e>
 8002528:	20000824 	.word	0x20000824
 800252c:	0800bf6c 	.word	0x0800bf6c

08002530 <StartTaskPressure>:
    }
}

static void StartTaskPressure(void *argument)
{
 8002530:	b590      	push	{r4, r7, lr}
 8002532:	b08b      	sub	sp, #44	@ 0x2c
 8002534:	af02      	add	r7, sp, #8
 8002536:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f107 0410 	add.w	r4, r7, #16
 800253e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    BMP388 bmp388 = {.sensor = BMP388_PRESSURE};
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	2301      	movs	r3, #1
 8002550:	723b      	strb	r3, [r7, #8]

    for(;;) {
        if(BMP388_ReadPres(&bmp388,
                           &bmp388_comp,
                           PRESSURE_DATA_TYPE,
                           args.hspi)
 8002552:	693b      	ldr	r3, [r7, #16]
        if(BMP388_ReadPres(&bmp388,
 8002554:	f107 0008 	add.w	r0, r7, #8
 8002558:	2201      	movs	r2, #1
 800255a:	4910      	ldr	r1, [pc, #64]	@ (800259c <StartTaskPressure+0x6c>)
 800255c:	f7fe ff5d 	bl	800141a <BMP388_ReadPres>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <StartTaskPressure+0x4a>
                           != BMP388_SUCCESS) {
            report_error(args, "PRESURE READ ERROR");
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <StartTaskPressure+0x70>)
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002570:	f7ff ff50 	bl	8002414 <report_error>
            vTaskSuspend(NULL);
 8002574:	2000      	movs	r0, #0
 8002576:	f004 fe43 	bl	8007200 <vTaskSuspend>
        }

        send_update(args, bmp388);
 800257a:	466a      	mov	r2, sp
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002584:	e882 0003 	stmia.w	r2, {r0, r1}
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800258e:	f7ff ff6a 	bl	8002466 <send_update>
        osDelay(25);
 8002592:	2019      	movs	r0, #25
 8002594:	f003 f9f2 	bl	800597c <osDelay>
        if(BMP388_ReadPres(&bmp388,
 8002598:	e7db      	b.n	8002552 <StartTaskPressure+0x22>
 800259a:	bf00      	nop
 800259c:	20000824 	.word	0x20000824
 80025a0:	0800bf84 	.word	0x0800bf84

080025a4 <StartTaskBMP388>:
    }
}

void StartTaskBMP388(void *argument)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f107 0408 	add.w	r4, r7, #8
 80025b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(BMP388_Setup(&bmp388_comp, args.hspi) != BMP388_SUCCESS) {
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4813      	ldr	r0, [pc, #76]	@ (800260c <StartTaskBMP388+0x68>)
 80025be:	f7fe fea1 	bl	8001304 <BMP388_Setup>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <StartTaskBMP388+0x38>
        report_error(args, "BMP388 SETUP ERROR");
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <StartTaskBMP388+0x6c>)
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025d2:	f7ff ff1f 	bl	8002414 <report_error>
        vTaskSuspend(NULL);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f004 fe12 	bl	8007200 <vTaskSuspend>
    }

    TaskTemperatureHandle = osThreadNew(StartTaskTemperature,
 80025dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <StartTaskBMP388+0x70>)
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	480d      	ldr	r0, [pc, #52]	@ (8002618 <StartTaskBMP388+0x74>)
 80025e2:	f003 f939 	bl	8005858 <osThreadNew>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a0c      	ldr	r2, [pc, #48]	@ (800261c <StartTaskBMP388+0x78>)
 80025ea:	6013      	str	r3, [r2, #0]
                                        (void*) argument,
                                        &TaskTemp_attributes);
    TaskPressureHandle    = osThreadNew(StartTaskPressure,
 80025ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <StartTaskBMP388+0x7c>)
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <StartTaskBMP388+0x80>)
 80025f2:	f003 f931 	bl	8005858 <osThreadNew>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002628 <StartTaskBMP388+0x84>)
 80025fa:	6013      	str	r3, [r2, #0]
                                        (void*) argument,
                                        &TaskPres_attributes);
    vTaskSuspend(NULL);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f004 fdff 	bl	8007200 <vTaskSuspend>
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	20000824 	.word	0x20000824
 8002610:	0800bf98 	.word	0x0800bf98
 8002614:	0800c358 	.word	0x0800c358
 8002618:	080024c1 	.word	0x080024c1
 800261c:	2000081c 	.word	0x2000081c
 8002620:	0800c37c 	.word	0x0800c37c
 8002624:	08002531 	.word	0x08002531
 8002628:	20000820 	.word	0x20000820

0800262c <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(SENSOR_ARGS const args,
                                char * const message)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b08d      	sub	sp, #52	@ 0x34
 8002630:	af02      	add	r7, sp, #8
 8002632:	463c      	mov	r4, r7
 8002634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	2303      	movs	r3, #3
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264e:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002650:	68bc      	ldr	r4, [r7, #8]
 8002652:	466a      	mov	r2, sp
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	e893 0003 	ldmia.w	r3, {r0, r1}
 800265c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002666:	4620      	mov	r0, r4
 8002668:	f7ff fc22 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f003 fa79 	bl	8005b68 <osSemaphoreRelease>
}
 8002676:	bf00      	nop
 8002678:	372c      	adds	r7, #44	@ 0x2c
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}

0800267e <send_update>:

static inline void send_update(SENSOR_ARGS const args,
                               LIS2MDL const lis2mdl)
{
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b08d      	sub	sp, #52	@ 0x34
 8002682:	af02      	add	r7, sp, #8
 8002684:	463c      	mov	r4, r7
 8002686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_LIS2MDL,
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	2301      	movs	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	f107 0318 	add.w	r3, r7, #24
 80026a2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80026a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                              .lis2mdl = lis2mdl};
    RingBuffer_enqueue(args.uart_rb, tmp);
 80026ac:	68bc      	ldr	r4, [r7, #8]
 80026ae:	466a      	mov	r2, sp
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c2:	4620      	mov	r0, r4
 80026c4:	f7ff fbf4 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fa4b 	bl	8005b68 <osSemaphoreRelease>
}
 80026d2:	bf00      	nop
 80026d4:	372c      	adds	r7, #44	@ 0x2c
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
	...

080026dc <StartTaskLIS2MDL>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartTaskLIS2MDL(void *argument)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b08f      	sub	sp, #60	@ 0x3c
 80026e0:	af04      	add	r7, sp, #16
 80026e2:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f107 0418 	add.w	r4, r7, #24
 80026ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(LIS2MDL_Setup(args.hspi) != LIS2MDL_SUCCESS) {
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe ff38 	bl	8001568 <LIS2MDL_Setup>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <StartTaskLIS2MDL+0x36>
        report_error(args, "LIS2MDL SETUP ERROR");
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <StartTaskLIS2MDL+0x80>)
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002708:	f7ff ff90 	bl	800262c <report_error>
        vTaskSuspend(NULL);
 800270c:	2000      	movs	r0, #0
 800270e:	f004 fd77 	bl	8007200 <vTaskSuspend>
    }

    LIS2MDL lis2mdl;
    for(;;) {
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe ff54 	bl	80015c8 <LIS2MDL_Read>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <StartTaskLIS2MDL+0x5e>
            report_error(args, "LIS2MDL READ ERROR");
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <StartTaskLIS2MDL+0x84>)
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	f7ff ff7c 	bl	800262c <report_error>
            vTaskSuspend(NULL);
 8002734:	2000      	movs	r0, #0
 8002736:	f004 fd63 	bl	8007200 <vTaskSuspend>
        }

        send_update(args, lis2mdl);
 800273a:	466c      	mov	r4, sp
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274e:	f7ff ff96 	bl	800267e <send_update>
        osDelay(125);
 8002752:	207d      	movs	r0, #125	@ 0x7d
 8002754:	f003 f912 	bl	800597c <osDelay>
        if(LIS2MDL_Read(&lis2mdl, args.hspi) != LIS2MDL_SUCCESS) {
 8002758:	e7db      	b.n	8002712 <StartTaskLIS2MDL+0x36>
 800275a:	bf00      	nop
 800275c:	0800bfac 	.word	0x0800bfac
 8002760:	0800bfc0 	.word	0x0800bfc0

08002764 <report_error>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline void report_error(const SENSOR_ARGS args,
                                char * const message)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b08d      	sub	sp, #52	@ 0x34
 8002768:	af02      	add	r7, sp, #8
 800276a:	463c      	mov	r4, r7
 800276c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_ERROR,
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
 8002780:	2303      	movs	r3, #3
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002786:	61bb      	str	r3, [r7, #24]
                              .error_buf = message};
    RingBuffer_enqueue(args.uart_rb, tmp);
 8002788:	68bc      	ldr	r4, [r7, #8]
 800278a:	466a      	mov	r2, sp
 800278c:	f107 0320 	add.w	r3, r7, #32
 8002790:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002794:	e882 0003 	stmia.w	r2, {r0, r1}
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff fb86 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 f9dd 	bl	8005b68 <osSemaphoreRelease>
}
 80027ae:	bf00      	nop
 80027b0:	372c      	adds	r7, #44	@ 0x2c
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}

080027b6 <send_update>:

static inline void send_update(const SENSOR_ARGS args,
                               const LSM6DSO32 lsm6dso32)
{
 80027b6:	b590      	push	{r4, r7, lr}
 80027b8:	b08d      	sub	sp, #52	@ 0x34
 80027ba:	af02      	add	r7, sp, #8
 80027bc:	463c      	mov	r4, r7
 80027be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    RingBuffer_t const tmp = {.type = UPDATE_LSM6DSO32,
 80027c2:	2302      	movs	r3, #2
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	f107 0418 	add.w	r4, r7, #24
 80027ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                              .lsm6dso32 = lsm6dso32};
    RingBuffer_enqueue(args.uart_rb, tmp);
 80027d4:	68bc      	ldr	r4, [r7, #8]
 80027d6:	466a      	mov	r2, sp
 80027d8:	f107 0320 	add.w	r3, r7, #32
 80027dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80027e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff fb60 	bl	8001eb0 <RingBuffer_enqueue>
    osSemaphoreRelease(*args.uartSemaphore);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f003 f9b7 	bl	8005b68 <osSemaphoreRelease>
}
 80027fa:	bf00      	nop
 80027fc:	372c      	adds	r7, #44	@ 0x2c
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
	...

08002804 <StartTaskGyroscope>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

static void StartTaskGyroscope(void *argument)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08f      	sub	sp, #60	@ 0x3c
 8002808:	af04      	add	r7, sp, #16
 800280a:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f107 0418 	add.w	r4, r7, #24
 8002812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_GYROSCOPE};
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]

    for(;;) {
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
                              args.hspi,
 8002826:	69b9      	ldr	r1, [r7, #24]
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	2201      	movs	r2, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe ffc0 	bl	80017b4 <LSM6DSO32_ReadGyro>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <StartTaskGyroscope+0x4a>
                              GYROSCOPE_DATA_TYPE)
                              != LSM6DSO32_SUCCESS) {
            report_error(args, "GYROSCOPE READ ERROR");
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <StartTaskGyroscope+0x68>)
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f107 0318 	add.w	r3, r7, #24
 8002842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002844:	f7ff ff8e 	bl	8002764 <report_error>
            vTaskSuspend(NULL);
 8002848:	2000      	movs	r0, #0
 800284a:	f004 fcd9 	bl	8007200 <vTaskSuspend>
        }

        send_update(args, lsm6dso32);
 800284e:	466c      	mov	r4, sp
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800285a:	f107 0318 	add.w	r3, r7, #24
 800285e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002860:	f7ff ffa9 	bl	80027b6 <send_update>
        osDelay(100);
 8002864:	2064      	movs	r0, #100	@ 0x64
 8002866:	f003 f889 	bl	800597c <osDelay>
        if(LSM6DSO32_ReadGyro(&lsm6dso32,
 800286a:	e7dc      	b.n	8002826 <StartTaskGyroscope+0x22>
 800286c:	0800bfec 	.word	0x0800bfec

08002870 <StartTaskAccelerometer>:
    }
}

static void StartTaskAccelerometer(void *argument)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b093      	sub	sp, #76	@ 0x4c
 8002874:	af04      	add	r7, sp, #16
 8002876:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800287e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    LSM6DSO32 lsm6dso32 = {.sensor = LSM6DSO32_ACCELEROMETER};
 8002884:	f107 0318 	add.w	r3, r7, #24
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	2301      	movs	r3, #1
 8002894:	763b      	strb	r3, [r7, #24]
    LSM6DSO32_OFFSET offset;

    LSM6DSO32_CalibrateOffset(&lsm6dso32,
                              &offset,
                              args.hspi,
 8002896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    LSM6DSO32_CalibrateOffset(&lsm6dso32,
 8002898:	f107 010c 	add.w	r1, r7, #12
 800289c:	f107 0018 	add.w	r0, r7, #24
 80028a0:	2301      	movs	r3, #1
 80028a2:	f7ff f863 	bl	800196c <LSM6DSO32_CalibrateOffset>
                              ACCELEROMETER_DATA_TYPE);

    for(;;) {
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
                               args.hspi,
 80028a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
 80028a8:	f107 0318 	add.w	r3, r7, #24
 80028ac:	2201      	movs	r2, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe ffee 	bl	8001890 <LSM6DSO32_ReadAccel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <StartTaskAccelerometer+0x5e>
                               ACCELEROMETER_DATA_TYPE)
                               != LSM6DSO32_SUCCESS) {
            report_error(args, "ACCELEROMETER READ ERROR");
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <StartTaskAccelerometer+0x8c>)
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c4:	f7ff ff4e 	bl	8002764 <report_error>
            vTaskSuspend(NULL);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f004 fc99 	bl	8007200 <vTaskSuspend>
        }

        LSM6DSO32_UseOffset(&lsm6dso32, &offset);
 80028ce:	f107 020c 	add.w	r2, r7, #12
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f8ab 	bl	8001a34 <LSM6DSO32_UseOffset>

        send_update(args, lsm6dso32);
 80028de:	466c      	mov	r4, sp
 80028e0:	f107 0318 	add.w	r3, r7, #24
 80028e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	f7ff ff61 	bl	80027b6 <send_update>
        osDelay(20);
 80028f4:	2014      	movs	r0, #20
 80028f6:	f003 f841 	bl	800597c <osDelay>
        if(LSM6DSO32_ReadAccel(&lsm6dso32,
 80028fa:	e7d4      	b.n	80028a6 <StartTaskAccelerometer+0x36>
 80028fc:	0800c004 	.word	0x0800c004

08002900 <StartTaskLSM6DSO32>:
    }
}

void StartTaskLSM6DSO32(void *argument)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af02      	add	r7, sp, #8
 8002906:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f107 0408 	add.w	r4, r7, #8
 800290e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(LSM6DSO32_Setup(args.hspi) != LSM6DSO32_SUCCESS) {
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe ff16 	bl	8001748 <LSM6DSO32_Setup>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <StartTaskLSM6DSO32+0x36>
        report_error(args, "LSM6DSO32 SETUP ERROR");
 8002922:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <StartTaskLSM6DSO32+0x64>)
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292c:	f7ff ff1a 	bl	8002764 <report_error>
        vTaskSuspend(NULL);
 8002930:	2000      	movs	r0, #0
 8002932:	f004 fc65 	bl	8007200 <vTaskSuspend>
    }

    TaskGyroscopeHandle     = osThreadNew(StartTaskGyroscope,
 8002936:	4a0c      	ldr	r2, [pc, #48]	@ (8002968 <StartTaskLSM6DSO32+0x68>)
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	480c      	ldr	r0, [pc, #48]	@ (800296c <StartTaskLSM6DSO32+0x6c>)
 800293c:	f002 ff8c 	bl	8005858 <osThreadNew>
 8002940:	4603      	mov	r3, r0
 8002942:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <StartTaskLSM6DSO32+0x70>)
 8002944:	6013      	str	r3, [r2, #0]
                                          (void*) argument,
                                          &TaskGyro_attributes);
    TaskAccelerometerHandle = osThreadNew(StartTaskAccelerometer,
 8002946:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <StartTaskLSM6DSO32+0x74>)
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	480b      	ldr	r0, [pc, #44]	@ (8002978 <StartTaskLSM6DSO32+0x78>)
 800294c:	f002 ff84 	bl	8005858 <osThreadNew>
 8002950:	4603      	mov	r3, r0
 8002952:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <StartTaskLSM6DSO32+0x7c>)
 8002954:	6013      	str	r3, [r2, #0]
                                          (void*) argument,
                                          &TaskAccel_attributes);
    vTaskSuspend(NULL);
 8002956:	2000      	movs	r0, #0
 8002958:	f004 fc52 	bl	8007200 <vTaskSuspend>
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	0800c020 	.word	0x0800c020
 8002968:	0800c3a0 	.word	0x0800c3a0
 800296c:	08002805 	.word	0x08002805
 8002970:	2000085c 	.word	0x2000085c
 8002974:	0800c3c4 	.word	0x0800c3c4
 8002978:	08002871 	.word	0x08002871
 800297c:	20000860 	.word	0x20000860

08002980 <transmit>:
/*      HELPER FUNCTIONS      */
/******************************/

static inline UART_STATUS transmit(UART_HandleTypeDef * const huart,
                                   char * buf)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
    if(HAL_UART_Transmit(huart,
                         (uint8_t*)buf,
                         strlen(buf),
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	f7fd fc90 	bl	80002b0 <strlen>
 8002990:	4603      	mov	r3, r0
    if(HAL_UART_Transmit(huart,
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <transmit+0x34>)
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f002 fb13 	bl	8004fc4 <HAL_UART_Transmit>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <transmit+0x28>
                         (uint32_t)1600000) // ~100 ms
                         != HAL_OK) {
        return UART_FAILURE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <transmit+0x2a>
    }

    return UART_SUCCESS;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	00186a00 	.word	0x00186a00

080029b8 <StartTaskUART>:
/******************************/
/*       CORE FUNCTIONS       */
/******************************/

void StartTaskUART(void *argument)
{
 80029b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029bc:	b0c7      	sub	sp, #284	@ 0x11c
 80029be:	af06      	add	r7, sp, #24
 80029c0:	6078      	str	r0, [r7, #4]
    SENSOR_ARGS const args = *(SENSOR_ARGS*)argument;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 80029c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    char buf[210];
    sprintf(buf, "%c[0;0H\n"
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	221b      	movs	r2, #27
 80029d4:	4971      	ldr	r1, [pc, #452]	@ (8002b9c <StartTaskUART+0x1e4>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 ff82 	bl	80098e0 <siprintf>
                 "\tX:\t\t\tmg\r\n"
                 "\tY:\t\t\tmg\r\n"
                 "\tZ:\t\t\tmg\r\n",
                 0x1b);

    if(transmit(args.huart, buf) != UART_SUCCESS) {
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e0:	f107 021c 	add.w	r2, r7, #28
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ffca 	bl	8002980 <transmit>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <StartTaskUART+0x40>
        vTaskSuspend(NULL);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f004 fc04 	bl	8007200 <vTaskSuspend>
    }

    RingBuffer_t update;
    for(;;) {
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 80029f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 f85e 	bl	8005ac4 <osSemaphoreAcquire>
        if(RingBuffer_dequeue(args.uart_rb, &update) != RB_SUCCESS) {
 8002a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a0c:	f107 0208 	add.w	r2, r7, #8
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fa94 	bl	8001f40 <RingBuffer_dequeue>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d011      	beq.n	8002a42 <StartTaskUART+0x8a>
            sprintf(buf, "%c[0;0H RINGBUFFER DEQUEUE ERROR", 0x1b);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	221b      	movs	r2, #27
 8002a24:	495e      	ldr	r1, [pc, #376]	@ (8002ba0 <StartTaskUART+0x1e8>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f006 ff5a 	bl	80098e0 <siprintf>
            transmit(args.huart, buf);
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	f107 021c 	add.w	r2, r7, #28
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff ffa2 	bl	8002980 <transmit>
            vTaskSuspend(NULL);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f004 fbdf 	bl	8007200 <vTaskSuspend>
        }

        switch(update.type) {
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	f200 8090 	bhi.w	8002b6a <StartTaskUART+0x1b2>
 8002a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a50 <StartTaskUART+0x98>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002aa3 	.word	0x08002aa3
 8002a58:	08002ad9 	.word	0x08002ad9
 8002a5c:	08002b5b 	.word	0x08002b5b
        case UPDATE_BMP388:
            if(update.bmp388.sensor == BMP388_TEMPERATURE) {
 8002a60:	7b3b      	ldrb	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10e      	bne.n	8002a84 <StartTaskUART+0xcc>
                sprintf(buf, "%c[0;0H"
                             "\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.bmp388.temperature);
 8002a66:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd8d 	bl	8000588 <__aeabi_f2d>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	f107 001c 	add.w	r0, r7, #28
 8002a76:	e9cd 2300 	strd	r2, r3, [sp]
 8002a7a:	221b      	movs	r2, #27
 8002a7c:	4949      	ldr	r1, [pc, #292]	@ (8002ba4 <StartTaskUART+0x1ec>)
 8002a7e:	f006 ff2f 	bl	80098e0 <siprintf>
                             "\n\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.bmp388.pressure);
            }
            break;
 8002a82:	e07a      	b.n	8002b7a <StartTaskUART+0x1c2>
                             update.bmp388.pressure);
 8002a84:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd7e 	bl	8000588 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	f107 001c 	add.w	r0, r7, #28
 8002a94:	e9cd 2300 	strd	r2, r3, [sp]
 8002a98:	221b      	movs	r2, #27
 8002a9a:	4943      	ldr	r1, [pc, #268]	@ (8002ba8 <StartTaskUART+0x1f0>)
 8002a9c:	f006 ff20 	bl	80098e0 <siprintf>
            break;
 8002aa0:	e06b      	b.n	8002b7a <StartTaskUART+0x1c2>
                         "\t\t%hd    \r\n"
                         "\t\t%hd    \r\n"
                         "\t\t%hd    \r\n"
                         "\t\t%5.2f    ",
                         0x1b,
                         update.lis2mdl.X,
 8002aa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
            sprintf(buf, "%c[0;0H"
 8002aa6:	461e      	mov	r6, r3
                         update.lis2mdl.Y,
 8002aa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
            sprintf(buf, "%c[0;0H"
 8002aac:	461c      	mov	r4, r3
                         update.lis2mdl.Z,
 8002aae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
            sprintf(buf, "%c[0;0H"
 8002ab2:	461d      	mov	r5, r3
                         update.lis2mdl.heading);
 8002ab4:	697b      	ldr	r3, [r7, #20]
            sprintf(buf, "%c[0;0H"
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd66 	bl	8000588 <__aeabi_f2d>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	f107 001c 	add.w	r0, r7, #28
 8002ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ac8:	9501      	str	r5, [sp, #4]
 8002aca:	9400      	str	r4, [sp, #0]
 8002acc:	4633      	mov	r3, r6
 8002ace:	221b      	movs	r2, #27
 8002ad0:	4936      	ldr	r1, [pc, #216]	@ (8002bac <StartTaskUART+0x1f4>)
 8002ad2:	f006 ff05 	bl	80098e0 <siprintf>
            break;
 8002ad6:	e050      	b.n	8002b7a <StartTaskUART+0x1c2>
        case UPDATE_LSM6DSO32:
            if(update.lsm6dso32.sensor == LSM6DSO32_GYROSCOPE) {
 8002ad8:	7b3b      	ldrb	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11e      	bne.n	8002b1c <StartTaskUART+0x164>
                             "\n\n\n\n\n\n\n\n\n"
                             "\t\t%5.2f    \r\n"
                             "\t\t%5.2f    \r\n"
                             "\t\t%5.2f    ",
                             0x1b,
                             update.lsm6dso32.X,
 8002ade:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	460d      	mov	r5, r1
                             update.lsm6dso32.Y,
 8002aea:	697b      	ldr	r3, [r7, #20]
                sprintf(buf, "%c[0;0H"
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd4b 	bl	8000588 <__aeabi_f2d>
 8002af2:	4680      	mov	r8, r0
 8002af4:	4689      	mov	r9, r1
                             update.lsm6dso32.Z);
 8002af6:	69bb      	ldr	r3, [r7, #24]
                sprintf(buf, "%c[0;0H"
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd45 	bl	8000588 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	f107 001c 	add.w	r0, r7, #28
 8002b06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b0a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b0e:	e9cd 4500 	strd	r4, r5, [sp]
 8002b12:	221b      	movs	r2, #27
 8002b14:	4926      	ldr	r1, [pc, #152]	@ (8002bb0 <StartTaskUART+0x1f8>)
 8002b16:	f006 fee3 	bl	80098e0 <siprintf>
                             0x1b,
                             update.lsm6dso32.X,
                             update.lsm6dso32.Y,
                             update.lsm6dso32.Z);
            }
            break;
 8002b1a:	e02e      	b.n	8002b7a <StartTaskUART+0x1c2>
                             update.lsm6dso32.X,
 8002b1c:	693b      	ldr	r3, [r7, #16]
                sprintf(buf, "%c[0;0H"
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd32 	bl	8000588 <__aeabi_f2d>
 8002b24:	4604      	mov	r4, r0
 8002b26:	460d      	mov	r5, r1
                             update.lsm6dso32.Y,
 8002b28:	697b      	ldr	r3, [r7, #20]
                sprintf(buf, "%c[0;0H"
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd2c 	bl	8000588 <__aeabi_f2d>
 8002b30:	4680      	mov	r8, r0
 8002b32:	4689      	mov	r9, r1
                             update.lsm6dso32.Z);
 8002b34:	69bb      	ldr	r3, [r7, #24]
                sprintf(buf, "%c[0;0H"
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd26 	bl	8000588 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	f107 001c 	add.w	r0, r7, #28
 8002b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b48:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b4c:	e9cd 4500 	strd	r4, r5, [sp]
 8002b50:	221b      	movs	r2, #27
 8002b52:	4918      	ldr	r1, [pc, #96]	@ (8002bb4 <StartTaskUART+0x1fc>)
 8002b54:	f006 fec4 	bl	80098e0 <siprintf>
            break;
 8002b58:	e00f      	b.n	8002b7a <StartTaskUART+0x1c2>
        case UPDATE_ERROR:
            sprintf(buf, "%c[0;0H"
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f107 001c 	add.w	r0, r7, #28
 8002b60:	221b      	movs	r2, #27
 8002b62:	4915      	ldr	r1, [pc, #84]	@ (8002bb8 <StartTaskUART+0x200>)
 8002b64:	f006 febc 	bl	80098e0 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "%s    ",
                         0x1b,
                         update.error_buf);
            break;
 8002b68:	e007      	b.n	8002b7a <StartTaskUART+0x1c2>
        default:
            sprintf(buf, "%c[0;0H"
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	221b      	movs	r2, #27
 8002b70:	4912      	ldr	r1, [pc, #72]	@ (8002bbc <StartTaskUART+0x204>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f006 feb4 	bl	80098e0 <siprintf>
                         "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                         "UART RECEIVED INVALID UPDATE TYPE   ",
                         0x1b);
            break;
 8002b78:	bf00      	nop
        }

        if(transmit(args.huart, buf) != UART_SUCCESS) {
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	f107 021c 	add.w	r2, r7, #28
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fefb 	bl	8002980 <transmit>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f43f af33 	beq.w	80029f8 <StartTaskUART+0x40>
            vTaskSuspend(NULL);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f004 fb34 	bl	8007200 <vTaskSuspend>
        osSemaphoreAcquire(*args.uartSemaphore, osWaitForever);
 8002b98:	e72e      	b.n	80029f8 <StartTaskUART+0x40>
 8002b9a:	bf00      	nop
 8002b9c:	0800c038 	.word	0x0800c038
 8002ba0:	0800c10c 	.word	0x0800c10c
 8002ba4:	0800c130 	.word	0x0800c130
 8002ba8:	0800c144 	.word	0x0800c144
 8002bac:	0800c15c 	.word	0x0800c15c
 8002bb0:	0800c194 	.word	0x0800c194
 8002bb4:	0800c1cc 	.word	0x0800c1cc
 8002bb8:	0800c208 	.word	0x0800c208
 8002bbc:	0800c228 	.word	0x0800c228

08002bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bc4:	f7ff fc14 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc8:	480c      	ldr	r0, [pc, #48]	@ (8002bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bca:	490d      	ldr	r1, [pc, #52]	@ (8002c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd0:	e002      	b.n	8002bd8 <LoopCopyDataInit>

08002bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd6:	3304      	adds	r3, #4

08002bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bdc:	d3f9      	bcc.n	8002bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be0:	4c0a      	ldr	r4, [pc, #40]	@ (8002c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be4:	e001      	b.n	8002bea <LoopFillZerobss>

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be8:	3204      	adds	r2, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f006 ff89 	bl	8009b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7fe ff4d 	bl	8001a90 <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c04:	0800c7a0 	.word	0x0800c7a0
  ldr r2, =_sbss
 8002c08:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c0c:	2001290c 	.word	0x2001290c

08002c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c18:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <HAL_Init+0x40>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	@ (8002c54 <HAL_Init+0x40>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <HAL_Init+0x40>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f8fc 	bl	8002e3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	200f      	movs	r0, #15
 8002c44:	f7ff fa6c 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7ff f9ae 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00

08002c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_IncTick+0x20>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_IncTick+0x24>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <HAL_IncTick+0x24>)
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000018 	.word	0x20000018
 8002c7c:	20000864 	.word	0x20000864

08002c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return uwTick;
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_GetTick+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000864 	.word	0x20000864

08002c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff ffee 	bl	8002c80 <HAL_GetTick>
 8002ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d005      	beq.n	8002cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_Delay+0x44>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cbe:	bf00      	nop
 8002cc0:	f7ff ffde 	bl	8002c80 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d8f7      	bhi.n	8002cc0 <HAL_Delay+0x28>
  {
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000018 	.word	0x20000018

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	@ (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff ff4c 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e48:	bf00      	nop
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e62:	f7ff ff61 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f7ff ffb1 	bl	8002dd4 <NVIC_EncodePriority>
 8002e72:	4602      	mov	r2, r0
 8002e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff80 	bl	8002d80 <__NVIC_SetPriority>
}
 8002e80:	bf00      	nop
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff54 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e165      	b.n	800318c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 8154 	bne.w	8003186 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d005      	beq.n	8002ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d130      	bne.n	8002f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0201 	and.w	r2, r3, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d017      	beq.n	8002f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d123      	bne.n	8002fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80ae 	beq.w	8003186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b5d      	ldr	r3, [pc, #372]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4a5c      	ldr	r2, [pc, #368]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003038:	6453      	str	r3, [r2, #68]	@ 0x44
 800303a:	4b5a      	ldr	r3, [pc, #360]	@ (80031a4 <HAL_GPIO_Init+0x300>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003046:	4a58      	ldr	r2, [pc, #352]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4f      	ldr	r2, [pc, #316]	@ (80031ac <HAL_GPIO_Init+0x308>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d025      	beq.n	80030be <HAL_GPIO_Init+0x21a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4e      	ldr	r2, [pc, #312]	@ (80031b0 <HAL_GPIO_Init+0x30c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <HAL_GPIO_Init+0x216>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4d      	ldr	r2, [pc, #308]	@ (80031b4 <HAL_GPIO_Init+0x310>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d019      	beq.n	80030b6 <HAL_GPIO_Init+0x212>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4c      	ldr	r2, [pc, #304]	@ (80031b8 <HAL_GPIO_Init+0x314>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0x20e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4b      	ldr	r2, [pc, #300]	@ (80031bc <HAL_GPIO_Init+0x318>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00d      	beq.n	80030ae <HAL_GPIO_Init+0x20a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4a      	ldr	r2, [pc, #296]	@ (80031c0 <HAL_GPIO_Init+0x31c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x206>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a49      	ldr	r2, [pc, #292]	@ (80031c4 <HAL_GPIO_Init+0x320>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_GPIO_Init+0x202>
 80030a2:	2306      	movs	r3, #6
 80030a4:	e00c      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030a6:	2307      	movs	r3, #7
 80030a8:	e00a      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030aa:	2305      	movs	r3, #5
 80030ac:	e008      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030ae:	2304      	movs	r3, #4
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e004      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_GPIO_Init+0x21c>
 80030be:	2300      	movs	r3, #0
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f002 0203 	and.w	r2, r2, #3
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	4093      	lsls	r3, r2
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d0:	4935      	ldr	r1, [pc, #212]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030de:	4b3a      	ldr	r3, [pc, #232]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003102:	4a31      	ldr	r2, [pc, #196]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003108:	4b2f      	ldr	r3, [pc, #188]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800312c:	4a26      	ldr	r2, [pc, #152]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003132:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003156:	4a1c      	ldr	r2, [pc, #112]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800315c:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003180:	4a11      	ldr	r2, [pc, #68]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	f67f ae96 	bls.w	8002ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3724      	adds	r7, #36	@ 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020800 	.word	0x40020800
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40021400 	.word	0x40021400
 80031c4:	40021800 	.word	0x40021800
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0cc      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b68      	ldr	r3, [pc, #416]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d90c      	bls.n	800323c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b65      	ldr	r3, [pc, #404]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b63      	ldr	r3, [pc, #396]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0b8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	4b59      	ldr	r3, [pc, #356]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a58      	ldr	r2, [pc, #352]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800325e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800326c:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a52      	ldr	r2, [pc, #328]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003278:	4b50      	ldr	r3, [pc, #320]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	494d      	ldr	r1, [pc, #308]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d044      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d119      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d003      	beq.n	80032be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b3f      	ldr	r3, [pc, #252]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3b      	ldr	r3, [pc, #236]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e067      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b37      	ldr	r3, [pc, #220]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4934      	ldr	r1, [pc, #208]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7ff fcc6 	bl	8002c80 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7ff fcc2 	bl	8002c80 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b25      	ldr	r3, [pc, #148]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d20c      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b22      	ldr	r3, [pc, #136]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e032      	b.n	80033ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4916      	ldr	r1, [pc, #88]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003372:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	490e      	ldr	r1, [pc, #56]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003386:	f000 f887 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	490a      	ldr	r1, [pc, #40]	@ (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033a2:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe feba 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023c00 	.word	0x40023c00
 80033bc:	40023800 	.word	0x40023800
 80033c0:	0800c340 	.word	0x0800c340
 80033c4:	20000010 	.word	0x20000010
 80033c8:	20000014 	.word	0x20000014

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000010 	.word	0x20000010

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff0 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0a9b      	lsrs	r3, r3, #10
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4903      	ldr	r1, [pc, #12]	@ (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	0800c350 	.word	0x0800c350

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003410:	f7ff ffdc 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	0800c350 	.word	0x0800c350

08003434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	220f      	movs	r2, #15
 8003442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0203 	and.w	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003468:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_GetClockConfig+0x5c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_RCC_GetClockConfig+0x60>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	601a      	str	r2, [r3, #0]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40023c00 	.word	0x40023c00

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800349c:	b0ae      	sub	sp, #184	@ 0xb8
 800349e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034be:	4bcb      	ldr	r3, [pc, #812]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b0c      	cmp	r3, #12
 80034c8:	f200 8206 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x440>
 80034cc:	a201      	add	r2, pc, #4	@ (adr r2, 80034d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	08003509 	.word	0x08003509
 80034d8:	080038d9 	.word	0x080038d9
 80034dc:	080038d9 	.word	0x080038d9
 80034e0:	080038d9 	.word	0x080038d9
 80034e4:	08003511 	.word	0x08003511
 80034e8:	080038d9 	.word	0x080038d9
 80034ec:	080038d9 	.word	0x080038d9
 80034f0:	080038d9 	.word	0x080038d9
 80034f4:	08003519 	.word	0x08003519
 80034f8:	080038d9 	.word	0x080038d9
 80034fc:	080038d9 	.word	0x080038d9
 8003500:	080038d9 	.word	0x080038d9
 8003504:	08003709 	.word	0x08003709
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4bb9      	ldr	r3, [pc, #740]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800350e:	e1e7      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003510:	4bb8      	ldr	r3, [pc, #736]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003516:	e1e3      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003518:	4bb4      	ldr	r3, [pc, #720]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003520:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003524:	4bb1      	ldr	r3, [pc, #708]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d071      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003530:	4bae      	ldr	r3, [pc, #696]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800353c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003556:	4622      	mov	r2, r4
 8003558:	462b      	mov	r3, r5
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	0159      	lsls	r1, r3, #5
 8003564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003568:	0150      	lsls	r0, r2, #5
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4621      	mov	r1, r4
 8003570:	1a51      	subs	r1, r2, r1
 8003572:	6439      	str	r1, [r7, #64]	@ 0x40
 8003574:	4629      	mov	r1, r5
 8003576:	eb63 0301 	sbc.w	r3, r3, r1
 800357a:	647b      	str	r3, [r7, #68]	@ 0x44
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003588:	4649      	mov	r1, r9
 800358a:	018b      	lsls	r3, r1, #6
 800358c:	4641      	mov	r1, r8
 800358e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003592:	4641      	mov	r1, r8
 8003594:	018a      	lsls	r2, r1, #6
 8003596:	4641      	mov	r1, r8
 8003598:	1a51      	subs	r1, r2, r1
 800359a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800359c:	4649      	mov	r1, r9
 800359e:	eb63 0301 	sbc.w	r3, r3, r1
 80035a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80035b0:	4649      	mov	r1, r9
 80035b2:	00cb      	lsls	r3, r1, #3
 80035b4:	4641      	mov	r1, r8
 80035b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ba:	4641      	mov	r1, r8
 80035bc:	00ca      	lsls	r2, r1, #3
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	4622      	mov	r2, r4
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ca:	462b      	mov	r3, r5
 80035cc:	460a      	mov	r2, r1
 80035ce:	eb42 0303 	adc.w	r3, r2, r3
 80035d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035e0:	4629      	mov	r1, r5
 80035e2:	024b      	lsls	r3, r1, #9
 80035e4:	4621      	mov	r1, r4
 80035e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ea:	4621      	mov	r1, r4
 80035ec:	024a      	lsls	r2, r1, #9
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003600:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003604:	f7fd faf0 	bl	8000be8 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4613      	mov	r3, r2
 800360e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003612:	e067      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003614:	4b75      	ldr	r3, [pc, #468]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003620:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003624:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800362e:	2300      	movs	r3, #0
 8003630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003632:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003636:	4622      	mov	r2, r4
 8003638:	462b      	mov	r3, r5
 800363a:	f04f 0000 	mov.w	r0, #0
 800363e:	f04f 0100 	mov.w	r1, #0
 8003642:	0159      	lsls	r1, r3, #5
 8003644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003648:	0150      	lsls	r0, r2, #5
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4621      	mov	r1, r4
 8003650:	1a51      	subs	r1, r2, r1
 8003652:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003654:	4629      	mov	r1, r5
 8003656:	eb63 0301 	sbc.w	r3, r3, r1
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003668:	4649      	mov	r1, r9
 800366a:	018b      	lsls	r3, r1, #6
 800366c:	4641      	mov	r1, r8
 800366e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003672:	4641      	mov	r1, r8
 8003674:	018a      	lsls	r2, r1, #6
 8003676:	4641      	mov	r1, r8
 8003678:	ebb2 0a01 	subs.w	sl, r2, r1
 800367c:	4649      	mov	r1, r9
 800367e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800368e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003696:	4692      	mov	sl, r2
 8003698:	469b      	mov	fp, r3
 800369a:	4623      	mov	r3, r4
 800369c:	eb1a 0303 	adds.w	r3, sl, r3
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	462b      	mov	r3, r5
 80036a4:	eb4b 0303 	adc.w	r3, fp, r3
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80036b6:	4629      	mov	r1, r5
 80036b8:	028b      	lsls	r3, r1, #10
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c0:	4621      	mov	r1, r4
 80036c2:	028a      	lsls	r2, r1, #10
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036cc:	2200      	movs	r2, #0
 80036ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80036d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80036d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036d6:	f7fd fa87 	bl	8000be8 <__aeabi_uldivmod>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4613      	mov	r3, r2
 80036e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e4:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	3301      	adds	r3, #1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80036f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003706:	e0eb      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b38      	ldr	r3, [pc, #224]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003714:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d06b      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x354>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	099b      	lsrs	r3, r3, #6
 8003726:	2200      	movs	r2, #0
 8003728:	66bb      	str	r3, [r7, #104]	@ 0x68
 800372a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800372c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	663b      	str	r3, [r7, #96]	@ 0x60
 8003734:	2300      	movs	r3, #0
 8003736:	667b      	str	r3, [r7, #100]	@ 0x64
 8003738:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800373c:	4622      	mov	r2, r4
 800373e:	462b      	mov	r3, r5
 8003740:	f04f 0000 	mov.w	r0, #0
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	0159      	lsls	r1, r3, #5
 800374a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800374e:	0150      	lsls	r0, r2, #5
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4621      	mov	r1, r4
 8003756:	1a51      	subs	r1, r2, r1
 8003758:	61b9      	str	r1, [r7, #24]
 800375a:	4629      	mov	r1, r5
 800375c:	eb63 0301 	sbc.w	r3, r3, r1
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800376e:	4659      	mov	r1, fp
 8003770:	018b      	lsls	r3, r1, #6
 8003772:	4651      	mov	r1, sl
 8003774:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003778:	4651      	mov	r1, sl
 800377a:	018a      	lsls	r2, r1, #6
 800377c:	4651      	mov	r1, sl
 800377e:	ebb2 0801 	subs.w	r8, r2, r1
 8003782:	4659      	mov	r1, fp
 8003784:	eb63 0901 	sbc.w	r9, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003794:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003798:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379c:	4690      	mov	r8, r2
 800379e:	4699      	mov	r9, r3
 80037a0:	4623      	mov	r3, r4
 80037a2:	eb18 0303 	adds.w	r3, r8, r3
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	462b      	mov	r3, r5
 80037aa:	eb49 0303 	adc.w	r3, r9, r3
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80037bc:	4629      	mov	r1, r5
 80037be:	024b      	lsls	r3, r1, #9
 80037c0:	4621      	mov	r1, r4
 80037c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037c6:	4621      	mov	r1, r4
 80037c8:	024a      	lsls	r2, r1, #9
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037d2:	2200      	movs	r2, #0
 80037d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037dc:	f7fd fa04 	bl	8000be8 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037ea:	e065      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x420>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	00f42400 	.word	0x00f42400
 80037f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	2200      	movs	r2, #0
 8003800:	4618      	mov	r0, r3
 8003802:	4611      	mov	r1, r2
 8003804:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003808:	653b      	str	r3, [r7, #80]	@ 0x50
 800380a:	2300      	movs	r3, #0
 800380c:	657b      	str	r3, [r7, #84]	@ 0x54
 800380e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003812:	4642      	mov	r2, r8
 8003814:	464b      	mov	r3, r9
 8003816:	f04f 0000 	mov.w	r0, #0
 800381a:	f04f 0100 	mov.w	r1, #0
 800381e:	0159      	lsls	r1, r3, #5
 8003820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003824:	0150      	lsls	r0, r2, #5
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4641      	mov	r1, r8
 800382c:	1a51      	subs	r1, r2, r1
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	4649      	mov	r1, r9
 8003832:	eb63 0301 	sbc.w	r3, r3, r1
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003844:	4659      	mov	r1, fp
 8003846:	018b      	lsls	r3, r1, #6
 8003848:	4651      	mov	r1, sl
 800384a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800384e:	4651      	mov	r1, sl
 8003850:	018a      	lsls	r2, r1, #6
 8003852:	4651      	mov	r1, sl
 8003854:	1a54      	subs	r4, r2, r1
 8003856:	4659      	mov	r1, fp
 8003858:	eb63 0501 	sbc.w	r5, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	00eb      	lsls	r3, r5, #3
 8003866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386a:	00e2      	lsls	r2, r4, #3
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4643      	mov	r3, r8
 8003872:	18e3      	adds	r3, r4, r3
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	464b      	mov	r3, r9
 8003878:	eb45 0303 	adc.w	r3, r5, r3
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388a:	4629      	mov	r1, r5
 800388c:	028b      	lsls	r3, r1, #10
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003894:	4621      	mov	r1, r4
 8003896:	028a      	lsls	r2, r1, #10
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038a0:	2200      	movs	r2, #0
 80038a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038aa:	f7fd f99d 	bl	8000be8 <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4613      	mov	r3, r2
 80038b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80038b8:	4b0d      	ldr	r3, [pc, #52]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	0f1b      	lsrs	r3, r3, #28
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80038c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038d6:	e003      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80038da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	37b8      	adds	r7, #184	@ 0xb8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400

080038f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e28d      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 8083 	beq.w	8003a1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003918:	4b94      	ldr	r3, [pc, #592]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b04      	cmp	r3, #4
 8003922:	d019      	beq.n	8003958 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003924:	4b91      	ldr	r3, [pc, #580]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800392c:	2b08      	cmp	r3, #8
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003930:	4b8e      	ldr	r3, [pc, #568]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b88      	ldr	r3, [pc, #544]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b84      	ldr	r3, [pc, #528]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x124>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e25a      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x90>
 800397a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xcc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0xb4>
 8003992:	4b76      	ldr	r3, [pc, #472]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a75      	ldr	r2, [pc, #468]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a72      	ldr	r2, [pc, #456]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xcc>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b6c      	ldr	r3, [pc, #432]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a6b      	ldr	r2, [pc, #428]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7ff f958 	bl	8002c80 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7ff f954 	bl	8002c80 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	@ 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e21f      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b61      	ldr	r3, [pc, #388]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xdc>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7ff f944 	bl	8002c80 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7ff f940 	bl	8002c80 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e20b      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b57      	ldr	r3, [pc, #348]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x104>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06f      	beq.n	8003b0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a2a:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d017      	beq.n	8003a66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a36:	4b4d      	ldr	r3, [pc, #308]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d105      	bne.n	8003a4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a42:	4b4a      	ldr	r3, [pc, #296]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5a:	4b44      	ldr	r3, [pc, #272]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x186>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1d3      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4937      	ldr	r1, [pc, #220]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b34      	ldr	r3, [pc, #208]	@ (8003b70 <HAL_RCC_OscConfig+0x278>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7ff f8ed 	bl	8002c80 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7ff f8e9 	bl	8002c80 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e1b4      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4925      	ldr	r1, [pc, #148]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x278>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7ff f8cc 	bl	8002c80 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aec:	f7ff f8c8 	bl	8002c80 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e193      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1b      	ldr	r3, [pc, #108]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d036      	beq.n	8003b84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7ff f8ac 	bl	8002c80 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7ff f8a8 	bl	8002c80 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e173      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_OscConfig+0x274>)
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x234>
 8003b4a:	e01b      	b.n	8003b84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7ff f895 	bl	8002c80 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	e00e      	b.n	8003b78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7ff f891 	bl	8002c80 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d907      	bls.n	8003b78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e15c      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	42470000 	.word	0x42470000
 8003b74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b78:	4b8a      	ldr	r3, [pc, #552]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ea      	bne.n	8003b5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8097 	beq.w	8003cc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b92:	2300      	movs	r3, #0
 8003b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b96:	4b83      	ldr	r3, [pc, #524]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc2:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d118      	bne.n	8003c00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bce:	4b76      	ldr	r3, [pc, #472]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a75      	ldr	r2, [pc, #468]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bda:	f7ff f851 	bl	8002c80 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be2:	f7ff f84d 	bl	8002c80 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e118      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8003da8 <HAL_RCC_OscConfig+0x4b0>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x31e>
 8003c08:	4b66      	ldr	r3, [pc, #408]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0c:	4a65      	ldr	r2, [pc, #404]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x358>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b05      	cmp	r3, #5
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x340>
 8003c1e:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	4a60      	ldr	r2, [pc, #384]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0x358>
 8003c38:	4b5a      	ldr	r3, [pc, #360]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	4a59      	ldr	r2, [pc, #356]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c44:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7ff f812 	bl	8002c80 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	e00a      	b.n	8003c76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7ff f80e 	bl	8002c80 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e0d7      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	4b4b      	ldr	r3, [pc, #300]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0ee      	beq.n	8003c60 <HAL_RCC_OscConfig+0x368>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe fffc 	bl	8002c80 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fe fff8 	bl	8002c80 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0c1      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	4b40      	ldr	r3, [pc, #256]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80ad 	beq.w	8003e24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cca:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d060      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d145      	bne.n	8003d6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b33      	ldr	r3, [pc, #204]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe ffcc 	bl	8002c80 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe ffc8 	bl	8002c80 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e093      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b29      	ldr	r3, [pc, #164]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	019b      	lsls	r3, r3, #6
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	071b      	lsls	r3, r3, #28
 8003d36:	491b      	ldr	r1, [pc, #108]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe ff9d 	bl	8002c80 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe ff99 	bl	8002c80 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e064      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	4b11      	ldr	r3, [pc, #68]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f0      	beq.n	8003d4a <HAL_RCC_OscConfig+0x452>
 8003d68:	e05c      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6a:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x4b4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe ff86 	bl	8002c80 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fe ff82 	bl	8002c80 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04d      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <HAL_RCC_OscConfig+0x4ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x480>
 8003d96:	e045      	b.n	8003e24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e040      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <HAL_RCC_OscConfig+0x538>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d030      	beq.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d129      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d122      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003de0:	4013      	ands	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d119      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d10f      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800

08003e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07b      	b.n	8003f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e56:	d009      	beq.n	8003e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]
 8003e5e:	e005      	b.n	8003e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe f8ba 	bl	8002000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef0:	ea42 0103 	orr.w	r1, r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0104 	and.w	r1, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	f003 0210 	and.w	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b088      	sub	sp, #32
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_SPI_Transmit+0x22>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e12d      	b.n	80041c4 <HAL_SPI_Transmit+0x27e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f70:	f7fe fe86 	bl	8002c80 <HAL_GetTick>
 8003f74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
 8003f88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f8a:	e116      	b.n	80041ba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_SPI_Transmit+0x52>
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9c:	e10d      	b.n	80041ba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	88fa      	ldrh	r2, [r7, #6]
 8003fbc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe4:	d10f      	bne.n	8004006 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004004:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d007      	beq.n	8004024 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402c:	d14f      	bne.n	80040ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_SPI_Transmit+0xf6>
 8004036:	8afb      	ldrh	r3, [r7, #22]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d142      	bne.n	80040c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004060:	e02f      	b.n	80040c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b02      	cmp	r3, #2
 800406e:	d112      	bne.n	8004096 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	1c9a      	adds	r2, r3, #2
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004094:	e015      	b.n	80040c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004096:	f7fe fdf3 	bl	8002c80 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d803      	bhi.n	80040ae <HAL_SPI_Transmit+0x168>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d102      	bne.n	80040b4 <HAL_SPI_Transmit+0x16e>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80040c0:	e07b      	b.n	80041ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ca      	bne.n	8004062 <HAL_SPI_Transmit+0x11c>
 80040cc:	e050      	b.n	8004170 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Transmit+0x196>
 80040d6:	8afb      	ldrh	r3, [r7, #22]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d144      	bne.n	8004166 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004102:	e030      	b.n	8004166 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d113      	bne.n	800413a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004138:	e015      	b.n	8004166 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413a:	f7fe fda1 	bl	8002c80 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d803      	bhi.n	8004152 <HAL_SPI_Transmit+0x20c>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Transmit+0x212>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004164:	e029      	b.n	80041ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1c9      	bne.n	8004104 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fbdf 	bl	8004938 <SPI_EndRxTxTransaction>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	77fb      	strb	r3, [r7, #31]
 80041b0:	e003      	b.n	80041ba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d002      	beq.n	80041f2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041f0:	e0fb      	b.n	80043ea <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041fa:	d112      	bne.n	8004222 <HAL_SPI_Receive+0x56>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10e      	bne.n	8004222 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2204      	movs	r2, #4
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f8ef 	bl	80043fc <HAL_SPI_TransmitReceive>
 800421e:	4603      	mov	r3, r0
 8004220:	e0e8      	b.n	80043f4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_SPI_Receive+0x64>
 800422c:	2302      	movs	r3, #2
 800422e:	e0e1      	b.n	80043f4 <HAL_SPI_Receive+0x228>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004238:	f7fe fd22 	bl	8002c80 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_SPI_Receive+0x7e>
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800424e:	e0cc      	b.n	80043ea <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2204      	movs	r2, #4
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004296:	d10f      	bne.n	80042b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c2:	2b40      	cmp	r3, #64	@ 0x40
 80042c4:	d007      	beq.n	80042d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d16a      	bne.n	80043b4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042de:	e032      	b.n	8004346 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d115      	bne.n	800431a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f103 020c 	add.w	r2, r3, #12
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	7812      	ldrb	r2, [r2, #0]
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004318:	e015      	b.n	8004346 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431a:	f7fe fcb1 	bl	8002c80 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d803      	bhi.n	8004332 <HAL_SPI_Receive+0x166>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d102      	bne.n	8004338 <HAL_SPI_Receive+0x16c>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004344:	e051      	b.n	80043ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1c7      	bne.n	80042e0 <HAL_SPI_Receive+0x114>
 8004350:	e035      	b.n	80043be <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d113      	bne.n	8004388 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436a:	b292      	uxth	r2, r2
 800436c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004386:	e015      	b.n	80043b4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004388:	f7fe fc7a 	bl	8002c80 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d803      	bhi.n	80043a0 <HAL_SPI_Receive+0x1d4>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d102      	bne.n	80043a6 <HAL_SPI_Receive+0x1da>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043b2:	e01a      	b.n	80043ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1c9      	bne.n	8004352 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	6839      	ldr	r1, [r7, #0]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa52 	bl	800486c <SPI_EndRxTransaction>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
 80043e0:	e003      	b.n	80043ea <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	@ 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26>
 800441e:	2302      	movs	r3, #2
 8004420:	e198      	b.n	8004754 <HAL_SPI_TransmitReceive+0x358>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442a:	f7fe fc29 	bl	8002c80 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004444:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00f      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004452:	d107      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x68>
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004460:	2b04      	cmp	r3, #4
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004464:	2302      	movs	r3, #2
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800446a:	e16d      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_SPI_TransmitReceive+0x82>
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004484:	e160      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b04      	cmp	r3, #4
 8004490:	d003      	beq.n	800449a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2205      	movs	r2, #5
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	887a      	ldrh	r2, [r7, #2]
 80044aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044da:	2b40      	cmp	r3, #64	@ 0x40
 80044dc:	d007      	beq.n	80044ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f6:	d17c      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_SPI_TransmitReceive+0x10a>
 8004500:	8b7b      	ldrh	r3, [r7, #26]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d16a      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	e057      	b.n	80045dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d11b      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d016      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x176>
 8004544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d113      	bne.n	8004572 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	881a      	ldrh	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	1c9a      	adds	r2, r3, #2
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d119      	bne.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d014      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	b292      	uxth	r2, r2
 8004596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	1c9a      	adds	r2, r3, #2
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045b4:	f7fe fb64 	bl	8002c80 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d80b      	bhi.n	80045dc <HAL_SPI_TransmitReceive+0x1e0>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80045da:	e0b5      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1a2      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d19d      	bne.n	800452c <HAL_SPI_TransmitReceive+0x130>
 80045f0:	e080      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x204>
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d16f      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004626:	e05b      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d11c      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x274>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x274>
 8004640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d114      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d119      	bne.n	80046b2 <HAL_SPI_TransmitReceive+0x2b6>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d014      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046ae:	2301      	movs	r3, #1
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046b2:	f7fe fae5 	bl	8002c80 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046be:	429a      	cmp	r2, r3
 80046c0:	d803      	bhi.n	80046ca <HAL_SPI_TransmitReceive+0x2ce>
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d102      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x2d4>
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80046de:	e033      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d19e      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x22c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d199      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f91d 	bl	8004938 <SPI_EndRxTxTransaction>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d006      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004710:	e01a      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e003      	b.n	8004748 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004754:	4618      	mov	r0, r3
 8004756:	3730      	adds	r7, #48	@ 0x30
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800476c:	f7fe fa88 	bl	8002c80 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4413      	add	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800477c:	f7fe fa80 	bl	8002c80 <HAL_GetTick>
 8004780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004782:	4b39      	ldr	r3, [pc, #228]	@ (8004868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	0d1b      	lsrs	r3, r3, #20
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	fb02 f303 	mul.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004792:	e054      	b.n	800483e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479a:	d050      	beq.n	800483e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800479c:	f7fe fa70 	bl	8002c80 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d902      	bls.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d13d      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ca:	d111      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d4:	d004      	beq.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047de:	d107      	bne.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047f8:	d10f      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e017      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3b01      	subs	r3, #1
 800483c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d19b      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000010 	.word	0x20000010

0800486c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004880:	d111      	bne.n	80048a6 <SPI_EndRxTransaction+0x3a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488a:	d004      	beq.n	8004896 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004894:	d107      	bne.n	80048a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ae:	d12a      	bne.n	8004906 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b8:	d012      	beq.n	80048e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff ff49 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02d      	beq.n	800492c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e026      	b.n	800492e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2101      	movs	r1, #1
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff ff36 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01a      	beq.n	800492c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e013      	b.n	800492e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	2101      	movs	r1, #1
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff ff23 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e000      	b.n	800492e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2201      	movs	r2, #1
 800494c:	2102      	movs	r1, #2
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff ff04 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e032      	b.n	80049d0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800496a:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <SPI_EndRxTxTransaction+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <SPI_EndRxTxTransaction+0xa4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	0d5b      	lsrs	r3, r3, #21
 8004976:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004988:	d112      	bne.n	80049b0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fee1 	bl	800475c <SPI_WaitFlagStateUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d016      	beq.n	80049ce <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e00f      	b.n	80049d0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b80      	cmp	r3, #128	@ 0x80
 80049c8:	d0f2      	beq.n	80049b0 <SPI_EndRxTxTransaction+0x78>
 80049ca:	e000      	b.n	80049ce <SPI_EndRxTxTransaction+0x96>
        break;
 80049cc:	bf00      	nop
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000010 	.word	0x20000010
 80049dc:	165e9f81 	.word	0x165e9f81

080049e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e041      	b.n	8004a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f839 	bl	8004a7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 f9c0 	bl	8004da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e04e      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad6:	d01d      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d010      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e007      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40001800 	.word	0x40001800

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0202 	mvn.w	r2, #2
 8004ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8d2 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8c4 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8d5 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8ac 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f89e 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8af 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f886 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f878 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f889 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f860 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f852 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f863 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd f8ac 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00c      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f906 	bl	8004f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f834 	bl	8004d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0220 	mvn.w	r2, #32
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8d8 	bl	8004efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a46      	ldr	r2, [pc, #280]	@ (8004ed0 <TIM_Base_SetConfig+0x12c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d00f      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a43      	ldr	r2, [pc, #268]	@ (8004ed4 <TIM_Base_SetConfig+0x130>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a42      	ldr	r2, [pc, #264]	@ (8004ed8 <TIM_Base_SetConfig+0x134>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d007      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a41      	ldr	r2, [pc, #260]	@ (8004edc <TIM_Base_SetConfig+0x138>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a40      	ldr	r2, [pc, #256]	@ (8004ee0 <TIM_Base_SetConfig+0x13c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a35      	ldr	r2, [pc, #212]	@ (8004ed0 <TIM_Base_SetConfig+0x12c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d027      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a32      	ldr	r2, [pc, #200]	@ (8004ed4 <TIM_Base_SetConfig+0x130>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d023      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a31      	ldr	r2, [pc, #196]	@ (8004ed8 <TIM_Base_SetConfig+0x134>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a30      	ldr	r2, [pc, #192]	@ (8004edc <TIM_Base_SetConfig+0x138>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee0 <TIM_Base_SetConfig+0x13c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <TIM_Base_SetConfig+0x140>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <TIM_Base_SetConfig+0x144>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <TIM_Base_SetConfig+0x148>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef0 <TIM_Base_SetConfig+0x14c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	@ (8004ef4 <TIM_Base_SetConfig+0x150>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a29      	ldr	r2, [pc, #164]	@ (8004ef8 <TIM_Base_SetConfig+0x154>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a10      	ldr	r2, [pc, #64]	@ (8004ed0 <TIM_Base_SetConfig+0x12c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0xf8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a12      	ldr	r2, [pc, #72]	@ (8004ee0 <TIM_Base_SetConfig+0x13c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d103      	bne.n	8004ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d105      	bne.n	8004ec2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40001c00 	.word	0x40001c00
 8004ef8:	40002000 	.word	0x40002000

08004efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e042      	b.n	8004fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f8a0 	bl	8002090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	@ 0x24
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f973 	bl	8005254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	@ 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d175      	bne.n	80050d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Transmit+0x2c>
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e06e      	b.n	80050d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2221      	movs	r2, #33	@ 0x21
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fd fe3d 	bl	8002c80 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	88fa      	ldrh	r2, [r7, #6]
 8005012:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501c:	d108      	bne.n	8005030 <HAL_UART_Transmit+0x6c>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e003      	b.n	8005038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005038:	e02e      	b.n	8005098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2200      	movs	r2, #0
 8005042:	2180      	movs	r1, #128	@ 0x80
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f848 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e03a      	b.n	80050d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	3302      	adds	r3, #2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	e007      	b.n	800508a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1cb      	bne.n	800503a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2140      	movs	r1, #64	@ 0x40
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f814 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e006      	b.n	80050d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	e03b      	b.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	d037      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f4:	f7fd fdc4 	bl	8002c80 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <UART_WaitOnFlagUntilTimeout+0x30>
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e03a      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d023      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b80      	cmp	r3, #128	@ 0x80
 8005120:	d020      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b40      	cmp	r3, #64	@ 0x40
 8005126:	d01d      	beq.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d116      	bne.n	8005164 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f81d 	bl	800518c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2208      	movs	r2, #8
 8005156:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e00f      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d0b4      	beq.n	80050ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b095      	sub	sp, #84	@ 0x54
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	2b01      	cmp	r3, #1
 8005202:	d119      	bne.n	8005238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60bb      	str	r3, [r7, #8]
   return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	647b      	str	r3, [r7, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005224:	61ba      	str	r2, [r7, #24]
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005246:	bf00      	nop
 8005248:	3754      	adds	r7, #84	@ 0x54
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005258:	b0c0      	sub	sp, #256	@ 0x100
 800525a:	af00      	add	r7, sp, #0
 800525c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	ea40 0301 	orr.w	r3, r0, r1
 800527c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800527e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	431a      	orrs	r2, r3
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	431a      	orrs	r2, r3
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052ac:	f021 010c 	bic.w	r1, r1, #12
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ba:	430b      	orrs	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ce:	6999      	ldr	r1, [r3, #24]
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	ea40 0301 	orr.w	r3, r0, r1
 80052da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005520 <UART_SetConfig+0x2cc>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d005      	beq.n	80052f4 <UART_SetConfig+0xa0>
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005524 <UART_SetConfig+0x2d0>)
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d104      	bne.n	80052fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fe f88a 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 80052f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052fc:	e003      	b.n	8005306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fe:	f7fe f871 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8005302:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005310:	f040 810c 	bne.w	800552c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800531e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	1891      	adds	r1, r2, r2
 800532c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800532e:	415b      	adcs	r3, r3
 8005330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005336:	4621      	mov	r1, r4
 8005338:	eb12 0801 	adds.w	r8, r2, r1
 800533c:	4629      	mov	r1, r5
 800533e:	eb43 0901 	adc.w	r9, r3, r1
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005356:	4690      	mov	r8, r2
 8005358:	4699      	mov	r9, r3
 800535a:	4623      	mov	r3, r4
 800535c:	eb18 0303 	adds.w	r3, r8, r3
 8005360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005364:	462b      	mov	r3, r5
 8005366:	eb49 0303 	adc.w	r3, r9, r3
 800536a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800537a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800537e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005382:	460b      	mov	r3, r1
 8005384:	18db      	adds	r3, r3, r3
 8005386:	653b      	str	r3, [r7, #80]	@ 0x50
 8005388:	4613      	mov	r3, r2
 800538a:	eb42 0303 	adc.w	r3, r2, r3
 800538e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005398:	f7fb fc26 	bl	8000be8 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b61      	ldr	r3, [pc, #388]	@ (8005528 <UART_SetConfig+0x2d4>)
 80053a2:	fba3 2302 	umull	r2, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	011c      	lsls	r4, r3, #4
 80053aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053c4:	415b      	adcs	r3, r3
 80053c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053cc:	4641      	mov	r1, r8
 80053ce:	eb12 0a01 	adds.w	sl, r2, r1
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb43 0b01 	adc.w	fp, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ec:	4692      	mov	sl, r2
 80053ee:	469b      	mov	fp, r3
 80053f0:	4643      	mov	r3, r8
 80053f2:	eb1a 0303 	adds.w	r3, sl, r3
 80053f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005410:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005418:	460b      	mov	r3, r1
 800541a:	18db      	adds	r3, r3, r3
 800541c:	643b      	str	r3, [r7, #64]	@ 0x40
 800541e:	4613      	mov	r3, r2
 8005420:	eb42 0303 	adc.w	r3, r2, r3
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
 8005426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800542a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800542e:	f7fb fbdb 	bl	8000be8 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4611      	mov	r1, r2
 8005438:	4b3b      	ldr	r3, [pc, #236]	@ (8005528 <UART_SetConfig+0x2d4>)
 800543a:	fba3 2301 	umull	r2, r3, r3, r1
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2264      	movs	r2, #100	@ 0x64
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	1acb      	subs	r3, r1, r3
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800544e:	4b36      	ldr	r3, [pc, #216]	@ (8005528 <UART_SetConfig+0x2d4>)
 8005450:	fba3 2302 	umull	r2, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800545c:	441c      	add	r4, r3
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005468:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800546c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005470:	4642      	mov	r2, r8
 8005472:	464b      	mov	r3, r9
 8005474:	1891      	adds	r1, r2, r2
 8005476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005478:	415b      	adcs	r3, r3
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005480:	4641      	mov	r1, r8
 8005482:	1851      	adds	r1, r2, r1
 8005484:	6339      	str	r1, [r7, #48]	@ 0x30
 8005486:	4649      	mov	r1, r9
 8005488:	414b      	adcs	r3, r1
 800548a:	637b      	str	r3, [r7, #52]	@ 0x34
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005498:	4659      	mov	r1, fp
 800549a:	00cb      	lsls	r3, r1, #3
 800549c:	4651      	mov	r1, sl
 800549e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a2:	4651      	mov	r1, sl
 80054a4:	00ca      	lsls	r2, r1, #3
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	4642      	mov	r2, r8
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054b4:	464b      	mov	r3, r9
 80054b6:	460a      	mov	r2, r1
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054d4:	460b      	mov	r3, r1
 80054d6:	18db      	adds	r3, r3, r3
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054da:	4613      	mov	r3, r2
 80054dc:	eb42 0303 	adc.w	r3, r2, r3
 80054e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054ea:	f7fb fb7d 	bl	8000be8 <__aeabi_uldivmod>
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <UART_SetConfig+0x2d4>)
 80054f4:	fba3 1302 	umull	r1, r3, r3, r2
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	2164      	movs	r1, #100	@ 0x64
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	3332      	adds	r3, #50	@ 0x32
 8005506:	4a08      	ldr	r2, [pc, #32]	@ (8005528 <UART_SetConfig+0x2d4>)
 8005508:	fba2 2303 	umull	r2, r3, r2, r3
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	f003 0207 	and.w	r2, r3, #7
 8005512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4422      	add	r2, r4
 800551a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800551c:	e106      	b.n	800572c <UART_SetConfig+0x4d8>
 800551e:	bf00      	nop
 8005520:	40011000 	.word	0x40011000
 8005524:	40011400 	.word	0x40011400
 8005528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005536:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800553a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	1891      	adds	r1, r2, r2
 8005544:	6239      	str	r1, [r7, #32]
 8005546:	415b      	adcs	r3, r3
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
 800554a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554e:	4641      	mov	r1, r8
 8005550:	1854      	adds	r4, r2, r1
 8005552:	4649      	mov	r1, r9
 8005554:	eb43 0501 	adc.w	r5, r3, r1
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	00eb      	lsls	r3, r5, #3
 8005562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005566:	00e2      	lsls	r2, r4, #3
 8005568:	4614      	mov	r4, r2
 800556a:	461d      	mov	r5, r3
 800556c:	4643      	mov	r3, r8
 800556e:	18e3      	adds	r3, r4, r3
 8005570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005574:	464b      	mov	r3, r9
 8005576:	eb45 0303 	adc.w	r3, r5, r3
 800557a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800558a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800559a:	4629      	mov	r1, r5
 800559c:	008b      	lsls	r3, r1, #2
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a4:	4621      	mov	r1, r4
 80055a6:	008a      	lsls	r2, r1, #2
 80055a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055ac:	f7fb fb1c 	bl	8000be8 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b60      	ldr	r3, [pc, #384]	@ (8005738 <UART_SetConfig+0x4e4>)
 80055b6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	011c      	lsls	r4, r3, #4
 80055be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	1891      	adds	r1, r2, r2
 80055d6:	61b9      	str	r1, [r7, #24]
 80055d8:	415b      	adcs	r3, r3
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e0:	4641      	mov	r1, r8
 80055e2:	1851      	adds	r1, r2, r1
 80055e4:	6139      	str	r1, [r7, #16]
 80055e6:	4649      	mov	r1, r9
 80055e8:	414b      	adcs	r3, r1
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055f8:	4659      	mov	r1, fp
 80055fa:	00cb      	lsls	r3, r1, #3
 80055fc:	4651      	mov	r1, sl
 80055fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005602:	4651      	mov	r1, sl
 8005604:	00ca      	lsls	r2, r1, #3
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	4603      	mov	r3, r0
 800560c:	4642      	mov	r2, r8
 800560e:	189b      	adds	r3, r3, r2
 8005610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005614:	464b      	mov	r3, r9
 8005616:	460a      	mov	r2, r1
 8005618:	eb42 0303 	adc.w	r3, r2, r3
 800561c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800562a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005638:	4649      	mov	r1, r9
 800563a:	008b      	lsls	r3, r1, #2
 800563c:	4641      	mov	r1, r8
 800563e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005642:	4641      	mov	r1, r8
 8005644:	008a      	lsls	r2, r1, #2
 8005646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800564a:	f7fb facd 	bl	8000be8 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4611      	mov	r1, r2
 8005654:	4b38      	ldr	r3, [pc, #224]	@ (8005738 <UART_SetConfig+0x4e4>)
 8005656:	fba3 2301 	umull	r2, r3, r3, r1
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2264      	movs	r2, #100	@ 0x64
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	1acb      	subs	r3, r1, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	3332      	adds	r3, #50	@ 0x32
 8005668:	4a33      	ldr	r2, [pc, #204]	@ (8005738 <UART_SetConfig+0x4e4>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005674:	441c      	add	r4, r3
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	673b      	str	r3, [r7, #112]	@ 0x70
 800567e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005680:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	1891      	adds	r1, r2, r2
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	415b      	adcs	r3, r3
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005694:	4641      	mov	r1, r8
 8005696:	1851      	adds	r1, r2, r1
 8005698:	6039      	str	r1, [r7, #0]
 800569a:	4649      	mov	r1, r9
 800569c:	414b      	adcs	r3, r1
 800569e:	607b      	str	r3, [r7, #4]
 80056a0:	f04f 0200 	mov.w	r2, #0
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ac:	4659      	mov	r1, fp
 80056ae:	00cb      	lsls	r3, r1, #3
 80056b0:	4651      	mov	r1, sl
 80056b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b6:	4651      	mov	r1, sl
 80056b8:	00ca      	lsls	r2, r1, #3
 80056ba:	4610      	mov	r0, r2
 80056bc:	4619      	mov	r1, r3
 80056be:	4603      	mov	r3, r0
 80056c0:	4642      	mov	r2, r8
 80056c2:	189b      	adds	r3, r3, r2
 80056c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c6:	464b      	mov	r3, r9
 80056c8:	460a      	mov	r2, r1
 80056ca:	eb42 0303 	adc.w	r3, r2, r3
 80056ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056da:	667a      	str	r2, [r7, #100]	@ 0x64
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056e8:	4649      	mov	r1, r9
 80056ea:	008b      	lsls	r3, r1, #2
 80056ec:	4641      	mov	r1, r8
 80056ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056f2:	4641      	mov	r1, r8
 80056f4:	008a      	lsls	r2, r1, #2
 80056f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056fa:	f7fb fa75 	bl	8000be8 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <UART_SetConfig+0x4e4>)
 8005704:	fba3 1302 	umull	r1, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	2164      	movs	r1, #100	@ 0x64
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	3332      	adds	r3, #50	@ 0x32
 8005716:	4a08      	ldr	r2, [pc, #32]	@ (8005738 <UART_SetConfig+0x4e4>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	f003 020f 	and.w	r2, r3, #15
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4422      	add	r2, r4
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005732:	46bd      	mov	sp, r7
 8005734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005738:	51eb851f 	.word	0x51eb851f

0800573c <__NVIC_SetPriority>:
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	6039      	str	r1, [r7, #0]
 8005746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574c:	2b00      	cmp	r3, #0
 800574e:	db0a      	blt.n	8005766 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	490c      	ldr	r1, [pc, #48]	@ (8005788 <__NVIC_SetPriority+0x4c>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	0112      	lsls	r2, r2, #4
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	440b      	add	r3, r1
 8005760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005764:	e00a      	b.n	800577c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	4908      	ldr	r1, [pc, #32]	@ (800578c <__NVIC_SetPriority+0x50>)
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	3b04      	subs	r3, #4
 8005774:	0112      	lsls	r2, r2, #4
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	440b      	add	r3, r1
 800577a:	761a      	strb	r2, [r3, #24]
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000e100 	.word	0xe000e100
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <SysTick_Handler+0x1c>)
 8005796:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005798:	f002 fa0c 	bl	8007bb4 <xTaskGetSchedulerState>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d001      	beq.n	80057a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057a2:	f003 f901 	bl	80089a8 <xPortSysTickHandler>
  }
}
 80057a6:	bf00      	nop
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	e000e010 	.word	0xe000e010

080057b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80057b4:	2100      	movs	r1, #0
 80057b6:	f06f 0004 	mvn.w	r0, #4
 80057ba:	f7ff ffbf 	bl	800573c <__NVIC_SetPriority>
#endif
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ca:	f3ef 8305 	mrs	r3, IPSR
 80057ce:	603b      	str	r3, [r7, #0]
  return(result);
 80057d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80057d6:	f06f 0305 	mvn.w	r3, #5
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e00c      	b.n	80057f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057de:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <osKernelInitialize+0x44>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <osKernelInitialize+0x44>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	e002      	b.n	80057f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057f8:	687b      	ldr	r3, [r7, #4]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000868 	.word	0x20000868

0800580c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005812:	f3ef 8305 	mrs	r3, IPSR
 8005816:	603b      	str	r3, [r7, #0]
  return(result);
 8005818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <osKernelStart+0x1a>
    stat = osErrorISR;
 800581e:	f06f 0305 	mvn.w	r3, #5
 8005822:	607b      	str	r3, [r7, #4]
 8005824:	e010      	b.n	8005848 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005826:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <osKernelStart+0x48>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d109      	bne.n	8005842 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800582e:	f7ff ffbf 	bl	80057b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005832:	4b08      	ldr	r3, [pc, #32]	@ (8005854 <osKernelStart+0x48>)
 8005834:	2202      	movs	r2, #2
 8005836:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005838:	f001 fd58 	bl	80072ec <vTaskStartScheduler>
      stat = osOK;
 800583c:	2300      	movs	r3, #0
 800583e:	607b      	str	r3, [r7, #4]
 8005840:	e002      	b.n	8005848 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005848:	687b      	ldr	r3, [r7, #4]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000868 	.word	0x20000868

08005858 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b08e      	sub	sp, #56	@ 0x38
 800585c:	af04      	add	r7, sp, #16
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005868:	f3ef 8305 	mrs	r3, IPSR
 800586c:	617b      	str	r3, [r7, #20]
  return(result);
 800586e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005870:	2b00      	cmp	r3, #0
 8005872:	d17e      	bne.n	8005972 <osThreadNew+0x11a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d07b      	beq.n	8005972 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800587e:	2318      	movs	r3, #24
 8005880:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d045      	beq.n	800591e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <osThreadNew+0x48>
        name = attr->name;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <osThreadNew+0x6e>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b38      	cmp	r3, #56	@ 0x38
 80058b8:	d805      	bhi.n	80058c6 <osThreadNew+0x6e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <osThreadNew+0x72>
        return (NULL);
 80058c6:	2300      	movs	r3, #0
 80058c8:	e054      	b.n	8005974 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	089b      	lsrs	r3, r3, #2
 80058d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <osThreadNew+0xa8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80058e8:	d90a      	bls.n	8005900 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <osThreadNew+0xa8>
        mem = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e010      	b.n	8005922 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10c      	bne.n	8005922 <osThreadNew+0xca>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d108      	bne.n	8005922 <osThreadNew+0xca>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <osThreadNew+0xca>
          mem = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e001      	b.n	8005922 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d110      	bne.n	800594a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a3a      	ldr	r2, [r7, #32]
 800593c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 fa6a 	bl	8006e18 <xTaskCreateStatic>
 8005944:	4603      	mov	r3, r0
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	e013      	b.n	8005972 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d110      	bne.n	8005972 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	b29a      	uxth	r2, r3
 8005954:	f107 0310 	add.w	r3, r7, #16
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 fab8 	bl	8006ed8 <xTaskCreate>
 8005968:	4603      	mov	r3, r0
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <osThreadNew+0x11a>
            hTask = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005972:	693b      	ldr	r3, [r7, #16]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	@ 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005984:	f3ef 8305 	mrs	r3, IPSR
 8005988:	60bb      	str	r3, [r7, #8]
  return(result);
 800598a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <osDelay+0x1c>
    stat = osErrorISR;
 8005990:	f06f 0305 	mvn.w	r3, #5
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e007      	b.n	80059a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fbf6 	bl	8007194 <vTaskDelay>
    }
  }

  return (stat);
 80059a8:	68fb      	ldr	r3, [r7, #12]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b08a      	sub	sp, #40	@ 0x28
 80059b6:	af02      	add	r7, sp, #8
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c2:	f3ef 8305 	mrs	r3, IPSR
 80059c6:	613b      	str	r3, [r7, #16]
  return(result);
 80059c8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d175      	bne.n	8005aba <osSemaphoreNew+0x108>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d072      	beq.n	8005aba <osSemaphoreNew+0x108>
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d86e      	bhi.n	8005aba <osSemaphoreNew+0x108>
    mem = -1;
 80059dc:	f04f 33ff 	mov.w	r3, #4294967295
 80059e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <osSemaphoreNew+0x4c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80059f6:	d902      	bls.n	80059fe <osSemaphoreNew+0x4c>
        mem = 1;
 80059f8:	2301      	movs	r3, #1
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	e00c      	b.n	8005a18 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d108      	bne.n	8005a18 <osSemaphoreNew+0x66>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <osSemaphoreNew+0x66>
          mem = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e001      	b.n	8005a18 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d04c      	beq.n	8005aba <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d128      	bne.n	8005a78 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10a      	bne.n	8005a42 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2203      	movs	r2, #3
 8005a32:	9200      	str	r2, [sp, #0]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	2001      	movs	r0, #1
 8005a3a:	f000 fa2b 	bl	8005e94 <xQueueGenericCreateStatic>
 8005a3e:	61f8      	str	r0, [r7, #28]
 8005a40:	e005      	b.n	8005a4e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005a42:	2203      	movs	r2, #3
 8005a44:	2100      	movs	r1, #0
 8005a46:	2001      	movs	r0, #1
 8005a48:	f000 faa1 	bl	8005f8e <xQueueGenericCreate>
 8005a4c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d022      	beq.n	8005a9a <osSemaphoreNew+0xe8>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01f      	beq.n	8005a9a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	69f8      	ldr	r0, [r7, #28]
 8005a62:	f000 fb61 	bl	8006128 <xQueueGenericSend>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d016      	beq.n	8005a9a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005a6c:	69f8      	ldr	r0, [r7, #28]
 8005a6e:	f000 ffff 	bl	8006a70 <vQueueDelete>
            hSemaphore = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	e010      	b.n	8005a9a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d108      	bne.n	8005a90 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	461a      	mov	r2, r3
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fadf 	bl	800604a <xQueueCreateCountingSemaphoreStatic>
 8005a8c:	61f8      	str	r0, [r7, #28]
 8005a8e:	e004      	b.n	8005a9a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a90:	68b9      	ldr	r1, [r7, #8]
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fb12 	bl	80060bc <xQueueCreateCountingSemaphore>
 8005a98:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osSemaphoreNew+0xfc>
          name = attr->name;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e001      	b.n	8005ab2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	69f8      	ldr	r0, [r7, #28]
 8005ab6:	f001 f927 	bl	8006d08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005aba:	69fb      	ldr	r3, [r7, #28]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005adc:	f06f 0303 	mvn.w	r3, #3
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e039      	b.n	8005b58 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ae4:	f3ef 8305 	mrs	r3, IPSR
 8005ae8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aea:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005af6:	f06f 0303 	mvn.w	r3, #3
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e02c      	b.n	8005b58 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b02:	f107 0308 	add.w	r3, r7, #8
 8005b06:	461a      	mov	r2, r3
 8005b08:	2100      	movs	r1, #0
 8005b0a:	6938      	ldr	r0, [r7, #16]
 8005b0c:	f000 ff2e 	bl	800696c <xQueueReceiveFromISR>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e01c      	b.n	8005b58 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d019      	beq.n	8005b58 <osSemaphoreAcquire+0x94>
 8005b24:	4b0f      	ldr	r3, [pc, #60]	@ (8005b64 <osSemaphoreAcquire+0xa0>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	e010      	b.n	8005b58 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6938      	ldr	r0, [r7, #16]
 8005b3a:	f000 fe07 	bl	800674c <xQueueSemaphoreTake>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d009      	beq.n	8005b58 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005b4a:	f06f 0301 	mvn.w	r3, #1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e002      	b.n	8005b58 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005b52:	f06f 0302 	mvn.w	r3, #2
 8005b56:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b58:	697b      	ldr	r3, [r7, #20]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d103      	bne.n	8005b86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005b7e:	f06f 0303 	mvn.w	r3, #3
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e02c      	b.n	8005be0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6938      	ldr	r0, [r7, #16]
 8005b9e:	f000 fc63 	bl	8006468 <xQueueGiveFromISR>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d003      	beq.n	8005bb0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ba8:	f06f 0302 	mvn.w	r3, #2
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e017      	b.n	8005be0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d014      	beq.n	8005be0 <osSemaphoreRelease+0x78>
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <osSemaphoreRelease+0x84>)
 8005bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	e00b      	b.n	8005be0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2100      	movs	r1, #0
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f000 faaa 	bl	8006128 <xQueueGenericSend>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d002      	beq.n	8005be0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005bda:	f06f 0302 	mvn.w	r3, #2
 8005bde:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005be0:	697b      	ldr	r3, [r7, #20]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a07      	ldr	r2, [pc, #28]	@ (8005c1c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4a06      	ldr	r2, [pc, #24]	@ (8005c20 <vApplicationGetIdleTaskMemory+0x30>)
 8005c06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2280      	movs	r2, #128	@ 0x80
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000086c 	.word	0x2000086c
 8005c20:	20000914 	.word	0x20000914

08005c24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a07      	ldr	r2, [pc, #28]	@ (8005c50 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4a06      	ldr	r2, [pc, #24]	@ (8005c54 <vApplicationGetTimerTaskMemory+0x30>)
 8005c3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c42:	601a      	str	r2, [r3, #0]
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	20000b14 	.word	0x20000b14
 8005c54:	20000bbc 	.word	0x20000bbc

08005c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f103 0208 	add.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0208 	add.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d103      	bne.n	8005d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	e00c      	b.n	8005d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e002      	b.n	8005d28 <vListInsert+0x2e>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d2f6      	bcs.n	8005d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d103      	bne.n	8005da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dec:	f002 fd4c 	bl	8008888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	22ff      	movs	r2, #255	@ 0xff
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	22ff      	movs	r2, #255	@ 0xff
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d114      	bne.n	8005e6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01a      	beq.n	8005e80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fcea 	bl	8007828 <xTaskRemoveFromEventList>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <xQueueGenericReset+0xd0>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	e009      	b.n	8005e80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3310      	adds	r3, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fef1 	bl	8005c58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3324      	adds	r3, #36	@ 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff feec 	bl	8005c58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f002 fd34 	bl	80088ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e84:	2301      	movs	r3, #1
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	@ 0x38
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <xQueueGenericCreateStatic+0x56>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <xQueueGenericCreateStatic+0x5a>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericCreateStatic+0x5c>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <xQueueGenericCreateStatic+0x84>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <xQueueGenericCreateStatic+0x88>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <xQueueGenericCreateStatic+0x8a>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	61fb      	str	r3, [r7, #28]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f3a:	2350      	movs	r3, #80	@ 0x50
 8005f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b50      	cmp	r3, #80	@ 0x50
 8005f42:	d00b      	beq.n	8005f5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f840 	bl	8006004 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3730      	adds	r7, #48	@ 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b08a      	sub	sp, #40	@ 0x28
 8005f92:	af02      	add	r7, sp, #8
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <xQueueGenericCreate+0x2c>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	613b      	str	r3, [r7, #16]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3350      	adds	r3, #80	@ 0x50
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f002 fd7f 	bl	8008acc <pvPortMalloc>
 8005fce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d011      	beq.n	8005ffa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3350      	adds	r3, #80	@ 0x50
 8005fde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f805 	bl	8006004 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e002      	b.n	8006026 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006032:	2101      	movs	r1, #1
 8006034:	69b8      	ldr	r0, [r7, #24]
 8006036:	f7ff fec3 	bl	8005dc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800604a:	b580      	push	{r7, lr}
 800604c:	b08a      	sub	sp, #40	@ 0x28
 800604e:	af02      	add	r7, sp, #8
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61bb      	str	r3, [r7, #24]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90b      	bls.n	8006094 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	617b      	str	r3, [r7, #20]
}
 800608e:	bf00      	nop
 8006090:	bf00      	nop
 8006092:	e7fd      	b.n	8006090 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006094:	2302      	movs	r3, #2
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	2100      	movs	r1, #0
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fef8 	bl	8005e94 <xQueueGenericCreateStatic>
 80060a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060b2:	69fb      	ldr	r3, [r7, #28]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d90b      	bls.n	8006104 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006104:	2202      	movs	r2, #2
 8006106:	2100      	movs	r1, #0
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff40 	bl	8005f8e <xQueueGenericCreate>
 800610e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800611c:	697b      	ldr	r3, [r7, #20]
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	@ 0x38
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006136:	2300      	movs	r3, #0
 8006138:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericSend+0x34>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <xQueueGenericSend+0x42>
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <xQueueGenericSend+0x46>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <xQueueGenericSend+0x48>
 800616e:	2300      	movs	r3, #0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <xQueueGenericSend+0x64>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	e7fd      	b.n	8006188 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d103      	bne.n	800619a <xQueueGenericSend+0x72>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <xQueueGenericSend+0x76>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericSend+0x78>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <xQueueGenericSend+0x94>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	623b      	str	r3, [r7, #32]
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061bc:	f001 fcfa 	bl	8007bb4 <xTaskGetSchedulerState>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <xQueueGenericSend+0xa4>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <xQueueGenericSend+0xa8>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <xQueueGenericSend+0xaa>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <xQueueGenericSend+0xc6>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	61fb      	str	r3, [r7, #28]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ee:	f002 fb4b 	bl	8008888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <xQueueGenericSend+0xdc>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d129      	bne.n	8006258 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800620a:	f000 fc6d 	bl	8006ae8 <prvCopyDataToQueue>
 800620e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d010      	beq.n	800623a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621a:	3324      	adds	r3, #36	@ 0x24
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fb03 	bl	8007828 <xTaskRemoveFromEventList>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d013      	beq.n	8006250 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006228:	4b3f      	ldr	r3, [pc, #252]	@ (8006328 <xQueueGenericSend+0x200>)
 800622a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	e00a      	b.n	8006250 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800623a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006240:	4b39      	ldr	r3, [pc, #228]	@ (8006328 <xQueueGenericSend+0x200>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006250:	f002 fb4c 	bl	80088ec <vPortExitCritical>
				return pdPASS;
 8006254:	2301      	movs	r3, #1
 8006256:	e063      	b.n	8006320 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800625e:	f002 fb45 	bl	80088ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006262:	2300      	movs	r3, #0
 8006264:	e05c      	b.n	8006320 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626c:	f107 0314 	add.w	r3, r7, #20
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fb3d 	bl	80078f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800627a:	f002 fb37 	bl	80088ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627e:	f001 f8a5 	bl	80073cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006282:	f002 fb01 	bl	8008888 <vPortEnterCritical>
 8006286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800628c:	b25b      	sxtb	r3, r3
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d103      	bne.n	800629c <xQueueGenericSend+0x174>
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d103      	bne.n	80062b2 <xQueueGenericSend+0x18a>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b2:	f002 fb1b 	bl	80088ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b6:	1d3a      	adds	r2, r7, #4
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	4611      	mov	r1, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fb2c 	bl	800791c <xTaskCheckForTimeOut>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d124      	bne.n	8006314 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062cc:	f000 fd04 	bl	8006cd8 <prvIsQueueFull>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	3310      	adds	r3, #16
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fa50 	bl	8007784 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062e6:	f000 fc8f 	bl	8006c08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062ea:	f001 f87d 	bl	80073e8 <xTaskResumeAll>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f47f af7c 	bne.w	80061ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006328 <xQueueGenericSend+0x200>)
 80062f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	e772      	b.n	80061ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800630a:	f000 fc7d 	bl	8006c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800630e:	f001 f86b 	bl	80073e8 <xTaskResumeAll>
 8006312:	e76c      	b.n	80061ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006316:	f000 fc77 	bl	8006c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800631a:	f001 f865 	bl	80073e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800631e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006320:	4618      	mov	r0, r3
 8006322:	3738      	adds	r7, #56	@ 0x38
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b090      	sub	sp, #64	@ 0x40
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <xQueueGenericSendFromISR+0x3e>
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <xQueueGenericSendFromISR+0x42>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericSendFromISR+0x44>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d103      	bne.n	800639a <xQueueGenericSendFromISR+0x6e>
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <xQueueGenericSendFromISR+0x72>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericSendFromISR+0x74>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063bc:	f002 fb44 	bl	8008a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063c0:	f3ef 8211 	mrs	r2, BASEPRI
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61fa      	str	r2, [r7, #28]
 80063d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d302      	bcc.n	80063ee <xQueueGenericSendFromISR+0xc2>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d12f      	bne.n	800644e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006404:	f000 fb70 	bl	8006ae8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006408:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d112      	bne.n	8006438 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641c:	3324      	adds	r3, #36	@ 0x24
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fa02 	bl	8007828 <xTaskRemoveFromEventList>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e007      	b.n	8006448 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006438:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800643c:	3301      	adds	r3, #1
 800643e:	b2db      	uxtb	r3, r3
 8006440:	b25a      	sxtb	r2, r3
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006448:	2301      	movs	r3, #1
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800644c:	e001      	b.n	8006452 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800644e:	2300      	movs	r3, #0
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006454:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800645c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800645e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006460:	4618      	mov	r0, r3
 8006462:	3740      	adds	r7, #64	@ 0x40
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	@ 0x38
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10b      	bne.n	8006494 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	623b      	str	r3, [r7, #32]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	61fb      	str	r3, [r7, #28]
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	e7fd      	b.n	80064b0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <xQueueGiveFromISR+0x5c>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <xQueueGiveFromISR+0x60>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <xQueueGiveFromISR+0x62>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	61bb      	str	r3, [r7, #24]
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	e7fd      	b.n	80064e2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064e6:	f002 faaf 	bl	8008a48 <vPortValidateInterruptPriority>
	__asm volatile
 80064ea:	f3ef 8211 	mrs	r2, BASEPRI
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	617a      	str	r2, [r7, #20]
 8006500:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006502:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006504:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006512:	429a      	cmp	r2, r3
 8006514:	d22b      	bcs.n	800656e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006528:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d112      	bne.n	8006558 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	3324      	adds	r3, #36	@ 0x24
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f972 	bl	8007828 <xTaskRemoveFromEventList>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e007      	b.n	8006568 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655c:	3301      	adds	r3, #1
 800655e:	b2db      	uxtb	r3, r3
 8006560:	b25a      	sxtb	r2, r3
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	637b      	str	r3, [r7, #52]	@ 0x34
 800656c:	e001      	b.n	8006572 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800656e:	2300      	movs	r3, #0
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
 8006572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006574:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f383 8811 	msr	BASEPRI, r3
}
 800657c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800657e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006580:	4618      	mov	r0, r3
 8006582:	3738      	adds	r7, #56	@ 0x38
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	@ 0x30
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <xQueueReceive+0x32>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	623b      	str	r3, [r7, #32]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <xQueueReceive+0x40>
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <xQueueReceive+0x44>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <xQueueReceive+0x46>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <xQueueReceive+0x62>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	61fb      	str	r3, [r7, #28]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ea:	f001 fae3 	bl	8007bb4 <xTaskGetSchedulerState>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xQueueReceive+0x72>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueReceive+0x76>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueReceive+0x78>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <xQueueReceive+0x94>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61bb      	str	r3, [r7, #24]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800661c:	f002 f934 	bl	8008888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01f      	beq.n	800666c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006630:	f000 fac4 	bl	8006bbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	1e5a      	subs	r2, r3, #1
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00f      	beq.n	8006664 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006646:	3310      	adds	r3, #16
 8006648:	4618      	mov	r0, r3
 800664a:	f001 f8ed 	bl	8007828 <xTaskRemoveFromEventList>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006654:	4b3c      	ldr	r3, [pc, #240]	@ (8006748 <xQueueReceive+0x1c0>)
 8006656:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006664:	f002 f942 	bl	80088ec <vPortExitCritical>
				return pdPASS;
 8006668:	2301      	movs	r3, #1
 800666a:	e069      	b.n	8006740 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006672:	f002 f93b 	bl	80088ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006676:	2300      	movs	r3, #0
 8006678:	e062      	b.n	8006740 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	4618      	mov	r0, r3
 8006686:	f001 f933 	bl	80078f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800668a:	2301      	movs	r3, #1
 800668c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800668e:	f002 f92d 	bl	80088ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006692:	f000 fe9b 	bl	80073cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006696:	f002 f8f7 	bl	8008888 <vPortEnterCritical>
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d103      	bne.n	80066b0 <xQueueReceive+0x128>
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066b6:	b25b      	sxtb	r3, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d103      	bne.n	80066c6 <xQueueReceive+0x13e>
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066c6:	f002 f911 	bl	80088ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ca:	1d3a      	adds	r2, r7, #4
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	4611      	mov	r1, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f922 	bl	800791c <xTaskCheckForTimeOut>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d123      	bne.n	8006726 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e0:	f000 fae4 	bl	8006cac <prvIsQueueEmpty>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d017      	beq.n	800671a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	3324      	adds	r3, #36	@ 0x24
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4611      	mov	r1, r2
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f846 	bl	8007784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fa:	f000 fa85 	bl	8006c08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066fe:	f000 fe73 	bl	80073e8 <xTaskResumeAll>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d189      	bne.n	800661c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006708:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <xQueueReceive+0x1c0>)
 800670a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	e780      	b.n	800661c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800671a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800671c:	f000 fa74 	bl	8006c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006720:	f000 fe62 	bl	80073e8 <xTaskResumeAll>
 8006724:	e77a      	b.n	800661c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006728:	f000 fa6e 	bl	8006c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800672c:	f000 fe5c 	bl	80073e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006732:	f000 fabb 	bl	8006cac <prvIsQueueEmpty>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	f43f af6f 	beq.w	800661c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800673e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006740:	4618      	mov	r0, r3
 8006742:	3730      	adds	r7, #48	@ 0x30
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08e      	sub	sp, #56	@ 0x38
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	623b      	str	r3, [r7, #32]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	61fb      	str	r3, [r7, #28]
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a0:	f001 fa08 	bl	8007bb4 <xTaskGetSchedulerState>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <xQueueSemaphoreTake+0x64>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <xQueueSemaphoreTake+0x68>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <xQueueSemaphoreTake+0x6a>
 80067b4:	2300      	movs	r3, #0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	61bb      	str	r3, [r7, #24]
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	e7fd      	b.n	80067ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d2:	f002 f859 	bl	8008888 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d024      	beq.n	800682c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	1e5a      	subs	r2, r3, #1
 80067e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067f2:	f001 fb59 	bl	8007ea8 <pvTaskIncrementMutexHeldCount>
 80067f6:	4602      	mov	r2, r0
 80067f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00f      	beq.n	8006824 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	3310      	adds	r3, #16
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f80d 	bl	8007828 <xTaskRemoveFromEventList>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006814:	4b54      	ldr	r3, [pc, #336]	@ (8006968 <xQueueSemaphoreTake+0x21c>)
 8006816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006824:	f002 f862 	bl	80088ec <vPortExitCritical>
				return pdPASS;
 8006828:	2301      	movs	r3, #1
 800682a:	e098      	b.n	800695e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d112      	bne.n	8006858 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	617b      	str	r3, [r7, #20]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006850:	f002 f84c 	bl	80088ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006854:	2300      	movs	r3, #0
 8006856:	e082      	b.n	800695e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800685e:	f107 030c 	add.w	r3, r7, #12
 8006862:	4618      	mov	r0, r3
 8006864:	f001 f844 	bl	80078f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686c:	f002 f83e 	bl	80088ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006870:	f000 fdac 	bl	80073cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006874:	f002 f808 	bl	8008888 <vPortEnterCritical>
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800687e:	b25b      	sxtb	r3, r3
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d103      	bne.n	800688e <xQueueSemaphoreTake+0x142>
 8006886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006894:	b25b      	sxtb	r3, r3
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d103      	bne.n	80068a4 <xQueueSemaphoreTake+0x158>
 800689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068a4:	f002 f822 	bl	80088ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a8:	463a      	mov	r2, r7
 80068aa:	f107 030c 	add.w	r3, r7, #12
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f833 	bl	800791c <xTaskCheckForTimeOut>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d132      	bne.n	8006922 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068be:	f000 f9f5 	bl	8006cac <prvIsQueueEmpty>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d026      	beq.n	8006916 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80068d0:	f001 ffda 	bl	8008888 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f989 	bl	8007bf0 <xTaskPriorityInherit>
 80068de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80068e0:	f002 f804 	bl	80088ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e6:	3324      	adds	r3, #36	@ 0x24
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 ff49 	bl	8007784 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80068f4:	f000 f988 	bl	8006c08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068f8:	f000 fd76 	bl	80073e8 <xTaskResumeAll>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f47f af67 	bne.w	80067d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006904:	4b18      	ldr	r3, [pc, #96]	@ (8006968 <xQueueSemaphoreTake+0x21c>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	e75d      	b.n	80067d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006916:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006918:	f000 f976 	bl	8006c08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800691c:	f000 fd64 	bl	80073e8 <xTaskResumeAll>
 8006920:	e757      	b.n	80067d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006922:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006924:	f000 f970 	bl	8006c08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006928:	f000 fd5e 	bl	80073e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800692c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800692e:	f000 f9bd 	bl	8006cac <prvIsQueueEmpty>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	f43f af4c 	beq.w	80067d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006940:	f001 ffa2 	bl	8008888 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006946:	f000 f8b7 	bl	8006ab8 <prvGetDisinheritPriorityAfterTimeout>
 800694a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fa24 	bl	8007da0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006958:	f001 ffc8 	bl	80088ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800695c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800695e:	4618      	mov	r0, r3
 8006960:	3738      	adds	r7, #56	@ 0x38
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	@ 0x38
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	623b      	str	r3, [r7, #32]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <xQueueReceiveFromISR+0x3c>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <xQueueReceiveFromISR+0x40>
 80069a8:	2301      	movs	r3, #1
 80069aa:	e000      	b.n	80069ae <xQueueReceiveFromISR+0x42>
 80069ac:	2300      	movs	r3, #0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	61fb      	str	r3, [r7, #28]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ca:	f002 f83d 	bl	8008a48 <vPortValidateInterruptPriority>
	__asm volatile
 80069ce:	f3ef 8211 	mrs	r2, BASEPRI
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	61ba      	str	r2, [r7, #24]
 80069e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d02f      	beq.n	8006a56 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a04:	f000 f8da 	bl	8006bbc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a18:	d112      	bne.n	8006a40 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	3310      	adds	r3, #16
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fefe 	bl	8007828 <xTaskRemoveFromEventList>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e007      	b.n	8006a50 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a44:	3301      	adds	r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	b25a      	sxtb	r2, r3
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a54:	e001      	b.n	8006a5a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f383 8811 	msr	BASEPRI, r3
}
 8006a64:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3738      	adds	r7, #56	@ 0x38
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <vQueueDelete+0x2a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	60bb      	str	r3, [r7, #8]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f95e 	bl	8006d5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d102      	bne.n	8006ab0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f002 f8dc 	bl	8008c68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e001      	b.n	8006ada <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ada:	68fb      	ldr	r3, [r7, #12]
	}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10d      	bne.n	8006b22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d14d      	bne.n	8006baa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 f8d4 	bl	8007cc0 <xTaskPriorityDisinherit>
 8006b18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	609a      	str	r2, [r3, #8]
 8006b20:	e043      	b.n	8006baa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d119      	bne.n	8006b5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6858      	ldr	r0, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b30:	461a      	mov	r2, r3
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	f003 f80d 	bl	8009b52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d32b      	bcc.n	8006baa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	e026      	b.n	8006baa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68d8      	ldr	r0, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	461a      	mov	r2, r3
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	f002 fff3 	bl	8009b52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	425b      	negs	r3, r3
 8006b76:	441a      	add	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d207      	bcs.n	8006b98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b90:	425b      	negs	r3, r3
 8006b92:	441a      	add	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d105      	bne.n	8006baa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006bb2:	697b      	ldr	r3, [r7, #20]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d018      	beq.n	8006c00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d303      	bcc.n	8006bf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68d9      	ldr	r1, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6838      	ldr	r0, [r7, #0]
 8006bfc:	f002 ffa9 	bl	8009b52 <memcpy>
	}
}
 8006c00:	bf00      	nop
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c10:	f001 fe3a 	bl	8008888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c1c:	e011      	b.n	8006c42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d012      	beq.n	8006c4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3324      	adds	r3, #36	@ 0x24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fdfc 	bl	8007828 <xTaskRemoveFromEventList>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c36:	f000 fed5 	bl	80079e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dce9      	bgt.n	8006c1e <prvUnlockQueue+0x16>
 8006c4a:	e000      	b.n	8006c4e <prvUnlockQueue+0x46>
					break;
 8006c4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	22ff      	movs	r2, #255	@ 0xff
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c56:	f001 fe49 	bl	80088ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c5a:	f001 fe15 	bl	8008888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c66:	e011      	b.n	8006c8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d012      	beq.n	8006c96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3310      	adds	r3, #16
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 fdd7 	bl	8007828 <xTaskRemoveFromEventList>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c80:	f000 feb0 	bl	80079e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dce9      	bgt.n	8006c68 <prvUnlockQueue+0x60>
 8006c94:	e000      	b.n	8006c98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	22ff      	movs	r2, #255	@ 0xff
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ca0:	f001 fe24 	bl	80088ec <vPortExitCritical>
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cb4:	f001 fde8 	bl	8008888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e001      	b.n	8006cca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cca:	f001 fe0f 	bl	80088ec <vPortExitCritical>

	return xReturn;
 8006cce:	68fb      	ldr	r3, [r7, #12]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce0:	f001 fdd2 	bl	8008888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d102      	bne.n	8006cf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e001      	b.n	8006cfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cfa:	f001 fdf7 	bl	80088ec <vPortExitCritical>

	return xReturn;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e014      	b.n	8006d42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d18:	4a0f      	ldr	r2, [pc, #60]	@ (8006d58 <vQueueAddToRegistry+0x50>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10b      	bne.n	8006d3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d24:	490c      	ldr	r1, [pc, #48]	@ (8006d58 <vQueueAddToRegistry+0x50>)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <vQueueAddToRegistry+0x50>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	4413      	add	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d3a:	e006      	b.n	8006d4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b07      	cmp	r3, #7
 8006d46:	d9e7      	bls.n	8006d18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000fbc 	.word	0x20000fbc

08006d5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e016      	b.n	8006d98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d6a:	4a10      	ldr	r2, [pc, #64]	@ (8006dac <vQueueUnregisterQueue+0x50>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	4413      	add	r3, r2
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d10b      	bne.n	8006d92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dac <vQueueUnregisterQueue+0x50>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d84:	4a09      	ldr	r2, [pc, #36]	@ (8006dac <vQueueUnregisterQueue+0x50>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	605a      	str	r2, [r3, #4]
				break;
 8006d90:	e006      	b.n	8006da0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b07      	cmp	r3, #7
 8006d9c:	d9e5      	bls.n	8006d6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	20000fbc 	.word	0x20000fbc

08006db0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dc0:	f001 fd62 	bl	8008888 <vPortEnterCritical>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dca:	b25b      	sxtb	r3, r3
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d103      	bne.n	8006dda <vQueueWaitForMessageRestricted+0x2a>
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d103      	bne.n	8006df0 <vQueueWaitForMessageRestricted+0x40>
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006df0:	f001 fd7c 	bl	80088ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3324      	adds	r3, #36	@ 0x24
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fce3 	bl	80077d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e0a:	6978      	ldr	r0, [r7, #20]
 8006e0c:	f7ff fefc 	bl	8006c08 <prvUnlockQueue>
	}
 8006e10:	bf00      	nop
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	@ 0x38
 8006e1c:	af04      	add	r7, sp, #16
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	623b      	str	r3, [r7, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	61fb      	str	r3, [r7, #28]
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	e7fd      	b.n	8006e5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e62:	23a8      	movs	r3, #168	@ 0xa8
 8006e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2ba8      	cmp	r3, #168	@ 0xa8
 8006e6a:	d00b      	beq.n	8006e84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61bb      	str	r3, [r7, #24]
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01e      	beq.n	8006eca <xTaskCreateStatic+0xb2>
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01b      	beq.n	8006eca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f851 	bl	8006f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ec4:	f000 f8f6 	bl	80070b4 <prvAddNewTaskToReadyList>
 8006ec8:	e001      	b.n	8006ece <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ece:	697b      	ldr	r3, [r7, #20]
	}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3728      	adds	r7, #40	@ 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08c      	sub	sp, #48	@ 0x30
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fded 	bl	8008acc <pvPortMalloc>
 8006ef2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006efa:	20a8      	movs	r0, #168	@ 0xa8
 8006efc:	f001 fde6 	bl	8008acc <pvPortMalloc>
 8006f00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f0e:	e005      	b.n	8006f1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f10:	6978      	ldr	r0, [r7, #20]
 8006f12:	f001 fea9 	bl	8008c68 <vPortFree>
 8006f16:	e001      	b.n	8006f1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d017      	beq.n	8006f52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	9302      	str	r3, [sp, #8]
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f80f 	bl	8006f64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f46:	69f8      	ldr	r0, [r7, #28]
 8006f48:	f000 f8b4 	bl	80070b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e002      	b.n	8006f58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f58:	69bb      	ldr	r3, [r7, #24]
	}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	21a5      	movs	r1, #165	@ 0xa5
 8006f7e:	f002 fd12 	bl	80099a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	f023 0307 	bic.w	r3, r3, #7
 8006f9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	617b      	str	r3, [r7, #20]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01f      	beq.n	8007004 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e012      	b.n	8006ff0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	7819      	ldrb	r1, [r3, #0]
 8006fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3334      	adds	r3, #52	@ 0x34
 8006fda:	460a      	mov	r2, r1
 8006fdc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	3301      	adds	r3, #1
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b0f      	cmp	r3, #15
 8006ff4:	d9e9      	bls.n	8006fca <prvInitialiseNewTask+0x66>
 8006ff6:	e000      	b.n	8006ffa <prvInitialiseNewTask+0x96>
			{
				break;
 8006ff8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007002:	e003      	b.n	800700c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	2b37      	cmp	r3, #55	@ 0x37
 8007010:	d901      	bls.n	8007016 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007012:	2337      	movs	r3, #55	@ 0x37
 8007014:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800701a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007020:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	2200      	movs	r2, #0
 8007026:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	3304      	adds	r3, #4
 800702c:	4618      	mov	r0, r3
 800702e:	f7fe fe33 	bl	8005c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	3318      	adds	r3, #24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe2e 	bl	8005c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800703c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007040:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007044:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007050:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2200      	movs	r2, #0
 800705e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	3354      	adds	r3, #84	@ 0x54
 8007066:	224c      	movs	r2, #76	@ 0x4c
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f002 fc9b 	bl	80099a6 <memset>
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	4a0d      	ldr	r2, [pc, #52]	@ (80070a8 <prvInitialiseNewTask+0x144>)
 8007074:	659a      	str	r2, [r3, #88]	@ 0x58
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	4a0c      	ldr	r2, [pc, #48]	@ (80070ac <prvInitialiseNewTask+0x148>)
 800707a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800707c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707e:	4a0c      	ldr	r2, [pc, #48]	@ (80070b0 <prvInitialiseNewTask+0x14c>)
 8007080:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	68f9      	ldr	r1, [r7, #12]
 8007086:	69b8      	ldr	r0, [r7, #24]
 8007088:	f001 fad0 	bl	800862c <pxPortInitialiseStack>
 800708c:	4602      	mov	r2, r0
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800709e:	bf00      	nop
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200127c0 	.word	0x200127c0
 80070ac:	20012828 	.word	0x20012828
 80070b0:	20012890 	.word	0x20012890

080070b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070bc:	f001 fbe4 	bl	8008888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007178 <prvAddNewTaskToReadyList+0xc4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007178 <prvAddNewTaskToReadyList+0xc4>)
 80070c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070ca:	4b2c      	ldr	r3, [pc, #176]	@ (800717c <prvAddNewTaskToReadyList+0xc8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070d2:	4a2a      	ldr	r2, [pc, #168]	@ (800717c <prvAddNewTaskToReadyList+0xc8>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070d8:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <prvAddNewTaskToReadyList+0xc4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d110      	bne.n	8007102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070e0:	f000 fca4 	bl	8007a2c <prvInitialiseTaskLists>
 80070e4:	e00d      	b.n	8007102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070e6:	4b26      	ldr	r3, [pc, #152]	@ (8007180 <prvAddNewTaskToReadyList+0xcc>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070ee:	4b23      	ldr	r3, [pc, #140]	@ (800717c <prvAddNewTaskToReadyList+0xc8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d802      	bhi.n	8007102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80070fc:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <prvAddNewTaskToReadyList+0xc8>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007102:	4b20      	ldr	r3, [pc, #128]	@ (8007184 <prvAddNewTaskToReadyList+0xd0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a1e      	ldr	r2, [pc, #120]	@ (8007184 <prvAddNewTaskToReadyList+0xd0>)
 800710a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800710c:	4b1d      	ldr	r3, [pc, #116]	@ (8007184 <prvAddNewTaskToReadyList+0xd0>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007118:	4b1b      	ldr	r3, [pc, #108]	@ (8007188 <prvAddNewTaskToReadyList+0xd4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d903      	bls.n	8007128 <prvAddNewTaskToReadyList+0x74>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007124:	4a18      	ldr	r2, [pc, #96]	@ (8007188 <prvAddNewTaskToReadyList+0xd4>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a15      	ldr	r2, [pc, #84]	@ (800718c <prvAddNewTaskToReadyList+0xd8>)
 8007136:	441a      	add	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7fe fdb7 	bl	8005cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007144:	f001 fbd2 	bl	80088ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007148:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <prvAddNewTaskToReadyList+0xcc>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00e      	beq.n	800716e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007150:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <prvAddNewTaskToReadyList+0xc8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715a:	429a      	cmp	r2, r3
 800715c:	d207      	bcs.n	800716e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800715e:	4b0c      	ldr	r3, [pc, #48]	@ (8007190 <prvAddNewTaskToReadyList+0xdc>)
 8007160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	200014d0 	.word	0x200014d0
 800717c:	20000ffc 	.word	0x20000ffc
 8007180:	200014dc 	.word	0x200014dc
 8007184:	200014ec 	.word	0x200014ec
 8007188:	200014d8 	.word	0x200014d8
 800718c:	20001000 	.word	0x20001000
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d018      	beq.n	80071d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071a6:	4b14      	ldr	r3, [pc, #80]	@ (80071f8 <vTaskDelay+0x64>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <vTaskDelay+0x32>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60bb      	str	r3, [r7, #8]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80071c6:	f000 f901 	bl	80073cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071ca:	2100      	movs	r1, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fe7f 	bl	8007ed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071d2:	f000 f909 	bl	80073e8 <xTaskResumeAll>
 80071d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d107      	bne.n	80071ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80071de:	4b07      	ldr	r3, [pc, #28]	@ (80071fc <vTaskDelay+0x68>)
 80071e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200014f8 	.word	0x200014f8
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007208:	f001 fb3e 	bl	8008888 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d102      	bne.n	8007218 <vTaskSuspend+0x18>
 8007212:	4b30      	ldr	r3, [pc, #192]	@ (80072d4 <vTaskSuspend+0xd4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	e000      	b.n	800721a <vTaskSuspend+0x1a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3304      	adds	r3, #4
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe fda3 	bl	8005d6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3318      	adds	r3, #24
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fd9a 	bl	8005d6c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4826      	ldr	r0, [pc, #152]	@ (80072d8 <vTaskSuspend+0xd8>)
 8007240:	f7fe fd37 	bl	8005cb2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	d103      	bne.n	8007258 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007258:	f001 fb48 	bl	80088ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800725c:	4b1f      	ldr	r3, [pc, #124]	@ (80072dc <vTaskSuspend+0xdc>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007264:	f001 fb10 	bl	8008888 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007268:	f000 fc84 	bl	8007b74 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800726c:	f001 fb3e 	bl	80088ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007270:	4b18      	ldr	r3, [pc, #96]	@ (80072d4 <vTaskSuspend+0xd4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d128      	bne.n	80072cc <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800727a:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <vTaskSuspend+0xdc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d018      	beq.n	80072b4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007282:	4b17      	ldr	r3, [pc, #92]	@ (80072e0 <vTaskSuspend+0xe0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <vTaskSuspend+0xa2>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80072a2:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <vTaskSuspend+0xe4>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072b2:	e00b      	b.n	80072cc <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80072b4:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <vTaskSuspend+0xd8>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <vTaskSuspend+0xe8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d103      	bne.n	80072c8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80072c0:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <vTaskSuspend+0xd4>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
	}
 80072c6:	e001      	b.n	80072cc <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80072c8:	f000 f9f6 	bl	80076b8 <vTaskSwitchContext>
	}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000ffc 	.word	0x20000ffc
 80072d8:	200014bc 	.word	0x200014bc
 80072dc:	200014dc 	.word	0x200014dc
 80072e0:	200014f8 	.word	0x200014f8
 80072e4:	e000ed04 	.word	0xe000ed04
 80072e8:	200014d0 	.word	0x200014d0

080072ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	@ 0x28
 80072f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072fa:	463a      	mov	r2, r7
 80072fc:	1d39      	adds	r1, r7, #4
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fc74 	bl	8005bf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	9202      	str	r2, [sp, #8]
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	2300      	movs	r3, #0
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	460a      	mov	r2, r1
 800731a:	4924      	ldr	r1, [pc, #144]	@ (80073ac <vTaskStartScheduler+0xc0>)
 800731c:	4824      	ldr	r0, [pc, #144]	@ (80073b0 <vTaskStartScheduler+0xc4>)
 800731e:	f7ff fd7b 	bl	8006e18 <xTaskCreateStatic>
 8007322:	4603      	mov	r3, r0
 8007324:	4a23      	ldr	r2, [pc, #140]	@ (80073b4 <vTaskStartScheduler+0xc8>)
 8007326:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007328:	4b22      	ldr	r3, [pc, #136]	@ (80073b4 <vTaskStartScheduler+0xc8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007330:	2301      	movs	r3, #1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e001      	b.n	800733a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007340:	f000 fe1a 	bl	8007f78 <xTimerCreateTimerTask>
 8007344:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d11b      	bne.n	8007384 <vTaskStartScheduler+0x98>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	613b      	str	r3, [r7, #16]
}
 800735e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007360:	4b15      	ldr	r3, [pc, #84]	@ (80073b8 <vTaskStartScheduler+0xcc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3354      	adds	r3, #84	@ 0x54
 8007366:	4a15      	ldr	r2, [pc, #84]	@ (80073bc <vTaskStartScheduler+0xd0>)
 8007368:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800736a:	4b15      	ldr	r3, [pc, #84]	@ (80073c0 <vTaskStartScheduler+0xd4>)
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vTaskStartScheduler+0xd8>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007378:	4b13      	ldr	r3, [pc, #76]	@ (80073c8 <vTaskStartScheduler+0xdc>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800737e:	f001 f9df 	bl	8008740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007382:	e00f      	b.n	80073a4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d10b      	bne.n	80073a4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60fb      	str	r3, [r7, #12]
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	e7fd      	b.n	80073a0 <vTaskStartScheduler+0xb4>
}
 80073a4:	bf00      	nop
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	0800c264 	.word	0x0800c264
 80073b0:	080079fd 	.word	0x080079fd
 80073b4:	200014f4 	.word	0x200014f4
 80073b8:	20000ffc 	.word	0x20000ffc
 80073bc:	2000002c 	.word	0x2000002c
 80073c0:	200014f0 	.word	0x200014f0
 80073c4:	200014dc 	.word	0x200014dc
 80073c8:	200014d4 	.word	0x200014d4

080073cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073d0:	4b04      	ldr	r3, [pc, #16]	@ (80073e4 <vTaskSuspendAll+0x18>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3301      	adds	r3, #1
 80073d6:	4a03      	ldr	r2, [pc, #12]	@ (80073e4 <vTaskSuspendAll+0x18>)
 80073d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	200014f8 	.word	0x200014f8

080073e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073f6:	4b42      	ldr	r3, [pc, #264]	@ (8007500 <xTaskResumeAll+0x118>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <xTaskResumeAll+0x2e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007416:	f001 fa37 	bl	8008888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800741a:	4b39      	ldr	r3, [pc, #228]	@ (8007500 <xTaskResumeAll+0x118>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3b01      	subs	r3, #1
 8007420:	4a37      	ldr	r2, [pc, #220]	@ (8007500 <xTaskResumeAll+0x118>)
 8007422:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007424:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <xTaskResumeAll+0x118>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d162      	bne.n	80074f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800742c:	4b35      	ldr	r3, [pc, #212]	@ (8007504 <xTaskResumeAll+0x11c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d05e      	beq.n	80074f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007434:	e02f      	b.n	8007496 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007436:	4b34      	ldr	r3, [pc, #208]	@ (8007508 <xTaskResumeAll+0x120>)
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3318      	adds	r3, #24
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fc92 	bl	8005d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fc8d 	bl	8005d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007456:	4b2d      	ldr	r3, [pc, #180]	@ (800750c <xTaskResumeAll+0x124>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d903      	bls.n	8007466 <xTaskResumeAll+0x7e>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4a2a      	ldr	r2, [pc, #168]	@ (800750c <xTaskResumeAll+0x124>)
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a27      	ldr	r2, [pc, #156]	@ (8007510 <xTaskResumeAll+0x128>)
 8007474:	441a      	add	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fe fc18 	bl	8005cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4b23      	ldr	r3, [pc, #140]	@ (8007514 <xTaskResumeAll+0x12c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	429a      	cmp	r2, r3
 800748e:	d302      	bcc.n	8007496 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007490:	4b21      	ldr	r3, [pc, #132]	@ (8007518 <xTaskResumeAll+0x130>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007496:	4b1c      	ldr	r3, [pc, #112]	@ (8007508 <xTaskResumeAll+0x120>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1cb      	bne.n	8007436 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074a4:	f000 fb66 	bl	8007b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074a8:	4b1c      	ldr	r3, [pc, #112]	@ (800751c <xTaskResumeAll+0x134>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d010      	beq.n	80074d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074b4:	f000 f846 	bl	8007544 <xTaskIncrementTick>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80074be:	4b16      	ldr	r3, [pc, #88]	@ (8007518 <xTaskResumeAll+0x130>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1f1      	bne.n	80074b4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80074d0:	4b12      	ldr	r3, [pc, #72]	@ (800751c <xTaskResumeAll+0x134>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074d6:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <xTaskResumeAll+0x130>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074de:	2301      	movs	r3, #1
 80074e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007520 <xTaskResumeAll+0x138>)
 80074e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f001 f9fb 	bl	80088ec <vPortExitCritical>

	return xAlreadyYielded;
 80074f6:	68bb      	ldr	r3, [r7, #8]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	200014f8 	.word	0x200014f8
 8007504:	200014d0 	.word	0x200014d0
 8007508:	20001490 	.word	0x20001490
 800750c:	200014d8 	.word	0x200014d8
 8007510:	20001000 	.word	0x20001000
 8007514:	20000ffc 	.word	0x20000ffc
 8007518:	200014e4 	.word	0x200014e4
 800751c:	200014e0 	.word	0x200014e0
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800752a:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <xTaskGetTickCount+0x1c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007530:	687b      	ldr	r3, [r7, #4]
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	200014d4 	.word	0x200014d4

08007544 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800754e:	4b4f      	ldr	r3, [pc, #316]	@ (800768c <xTaskIncrementTick+0x148>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f040 8090 	bne.w	8007678 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007558:	4b4d      	ldr	r3, [pc, #308]	@ (8007690 <xTaskIncrementTick+0x14c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007560:	4a4b      	ldr	r2, [pc, #300]	@ (8007690 <xTaskIncrementTick+0x14c>)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d121      	bne.n	80075b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800756c:	4b49      	ldr	r3, [pc, #292]	@ (8007694 <xTaskIncrementTick+0x150>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00b      	beq.n	800758e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	603b      	str	r3, [r7, #0]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xTaskIncrementTick+0x46>
 800758e:	4b41      	ldr	r3, [pc, #260]	@ (8007694 <xTaskIncrementTick+0x150>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	4b40      	ldr	r3, [pc, #256]	@ (8007698 <xTaskIncrementTick+0x154>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3e      	ldr	r2, [pc, #248]	@ (8007694 <xTaskIncrementTick+0x150>)
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4a3e      	ldr	r2, [pc, #248]	@ (8007698 <xTaskIncrementTick+0x154>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6013      	str	r3, [r2, #0]
 80075a2:	4b3e      	ldr	r3, [pc, #248]	@ (800769c <xTaskIncrementTick+0x158>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	4a3c      	ldr	r2, [pc, #240]	@ (800769c <xTaskIncrementTick+0x158>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	f000 fae2 	bl	8007b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075b0:	4b3b      	ldr	r3, [pc, #236]	@ (80076a0 <xTaskIncrementTick+0x15c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d349      	bcc.n	800764e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ba:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <xTaskIncrementTick+0x150>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c4:	4b36      	ldr	r3, [pc, #216]	@ (80076a0 <xTaskIncrementTick+0x15c>)
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	601a      	str	r2, [r3, #0]
					break;
 80075cc:	e03f      	b.n	800764e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ce:	4b31      	ldr	r3, [pc, #196]	@ (8007694 <xTaskIncrementTick+0x150>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d203      	bcs.n	80075ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075e6:	4a2e      	ldr	r2, [pc, #184]	@ (80076a0 <xTaskIncrementTick+0x15c>)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075ec:	e02f      	b.n	800764e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fbba 	bl	8005d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d004      	beq.n	800760a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3318      	adds	r3, #24
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fbb1 	bl	8005d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760e:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <xTaskIncrementTick+0x160>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d903      	bls.n	800761e <xTaskIncrementTick+0xda>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	4a22      	ldr	r2, [pc, #136]	@ (80076a4 <xTaskIncrementTick+0x160>)
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4a1f      	ldr	r2, [pc, #124]	@ (80076a8 <xTaskIncrementTick+0x164>)
 800762c:	441a      	add	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7fe fb3c 	bl	8005cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <xTaskIncrementTick+0x168>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	429a      	cmp	r2, r3
 8007646:	d3b8      	bcc.n	80075ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764c:	e7b5      	b.n	80075ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800764e:	4b17      	ldr	r3, [pc, #92]	@ (80076ac <xTaskIncrementTick+0x168>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007654:	4914      	ldr	r1, [pc, #80]	@ (80076a8 <xTaskIncrementTick+0x164>)
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	440b      	add	r3, r1
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d901      	bls.n	800766a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007666:	2301      	movs	r3, #1
 8007668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800766a:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <xTaskIncrementTick+0x16c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007672:	2301      	movs	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e004      	b.n	8007682 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007678:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <xTaskIncrementTick+0x170>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	4a0d      	ldr	r2, [pc, #52]	@ (80076b4 <xTaskIncrementTick+0x170>)
 8007680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007682:	697b      	ldr	r3, [r7, #20]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200014f8 	.word	0x200014f8
 8007690:	200014d4 	.word	0x200014d4
 8007694:	20001488 	.word	0x20001488
 8007698:	2000148c 	.word	0x2000148c
 800769c:	200014e8 	.word	0x200014e8
 80076a0:	200014f0 	.word	0x200014f0
 80076a4:	200014d8 	.word	0x200014d8
 80076a8:	20001000 	.word	0x20001000
 80076ac:	20000ffc 	.word	0x20000ffc
 80076b0:	200014e4 	.word	0x200014e4
 80076b4:	200014e0 	.word	0x200014e0

080076b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076be:	4b2b      	ldr	r3, [pc, #172]	@ (800776c <vTaskSwitchContext+0xb4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007770 <vTaskSwitchContext+0xb8>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076cc:	e047      	b.n	800775e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80076ce:	4b28      	ldr	r3, [pc, #160]	@ (8007770 <vTaskSwitchContext+0xb8>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d4:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <vTaskSwitchContext+0xbc>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	e011      	b.n	8007700 <vTaskSwitchContext+0x48>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <vTaskSwitchContext+0x42>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	607b      	str	r3, [r7, #4]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <vTaskSwitchContext+0x3e>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	491d      	ldr	r1, [pc, #116]	@ (8007778 <vTaskSwitchContext+0xc0>)
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0e3      	beq.n	80076dc <vTaskSwitchContext+0x24>
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4a16      	ldr	r2, [pc, #88]	@ (8007778 <vTaskSwitchContext+0xc0>)
 8007720:	4413      	add	r3, r2
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	3308      	adds	r3, #8
 8007736:	429a      	cmp	r2, r3
 8007738:	d104      	bne.n	8007744 <vTaskSwitchContext+0x8c>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	605a      	str	r2, [r3, #4]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	4a0c      	ldr	r2, [pc, #48]	@ (800777c <vTaskSwitchContext+0xc4>)
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <vTaskSwitchContext+0xbc>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007754:	4b09      	ldr	r3, [pc, #36]	@ (800777c <vTaskSwitchContext+0xc4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3354      	adds	r3, #84	@ 0x54
 800775a:	4a09      	ldr	r2, [pc, #36]	@ (8007780 <vTaskSwitchContext+0xc8>)
 800775c:	6013      	str	r3, [r2, #0]
}
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	200014f8 	.word	0x200014f8
 8007770:	200014e4 	.word	0x200014e4
 8007774:	200014d8 	.word	0x200014d8
 8007778:	20001000 	.word	0x20001000
 800777c:	20000ffc 	.word	0x20000ffc
 8007780:	2000002c 	.word	0x2000002c

08007784 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077ac:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <vTaskPlaceOnEventList+0x48>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3318      	adds	r3, #24
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fe faa0 	bl	8005cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077ba:	2101      	movs	r1, #1
 80077bc:	6838      	ldr	r0, [r7, #0]
 80077be:	f000 fb87 	bl	8007ed0 <prvAddCurrentTaskToDelayedList>
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000ffc 	.word	0x20000ffc

080077d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	617b      	str	r3, [r7, #20]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007824 <vTaskPlaceOnEventListRestricted+0x54>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3318      	adds	r3, #24
 8007800:	4619      	mov	r1, r3
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7fe fa55 	bl	8005cb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	68b8      	ldr	r0, [r7, #8]
 8007818:	f000 fb5a 	bl	8007ed0 <prvAddCurrentTaskToDelayedList>
	}
 800781c:	bf00      	nop
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000ffc 	.word	0x20000ffc

08007828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	60fb      	str	r3, [r7, #12]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	3318      	adds	r3, #24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fa86 	bl	8005d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007860:	4b1d      	ldr	r3, [pc, #116]	@ (80078d8 <xTaskRemoveFromEventList+0xb0>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11d      	bne.n	80078a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fa7d 	bl	8005d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007876:	4b19      	ldr	r3, [pc, #100]	@ (80078dc <xTaskRemoveFromEventList+0xb4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d903      	bls.n	8007886 <xTaskRemoveFromEventList+0x5e>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	4a16      	ldr	r2, [pc, #88]	@ (80078dc <xTaskRemoveFromEventList+0xb4>)
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a13      	ldr	r2, [pc, #76]	@ (80078e0 <xTaskRemoveFromEventList+0xb8>)
 8007894:	441a      	add	r2, r3
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	3304      	adds	r3, #4
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7fe fa08 	bl	8005cb2 <vListInsertEnd>
 80078a2:	e005      	b.n	80078b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3318      	adds	r3, #24
 80078a8:	4619      	mov	r1, r3
 80078aa:	480e      	ldr	r0, [pc, #56]	@ (80078e4 <xTaskRemoveFromEventList+0xbc>)
 80078ac:	f7fe fa01 	bl	8005cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	4b0c      	ldr	r3, [pc, #48]	@ (80078e8 <xTaskRemoveFromEventList+0xc0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d905      	bls.n	80078ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078be:	2301      	movs	r3, #1
 80078c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078c2:	4b0a      	ldr	r3, [pc, #40]	@ (80078ec <xTaskRemoveFromEventList+0xc4>)
 80078c4:	2201      	movs	r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	e001      	b.n	80078ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078ce:	697b      	ldr	r3, [r7, #20]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200014f8 	.word	0x200014f8
 80078dc:	200014d8 	.word	0x200014d8
 80078e0:	20001000 	.word	0x20001000
 80078e4:	20001490 	.word	0x20001490
 80078e8:	20000ffc 	.word	0x20000ffc
 80078ec:	200014e4 	.word	0x200014e4

080078f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078f8:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <vTaskInternalSetTimeOutState+0x24>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <vTaskInternalSetTimeOutState+0x28>)
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	200014e8 	.word	0x200014e8
 8007918:	200014d4 	.word	0x200014d4

0800791c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	613b      	str	r3, [r7, #16]
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	e7fd      	b.n	8007940 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60fb      	str	r3, [r7, #12]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007962:	f000 ff91 	bl	8008888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007966:	4b1d      	ldr	r3, [pc, #116]	@ (80079dc <xTaskCheckForTimeOut+0xc0>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d102      	bne.n	8007986 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007980:	2300      	movs	r3, #0
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	e023      	b.n	80079ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b15      	ldr	r3, [pc, #84]	@ (80079e0 <xTaskCheckForTimeOut+0xc4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d007      	beq.n	80079a2 <xTaskCheckForTimeOut+0x86>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	429a      	cmp	r2, r3
 800799a:	d302      	bcc.n	80079a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e015      	b.n	80079ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d20b      	bcs.n	80079c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff99 	bl	80078f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079be:	2300      	movs	r3, #0
 80079c0:	61fb      	str	r3, [r7, #28]
 80079c2:	e004      	b.n	80079ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079ce:	f000 ff8d 	bl	80088ec <vPortExitCritical>

	return xReturn;
 80079d2:	69fb      	ldr	r3, [r7, #28]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	200014d4 	.word	0x200014d4
 80079e0:	200014e8 	.word	0x200014e8

080079e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079e8:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <vTaskMissedYield+0x14>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
}
 80079ee:	bf00      	nop
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	200014e4 	.word	0x200014e4

080079fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a04:	f000 f852 	bl	8007aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <prvIdleTask+0x28>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d9f9      	bls.n	8007a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a10:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <prvIdleTask+0x2c>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a20:	e7f0      	b.n	8007a04 <prvIdleTask+0x8>
 8007a22:	bf00      	nop
 8007a24:	20001000 	.word	0x20001000
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	e00c      	b.n	8007a52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4a12      	ldr	r2, [pc, #72]	@ (8007a8c <prvInitialiseTaskLists+0x60>)
 8007a44:	4413      	add	r3, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe f906 	bl	8005c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	607b      	str	r3, [r7, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b37      	cmp	r3, #55	@ 0x37
 8007a56:	d9ef      	bls.n	8007a38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a58:	480d      	ldr	r0, [pc, #52]	@ (8007a90 <prvInitialiseTaskLists+0x64>)
 8007a5a:	f7fe f8fd 	bl	8005c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a5e:	480d      	ldr	r0, [pc, #52]	@ (8007a94 <prvInitialiseTaskLists+0x68>)
 8007a60:	f7fe f8fa 	bl	8005c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a64:	480c      	ldr	r0, [pc, #48]	@ (8007a98 <prvInitialiseTaskLists+0x6c>)
 8007a66:	f7fe f8f7 	bl	8005c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a6a:	480c      	ldr	r0, [pc, #48]	@ (8007a9c <prvInitialiseTaskLists+0x70>)
 8007a6c:	f7fe f8f4 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a70:	480b      	ldr	r0, [pc, #44]	@ (8007aa0 <prvInitialiseTaskLists+0x74>)
 8007a72:	f7fe f8f1 	bl	8005c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a76:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <prvInitialiseTaskLists+0x78>)
 8007a78:	4a05      	ldr	r2, [pc, #20]	@ (8007a90 <prvInitialiseTaskLists+0x64>)
 8007a7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <prvInitialiseTaskLists+0x7c>)
 8007a7e:	4a05      	ldr	r2, [pc, #20]	@ (8007a94 <prvInitialiseTaskLists+0x68>)
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20001000 	.word	0x20001000
 8007a90:	20001460 	.word	0x20001460
 8007a94:	20001474 	.word	0x20001474
 8007a98:	20001490 	.word	0x20001490
 8007a9c:	200014a4 	.word	0x200014a4
 8007aa0:	200014bc 	.word	0x200014bc
 8007aa4:	20001488 	.word	0x20001488
 8007aa8:	2000148c 	.word	0x2000148c

08007aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ab2:	e019      	b.n	8007ae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ab4:	f000 fee8 	bl	8008888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab8:	4b10      	ldr	r3, [pc, #64]	@ (8007afc <prvCheckTasksWaitingTermination+0x50>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe f951 	bl	8005d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007aca:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <prvCheckTasksWaitingTermination+0x54>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8007b00 <prvCheckTasksWaitingTermination+0x54>)
 8007ad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b04 <prvCheckTasksWaitingTermination+0x58>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	4a0a      	ldr	r2, [pc, #40]	@ (8007b04 <prvCheckTasksWaitingTermination+0x58>)
 8007adc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ade:	f000 ff05 	bl	80088ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f810 	bl	8007b08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ae8:	4b06      	ldr	r3, [pc, #24]	@ (8007b04 <prvCheckTasksWaitingTermination+0x58>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e1      	bne.n	8007ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	200014a4 	.word	0x200014a4
 8007b00:	200014d0 	.word	0x200014d0
 8007b04:	200014b8 	.word	0x200014b8

08007b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3354      	adds	r3, #84	@ 0x54
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 ff63 	bl	80099e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d108      	bne.n	8007b36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 f89d 	bl	8008c68 <vPortFree>
				vPortFree( pxTCB );
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 f89a 	bl	8008c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b34:	e019      	b.n	8007b6a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d103      	bne.n	8007b48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 f891 	bl	8008c68 <vPortFree>
	}
 8007b46:	e010      	b.n	8007b6a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d00b      	beq.n	8007b6a <prvDeleteTCB+0x62>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60fb      	str	r3, [r7, #12]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <prvDeleteTCB+0x5e>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b84:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b86:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b8c:	e008      	b.n	8007ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8e:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <prvResetNextTaskUnblockTime+0x38>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	4a04      	ldr	r2, [pc, #16]	@ (8007bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20001488 	.word	0x20001488
 8007bb0:	200014f0 	.word	0x200014f0

08007bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bba:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <xTaskGetSchedulerState+0x34>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	e008      	b.n	8007bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc8:	4b08      	ldr	r3, [pc, #32]	@ (8007bec <xTaskGetSchedulerState+0x38>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	607b      	str	r3, [r7, #4]
 8007bd4:	e001      	b.n	8007bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bda:	687b      	ldr	r3, [r7, #4]
	}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	200014dc 	.word	0x200014dc
 8007bec:	200014f8 	.word	0x200014f8

08007bf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d051      	beq.n	8007caa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <xTaskPriorityInherit+0xc4>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d241      	bcs.n	8007c98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db06      	blt.n	8007c2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1c:	4b25      	ldr	r3, [pc, #148]	@ (8007cb4 <xTaskPriorityInherit+0xc4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6959      	ldr	r1, [r3, #20]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8007cb8 <xTaskPriorityInherit+0xc8>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	d122      	bne.n	8007c88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f890 	bl	8005d6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c4c:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <xTaskPriorityInherit+0xc4>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5a:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <xTaskPriorityInherit+0xcc>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d903      	bls.n	8007c6a <xTaskPriorityInherit+0x7a>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	4a15      	ldr	r2, [pc, #84]	@ (8007cbc <xTaskPriorityInherit+0xcc>)
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a10      	ldr	r2, [pc, #64]	@ (8007cb8 <xTaskPriorityInherit+0xc8>)
 8007c78:	441a      	add	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7fe f816 	bl	8005cb2 <vListInsertEnd>
 8007c86:	e004      	b.n	8007c92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c88:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <xTaskPriorityInherit+0xc4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e008      	b.n	8007caa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <xTaskPriorityInherit+0xc4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d201      	bcs.n	8007caa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007caa:	68fb      	ldr	r3, [r7, #12]
	}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000ffc 	.word	0x20000ffc
 8007cb8:	20001000 	.word	0x20001000
 8007cbc:	200014d8 	.word	0x200014d8

08007cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d058      	beq.n	8007d88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8007d94 <xTaskPriorityDisinherit+0xd4>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d00b      	beq.n	8007cf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10b      	bne.n	8007d18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60bb      	str	r3, [r7, #8]
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	e7fd      	b.n	8007d14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d02c      	beq.n	8007d88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d128      	bne.n	8007d88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe f816 	bl	8005d6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d58:	4b0f      	ldr	r3, [pc, #60]	@ (8007d98 <xTaskPriorityDisinherit+0xd8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d903      	bls.n	8007d68 <xTaskPriorityDisinherit+0xa8>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d64:	4a0c      	ldr	r2, [pc, #48]	@ (8007d98 <xTaskPriorityDisinherit+0xd8>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <xTaskPriorityDisinherit+0xdc>)
 8007d76:	441a      	add	r2, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fd ff97 	bl	8005cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d88:	697b      	ldr	r3, [r7, #20]
	}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20000ffc 	.word	0x20000ffc
 8007d98:	200014d8 	.word	0x200014d8
 8007d9c:	20001000 	.word	0x20001000

08007da0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d06c      	beq.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	60fb      	str	r3, [r7, #12]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d902      	bls.n	8007de8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	61fb      	str	r3, [r7, #28]
 8007de6:	e002      	b.n	8007dee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df2:	69fa      	ldr	r2, [r7, #28]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d04c      	beq.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d147      	bne.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e02:	4b26      	ldr	r3, [pc, #152]	@ (8007e9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d10b      	bne.n	8007e24 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60bb      	str	r3, [r7, #8]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db04      	blt.n	8007e42 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	6959      	ldr	r1, [r3, #20]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4a13      	ldr	r2, [pc, #76]	@ (8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e52:	4413      	add	r3, r2
 8007e54:	4299      	cmp	r1, r3
 8007e56:	d11c      	bne.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fd ff85 	bl	8005d6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d903      	bls.n	8007e76 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a07      	ldr	r2, [pc, #28]	@ (8007ea0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007e84:	441a      	add	r2, r3
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fd ff10 	bl	8005cb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e92:	bf00      	nop
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000ffc 	.word	0x20000ffc
 8007ea0:	20001000 	.word	0x20001000
 8007ea4:	200014d8 	.word	0x200014d8

08007ea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007eac:	4b07      	ldr	r3, [pc, #28]	@ (8007ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d004      	beq.n	8007ebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	@ (8007ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007eba:	3201      	adds	r2, #1
 8007ebc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007ebe:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	20000ffc 	.word	0x20000ffc

08007ed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eda:	4b21      	ldr	r3, [pc, #132]	@ (8007f60 <prvAddCurrentTaskToDelayedList+0x90>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee0:	4b20      	ldr	r3, [pc, #128]	@ (8007f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd ff40 	bl	8005d6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d10a      	bne.n	8007f0a <prvAddCurrentTaskToDelayedList+0x3a>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d007      	beq.n	8007f0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007efa:	4b1a      	ldr	r3, [pc, #104]	@ (8007f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4819      	ldr	r0, [pc, #100]	@ (8007f68 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f04:	f7fd fed5 	bl	8005cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f08:	e026      	b.n	8007f58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f12:	4b14      	ldr	r3, [pc, #80]	@ (8007f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d209      	bcs.n	8007f36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f22:	4b12      	ldr	r3, [pc, #72]	@ (8007f6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f7fd fee3 	bl	8005cfa <vListInsert>
}
 8007f34:	e010      	b.n	8007f58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f36:	4b0e      	ldr	r3, [pc, #56]	@ (8007f70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fd fed9 	bl	8005cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f48:	4b0a      	ldr	r3, [pc, #40]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d202      	bcs.n	8007f58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f52:	4a08      	ldr	r2, [pc, #32]	@ (8007f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6013      	str	r3, [r2, #0]
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	200014d4 	.word	0x200014d4
 8007f64:	20000ffc 	.word	0x20000ffc
 8007f68:	200014bc 	.word	0x200014bc
 8007f6c:	2000148c 	.word	0x2000148c
 8007f70:	20001488 	.word	0x20001488
 8007f74:	200014f0 	.word	0x200014f0

08007f78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	@ 0x28
 8007f7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f82:	f000 fb13 	bl	80085ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f86:	4b1d      	ldr	r3, [pc, #116]	@ (8007ffc <xTimerCreateTimerTask+0x84>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d021      	beq.n	8007fd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f96:	1d3a      	adds	r2, r7, #4
 8007f98:	f107 0108 	add.w	r1, r7, #8
 8007f9c:	f107 030c 	add.w	r3, r7, #12
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fd fe3f 	bl	8005c24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	9202      	str	r2, [sp, #8]
 8007fae:	9301      	str	r3, [sp, #4]
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	460a      	mov	r2, r1
 8007fb8:	4911      	ldr	r1, [pc, #68]	@ (8008000 <xTimerCreateTimerTask+0x88>)
 8007fba:	4812      	ldr	r0, [pc, #72]	@ (8008004 <xTimerCreateTimerTask+0x8c>)
 8007fbc:	f7fe ff2c 	bl	8006e18 <xTaskCreateStatic>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4a11      	ldr	r2, [pc, #68]	@ (8008008 <xTimerCreateTimerTask+0x90>)
 8007fc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fc6:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <xTimerCreateTimerTask+0x90>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10b      	bne.n	8007ff0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	613b      	str	r3, [r7, #16]
}
 8007fea:	bf00      	nop
 8007fec:	bf00      	nop
 8007fee:	e7fd      	b.n	8007fec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ff0:	697b      	ldr	r3, [r7, #20]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	2000152c 	.word	0x2000152c
 8008000:	0800c26c 	.word	0x0800c26c
 8008004:	08008145 	.word	0x08008145
 8008008:	20001530 	.word	0x20001530

0800800c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	@ 0x28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800801a:	2300      	movs	r3, #0
 800801c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <xTimerGenericCommand+0x30>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800803c:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <xTimerGenericCommand+0x98>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02a      	beq.n	800809a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b05      	cmp	r3, #5
 8008054:	dc18      	bgt.n	8008088 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008056:	f7ff fdad 	bl	8007bb4 <xTaskGetSchedulerState>
 800805a:	4603      	mov	r3, r0
 800805c:	2b02      	cmp	r3, #2
 800805e:	d109      	bne.n	8008074 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008060:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <xTimerGenericCommand+0x98>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	f107 0110 	add.w	r1, r7, #16
 8008068:	2300      	movs	r3, #0
 800806a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806c:	f7fe f85c 	bl	8006128 <xQueueGenericSend>
 8008070:	6278      	str	r0, [r7, #36]	@ 0x24
 8008072:	e012      	b.n	800809a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008074:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <xTimerGenericCommand+0x98>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	f107 0110 	add.w	r1, r7, #16
 800807c:	2300      	movs	r3, #0
 800807e:	2200      	movs	r2, #0
 8008080:	f7fe f852 	bl	8006128 <xQueueGenericSend>
 8008084:	6278      	str	r0, [r7, #36]	@ 0x24
 8008086:	e008      	b.n	800809a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008088:	4b06      	ldr	r3, [pc, #24]	@ (80080a4 <xTimerGenericCommand+0x98>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	f107 0110 	add.w	r1, r7, #16
 8008090:	2300      	movs	r3, #0
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	f7fe f94a 	bl	800632c <xQueueGenericSendFromISR>
 8008098:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800809c:	4618      	mov	r0, r3
 800809e:	3728      	adds	r7, #40	@ 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	2000152c 	.word	0x2000152c

080080a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b2:	4b23      	ldr	r3, [pc, #140]	@ (8008140 <prvProcessExpiredTimer+0x98>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	3304      	adds	r3, #4
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fd fe53 	bl	8005d6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d023      	beq.n	800811c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	699a      	ldr	r2, [r3, #24]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	18d1      	adds	r1, r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	6978      	ldr	r0, [r7, #20]
 80080e2:	f000 f8d5 	bl	8008290 <prvInsertTimerInActiveList>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d020      	beq.n	800812e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080ec:	2300      	movs	r3, #0
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	2100      	movs	r1, #0
 80080f6:	6978      	ldr	r0, [r7, #20]
 80080f8:	f7ff ff88 	bl	800800c <xTimerGenericCommand>
 80080fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d114      	bne.n	800812e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60fb      	str	r3, [r7, #12]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6978      	ldr	r0, [r7, #20]
 8008134:	4798      	blx	r3
}
 8008136:	bf00      	nop
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20001524 	.word	0x20001524

08008144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f859 	bl	8008208 <prvGetNextExpireTime>
 8008156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f805 	bl	800816c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008162:	f000 f8d7 	bl	8008314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008166:	bf00      	nop
 8008168:	e7f0      	b.n	800814c <prvTimerTask+0x8>
	...

0800816c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008176:	f7ff f929 	bl	80073cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4618      	mov	r0, r3
 8008180:	f000 f866 	bl	8008250 <prvSampleTimeNow>
 8008184:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d130      	bne.n	80081ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <prvProcessTimerOrBlockTask+0x3c>
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	429a      	cmp	r2, r3
 8008198:	d806      	bhi.n	80081a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800819a:	f7ff f925 	bl	80073e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800819e:	68f9      	ldr	r1, [r7, #12]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff ff81 	bl	80080a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081a6:	e024      	b.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081ae:	4b13      	ldr	r3, [pc, #76]	@ (80081fc <prvProcessTimerOrBlockTask+0x90>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <prvProcessTimerOrBlockTask+0x50>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <prvProcessTimerOrBlockTask+0x52>
 80081bc:	2300      	movs	r3, #0
 80081be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008200 <prvProcessTimerOrBlockTask+0x94>)
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fdef 	bl	8006db0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081d2:	f7ff f909 	bl	80073e8 <xTaskResumeAll>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081dc:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <prvProcessTimerOrBlockTask+0x98>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	f3bf 8f6f 	isb	sy
}
 80081ec:	e001      	b.n	80081f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ee:	f7ff f8fb 	bl	80073e8 <xTaskResumeAll>
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20001528 	.word	0x20001528
 8008200:	2000152c 	.word	0x2000152c
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008210:	4b0e      	ldr	r3, [pc, #56]	@ (800824c <prvGetNextExpireTime+0x44>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <prvGetNextExpireTime+0x16>
 800821a:	2201      	movs	r2, #1
 800821c:	e000      	b.n	8008220 <prvGetNextExpireTime+0x18>
 800821e:	2200      	movs	r2, #0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d105      	bne.n	8008238 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800822c:	4b07      	ldr	r3, [pc, #28]	@ (800824c <prvGetNextExpireTime+0x44>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	e001      	b.n	800823c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800823c:	68fb      	ldr	r3, [r7, #12]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20001524 	.word	0x20001524

08008250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008258:	f7ff f964 	bl	8007524 <xTaskGetTickCount>
 800825c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800825e:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <prvSampleTimeNow+0x3c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	429a      	cmp	r2, r3
 8008266:	d205      	bcs.n	8008274 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008268:	f000 f93a 	bl	80084e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e002      	b.n	800827a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800827a:	4a04      	ldr	r2, [pc, #16]	@ (800828c <prvSampleTimeNow+0x3c>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008280:	68fb      	ldr	r3, [r7, #12]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20001534 	.word	0x20001534

08008290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d812      	bhi.n	80082dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d302      	bcc.n	80082ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e01b      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082ca:	4b10      	ldr	r3, [pc, #64]	@ (800830c <prvInsertTimerInActiveList+0x7c>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fd fd10 	bl	8005cfa <vListInsert>
 80082da:	e012      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d206      	bcs.n	80082f2 <prvInsertTimerInActiveList+0x62>
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d302      	bcc.n	80082f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e007      	b.n	8008302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082f2:	4b07      	ldr	r3, [pc, #28]	@ (8008310 <prvInsertTimerInActiveList+0x80>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fd fcfc 	bl	8005cfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008302:	697b      	ldr	r3, [r7, #20]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3718      	adds	r7, #24
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001528 	.word	0x20001528
 8008310:	20001524 	.word	0x20001524

08008314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08e      	sub	sp, #56	@ 0x38
 8008318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800831a:	e0ce      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	da19      	bge.n	8008356 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008322:	1d3b      	adds	r3, r7, #4
 8008324:	3304      	adds	r3, #4
 8008326:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	61fb      	str	r3, [r7, #28]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800834c:	6850      	ldr	r0, [r2, #4]
 800834e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008350:	6892      	ldr	r2, [r2, #8]
 8008352:	4611      	mov	r1, r2
 8008354:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f2c0 80ae 	blt.w	80084ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d004      	beq.n	8008374 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	3304      	adds	r3, #4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fd fcfc 	bl	8005d6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008374:	463b      	mov	r3, r7
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff ff6a 	bl	8008250 <prvSampleTimeNow>
 800837c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b09      	cmp	r3, #9
 8008382:	f200 8097 	bhi.w	80084b4 <prvProcessReceivedCommands+0x1a0>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <prvProcessReceivedCommands+0x78>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083b5 	.word	0x080083b5
 8008394:	080083b5 	.word	0x080083b5
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800843f 	.word	0x0800843f
 80083a0:	0800848b 	.word	0x0800848b
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083b5 	.word	0x080083b5
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800843f 	.word	0x0800843f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	18d1      	adds	r1, r2, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083d4:	f7ff ff5c 	bl	8008290 <prvInsertTimerInActiveList>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d06c      	beq.n	80084b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d061      	beq.n	80084b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	441a      	add	r2, r3
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	2100      	movs	r1, #0
 8008404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008406:	f7ff fe01 	bl	800800c <xTimerGenericCommand>
 800840a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d152      	bne.n	80084b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	61bb      	str	r3, [r7, #24]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800843c:	e03d      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008444:	f043 0301 	orr.w	r3, r3, #1
 8008448:	b2da      	uxtb	r2, r3
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10b      	bne.n	8008476 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	617b      	str	r3, [r7, #20]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	18d1      	adds	r1, r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008484:	f7ff ff04 	bl	8008290 <prvInsertTimerInActiveList>
					break;
 8008488:	e017      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d103      	bne.n	80084a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800849a:	f000 fbe5 	bl	8008c68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800849e:	e00c      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084b2:	e002      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <prvProcessReceivedCommands+0x1a6>
					break;
 80084b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ba:	4b08      	ldr	r3, [pc, #32]	@ (80084dc <prvProcessReceivedCommands+0x1c8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	1d39      	adds	r1, r7, #4
 80084c0:	2200      	movs	r2, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe f860 	bl	8006588 <xQueueReceive>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f47f af26 	bne.w	800831c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3730      	adds	r7, #48	@ 0x30
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000152c 	.word	0x2000152c

080084e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084e6:	e049      	b.n	800857c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084e8:	4b2e      	ldr	r3, [pc, #184]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b2c      	ldr	r3, [pc, #176]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3304      	adds	r3, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f7fd fc33 	bl	8005d6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d02f      	beq.n	800857c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	429a      	cmp	r2, r3
 800852c:	d90e      	bls.n	800854c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800853a:	4b1a      	ldr	r3, [pc, #104]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3304      	adds	r3, #4
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f7fd fbd8 	bl	8005cfa <vListInsert>
 800854a:	e017      	b.n	800857c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800854c:	2300      	movs	r3, #0
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	2300      	movs	r3, #0
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	2100      	movs	r1, #0
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fd58 	bl	800800c <xTimerGenericCommand>
 800855c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	603b      	str	r3, [r7, #0]
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	e7fd      	b.n	8008578 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800857c:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1b0      	bne.n	80084e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008586:	4b07      	ldr	r3, [pc, #28]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800858c:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <prvSwitchTimerLists+0xc8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a04      	ldr	r2, [pc, #16]	@ (80085a4 <prvSwitchTimerLists+0xc4>)
 8008592:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008594:	4a04      	ldr	r2, [pc, #16]	@ (80085a8 <prvSwitchTimerLists+0xc8>)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6013      	str	r3, [r2, #0]
}
 800859a:	bf00      	nop
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20001524 	.word	0x20001524
 80085a8:	20001528 	.word	0x20001528

080085ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085b2:	f000 f969 	bl	8008888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085b6:	4b15      	ldr	r3, [pc, #84]	@ (800860c <prvCheckForValidListAndQueue+0x60>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d120      	bne.n	8008600 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085be:	4814      	ldr	r0, [pc, #80]	@ (8008610 <prvCheckForValidListAndQueue+0x64>)
 80085c0:	f7fd fb4a 	bl	8005c58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085c4:	4813      	ldr	r0, [pc, #76]	@ (8008614 <prvCheckForValidListAndQueue+0x68>)
 80085c6:	f7fd fb47 	bl	8005c58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ca:	4b13      	ldr	r3, [pc, #76]	@ (8008618 <prvCheckForValidListAndQueue+0x6c>)
 80085cc:	4a10      	ldr	r2, [pc, #64]	@ (8008610 <prvCheckForValidListAndQueue+0x64>)
 80085ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085d0:	4b12      	ldr	r3, [pc, #72]	@ (800861c <prvCheckForValidListAndQueue+0x70>)
 80085d2:	4a10      	ldr	r2, [pc, #64]	@ (8008614 <prvCheckForValidListAndQueue+0x68>)
 80085d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	4b11      	ldr	r3, [pc, #68]	@ (8008620 <prvCheckForValidListAndQueue+0x74>)
 80085dc:	4a11      	ldr	r2, [pc, #68]	@ (8008624 <prvCheckForValidListAndQueue+0x78>)
 80085de:	2110      	movs	r1, #16
 80085e0:	200a      	movs	r0, #10
 80085e2:	f7fd fc57 	bl	8005e94 <xQueueGenericCreateStatic>
 80085e6:	4603      	mov	r3, r0
 80085e8:	4a08      	ldr	r2, [pc, #32]	@ (800860c <prvCheckForValidListAndQueue+0x60>)
 80085ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085ec:	4b07      	ldr	r3, [pc, #28]	@ (800860c <prvCheckForValidListAndQueue+0x60>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d005      	beq.n	8008600 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085f4:	4b05      	ldr	r3, [pc, #20]	@ (800860c <prvCheckForValidListAndQueue+0x60>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	490b      	ldr	r1, [pc, #44]	@ (8008628 <prvCheckForValidListAndQueue+0x7c>)
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fb84 	bl	8006d08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008600:	f000 f974 	bl	80088ec <vPortExitCritical>
}
 8008604:	bf00      	nop
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	2000152c 	.word	0x2000152c
 8008610:	200014fc 	.word	0x200014fc
 8008614:	20001510 	.word	0x20001510
 8008618:	20001524 	.word	0x20001524
 800861c:	20001528 	.word	0x20001528
 8008620:	200015d8 	.word	0x200015d8
 8008624:	20001538 	.word	0x20001538
 8008628:	0800c274 	.word	0x0800c274

0800862c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3b04      	subs	r3, #4
 800863c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b04      	subs	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f023 0201 	bic.w	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b04      	subs	r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800865c:	4a0c      	ldr	r2, [pc, #48]	@ (8008690 <pxPortInitialiseStack+0x64>)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3b14      	subs	r3, #20
 8008666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3b04      	subs	r3, #4
 8008672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f06f 0202 	mvn.w	r2, #2
 800867a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3b20      	subs	r3, #32
 8008680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008682:	68fb      	ldr	r3, [r7, #12]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	08008695 	.word	0x08008695

08008694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800869e:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <prvTaskExitError+0x58>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d00b      	beq.n	80086c0 <prvTaskExitError+0x2c>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	60fb      	str	r3, [r7, #12]
}
 80086ba:	bf00      	nop
 80086bc:	bf00      	nop
 80086be:	e7fd      	b.n	80086bc <prvTaskExitError+0x28>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60bb      	str	r3, [r7, #8]
}
 80086d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086d4:	bf00      	nop
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0fc      	beq.n	80086d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	2000001c 	.word	0x2000001c

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	@ (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	4770      	bx	lr
 800870c:	f3af 8000 	nop.w

08008710 <pxCurrentTCBConst2>:
 8008710:	20000ffc 	.word	0x20000ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008718:	4808      	ldr	r0, [pc, #32]	@ (800873c <prvPortStartFirstTask+0x24>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8814 	msr	CONTROL, r0
 800872a:	b662      	cpsie	i
 800872c:	b661      	cpsie	f
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	df00      	svc	0
 8008738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800873a:	bf00      	nop
 800873c:	e000ed08 	.word	0xe000ed08

08008740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008746:	4b47      	ldr	r3, [pc, #284]	@ (8008864 <xPortStartScheduler+0x124>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a47      	ldr	r2, [pc, #284]	@ (8008868 <xPortStartScheduler+0x128>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10b      	bne.n	8008768 <xPortStartScheduler+0x28>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	613b      	str	r3, [r7, #16]
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008768:	4b3e      	ldr	r3, [pc, #248]	@ (8008864 <xPortStartScheduler+0x124>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a3f      	ldr	r2, [pc, #252]	@ (800886c <xPortStartScheduler+0x12c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d10b      	bne.n	800878a <xPortStartScheduler+0x4a>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60fb      	str	r3, [r7, #12]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800878a:	4b39      	ldr	r3, [pc, #228]	@ (8008870 <xPortStartScheduler+0x130>)
 800878c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	22ff      	movs	r2, #255	@ 0xff
 800879a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	4b31      	ldr	r3, [pc, #196]	@ (8008874 <xPortStartScheduler+0x134>)
 80087b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087b2:	4b31      	ldr	r3, [pc, #196]	@ (8008878 <xPortStartScheduler+0x138>)
 80087b4:	2207      	movs	r2, #7
 80087b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087b8:	e009      	b.n	80087ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80087ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008878 <xPortStartScheduler+0x138>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3b01      	subs	r3, #1
 80087c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008878 <xPortStartScheduler+0x138>)
 80087c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087d6:	2b80      	cmp	r3, #128	@ 0x80
 80087d8:	d0ef      	beq.n	80087ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087da:	4b27      	ldr	r3, [pc, #156]	@ (8008878 <xPortStartScheduler+0x138>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f1c3 0307 	rsb	r3, r3, #7
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d00b      	beq.n	80087fe <xPortStartScheduler+0xbe>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	60bb      	str	r3, [r7, #8]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008878 <xPortStartScheduler+0x138>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	4a1c      	ldr	r2, [pc, #112]	@ (8008878 <xPortStartScheduler+0x138>)
 8008806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008808:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <xPortStartScheduler+0x138>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008810:	4a19      	ldr	r2, [pc, #100]	@ (8008878 <xPortStartScheduler+0x138>)
 8008812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	b2da      	uxtb	r2, r3
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800881c:	4b17      	ldr	r3, [pc, #92]	@ (800887c <xPortStartScheduler+0x13c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a16      	ldr	r2, [pc, #88]	@ (800887c <xPortStartScheduler+0x13c>)
 8008822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008828:	4b14      	ldr	r3, [pc, #80]	@ (800887c <xPortStartScheduler+0x13c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a13      	ldr	r2, [pc, #76]	@ (800887c <xPortStartScheduler+0x13c>)
 800882e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008834:	f000 f8da 	bl	80089ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008838:	4b11      	ldr	r3, [pc, #68]	@ (8008880 <xPortStartScheduler+0x140>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800883e:	f000 f8f9 	bl	8008a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008842:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <xPortStartScheduler+0x144>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a0f      	ldr	r2, [pc, #60]	@ (8008884 <xPortStartScheduler+0x144>)
 8008848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800884c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800884e:	f7ff ff63 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008852:	f7fe ff31 	bl	80076b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008856:	f7ff ff1d 	bl	8008694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	e000ed00 	.word	0xe000ed00
 8008868:	410fc271 	.word	0x410fc271
 800886c:	410fc270 	.word	0x410fc270
 8008870:	e000e400 	.word	0xe000e400
 8008874:	20001628 	.word	0x20001628
 8008878:	2000162c 	.word	0x2000162c
 800887c:	e000ed20 	.word	0xe000ed20
 8008880:	2000001c 	.word	0x2000001c
 8008884:	e000ef34 	.word	0xe000ef34

08008888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	607b      	str	r3, [r7, #4]
}
 80088a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088a2:	4b10      	ldr	r3, [pc, #64]	@ (80088e4 <vPortEnterCritical+0x5c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3301      	adds	r3, #1
 80088a8:	4a0e      	ldr	r2, [pc, #56]	@ (80088e4 <vPortEnterCritical+0x5c>)
 80088aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088ac:	4b0d      	ldr	r3, [pc, #52]	@ (80088e4 <vPortEnterCritical+0x5c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d110      	bne.n	80088d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088b4:	4b0c      	ldr	r3, [pc, #48]	@ (80088e8 <vPortEnterCritical+0x60>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	603b      	str	r3, [r7, #0]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <vPortEnterCritical+0x4a>
	}
}
 80088d6:	bf00      	nop
 80088d8:	370c      	adds	r7, #12
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	2000001c 	.word	0x2000001c
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088f2:	4b12      	ldr	r3, [pc, #72]	@ (800893c <vPortExitCritical+0x50>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <vPortExitCritical+0x26>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	607b      	str	r3, [r7, #4]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008912:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <vPortExitCritical+0x50>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3b01      	subs	r3, #1
 8008918:	4a08      	ldr	r2, [pc, #32]	@ (800893c <vPortExitCritical+0x50>)
 800891a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800891c:	4b07      	ldr	r3, [pc, #28]	@ (800893c <vPortExitCritical+0x50>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d105      	bne.n	8008930 <vPortExitCritical+0x44>
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f383 8811 	msr	BASEPRI, r3
}
 800892e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	2000001c 	.word	0x2000001c

08008940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008940:	f3ef 8009 	mrs	r0, PSP
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <pxCurrentTCBConst>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	f01e 0f10 	tst.w	lr, #16
 8008950:	bf08      	it	eq
 8008952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008964:	f380 8811 	msr	BASEPRI, r0
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f7fe fea2 	bl	80076b8 <vTaskSwitchContext>
 8008974:	f04f 0000 	mov.w	r0, #0
 8008978:	f380 8811 	msr	BASEPRI, r0
 800897c:	bc09      	pop	{r0, r3}
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	6808      	ldr	r0, [r1, #0]
 8008982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008986:	f01e 0f10 	tst.w	lr, #16
 800898a:	bf08      	it	eq
 800898c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008990:	f380 8809 	msr	PSP, r0
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	f3af 8000 	nop.w

080089a0 <pxCurrentTCBConst>:
 80089a0:	20000ffc 	.word	0x20000ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop

080089a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
}
 80089c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089c2:	f7fe fdbf 	bl	8007544 <xTaskIncrementTick>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089cc:	4b06      	ldr	r3, [pc, #24]	@ (80089e8 <xPortSysTickHandler+0x40>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	2300      	movs	r3, #0
 80089d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	f383 8811 	msr	BASEPRI, r3
}
 80089de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089e0:	bf00      	nop
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <vPortSetupTimerInterrupt+0x34>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <vPortSetupTimerInterrupt+0x38>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <vPortSetupTimerInterrupt+0x3c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	@ (8008a2c <vPortSetupTimerInterrupt+0x40>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	099b      	lsrs	r3, r3, #6
 8008a08:	4a09      	ldr	r2, [pc, #36]	@ (8008a30 <vPortSetupTimerInterrupt+0x44>)
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a0e:	4b04      	ldr	r3, [pc, #16]	@ (8008a20 <vPortSetupTimerInterrupt+0x34>)
 8008a10:	2207      	movs	r2, #7
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	e000e010 	.word	0xe000e010
 8008a24:	e000e018 	.word	0xe000e018
 8008a28:	20000010 	.word	0x20000010
 8008a2c:	10624dd3 	.word	0x10624dd3
 8008a30:	e000e014 	.word	0xe000e014

08008a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a44 <vPortEnableVFP+0x10>
 8008a38:	6801      	ldr	r1, [r0, #0]
 8008a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a3e:	6001      	str	r1, [r0, #0]
 8008a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a42:	bf00      	nop
 8008a44:	e000ed88 	.word	0xe000ed88

08008a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a4e:	f3ef 8305 	mrs	r3, IPSR
 8008a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b0f      	cmp	r3, #15
 8008a58:	d915      	bls.n	8008a86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a5a:	4a18      	ldr	r2, [pc, #96]	@ (8008abc <vPortValidateInterruptPriority+0x74>)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a64:	4b16      	ldr	r3, [pc, #88]	@ (8008ac0 <vPortValidateInterruptPriority+0x78>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	7afa      	ldrb	r2, [r7, #11]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d20b      	bcs.n	8008a86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a86:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <vPortValidateInterruptPriority+0x7c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac8 <vPortValidateInterruptPriority+0x80>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90b      	bls.n	8008aae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	603b      	str	r3, [r7, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	bf00      	nop
 8008aac:	e7fd      	b.n	8008aaa <vPortValidateInterruptPriority+0x62>
	}
 8008aae:	bf00      	nop
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	e000e3f0 	.word	0xe000e3f0
 8008ac0:	20001628 	.word	0x20001628
 8008ac4:	e000ed0c 	.word	0xe000ed0c
 8008ac8:	2000162c 	.word	0x2000162c

08008acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08a      	sub	sp, #40	@ 0x28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ad8:	f7fe fc78 	bl	80073cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008adc:	4b5c      	ldr	r3, [pc, #368]	@ (8008c50 <pvPortMalloc+0x184>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ae4:	f000 f924 	bl	8008d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <pvPortMalloc+0x188>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8095 	bne.w	8008c20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01e      	beq.n	8008b3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008afc:	2208      	movs	r2, #8
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4413      	add	r3, r2
 8008b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d015      	beq.n	8008b3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f023 0307 	bic.w	r3, r3, #7
 8008b14:	3308      	adds	r3, #8
 8008b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <pvPortMalloc+0x6e>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	617b      	str	r3, [r7, #20]
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop
 8008b38:	e7fd      	b.n	8008b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d06f      	beq.n	8008c20 <pvPortMalloc+0x154>
 8008b40:	4b45      	ldr	r3, [pc, #276]	@ (8008c58 <pvPortMalloc+0x18c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d86a      	bhi.n	8008c20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b4a:	4b44      	ldr	r3, [pc, #272]	@ (8008c5c <pvPortMalloc+0x190>)
 8008b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b4e:	4b43      	ldr	r3, [pc, #268]	@ (8008c5c <pvPortMalloc+0x190>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b54:	e004      	b.n	8008b60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d903      	bls.n	8008b72 <pvPortMalloc+0xa6>
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f1      	bne.n	8008b56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b72:	4b37      	ldr	r3, [pc, #220]	@ (8008c50 <pvPortMalloc+0x184>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d051      	beq.n	8008c20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2208      	movs	r2, #8
 8008b82:	4413      	add	r3, r2
 8008b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	1ad2      	subs	r2, r2, r3
 8008b96:	2308      	movs	r3, #8
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d920      	bls.n	8008be0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <pvPortMalloc+0xfc>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	613b      	str	r3, [r7, #16]
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	e7fd      	b.n	8008bc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bda:	69b8      	ldr	r0, [r7, #24]
 8008bdc:	f000 f90c 	bl	8008df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008be0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c58 <pvPortMalloc+0x18c>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	4a1b      	ldr	r2, [pc, #108]	@ (8008c58 <pvPortMalloc+0x18c>)
 8008bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bee:	4b1a      	ldr	r3, [pc, #104]	@ (8008c58 <pvPortMalloc+0x18c>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <pvPortMalloc+0x194>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d203      	bcs.n	8008c02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bfa:	4b17      	ldr	r3, [pc, #92]	@ (8008c58 <pvPortMalloc+0x18c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a18      	ldr	r2, [pc, #96]	@ (8008c60 <pvPortMalloc+0x194>)
 8008c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4b13      	ldr	r3, [pc, #76]	@ (8008c54 <pvPortMalloc+0x188>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c16:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <pvPortMalloc+0x198>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	4a11      	ldr	r2, [pc, #68]	@ (8008c64 <pvPortMalloc+0x198>)
 8008c1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c20:	f7fe fbe2 	bl	80073e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <pvPortMalloc+0x17a>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <pvPortMalloc+0x176>
	return pvReturn;
 8008c46:	69fb      	ldr	r3, [r7, #28]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3728      	adds	r7, #40	@ 0x28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200127a8 	.word	0x200127a8
 8008c54:	200127bc 	.word	0x200127bc
 8008c58:	200127ac 	.word	0x200127ac
 8008c5c:	200127a0 	.word	0x200127a0
 8008c60:	200127b0 	.word	0x200127b0
 8008c64:	200127b4 	.word	0x200127b4

08008c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d04f      	beq.n	8008d1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	425b      	negs	r3, r3
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4413      	add	r3, r2
 8008c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	4b25      	ldr	r3, [pc, #148]	@ (8008d24 <vPortFree+0xbc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4013      	ands	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10b      	bne.n	8008cae <vPortFree+0x46>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	60fb      	str	r3, [r7, #12]
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	e7fd      	b.n	8008caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00b      	beq.n	8008cce <vPortFree+0x66>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cba:	f383 8811 	msr	BASEPRI, r3
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f3bf 8f4f 	dsb	sy
 8008cc6:	60bb      	str	r3, [r7, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	bf00      	nop
 8008ccc:	e7fd      	b.n	8008cca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	4b14      	ldr	r3, [pc, #80]	@ (8008d24 <vPortFree+0xbc>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01e      	beq.n	8008d1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d11a      	bne.n	8008d1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d24 <vPortFree+0xbc>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	43db      	mvns	r3, r3
 8008cee:	401a      	ands	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cf4:	f7fe fb6a 	bl	80073cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d28 <vPortFree+0xc0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4413      	add	r3, r2
 8008d02:	4a09      	ldr	r2, [pc, #36]	@ (8008d28 <vPortFree+0xc0>)
 8008d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d06:	6938      	ldr	r0, [r7, #16]
 8008d08:	f000 f876 	bl	8008df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d0c:	4b07      	ldr	r3, [pc, #28]	@ (8008d2c <vPortFree+0xc4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	4a06      	ldr	r2, [pc, #24]	@ (8008d2c <vPortFree+0xc4>)
 8008d14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d16:	f7fe fb67 	bl	80073e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d1a:	bf00      	nop
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200127bc 	.word	0x200127bc
 8008d28:	200127ac 	.word	0x200127ac
 8008d2c:	200127b8 	.word	0x200127b8

08008d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d36:	4b29      	ldr	r3, [pc, #164]	@ (8008ddc <prvHeapInit+0xac>)
 8008d38:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d3a:	4b29      	ldr	r3, [pc, #164]	@ (8008de0 <prvHeapInit+0xb0>)
 8008d3c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00c      	beq.n	8008d62 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3307      	adds	r3, #7
 8008d4c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f023 0307 	bic.w	r3, r3, #7
 8008d54:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	4a20      	ldr	r2, [pc, #128]	@ (8008de0 <prvHeapInit+0xb0>)
 8008d5e:	4413      	add	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d66:	4a1f      	ldr	r2, [pc, #124]	@ (8008de4 <prvHeapInit+0xb4>)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008de4 <prvHeapInit+0xb4>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	4413      	add	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d7a:	2208      	movs	r2, #8
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f023 0307 	bic.w	r3, r3, #7
 8008d88:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4a16      	ldr	r2, [pc, #88]	@ (8008de8 <prvHeapInit+0xb8>)
 8008d8e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d90:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <prvHeapInit+0xb8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d98:	4b13      	ldr	r3, [pc, #76]	@ (8008de8 <prvHeapInit+0xb8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	1ad2      	subs	r2, r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <prvHeapInit+0xb8>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4a0c      	ldr	r2, [pc, #48]	@ (8008dec <prvHeapInit+0xbc>)
 8008dbc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8008df0 <prvHeapInit+0xc0>)
 8008dc4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008df4 <prvHeapInit+0xc4>)
 8008dc8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	00011170 	.word	0x00011170
 8008de0:	20001630 	.word	0x20001630
 8008de4:	200127a0 	.word	0x200127a0
 8008de8:	200127a8 	.word	0x200127a8
 8008dec:	200127b0 	.word	0x200127b0
 8008df0:	200127ac 	.word	0x200127ac
 8008df4:	200127bc 	.word	0x200127bc

08008df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e00:	4b28      	ldr	r3, [pc, #160]	@ (8008ea4 <prvInsertBlockIntoFreeList+0xac>)
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e002      	b.n	8008e0c <prvInsertBlockIntoFreeList+0x14>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d8f7      	bhi.n	8008e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d108      	bne.n	8008e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	441a      	add	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	441a      	add	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d118      	bne.n	8008e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b15      	ldr	r3, [pc, #84]	@ (8008ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d00d      	beq.n	8008e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	441a      	add	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e008      	b.n	8008e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e003      	b.n	8008e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d002      	beq.n	8008e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e96:	bf00      	nop
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	200127a0 	.word	0x200127a0
 8008ea8:	200127a8 	.word	0x200127a8

08008eac <__cvt>:
 8008eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	ec57 6b10 	vmov	r6, r7, d0
 8008eb4:	2f00      	cmp	r7, #0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	4619      	mov	r1, r3
 8008eba:	463b      	mov	r3, r7
 8008ebc:	bfbb      	ittet	lt
 8008ebe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008ec2:	461f      	movlt	r7, r3
 8008ec4:	2300      	movge	r3, #0
 8008ec6:	232d      	movlt	r3, #45	@ 0x2d
 8008ec8:	700b      	strb	r3, [r1, #0]
 8008eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ecc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ed0:	4691      	mov	r9, r2
 8008ed2:	f023 0820 	bic.w	r8, r3, #32
 8008ed6:	bfbc      	itt	lt
 8008ed8:	4632      	movlt	r2, r6
 8008eda:	4616      	movlt	r6, r2
 8008edc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ee0:	d005      	beq.n	8008eee <__cvt+0x42>
 8008ee2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ee6:	d100      	bne.n	8008eea <__cvt+0x3e>
 8008ee8:	3401      	adds	r4, #1
 8008eea:	2102      	movs	r1, #2
 8008eec:	e000      	b.n	8008ef0 <__cvt+0x44>
 8008eee:	2103      	movs	r1, #3
 8008ef0:	ab03      	add	r3, sp, #12
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	ab02      	add	r3, sp, #8
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	ec47 6b10 	vmov	d0, r6, r7
 8008efc:	4653      	mov	r3, sl
 8008efe:	4622      	mov	r2, r4
 8008f00:	f000 febe 	bl	8009c80 <_dtoa_r>
 8008f04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f08:	4605      	mov	r5, r0
 8008f0a:	d119      	bne.n	8008f40 <__cvt+0x94>
 8008f0c:	f019 0f01 	tst.w	r9, #1
 8008f10:	d00e      	beq.n	8008f30 <__cvt+0x84>
 8008f12:	eb00 0904 	add.w	r9, r0, r4
 8008f16:	2200      	movs	r2, #0
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 fdf3 	bl	8000b08 <__aeabi_dcmpeq>
 8008f22:	b108      	cbz	r0, 8008f28 <__cvt+0x7c>
 8008f24:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f28:	2230      	movs	r2, #48	@ 0x30
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	454b      	cmp	r3, r9
 8008f2e:	d31e      	bcc.n	8008f6e <__cvt+0xc2>
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f34:	1b5b      	subs	r3, r3, r5
 8008f36:	4628      	mov	r0, r5
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	b004      	add	sp, #16
 8008f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f44:	eb00 0904 	add.w	r9, r0, r4
 8008f48:	d1e5      	bne.n	8008f16 <__cvt+0x6a>
 8008f4a:	7803      	ldrb	r3, [r0, #0]
 8008f4c:	2b30      	cmp	r3, #48	@ 0x30
 8008f4e:	d10a      	bne.n	8008f66 <__cvt+0xba>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 fdd6 	bl	8000b08 <__aeabi_dcmpeq>
 8008f5c:	b918      	cbnz	r0, 8008f66 <__cvt+0xba>
 8008f5e:	f1c4 0401 	rsb	r4, r4, #1
 8008f62:	f8ca 4000 	str.w	r4, [sl]
 8008f66:	f8da 3000 	ldr.w	r3, [sl]
 8008f6a:	4499      	add	r9, r3
 8008f6c:	e7d3      	b.n	8008f16 <__cvt+0x6a>
 8008f6e:	1c59      	adds	r1, r3, #1
 8008f70:	9103      	str	r1, [sp, #12]
 8008f72:	701a      	strb	r2, [r3, #0]
 8008f74:	e7d9      	b.n	8008f2a <__cvt+0x7e>

08008f76 <__exponent>:
 8008f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f78:	2900      	cmp	r1, #0
 8008f7a:	bfba      	itte	lt
 8008f7c:	4249      	neglt	r1, r1
 8008f7e:	232d      	movlt	r3, #45	@ 0x2d
 8008f80:	232b      	movge	r3, #43	@ 0x2b
 8008f82:	2909      	cmp	r1, #9
 8008f84:	7002      	strb	r2, [r0, #0]
 8008f86:	7043      	strb	r3, [r0, #1]
 8008f88:	dd29      	ble.n	8008fde <__exponent+0x68>
 8008f8a:	f10d 0307 	add.w	r3, sp, #7
 8008f8e:	461d      	mov	r5, r3
 8008f90:	270a      	movs	r7, #10
 8008f92:	461a      	mov	r2, r3
 8008f94:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f98:	fb07 1416 	mls	r4, r7, r6, r1
 8008f9c:	3430      	adds	r4, #48	@ 0x30
 8008f9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	2c63      	cmp	r4, #99	@ 0x63
 8008fa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008faa:	4631      	mov	r1, r6
 8008fac:	dcf1      	bgt.n	8008f92 <__exponent+0x1c>
 8008fae:	3130      	adds	r1, #48	@ 0x30
 8008fb0:	1e94      	subs	r4, r2, #2
 8008fb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008fb6:	1c41      	adds	r1, r0, #1
 8008fb8:	4623      	mov	r3, r4
 8008fba:	42ab      	cmp	r3, r5
 8008fbc:	d30a      	bcc.n	8008fd4 <__exponent+0x5e>
 8008fbe:	f10d 0309 	add.w	r3, sp, #9
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	42ac      	cmp	r4, r5
 8008fc6:	bf88      	it	hi
 8008fc8:	2300      	movhi	r3, #0
 8008fca:	3302      	adds	r3, #2
 8008fcc:	4403      	add	r3, r0
 8008fce:	1a18      	subs	r0, r3, r0
 8008fd0:	b003      	add	sp, #12
 8008fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008fd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008fdc:	e7ed      	b.n	8008fba <__exponent+0x44>
 8008fde:	2330      	movs	r3, #48	@ 0x30
 8008fe0:	3130      	adds	r1, #48	@ 0x30
 8008fe2:	7083      	strb	r3, [r0, #2]
 8008fe4:	70c1      	strb	r1, [r0, #3]
 8008fe6:	1d03      	adds	r3, r0, #4
 8008fe8:	e7f1      	b.n	8008fce <__exponent+0x58>
	...

08008fec <_printf_float>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	b08d      	sub	sp, #52	@ 0x34
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	461f      	mov	r7, r3
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	f000 fcdb 	bl	80099b8 <_localeconv_r>
 8009002:	6803      	ldr	r3, [r0, #0]
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	4618      	mov	r0, r3
 8009008:	f7f7 f952 	bl	80002b0 <strlen>
 800900c:	2300      	movs	r3, #0
 800900e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009010:	f8d8 3000 	ldr.w	r3, [r8]
 8009014:	9005      	str	r0, [sp, #20]
 8009016:	3307      	adds	r3, #7
 8009018:	f023 0307 	bic.w	r3, r3, #7
 800901c:	f103 0208 	add.w	r2, r3, #8
 8009020:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009024:	f8d4 b000 	ldr.w	fp, [r4]
 8009028:	f8c8 2000 	str.w	r2, [r8]
 800902c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009030:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	f8cd 8018 	str.w	r8, [sp, #24]
 800903a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800903e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009042:	4b9c      	ldr	r3, [pc, #624]	@ (80092b4 <_printf_float+0x2c8>)
 8009044:	f04f 32ff 	mov.w	r2, #4294967295
 8009048:	f7f7 fd90 	bl	8000b6c <__aeabi_dcmpun>
 800904c:	bb70      	cbnz	r0, 80090ac <_printf_float+0xc0>
 800904e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009052:	4b98      	ldr	r3, [pc, #608]	@ (80092b4 <_printf_float+0x2c8>)
 8009054:	f04f 32ff 	mov.w	r2, #4294967295
 8009058:	f7f7 fd6a 	bl	8000b30 <__aeabi_dcmple>
 800905c:	bb30      	cbnz	r0, 80090ac <_printf_float+0xc0>
 800905e:	2200      	movs	r2, #0
 8009060:	2300      	movs	r3, #0
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fd59 	bl	8000b1c <__aeabi_dcmplt>
 800906a:	b110      	cbz	r0, 8009072 <_printf_float+0x86>
 800906c:	232d      	movs	r3, #45	@ 0x2d
 800906e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009072:	4a91      	ldr	r2, [pc, #580]	@ (80092b8 <_printf_float+0x2cc>)
 8009074:	4b91      	ldr	r3, [pc, #580]	@ (80092bc <_printf_float+0x2d0>)
 8009076:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800907a:	bf94      	ite	ls
 800907c:	4690      	movls	r8, r2
 800907e:	4698      	movhi	r8, r3
 8009080:	2303      	movs	r3, #3
 8009082:	6123      	str	r3, [r4, #16]
 8009084:	f02b 0304 	bic.w	r3, fp, #4
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	9700      	str	r7, [sp, #0]
 8009090:	4633      	mov	r3, r6
 8009092:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009094:	4621      	mov	r1, r4
 8009096:	4628      	mov	r0, r5
 8009098:	f000 f9d2 	bl	8009440 <_printf_common>
 800909c:	3001      	adds	r0, #1
 800909e:	f040 808d 	bne.w	80091bc <_printf_float+0x1d0>
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295
 80090a6:	b00d      	add	sp, #52	@ 0x34
 80090a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 fd5a 	bl	8000b6c <__aeabi_dcmpun>
 80090b8:	b140      	cbz	r0, 80090cc <_printf_float+0xe0>
 80090ba:	464b      	mov	r3, r9
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bfbc      	itt	lt
 80090c0:	232d      	movlt	r3, #45	@ 0x2d
 80090c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80090c6:	4a7e      	ldr	r2, [pc, #504]	@ (80092c0 <_printf_float+0x2d4>)
 80090c8:	4b7e      	ldr	r3, [pc, #504]	@ (80092c4 <_printf_float+0x2d8>)
 80090ca:	e7d4      	b.n	8009076 <_printf_float+0x8a>
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80090d2:	9206      	str	r2, [sp, #24]
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	d13b      	bne.n	8009150 <_printf_float+0x164>
 80090d8:	2306      	movs	r3, #6
 80090da:	6063      	str	r3, [r4, #4]
 80090dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80090e0:	2300      	movs	r3, #0
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80090e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80090ec:	ab09      	add	r3, sp, #36	@ 0x24
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	6861      	ldr	r1, [r4, #4]
 80090f2:	ec49 8b10 	vmov	d0, r8, r9
 80090f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7ff fed6 	bl	8008eac <__cvt>
 8009100:	9b06      	ldr	r3, [sp, #24]
 8009102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009104:	2b47      	cmp	r3, #71	@ 0x47
 8009106:	4680      	mov	r8, r0
 8009108:	d129      	bne.n	800915e <_printf_float+0x172>
 800910a:	1cc8      	adds	r0, r1, #3
 800910c:	db02      	blt.n	8009114 <_printf_float+0x128>
 800910e:	6863      	ldr	r3, [r4, #4]
 8009110:	4299      	cmp	r1, r3
 8009112:	dd41      	ble.n	8009198 <_printf_float+0x1ac>
 8009114:	f1aa 0a02 	sub.w	sl, sl, #2
 8009118:	fa5f fa8a 	uxtb.w	sl, sl
 800911c:	3901      	subs	r1, #1
 800911e:	4652      	mov	r2, sl
 8009120:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009124:	9109      	str	r1, [sp, #36]	@ 0x24
 8009126:	f7ff ff26 	bl	8008f76 <__exponent>
 800912a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800912c:	1813      	adds	r3, r2, r0
 800912e:	2a01      	cmp	r2, #1
 8009130:	4681      	mov	r9, r0
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	dc02      	bgt.n	800913c <_printf_float+0x150>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	07d2      	lsls	r2, r2, #31
 800913a:	d501      	bpl.n	8009140 <_printf_float+0x154>
 800913c:	3301      	adds	r3, #1
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0a2      	beq.n	800908e <_printf_float+0xa2>
 8009148:	232d      	movs	r3, #45	@ 0x2d
 800914a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800914e:	e79e      	b.n	800908e <_printf_float+0xa2>
 8009150:	9a06      	ldr	r2, [sp, #24]
 8009152:	2a47      	cmp	r2, #71	@ 0x47
 8009154:	d1c2      	bne.n	80090dc <_printf_float+0xf0>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1c0      	bne.n	80090dc <_printf_float+0xf0>
 800915a:	2301      	movs	r3, #1
 800915c:	e7bd      	b.n	80090da <_printf_float+0xee>
 800915e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009162:	d9db      	bls.n	800911c <_printf_float+0x130>
 8009164:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009168:	d118      	bne.n	800919c <_printf_float+0x1b0>
 800916a:	2900      	cmp	r1, #0
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	dd0b      	ble.n	8009188 <_printf_float+0x19c>
 8009170:	6121      	str	r1, [r4, #16]
 8009172:	b913      	cbnz	r3, 800917a <_printf_float+0x18e>
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	07d0      	lsls	r0, r2, #31
 8009178:	d502      	bpl.n	8009180 <_printf_float+0x194>
 800917a:	3301      	adds	r3, #1
 800917c:	440b      	add	r3, r1
 800917e:	6123      	str	r3, [r4, #16]
 8009180:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	e7db      	b.n	8009140 <_printf_float+0x154>
 8009188:	b913      	cbnz	r3, 8009190 <_printf_float+0x1a4>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	07d2      	lsls	r2, r2, #31
 800918e:	d501      	bpl.n	8009194 <_printf_float+0x1a8>
 8009190:	3302      	adds	r3, #2
 8009192:	e7f4      	b.n	800917e <_printf_float+0x192>
 8009194:	2301      	movs	r3, #1
 8009196:	e7f2      	b.n	800917e <_printf_float+0x192>
 8009198:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800919c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800919e:	4299      	cmp	r1, r3
 80091a0:	db05      	blt.n	80091ae <_printf_float+0x1c2>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	6121      	str	r1, [r4, #16]
 80091a6:	07d8      	lsls	r0, r3, #31
 80091a8:	d5ea      	bpl.n	8009180 <_printf_float+0x194>
 80091aa:	1c4b      	adds	r3, r1, #1
 80091ac:	e7e7      	b.n	800917e <_printf_float+0x192>
 80091ae:	2900      	cmp	r1, #0
 80091b0:	bfd4      	ite	le
 80091b2:	f1c1 0202 	rsble	r2, r1, #2
 80091b6:	2201      	movgt	r2, #1
 80091b8:	4413      	add	r3, r2
 80091ba:	e7e0      	b.n	800917e <_printf_float+0x192>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	055a      	lsls	r2, r3, #21
 80091c0:	d407      	bmi.n	80091d2 <_printf_float+0x1e6>
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	4642      	mov	r2, r8
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	d12b      	bne.n	8009228 <_printf_float+0x23c>
 80091d0:	e767      	b.n	80090a2 <_printf_float+0xb6>
 80091d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091d6:	f240 80dd 	bls.w	8009394 <_printf_float+0x3a8>
 80091da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091de:	2200      	movs	r2, #0
 80091e0:	2300      	movs	r3, #0
 80091e2:	f7f7 fc91 	bl	8000b08 <__aeabi_dcmpeq>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d033      	beq.n	8009252 <_printf_float+0x266>
 80091ea:	4a37      	ldr	r2, [pc, #220]	@ (80092c8 <_printf_float+0x2dc>)
 80091ec:	2301      	movs	r3, #1
 80091ee:	4631      	mov	r1, r6
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b8      	blx	r7
 80091f4:	3001      	adds	r0, #1
 80091f6:	f43f af54 	beq.w	80090a2 <_printf_float+0xb6>
 80091fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091fe:	4543      	cmp	r3, r8
 8009200:	db02      	blt.n	8009208 <_printf_float+0x21c>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	07d8      	lsls	r0, r3, #31
 8009206:	d50f      	bpl.n	8009228 <_printf_float+0x23c>
 8009208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800920c:	4631      	mov	r1, r6
 800920e:	4628      	mov	r0, r5
 8009210:	47b8      	blx	r7
 8009212:	3001      	adds	r0, #1
 8009214:	f43f af45 	beq.w	80090a2 <_printf_float+0xb6>
 8009218:	f04f 0900 	mov.w	r9, #0
 800921c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009220:	f104 0a1a 	add.w	sl, r4, #26
 8009224:	45c8      	cmp	r8, r9
 8009226:	dc09      	bgt.n	800923c <_printf_float+0x250>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	079b      	lsls	r3, r3, #30
 800922c:	f100 8103 	bmi.w	8009436 <_printf_float+0x44a>
 8009230:	68e0      	ldr	r0, [r4, #12]
 8009232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009234:	4298      	cmp	r0, r3
 8009236:	bfb8      	it	lt
 8009238:	4618      	movlt	r0, r3
 800923a:	e734      	b.n	80090a6 <_printf_float+0xba>
 800923c:	2301      	movs	r3, #1
 800923e:	4652      	mov	r2, sl
 8009240:	4631      	mov	r1, r6
 8009242:	4628      	mov	r0, r5
 8009244:	47b8      	blx	r7
 8009246:	3001      	adds	r0, #1
 8009248:	f43f af2b 	beq.w	80090a2 <_printf_float+0xb6>
 800924c:	f109 0901 	add.w	r9, r9, #1
 8009250:	e7e8      	b.n	8009224 <_printf_float+0x238>
 8009252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	dc39      	bgt.n	80092cc <_printf_float+0x2e0>
 8009258:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <_printf_float+0x2dc>)
 800925a:	2301      	movs	r3, #1
 800925c:	4631      	mov	r1, r6
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	f43f af1d 	beq.w	80090a2 <_printf_float+0xb6>
 8009268:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800926c:	ea59 0303 	orrs.w	r3, r9, r3
 8009270:	d102      	bne.n	8009278 <_printf_float+0x28c>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07d9      	lsls	r1, r3, #31
 8009276:	d5d7      	bpl.n	8009228 <_printf_float+0x23c>
 8009278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	47b8      	blx	r7
 8009282:	3001      	adds	r0, #1
 8009284:	f43f af0d 	beq.w	80090a2 <_printf_float+0xb6>
 8009288:	f04f 0a00 	mov.w	sl, #0
 800928c:	f104 0b1a 	add.w	fp, r4, #26
 8009290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009292:	425b      	negs	r3, r3
 8009294:	4553      	cmp	r3, sl
 8009296:	dc01      	bgt.n	800929c <_printf_float+0x2b0>
 8009298:	464b      	mov	r3, r9
 800929a:	e793      	b.n	80091c4 <_printf_float+0x1d8>
 800929c:	2301      	movs	r3, #1
 800929e:	465a      	mov	r2, fp
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f aefb 	beq.w	80090a2 <_printf_float+0xb6>
 80092ac:	f10a 0a01 	add.w	sl, sl, #1
 80092b0:	e7ee      	b.n	8009290 <_printf_float+0x2a4>
 80092b2:	bf00      	nop
 80092b4:	7fefffff 	.word	0x7fefffff
 80092b8:	0800c3e8 	.word	0x0800c3e8
 80092bc:	0800c3ec 	.word	0x0800c3ec
 80092c0:	0800c3f0 	.word	0x0800c3f0
 80092c4:	0800c3f4 	.word	0x0800c3f4
 80092c8:	0800c3f8 	.word	0x0800c3f8
 80092cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092d2:	4553      	cmp	r3, sl
 80092d4:	bfa8      	it	ge
 80092d6:	4653      	movge	r3, sl
 80092d8:	2b00      	cmp	r3, #0
 80092da:	4699      	mov	r9, r3
 80092dc:	dc36      	bgt.n	800934c <_printf_float+0x360>
 80092de:	f04f 0b00 	mov.w	fp, #0
 80092e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092e6:	f104 021a 	add.w	r2, r4, #26
 80092ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80092ec:	9306      	str	r3, [sp, #24]
 80092ee:	eba3 0309 	sub.w	r3, r3, r9
 80092f2:	455b      	cmp	r3, fp
 80092f4:	dc31      	bgt.n	800935a <_printf_float+0x36e>
 80092f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f8:	459a      	cmp	sl, r3
 80092fa:	dc3a      	bgt.n	8009372 <_printf_float+0x386>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07da      	lsls	r2, r3, #31
 8009300:	d437      	bmi.n	8009372 <_printf_float+0x386>
 8009302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009304:	ebaa 0903 	sub.w	r9, sl, r3
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	ebaa 0303 	sub.w	r3, sl, r3
 800930e:	4599      	cmp	r9, r3
 8009310:	bfa8      	it	ge
 8009312:	4699      	movge	r9, r3
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	dc33      	bgt.n	8009382 <_printf_float+0x396>
 800931a:	f04f 0800 	mov.w	r8, #0
 800931e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009322:	f104 0b1a 	add.w	fp, r4, #26
 8009326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009328:	ebaa 0303 	sub.w	r3, sl, r3
 800932c:	eba3 0309 	sub.w	r3, r3, r9
 8009330:	4543      	cmp	r3, r8
 8009332:	f77f af79 	ble.w	8009228 <_printf_float+0x23c>
 8009336:	2301      	movs	r3, #1
 8009338:	465a      	mov	r2, fp
 800933a:	4631      	mov	r1, r6
 800933c:	4628      	mov	r0, r5
 800933e:	47b8      	blx	r7
 8009340:	3001      	adds	r0, #1
 8009342:	f43f aeae 	beq.w	80090a2 <_printf_float+0xb6>
 8009346:	f108 0801 	add.w	r8, r8, #1
 800934a:	e7ec      	b.n	8009326 <_printf_float+0x33a>
 800934c:	4642      	mov	r2, r8
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	47b8      	blx	r7
 8009354:	3001      	adds	r0, #1
 8009356:	d1c2      	bne.n	80092de <_printf_float+0x2f2>
 8009358:	e6a3      	b.n	80090a2 <_printf_float+0xb6>
 800935a:	2301      	movs	r3, #1
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	9206      	str	r2, [sp, #24]
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	f43f ae9c 	beq.w	80090a2 <_printf_float+0xb6>
 800936a:	9a06      	ldr	r2, [sp, #24]
 800936c:	f10b 0b01 	add.w	fp, fp, #1
 8009370:	e7bb      	b.n	80092ea <_printf_float+0x2fe>
 8009372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	d1c0      	bne.n	8009302 <_printf_float+0x316>
 8009380:	e68f      	b.n	80090a2 <_printf_float+0xb6>
 8009382:	9a06      	ldr	r2, [sp, #24]
 8009384:	464b      	mov	r3, r9
 8009386:	4442      	add	r2, r8
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	d1c3      	bne.n	800931a <_printf_float+0x32e>
 8009392:	e686      	b.n	80090a2 <_printf_float+0xb6>
 8009394:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009398:	f1ba 0f01 	cmp.w	sl, #1
 800939c:	dc01      	bgt.n	80093a2 <_printf_float+0x3b6>
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	d536      	bpl.n	8009410 <_printf_float+0x424>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4642      	mov	r2, r8
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f ae78 	beq.w	80090a2 <_printf_float+0xb6>
 80093b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093b6:	4631      	mov	r1, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	47b8      	blx	r7
 80093bc:	3001      	adds	r0, #1
 80093be:	f43f ae70 	beq.w	80090a2 <_printf_float+0xb6>
 80093c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ce:	f7f7 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 80093d2:	b9c0      	cbnz	r0, 8009406 <_printf_float+0x41a>
 80093d4:	4653      	mov	r3, sl
 80093d6:	f108 0201 	add.w	r2, r8, #1
 80093da:	4631      	mov	r1, r6
 80093dc:	4628      	mov	r0, r5
 80093de:	47b8      	blx	r7
 80093e0:	3001      	adds	r0, #1
 80093e2:	d10c      	bne.n	80093fe <_printf_float+0x412>
 80093e4:	e65d      	b.n	80090a2 <_printf_float+0xb6>
 80093e6:	2301      	movs	r3, #1
 80093e8:	465a      	mov	r2, fp
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae56 	beq.w	80090a2 <_printf_float+0xb6>
 80093f6:	f108 0801 	add.w	r8, r8, #1
 80093fa:	45d0      	cmp	r8, sl
 80093fc:	dbf3      	blt.n	80093e6 <_printf_float+0x3fa>
 80093fe:	464b      	mov	r3, r9
 8009400:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009404:	e6df      	b.n	80091c6 <_printf_float+0x1da>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	f104 0b1a 	add.w	fp, r4, #26
 800940e:	e7f4      	b.n	80093fa <_printf_float+0x40e>
 8009410:	2301      	movs	r3, #1
 8009412:	4642      	mov	r2, r8
 8009414:	e7e1      	b.n	80093da <_printf_float+0x3ee>
 8009416:	2301      	movs	r3, #1
 8009418:	464a      	mov	r2, r9
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f ae3e 	beq.w	80090a2 <_printf_float+0xb6>
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	4543      	cmp	r3, r8
 8009432:	dcf0      	bgt.n	8009416 <_printf_float+0x42a>
 8009434:	e6fc      	b.n	8009230 <_printf_float+0x244>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	f104 0919 	add.w	r9, r4, #25
 800943e:	e7f4      	b.n	800942a <_printf_float+0x43e>

08009440 <_printf_common>:
 8009440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	4616      	mov	r6, r2
 8009446:	4698      	mov	r8, r3
 8009448:	688a      	ldr	r2, [r1, #8]
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009450:	4293      	cmp	r3, r2
 8009452:	bfb8      	it	lt
 8009454:	4613      	movlt	r3, r2
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800945c:	4607      	mov	r7, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b10a      	cbz	r2, 8009466 <_printf_common+0x26>
 8009462:	3301      	adds	r3, #1
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	0699      	lsls	r1, r3, #26
 800946a:	bf42      	ittt	mi
 800946c:	6833      	ldrmi	r3, [r6, #0]
 800946e:	3302      	addmi	r3, #2
 8009470:	6033      	strmi	r3, [r6, #0]
 8009472:	6825      	ldr	r5, [r4, #0]
 8009474:	f015 0506 	ands.w	r5, r5, #6
 8009478:	d106      	bne.n	8009488 <_printf_common+0x48>
 800947a:	f104 0a19 	add.w	sl, r4, #25
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	6832      	ldr	r2, [r6, #0]
 8009482:	1a9b      	subs	r3, r3, r2
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc26      	bgt.n	80094d6 <_printf_common+0x96>
 8009488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	3b00      	subs	r3, #0
 8009490:	bf18      	it	ne
 8009492:	2301      	movne	r3, #1
 8009494:	0692      	lsls	r2, r2, #26
 8009496:	d42b      	bmi.n	80094f0 <_printf_common+0xb0>
 8009498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800949c:	4641      	mov	r1, r8
 800949e:	4638      	mov	r0, r7
 80094a0:	47c8      	blx	r9
 80094a2:	3001      	adds	r0, #1
 80094a4:	d01e      	beq.n	80094e4 <_printf_common+0xa4>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	6922      	ldr	r2, [r4, #16]
 80094aa:	f003 0306 	and.w	r3, r3, #6
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	bf02      	ittt	eq
 80094b2:	68e5      	ldreq	r5, [r4, #12]
 80094b4:	6833      	ldreq	r3, [r6, #0]
 80094b6:	1aed      	subeq	r5, r5, r3
 80094b8:	68a3      	ldr	r3, [r4, #8]
 80094ba:	bf0c      	ite	eq
 80094bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c0:	2500      	movne	r5, #0
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bfc4      	itt	gt
 80094c6:	1a9b      	subgt	r3, r3, r2
 80094c8:	18ed      	addgt	r5, r5, r3
 80094ca:	2600      	movs	r6, #0
 80094cc:	341a      	adds	r4, #26
 80094ce:	42b5      	cmp	r5, r6
 80094d0:	d11a      	bne.n	8009508 <_printf_common+0xc8>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e008      	b.n	80094e8 <_printf_common+0xa8>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4641      	mov	r1, r8
 80094dc:	4638      	mov	r0, r7
 80094de:	47c8      	blx	r9
 80094e0:	3001      	adds	r0, #1
 80094e2:	d103      	bne.n	80094ec <_printf_common+0xac>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	3501      	adds	r5, #1
 80094ee:	e7c6      	b.n	800947e <_printf_common+0x3e>
 80094f0:	18e1      	adds	r1, r4, r3
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	2030      	movs	r0, #48	@ 0x30
 80094f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094fa:	4422      	add	r2, r4
 80094fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009504:	3302      	adds	r3, #2
 8009506:	e7c7      	b.n	8009498 <_printf_common+0x58>
 8009508:	2301      	movs	r3, #1
 800950a:	4622      	mov	r2, r4
 800950c:	4641      	mov	r1, r8
 800950e:	4638      	mov	r0, r7
 8009510:	47c8      	blx	r9
 8009512:	3001      	adds	r0, #1
 8009514:	d0e6      	beq.n	80094e4 <_printf_common+0xa4>
 8009516:	3601      	adds	r6, #1
 8009518:	e7d9      	b.n	80094ce <_printf_common+0x8e>
	...

0800951c <_printf_i>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	7e0f      	ldrb	r7, [r1, #24]
 8009522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009524:	2f78      	cmp	r7, #120	@ 0x78
 8009526:	4691      	mov	r9, r2
 8009528:	4680      	mov	r8, r0
 800952a:	460c      	mov	r4, r1
 800952c:	469a      	mov	sl, r3
 800952e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009532:	d807      	bhi.n	8009544 <_printf_i+0x28>
 8009534:	2f62      	cmp	r7, #98	@ 0x62
 8009536:	d80a      	bhi.n	800954e <_printf_i+0x32>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f000 80d2 	beq.w	80096e2 <_printf_i+0x1c6>
 800953e:	2f58      	cmp	r7, #88	@ 0x58
 8009540:	f000 80b9 	beq.w	80096b6 <_printf_i+0x19a>
 8009544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800954c:	e03a      	b.n	80095c4 <_printf_i+0xa8>
 800954e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009552:	2b15      	cmp	r3, #21
 8009554:	d8f6      	bhi.n	8009544 <_printf_i+0x28>
 8009556:	a101      	add	r1, pc, #4	@ (adr r1, 800955c <_printf_i+0x40>)
 8009558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800955c:	080095b5 	.word	0x080095b5
 8009560:	080095c9 	.word	0x080095c9
 8009564:	08009545 	.word	0x08009545
 8009568:	08009545 	.word	0x08009545
 800956c:	08009545 	.word	0x08009545
 8009570:	08009545 	.word	0x08009545
 8009574:	080095c9 	.word	0x080095c9
 8009578:	08009545 	.word	0x08009545
 800957c:	08009545 	.word	0x08009545
 8009580:	08009545 	.word	0x08009545
 8009584:	08009545 	.word	0x08009545
 8009588:	080096c9 	.word	0x080096c9
 800958c:	080095f3 	.word	0x080095f3
 8009590:	08009683 	.word	0x08009683
 8009594:	08009545 	.word	0x08009545
 8009598:	08009545 	.word	0x08009545
 800959c:	080096eb 	.word	0x080096eb
 80095a0:	08009545 	.word	0x08009545
 80095a4:	080095f3 	.word	0x080095f3
 80095a8:	08009545 	.word	0x08009545
 80095ac:	08009545 	.word	0x08009545
 80095b0:	0800968b 	.word	0x0800968b
 80095b4:	6833      	ldr	r3, [r6, #0]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6032      	str	r2, [r6, #0]
 80095bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80095c4:	2301      	movs	r3, #1
 80095c6:	e09d      	b.n	8009704 <_printf_i+0x1e8>
 80095c8:	6833      	ldr	r3, [r6, #0]
 80095ca:	6820      	ldr	r0, [r4, #0]
 80095cc:	1d19      	adds	r1, r3, #4
 80095ce:	6031      	str	r1, [r6, #0]
 80095d0:	0606      	lsls	r6, r0, #24
 80095d2:	d501      	bpl.n	80095d8 <_printf_i+0xbc>
 80095d4:	681d      	ldr	r5, [r3, #0]
 80095d6:	e003      	b.n	80095e0 <_printf_i+0xc4>
 80095d8:	0645      	lsls	r5, r0, #25
 80095da:	d5fb      	bpl.n	80095d4 <_printf_i+0xb8>
 80095dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80095e0:	2d00      	cmp	r5, #0
 80095e2:	da03      	bge.n	80095ec <_printf_i+0xd0>
 80095e4:	232d      	movs	r3, #45	@ 0x2d
 80095e6:	426d      	negs	r5, r5
 80095e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095ec:	4859      	ldr	r0, [pc, #356]	@ (8009754 <_printf_i+0x238>)
 80095ee:	230a      	movs	r3, #10
 80095f0:	e011      	b.n	8009616 <_printf_i+0xfa>
 80095f2:	6821      	ldr	r1, [r4, #0]
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	0608      	lsls	r0, r1, #24
 80095f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80095fc:	d402      	bmi.n	8009604 <_printf_i+0xe8>
 80095fe:	0649      	lsls	r1, r1, #25
 8009600:	bf48      	it	mi
 8009602:	b2ad      	uxthmi	r5, r5
 8009604:	2f6f      	cmp	r7, #111	@ 0x6f
 8009606:	4853      	ldr	r0, [pc, #332]	@ (8009754 <_printf_i+0x238>)
 8009608:	6033      	str	r3, [r6, #0]
 800960a:	bf14      	ite	ne
 800960c:	230a      	movne	r3, #10
 800960e:	2308      	moveq	r3, #8
 8009610:	2100      	movs	r1, #0
 8009612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009616:	6866      	ldr	r6, [r4, #4]
 8009618:	60a6      	str	r6, [r4, #8]
 800961a:	2e00      	cmp	r6, #0
 800961c:	bfa2      	ittt	ge
 800961e:	6821      	ldrge	r1, [r4, #0]
 8009620:	f021 0104 	bicge.w	r1, r1, #4
 8009624:	6021      	strge	r1, [r4, #0]
 8009626:	b90d      	cbnz	r5, 800962c <_printf_i+0x110>
 8009628:	2e00      	cmp	r6, #0
 800962a:	d04b      	beq.n	80096c4 <_printf_i+0x1a8>
 800962c:	4616      	mov	r6, r2
 800962e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009632:	fb03 5711 	mls	r7, r3, r1, r5
 8009636:	5dc7      	ldrb	r7, [r0, r7]
 8009638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800963c:	462f      	mov	r7, r5
 800963e:	42bb      	cmp	r3, r7
 8009640:	460d      	mov	r5, r1
 8009642:	d9f4      	bls.n	800962e <_printf_i+0x112>
 8009644:	2b08      	cmp	r3, #8
 8009646:	d10b      	bne.n	8009660 <_printf_i+0x144>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	07df      	lsls	r7, r3, #31
 800964c:	d508      	bpl.n	8009660 <_printf_i+0x144>
 800964e:	6923      	ldr	r3, [r4, #16]
 8009650:	6861      	ldr	r1, [r4, #4]
 8009652:	4299      	cmp	r1, r3
 8009654:	bfde      	ittt	le
 8009656:	2330      	movle	r3, #48	@ 0x30
 8009658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800965c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009660:	1b92      	subs	r2, r2, r6
 8009662:	6122      	str	r2, [r4, #16]
 8009664:	f8cd a000 	str.w	sl, [sp]
 8009668:	464b      	mov	r3, r9
 800966a:	aa03      	add	r2, sp, #12
 800966c:	4621      	mov	r1, r4
 800966e:	4640      	mov	r0, r8
 8009670:	f7ff fee6 	bl	8009440 <_printf_common>
 8009674:	3001      	adds	r0, #1
 8009676:	d14a      	bne.n	800970e <_printf_i+0x1f2>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	b004      	add	sp, #16
 800967e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f043 0320 	orr.w	r3, r3, #32
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	4833      	ldr	r0, [pc, #204]	@ (8009758 <_printf_i+0x23c>)
 800968c:	2778      	movs	r7, #120	@ 0x78
 800968e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	6831      	ldr	r1, [r6, #0]
 8009696:	061f      	lsls	r7, r3, #24
 8009698:	f851 5b04 	ldr.w	r5, [r1], #4
 800969c:	d402      	bmi.n	80096a4 <_printf_i+0x188>
 800969e:	065f      	lsls	r7, r3, #25
 80096a0:	bf48      	it	mi
 80096a2:	b2ad      	uxthmi	r5, r5
 80096a4:	6031      	str	r1, [r6, #0]
 80096a6:	07d9      	lsls	r1, r3, #31
 80096a8:	bf44      	itt	mi
 80096aa:	f043 0320 	orrmi.w	r3, r3, #32
 80096ae:	6023      	strmi	r3, [r4, #0]
 80096b0:	b11d      	cbz	r5, 80096ba <_printf_i+0x19e>
 80096b2:	2310      	movs	r3, #16
 80096b4:	e7ac      	b.n	8009610 <_printf_i+0xf4>
 80096b6:	4827      	ldr	r0, [pc, #156]	@ (8009754 <_printf_i+0x238>)
 80096b8:	e7e9      	b.n	800968e <_printf_i+0x172>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f023 0320 	bic.w	r3, r3, #32
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	e7f6      	b.n	80096b2 <_printf_i+0x196>
 80096c4:	4616      	mov	r6, r2
 80096c6:	e7bd      	b.n	8009644 <_printf_i+0x128>
 80096c8:	6833      	ldr	r3, [r6, #0]
 80096ca:	6825      	ldr	r5, [r4, #0]
 80096cc:	6961      	ldr	r1, [r4, #20]
 80096ce:	1d18      	adds	r0, r3, #4
 80096d0:	6030      	str	r0, [r6, #0]
 80096d2:	062e      	lsls	r6, r5, #24
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	d501      	bpl.n	80096dc <_printf_i+0x1c0>
 80096d8:	6019      	str	r1, [r3, #0]
 80096da:	e002      	b.n	80096e2 <_printf_i+0x1c6>
 80096dc:	0668      	lsls	r0, r5, #25
 80096de:	d5fb      	bpl.n	80096d8 <_printf_i+0x1bc>
 80096e0:	8019      	strh	r1, [r3, #0]
 80096e2:	2300      	movs	r3, #0
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	4616      	mov	r6, r2
 80096e8:	e7bc      	b.n	8009664 <_printf_i+0x148>
 80096ea:	6833      	ldr	r3, [r6, #0]
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	6032      	str	r2, [r6, #0]
 80096f0:	681e      	ldr	r6, [r3, #0]
 80096f2:	6862      	ldr	r2, [r4, #4]
 80096f4:	2100      	movs	r1, #0
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7f6 fd8a 	bl	8000210 <memchr>
 80096fc:	b108      	cbz	r0, 8009702 <_printf_i+0x1e6>
 80096fe:	1b80      	subs	r0, r0, r6
 8009700:	6060      	str	r0, [r4, #4]
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	6123      	str	r3, [r4, #16]
 8009706:	2300      	movs	r3, #0
 8009708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800970c:	e7aa      	b.n	8009664 <_printf_i+0x148>
 800970e:	6923      	ldr	r3, [r4, #16]
 8009710:	4632      	mov	r2, r6
 8009712:	4649      	mov	r1, r9
 8009714:	4640      	mov	r0, r8
 8009716:	47d0      	blx	sl
 8009718:	3001      	adds	r0, #1
 800971a:	d0ad      	beq.n	8009678 <_printf_i+0x15c>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	079b      	lsls	r3, r3, #30
 8009720:	d413      	bmi.n	800974a <_printf_i+0x22e>
 8009722:	68e0      	ldr	r0, [r4, #12]
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	4298      	cmp	r0, r3
 8009728:	bfb8      	it	lt
 800972a:	4618      	movlt	r0, r3
 800972c:	e7a6      	b.n	800967c <_printf_i+0x160>
 800972e:	2301      	movs	r3, #1
 8009730:	4632      	mov	r2, r6
 8009732:	4649      	mov	r1, r9
 8009734:	4640      	mov	r0, r8
 8009736:	47d0      	blx	sl
 8009738:	3001      	adds	r0, #1
 800973a:	d09d      	beq.n	8009678 <_printf_i+0x15c>
 800973c:	3501      	adds	r5, #1
 800973e:	68e3      	ldr	r3, [r4, #12]
 8009740:	9903      	ldr	r1, [sp, #12]
 8009742:	1a5b      	subs	r3, r3, r1
 8009744:	42ab      	cmp	r3, r5
 8009746:	dcf2      	bgt.n	800972e <_printf_i+0x212>
 8009748:	e7eb      	b.n	8009722 <_printf_i+0x206>
 800974a:	2500      	movs	r5, #0
 800974c:	f104 0619 	add.w	r6, r4, #25
 8009750:	e7f5      	b.n	800973e <_printf_i+0x222>
 8009752:	bf00      	nop
 8009754:	0800c3fa 	.word	0x0800c3fa
 8009758:	0800c40b 	.word	0x0800c40b

0800975c <std>:
 800975c:	2300      	movs	r3, #0
 800975e:	b510      	push	{r4, lr}
 8009760:	4604      	mov	r4, r0
 8009762:	e9c0 3300 	strd	r3, r3, [r0]
 8009766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800976a:	6083      	str	r3, [r0, #8]
 800976c:	8181      	strh	r1, [r0, #12]
 800976e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009770:	81c2      	strh	r2, [r0, #14]
 8009772:	6183      	str	r3, [r0, #24]
 8009774:	4619      	mov	r1, r3
 8009776:	2208      	movs	r2, #8
 8009778:	305c      	adds	r0, #92	@ 0x5c
 800977a:	f000 f914 	bl	80099a6 <memset>
 800977e:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <std+0x58>)
 8009780:	6263      	str	r3, [r4, #36]	@ 0x24
 8009782:	4b0d      	ldr	r3, [pc, #52]	@ (80097b8 <std+0x5c>)
 8009784:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009786:	4b0d      	ldr	r3, [pc, #52]	@ (80097bc <std+0x60>)
 8009788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800978a:	4b0d      	ldr	r3, [pc, #52]	@ (80097c0 <std+0x64>)
 800978c:	6323      	str	r3, [r4, #48]	@ 0x30
 800978e:	4b0d      	ldr	r3, [pc, #52]	@ (80097c4 <std+0x68>)
 8009790:	6224      	str	r4, [r4, #32]
 8009792:	429c      	cmp	r4, r3
 8009794:	d006      	beq.n	80097a4 <std+0x48>
 8009796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800979a:	4294      	cmp	r4, r2
 800979c:	d002      	beq.n	80097a4 <std+0x48>
 800979e:	33d0      	adds	r3, #208	@ 0xd0
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d105      	bne.n	80097b0 <std+0x54>
 80097a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ac:	f000 b9ce 	b.w	8009b4c <__retarget_lock_init_recursive>
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	bf00      	nop
 80097b4:	08009921 	.word	0x08009921
 80097b8:	08009943 	.word	0x08009943
 80097bc:	0800997b 	.word	0x0800997b
 80097c0:	0800999f 	.word	0x0800999f
 80097c4:	200127c0 	.word	0x200127c0

080097c8 <stdio_exit_handler>:
 80097c8:	4a02      	ldr	r2, [pc, #8]	@ (80097d4 <stdio_exit_handler+0xc>)
 80097ca:	4903      	ldr	r1, [pc, #12]	@ (80097d8 <stdio_exit_handler+0x10>)
 80097cc:	4803      	ldr	r0, [pc, #12]	@ (80097dc <stdio_exit_handler+0x14>)
 80097ce:	f000 b869 	b.w	80098a4 <_fwalk_sglue>
 80097d2:	bf00      	nop
 80097d4:	20000020 	.word	0x20000020
 80097d8:	0800b4c5 	.word	0x0800b4c5
 80097dc:	20000030 	.word	0x20000030

080097e0 <cleanup_stdio>:
 80097e0:	6841      	ldr	r1, [r0, #4]
 80097e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009814 <cleanup_stdio+0x34>)
 80097e4:	4299      	cmp	r1, r3
 80097e6:	b510      	push	{r4, lr}
 80097e8:	4604      	mov	r4, r0
 80097ea:	d001      	beq.n	80097f0 <cleanup_stdio+0x10>
 80097ec:	f001 fe6a 	bl	800b4c4 <_fflush_r>
 80097f0:	68a1      	ldr	r1, [r4, #8]
 80097f2:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <cleanup_stdio+0x38>)
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d002      	beq.n	80097fe <cleanup_stdio+0x1e>
 80097f8:	4620      	mov	r0, r4
 80097fa:	f001 fe63 	bl	800b4c4 <_fflush_r>
 80097fe:	68e1      	ldr	r1, [r4, #12]
 8009800:	4b06      	ldr	r3, [pc, #24]	@ (800981c <cleanup_stdio+0x3c>)
 8009802:	4299      	cmp	r1, r3
 8009804:	d004      	beq.n	8009810 <cleanup_stdio+0x30>
 8009806:	4620      	mov	r0, r4
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f001 be5a 	b.w	800b4c4 <_fflush_r>
 8009810:	bd10      	pop	{r4, pc}
 8009812:	bf00      	nop
 8009814:	200127c0 	.word	0x200127c0
 8009818:	20012828 	.word	0x20012828
 800981c:	20012890 	.word	0x20012890

08009820 <global_stdio_init.part.0>:
 8009820:	b510      	push	{r4, lr}
 8009822:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <global_stdio_init.part.0+0x30>)
 8009824:	4c0b      	ldr	r4, [pc, #44]	@ (8009854 <global_stdio_init.part.0+0x34>)
 8009826:	4a0c      	ldr	r2, [pc, #48]	@ (8009858 <global_stdio_init.part.0+0x38>)
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	4620      	mov	r0, r4
 800982c:	2200      	movs	r2, #0
 800982e:	2104      	movs	r1, #4
 8009830:	f7ff ff94 	bl	800975c <std>
 8009834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009838:	2201      	movs	r2, #1
 800983a:	2109      	movs	r1, #9
 800983c:	f7ff ff8e 	bl	800975c <std>
 8009840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009844:	2202      	movs	r2, #2
 8009846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984a:	2112      	movs	r1, #18
 800984c:	f7ff bf86 	b.w	800975c <std>
 8009850:	200128f8 	.word	0x200128f8
 8009854:	200127c0 	.word	0x200127c0
 8009858:	080097c9 	.word	0x080097c9

0800985c <__sfp_lock_acquire>:
 800985c:	4801      	ldr	r0, [pc, #4]	@ (8009864 <__sfp_lock_acquire+0x8>)
 800985e:	f000 b976 	b.w	8009b4e <__retarget_lock_acquire_recursive>
 8009862:	bf00      	nop
 8009864:	20012901 	.word	0x20012901

08009868 <__sfp_lock_release>:
 8009868:	4801      	ldr	r0, [pc, #4]	@ (8009870 <__sfp_lock_release+0x8>)
 800986a:	f000 b971 	b.w	8009b50 <__retarget_lock_release_recursive>
 800986e:	bf00      	nop
 8009870:	20012901 	.word	0x20012901

08009874 <__sinit>:
 8009874:	b510      	push	{r4, lr}
 8009876:	4604      	mov	r4, r0
 8009878:	f7ff fff0 	bl	800985c <__sfp_lock_acquire>
 800987c:	6a23      	ldr	r3, [r4, #32]
 800987e:	b11b      	cbz	r3, 8009888 <__sinit+0x14>
 8009880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009884:	f7ff bff0 	b.w	8009868 <__sfp_lock_release>
 8009888:	4b04      	ldr	r3, [pc, #16]	@ (800989c <__sinit+0x28>)
 800988a:	6223      	str	r3, [r4, #32]
 800988c:	4b04      	ldr	r3, [pc, #16]	@ (80098a0 <__sinit+0x2c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f5      	bne.n	8009880 <__sinit+0xc>
 8009894:	f7ff ffc4 	bl	8009820 <global_stdio_init.part.0>
 8009898:	e7f2      	b.n	8009880 <__sinit+0xc>
 800989a:	bf00      	nop
 800989c:	080097e1 	.word	0x080097e1
 80098a0:	200128f8 	.word	0x200128f8

080098a4 <_fwalk_sglue>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	4607      	mov	r7, r0
 80098aa:	4688      	mov	r8, r1
 80098ac:	4614      	mov	r4, r2
 80098ae:	2600      	movs	r6, #0
 80098b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098b4:	f1b9 0901 	subs.w	r9, r9, #1
 80098b8:	d505      	bpl.n	80098c6 <_fwalk_sglue+0x22>
 80098ba:	6824      	ldr	r4, [r4, #0]
 80098bc:	2c00      	cmp	r4, #0
 80098be:	d1f7      	bne.n	80098b0 <_fwalk_sglue+0xc>
 80098c0:	4630      	mov	r0, r6
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d907      	bls.n	80098dc <_fwalk_sglue+0x38>
 80098cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098d0:	3301      	adds	r3, #1
 80098d2:	d003      	beq.n	80098dc <_fwalk_sglue+0x38>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4638      	mov	r0, r7
 80098d8:	47c0      	blx	r8
 80098da:	4306      	orrs	r6, r0
 80098dc:	3568      	adds	r5, #104	@ 0x68
 80098de:	e7e9      	b.n	80098b4 <_fwalk_sglue+0x10>

080098e0 <siprintf>:
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b500      	push	{lr}
 80098e4:	b09c      	sub	sp, #112	@ 0x70
 80098e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80098e8:	9002      	str	r0, [sp, #8]
 80098ea:	9006      	str	r0, [sp, #24]
 80098ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80098f0:	4809      	ldr	r0, [pc, #36]	@ (8009918 <siprintf+0x38>)
 80098f2:	9107      	str	r1, [sp, #28]
 80098f4:	9104      	str	r1, [sp, #16]
 80098f6:	4909      	ldr	r1, [pc, #36]	@ (800991c <siprintf+0x3c>)
 80098f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fc:	9105      	str	r1, [sp, #20]
 80098fe:	6800      	ldr	r0, [r0, #0]
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	a902      	add	r1, sp, #8
 8009904:	f001 fc5e 	bl	800b1c4 <_svfiprintf_r>
 8009908:	9b02      	ldr	r3, [sp, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	b01c      	add	sp, #112	@ 0x70
 8009910:	f85d eb04 	ldr.w	lr, [sp], #4
 8009914:	b003      	add	sp, #12
 8009916:	4770      	bx	lr
 8009918:	2000002c 	.word	0x2000002c
 800991c:	ffff0208 	.word	0xffff0208

08009920 <__sread>:
 8009920:	b510      	push	{r4, lr}
 8009922:	460c      	mov	r4, r1
 8009924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009928:	f000 f8c2 	bl	8009ab0 <_read_r>
 800992c:	2800      	cmp	r0, #0
 800992e:	bfab      	itete	ge
 8009930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009932:	89a3      	ldrhlt	r3, [r4, #12]
 8009934:	181b      	addge	r3, r3, r0
 8009936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800993a:	bfac      	ite	ge
 800993c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800993e:	81a3      	strhlt	r3, [r4, #12]
 8009940:	bd10      	pop	{r4, pc}

08009942 <__swrite>:
 8009942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009946:	461f      	mov	r7, r3
 8009948:	898b      	ldrh	r3, [r1, #12]
 800994a:	05db      	lsls	r3, r3, #23
 800994c:	4605      	mov	r5, r0
 800994e:	460c      	mov	r4, r1
 8009950:	4616      	mov	r6, r2
 8009952:	d505      	bpl.n	8009960 <__swrite+0x1e>
 8009954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009958:	2302      	movs	r3, #2
 800995a:	2200      	movs	r2, #0
 800995c:	f000 f896 	bl	8009a8c <_lseek_r>
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	4628      	mov	r0, r5
 8009972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009976:	f000 b8ad 	b.w	8009ad4 <_write_r>

0800997a <__sseek>:
 800997a:	b510      	push	{r4, lr}
 800997c:	460c      	mov	r4, r1
 800997e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009982:	f000 f883 	bl	8009a8c <_lseek_r>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	89a3      	ldrh	r3, [r4, #12]
 800998a:	bf15      	itete	ne
 800998c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800998e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009996:	81a3      	strheq	r3, [r4, #12]
 8009998:	bf18      	it	ne
 800999a:	81a3      	strhne	r3, [r4, #12]
 800999c:	bd10      	pop	{r4, pc}

0800999e <__sclose>:
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	f000 b80d 	b.w	80099c0 <_close_r>

080099a6 <memset>:
 80099a6:	4402      	add	r2, r0
 80099a8:	4603      	mov	r3, r0
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d100      	bne.n	80099b0 <memset+0xa>
 80099ae:	4770      	bx	lr
 80099b0:	f803 1b01 	strb.w	r1, [r3], #1
 80099b4:	e7f9      	b.n	80099aa <memset+0x4>
	...

080099b8 <_localeconv_r>:
 80099b8:	4800      	ldr	r0, [pc, #0]	@ (80099bc <_localeconv_r+0x4>)
 80099ba:	4770      	bx	lr
 80099bc:	2000016c 	.word	0x2000016c

080099c0 <_close_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d06      	ldr	r5, [pc, #24]	@ (80099dc <_close_r+0x1c>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	602b      	str	r3, [r5, #0]
 80099cc:	f7f8 fca6 	bl	800231c <_close>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_close_r+0x1a>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_close_r+0x1a>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	200128fc 	.word	0x200128fc

080099e0 <_reclaim_reent>:
 80099e0:	4b29      	ldr	r3, [pc, #164]	@ (8009a88 <_reclaim_reent+0xa8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4283      	cmp	r3, r0
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	4604      	mov	r4, r0
 80099ea:	d04b      	beq.n	8009a84 <_reclaim_reent+0xa4>
 80099ec:	69c3      	ldr	r3, [r0, #28]
 80099ee:	b1ab      	cbz	r3, 8009a1c <_reclaim_reent+0x3c>
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	b16b      	cbz	r3, 8009a10 <_reclaim_reent+0x30>
 80099f4:	2500      	movs	r5, #0
 80099f6:	69e3      	ldr	r3, [r4, #28]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	5959      	ldr	r1, [r3, r5]
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d13b      	bne.n	8009a78 <_reclaim_reent+0x98>
 8009a00:	3504      	adds	r5, #4
 8009a02:	2d80      	cmp	r5, #128	@ 0x80
 8009a04:	d1f7      	bne.n	80099f6 <_reclaim_reent+0x16>
 8009a06:	69e3      	ldr	r3, [r4, #28]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	68d9      	ldr	r1, [r3, #12]
 8009a0c:	f000 fefc 	bl	800a808 <_free_r>
 8009a10:	69e3      	ldr	r3, [r4, #28]
 8009a12:	6819      	ldr	r1, [r3, #0]
 8009a14:	b111      	cbz	r1, 8009a1c <_reclaim_reent+0x3c>
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 fef6 	bl	800a808 <_free_r>
 8009a1c:	6961      	ldr	r1, [r4, #20]
 8009a1e:	b111      	cbz	r1, 8009a26 <_reclaim_reent+0x46>
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 fef1 	bl	800a808 <_free_r>
 8009a26:	69e1      	ldr	r1, [r4, #28]
 8009a28:	b111      	cbz	r1, 8009a30 <_reclaim_reent+0x50>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f000 feec 	bl	800a808 <_free_r>
 8009a30:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009a32:	b111      	cbz	r1, 8009a3a <_reclaim_reent+0x5a>
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fee7 	bl	800a808 <_free_r>
 8009a3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a3c:	b111      	cbz	r1, 8009a44 <_reclaim_reent+0x64>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fee2 	bl	800a808 <_free_r>
 8009a44:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009a46:	b111      	cbz	r1, 8009a4e <_reclaim_reent+0x6e>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fedd 	bl	800a808 <_free_r>
 8009a4e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009a50:	b111      	cbz	r1, 8009a58 <_reclaim_reent+0x78>
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 fed8 	bl	800a808 <_free_r>
 8009a58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a5a:	b111      	cbz	r1, 8009a62 <_reclaim_reent+0x82>
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fed3 	bl	800a808 <_free_r>
 8009a62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009a64:	b111      	cbz	r1, 8009a6c <_reclaim_reent+0x8c>
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 fece 	bl	800a808 <_free_r>
 8009a6c:	6a23      	ldr	r3, [r4, #32]
 8009a6e:	b14b      	cbz	r3, 8009a84 <_reclaim_reent+0xa4>
 8009a70:	4620      	mov	r0, r4
 8009a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a76:	4718      	bx	r3
 8009a78:	680e      	ldr	r6, [r1, #0]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fec4 	bl	800a808 <_free_r>
 8009a80:	4631      	mov	r1, r6
 8009a82:	e7bb      	b.n	80099fc <_reclaim_reent+0x1c>
 8009a84:	bd70      	pop	{r4, r5, r6, pc}
 8009a86:	bf00      	nop
 8009a88:	2000002c 	.word	0x2000002c

08009a8c <_lseek_r>:
 8009a8c:	b538      	push	{r3, r4, r5, lr}
 8009a8e:	4d07      	ldr	r5, [pc, #28]	@ (8009aac <_lseek_r+0x20>)
 8009a90:	4604      	mov	r4, r0
 8009a92:	4608      	mov	r0, r1
 8009a94:	4611      	mov	r1, r2
 8009a96:	2200      	movs	r2, #0
 8009a98:	602a      	str	r2, [r5, #0]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f7f8 fc65 	bl	800236a <_lseek>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_lseek_r+0x1e>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_lseek_r+0x1e>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	200128fc 	.word	0x200128fc

08009ab0 <_read_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	@ (8009ad0 <_read_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f8 fbf3 	bl	80022aa <_read>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_read_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_read_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200128fc 	.word	0x200128fc

08009ad4 <_write_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	@ (8009af4 <_write_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f8 fbfe 	bl	80022e4 <_write>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_write_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_write_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200128fc 	.word	0x200128fc

08009af8 <__errno>:
 8009af8:	4b01      	ldr	r3, [pc, #4]	@ (8009b00 <__errno+0x8>)
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	2000002c 	.word	0x2000002c

08009b04 <__libc_init_array>:
 8009b04:	b570      	push	{r4, r5, r6, lr}
 8009b06:	4d0d      	ldr	r5, [pc, #52]	@ (8009b3c <__libc_init_array+0x38>)
 8009b08:	4c0d      	ldr	r4, [pc, #52]	@ (8009b40 <__libc_init_array+0x3c>)
 8009b0a:	1b64      	subs	r4, r4, r5
 8009b0c:	10a4      	asrs	r4, r4, #2
 8009b0e:	2600      	movs	r6, #0
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	d109      	bne.n	8009b28 <__libc_init_array+0x24>
 8009b14:	4d0b      	ldr	r5, [pc, #44]	@ (8009b44 <__libc_init_array+0x40>)
 8009b16:	4c0c      	ldr	r4, [pc, #48]	@ (8009b48 <__libc_init_array+0x44>)
 8009b18:	f002 f9e2 	bl	800bee0 <_init>
 8009b1c:	1b64      	subs	r4, r4, r5
 8009b1e:	10a4      	asrs	r4, r4, #2
 8009b20:	2600      	movs	r6, #0
 8009b22:	42a6      	cmp	r6, r4
 8009b24:	d105      	bne.n	8009b32 <__libc_init_array+0x2e>
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2c:	4798      	blx	r3
 8009b2e:	3601      	adds	r6, #1
 8009b30:	e7ee      	b.n	8009b10 <__libc_init_array+0xc>
 8009b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b36:	4798      	blx	r3
 8009b38:	3601      	adds	r6, #1
 8009b3a:	e7f2      	b.n	8009b22 <__libc_init_array+0x1e>
 8009b3c:	0800c798 	.word	0x0800c798
 8009b40:	0800c798 	.word	0x0800c798
 8009b44:	0800c798 	.word	0x0800c798
 8009b48:	0800c79c 	.word	0x0800c79c

08009b4c <__retarget_lock_init_recursive>:
 8009b4c:	4770      	bx	lr

08009b4e <__retarget_lock_acquire_recursive>:
 8009b4e:	4770      	bx	lr

08009b50 <__retarget_lock_release_recursive>:
 8009b50:	4770      	bx	lr

08009b52 <memcpy>:
 8009b52:	440a      	add	r2, r1
 8009b54:	4291      	cmp	r1, r2
 8009b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5a:	d100      	bne.n	8009b5e <memcpy+0xc>
 8009b5c:	4770      	bx	lr
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b68:	4291      	cmp	r1, r2
 8009b6a:	d1f9      	bne.n	8009b60 <memcpy+0xe>
 8009b6c:	bd10      	pop	{r4, pc}

08009b6e <quorem>:
 8009b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b72:	6903      	ldr	r3, [r0, #16]
 8009b74:	690c      	ldr	r4, [r1, #16]
 8009b76:	42a3      	cmp	r3, r4
 8009b78:	4607      	mov	r7, r0
 8009b7a:	db7e      	blt.n	8009c7a <quorem+0x10c>
 8009b7c:	3c01      	subs	r4, #1
 8009b7e:	f101 0814 	add.w	r8, r1, #20
 8009b82:	00a3      	lsls	r3, r4, #2
 8009b84:	f100 0514 	add.w	r5, r0, #20
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ba0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ba4:	d32e      	bcc.n	8009c04 <quorem+0x96>
 8009ba6:	f04f 0a00 	mov.w	sl, #0
 8009baa:	46c4      	mov	ip, r8
 8009bac:	46ae      	mov	lr, r5
 8009bae:	46d3      	mov	fp, sl
 8009bb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bb4:	b298      	uxth	r0, r3
 8009bb6:	fb06 a000 	mla	r0, r6, r0, sl
 8009bba:	0c02      	lsrs	r2, r0, #16
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	fb06 2303 	mla	r3, r6, r3, r2
 8009bc2:	f8de 2000 	ldr.w	r2, [lr]
 8009bc6:	b280      	uxth	r0, r0
 8009bc8:	b292      	uxth	r2, r2
 8009bca:	1a12      	subs	r2, r2, r0
 8009bcc:	445a      	add	r2, fp
 8009bce:	f8de 0000 	ldr.w	r0, [lr]
 8009bd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009be0:	b292      	uxth	r2, r2
 8009be2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009be6:	45e1      	cmp	r9, ip
 8009be8:	f84e 2b04 	str.w	r2, [lr], #4
 8009bec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bf0:	d2de      	bcs.n	8009bb0 <quorem+0x42>
 8009bf2:	9b00      	ldr	r3, [sp, #0]
 8009bf4:	58eb      	ldr	r3, [r5, r3]
 8009bf6:	b92b      	cbnz	r3, 8009c04 <quorem+0x96>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	3b04      	subs	r3, #4
 8009bfc:	429d      	cmp	r5, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	d32f      	bcc.n	8009c62 <quorem+0xf4>
 8009c02:	613c      	str	r4, [r7, #16]
 8009c04:	4638      	mov	r0, r7
 8009c06:	f001 f979 	bl	800aefc <__mcmp>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	db25      	blt.n	8009c5a <quorem+0xec>
 8009c0e:	4629      	mov	r1, r5
 8009c10:	2000      	movs	r0, #0
 8009c12:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c16:	f8d1 c000 	ldr.w	ip, [r1]
 8009c1a:	fa1f fe82 	uxth.w	lr, r2
 8009c1e:	fa1f f38c 	uxth.w	r3, ip
 8009c22:	eba3 030e 	sub.w	r3, r3, lr
 8009c26:	4403      	add	r3, r0
 8009c28:	0c12      	lsrs	r2, r2, #16
 8009c2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c38:	45c1      	cmp	r9, r8
 8009c3a:	f841 3b04 	str.w	r3, [r1], #4
 8009c3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c42:	d2e6      	bcs.n	8009c12 <quorem+0xa4>
 8009c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c4c:	b922      	cbnz	r2, 8009c58 <quorem+0xea>
 8009c4e:	3b04      	subs	r3, #4
 8009c50:	429d      	cmp	r5, r3
 8009c52:	461a      	mov	r2, r3
 8009c54:	d30b      	bcc.n	8009c6e <quorem+0x100>
 8009c56:	613c      	str	r4, [r7, #16]
 8009c58:	3601      	adds	r6, #1
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	b003      	add	sp, #12
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	6812      	ldr	r2, [r2, #0]
 8009c64:	3b04      	subs	r3, #4
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	d1cb      	bne.n	8009c02 <quorem+0x94>
 8009c6a:	3c01      	subs	r4, #1
 8009c6c:	e7c6      	b.n	8009bfc <quorem+0x8e>
 8009c6e:	6812      	ldr	r2, [r2, #0]
 8009c70:	3b04      	subs	r3, #4
 8009c72:	2a00      	cmp	r2, #0
 8009c74:	d1ef      	bne.n	8009c56 <quorem+0xe8>
 8009c76:	3c01      	subs	r4, #1
 8009c78:	e7ea      	b.n	8009c50 <quorem+0xe2>
 8009c7a:	2000      	movs	r0, #0
 8009c7c:	e7ee      	b.n	8009c5c <quorem+0xee>
	...

08009c80 <_dtoa_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	69c7      	ldr	r7, [r0, #28]
 8009c86:	b099      	sub	sp, #100	@ 0x64
 8009c88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c8c:	ec55 4b10 	vmov	r4, r5, d0
 8009c90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c94:	4683      	mov	fp, r0
 8009c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c9a:	b97f      	cbnz	r7, 8009cbc <_dtoa_r+0x3c>
 8009c9c:	2010      	movs	r0, #16
 8009c9e:	f000 fdfd 	bl	800a89c <malloc>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ca8:	b920      	cbnz	r0, 8009cb4 <_dtoa_r+0x34>
 8009caa:	4ba7      	ldr	r3, [pc, #668]	@ (8009f48 <_dtoa_r+0x2c8>)
 8009cac:	21ef      	movs	r1, #239	@ 0xef
 8009cae:	48a7      	ldr	r0, [pc, #668]	@ (8009f4c <_dtoa_r+0x2cc>)
 8009cb0:	f001 fc5a 	bl	800b568 <__assert_func>
 8009cb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009cb8:	6007      	str	r7, [r0, #0]
 8009cba:	60c7      	str	r7, [r0, #12]
 8009cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cc0:	6819      	ldr	r1, [r3, #0]
 8009cc2:	b159      	cbz	r1, 8009cdc <_dtoa_r+0x5c>
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	604a      	str	r2, [r1, #4]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4093      	lsls	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 feda 	bl	800aa88 <_Bfree>
 8009cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	1e2b      	subs	r3, r5, #0
 8009cde:	bfb9      	ittee	lt
 8009ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	9303      	strlt	r3, [sp, #12]
 8009ce6:	2300      	movge	r3, #0
 8009ce8:	6033      	strge	r3, [r6, #0]
 8009cea:	9f03      	ldr	r7, [sp, #12]
 8009cec:	4b98      	ldr	r3, [pc, #608]	@ (8009f50 <_dtoa_r+0x2d0>)
 8009cee:	bfbc      	itt	lt
 8009cf0:	2201      	movlt	r2, #1
 8009cf2:	6032      	strlt	r2, [r6, #0]
 8009cf4:	43bb      	bics	r3, r7
 8009cf6:	d112      	bne.n	8009d1e <_dtoa_r+0x9e>
 8009cf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009cfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d04:	4323      	orrs	r3, r4
 8009d06:	f000 854d 	beq.w	800a7a4 <_dtoa_r+0xb24>
 8009d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009f64 <_dtoa_r+0x2e4>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 854f 	beq.w	800a7b4 <_dtoa_r+0xb34>
 8009d16:	f10a 0303 	add.w	r3, sl, #3
 8009d1a:	f000 bd49 	b.w	800a7b0 <_dtoa_r+0xb30>
 8009d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d22:	2200      	movs	r2, #0
 8009d24:	ec51 0b17 	vmov	r0, r1, d7
 8009d28:	2300      	movs	r3, #0
 8009d2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009d2e:	f7f6 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 8009d32:	4680      	mov	r8, r0
 8009d34:	b158      	cbz	r0, 8009d4e <_dtoa_r+0xce>
 8009d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d38:	2301      	movs	r3, #1
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d3e:	b113      	cbz	r3, 8009d46 <_dtoa_r+0xc6>
 8009d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d42:	4b84      	ldr	r3, [pc, #528]	@ (8009f54 <_dtoa_r+0x2d4>)
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f68 <_dtoa_r+0x2e8>
 8009d4a:	f000 bd33 	b.w	800a7b4 <_dtoa_r+0xb34>
 8009d4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d52:	aa16      	add	r2, sp, #88	@ 0x58
 8009d54:	a917      	add	r1, sp, #92	@ 0x5c
 8009d56:	4658      	mov	r0, fp
 8009d58:	f001 f980 	bl	800b05c <__d2b>
 8009d5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009d60:	4681      	mov	r9, r0
 8009d62:	2e00      	cmp	r6, #0
 8009d64:	d077      	beq.n	8009e56 <_dtoa_r+0x1d6>
 8009d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d80:	4619      	mov	r1, r3
 8009d82:	2200      	movs	r2, #0
 8009d84:	4b74      	ldr	r3, [pc, #464]	@ (8009f58 <_dtoa_r+0x2d8>)
 8009d86:	f7f6 fa9f 	bl	80002c8 <__aeabi_dsub>
 8009d8a:	a369      	add	r3, pc, #420	@ (adr r3, 8009f30 <_dtoa_r+0x2b0>)
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f7f6 fc52 	bl	8000638 <__aeabi_dmul>
 8009d94:	a368      	add	r3, pc, #416	@ (adr r3, 8009f38 <_dtoa_r+0x2b8>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	f7f6 fa97 	bl	80002cc <__adddf3>
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4630      	mov	r0, r6
 8009da2:	460d      	mov	r5, r1
 8009da4:	f7f6 fbde 	bl	8000564 <__aeabi_i2d>
 8009da8:	a365      	add	r3, pc, #404	@ (adr r3, 8009f40 <_dtoa_r+0x2c0>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7f6 fc43 	bl	8000638 <__aeabi_dmul>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fa87 	bl	80002cc <__adddf3>
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	f7f6 fee9 	bl	8000b98 <__aeabi_d2iz>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4607      	mov	r7, r0
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4620      	mov	r0, r4
 8009dce:	4629      	mov	r1, r5
 8009dd0:	f7f6 fea4 	bl	8000b1c <__aeabi_dcmplt>
 8009dd4:	b140      	cbz	r0, 8009de8 <_dtoa_r+0x168>
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f7f6 fbc4 	bl	8000564 <__aeabi_i2d>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	462b      	mov	r3, r5
 8009de0:	f7f6 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 8009de4:	b900      	cbnz	r0, 8009de8 <_dtoa_r+0x168>
 8009de6:	3f01      	subs	r7, #1
 8009de8:	2f16      	cmp	r7, #22
 8009dea:	d851      	bhi.n	8009e90 <_dtoa_r+0x210>
 8009dec:	4b5b      	ldr	r3, [pc, #364]	@ (8009f5c <_dtoa_r+0x2dc>)
 8009dee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dfa:	f7f6 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d048      	beq.n	8009e94 <_dtoa_r+0x214>
 8009e02:	3f01      	subs	r7, #1
 8009e04:	2300      	movs	r3, #0
 8009e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009e0a:	1b9b      	subs	r3, r3, r6
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	bf44      	itt	mi
 8009e10:	f1c3 0801 	rsbmi	r8, r3, #1
 8009e14:	2300      	movmi	r3, #0
 8009e16:	9208      	str	r2, [sp, #32]
 8009e18:	bf54      	ite	pl
 8009e1a:	f04f 0800 	movpl.w	r8, #0
 8009e1e:	9308      	strmi	r3, [sp, #32]
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	db39      	blt.n	8009e98 <_dtoa_r+0x218>
 8009e24:	9b08      	ldr	r3, [sp, #32]
 8009e26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009e28:	443b      	add	r3, r7
 8009e2a:	9308      	str	r3, [sp, #32]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e32:	2b09      	cmp	r3, #9
 8009e34:	d864      	bhi.n	8009f00 <_dtoa_r+0x280>
 8009e36:	2b05      	cmp	r3, #5
 8009e38:	bfc4      	itt	gt
 8009e3a:	3b04      	subgt	r3, #4
 8009e3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	f1a3 0302 	sub.w	r3, r3, #2
 8009e44:	bfcc      	ite	gt
 8009e46:	2400      	movgt	r4, #0
 8009e48:	2401      	movle	r4, #1
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d863      	bhi.n	8009f16 <_dtoa_r+0x296>
 8009e4e:	e8df f003 	tbb	[pc, r3]
 8009e52:	372a      	.short	0x372a
 8009e54:	5535      	.short	0x5535
 8009e56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009e5a:	441e      	add	r6, r3
 8009e5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e60:	2b20      	cmp	r3, #32
 8009e62:	bfc1      	itttt	gt
 8009e64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e68:	409f      	lslgt	r7, r3
 8009e6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e72:	bfd6      	itet	le
 8009e74:	f1c3 0320 	rsble	r3, r3, #32
 8009e78:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8009e80:	f7f6 fb60 	bl	8000544 <__aeabi_ui2d>
 8009e84:	2201      	movs	r2, #1
 8009e86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e8a:	3e01      	subs	r6, #1
 8009e8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e8e:	e777      	b.n	8009d80 <_dtoa_r+0x100>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e7b8      	b.n	8009e06 <_dtoa_r+0x186>
 8009e94:	9012      	str	r0, [sp, #72]	@ 0x48
 8009e96:	e7b7      	b.n	8009e08 <_dtoa_r+0x188>
 8009e98:	427b      	negs	r3, r7
 8009e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	eba8 0807 	sub.w	r8, r8, r7
 8009ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ea4:	e7c4      	b.n	8009e30 <_dtoa_r+0x1b0>
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dc35      	bgt.n	8009f1c <_dtoa_r+0x29c>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	9307      	str	r3, [sp, #28]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009eba:	e00b      	b.n	8009ed4 <_dtoa_r+0x254>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e7f3      	b.n	8009ea8 <_dtoa_r+0x228>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ec6:	18fb      	adds	r3, r7, r3
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	bfb8      	it	lt
 8009ed2:	2301      	movlt	r3, #1
 8009ed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	2204      	movs	r2, #4
 8009edc:	f102 0514 	add.w	r5, r2, #20
 8009ee0:	429d      	cmp	r5, r3
 8009ee2:	d91f      	bls.n	8009f24 <_dtoa_r+0x2a4>
 8009ee4:	6041      	str	r1, [r0, #4]
 8009ee6:	4658      	mov	r0, fp
 8009ee8:	f000 fd8e 	bl	800aa08 <_Balloc>
 8009eec:	4682      	mov	sl, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d13c      	bne.n	8009f6c <_dtoa_r+0x2ec>
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f60 <_dtoa_r+0x2e0>)
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009efa:	e6d8      	b.n	8009cae <_dtoa_r+0x2e>
 8009efc:	2301      	movs	r3, #1
 8009efe:	e7e0      	b.n	8009ec2 <_dtoa_r+0x242>
 8009f00:	2401      	movs	r4, #1
 8009f02:	2300      	movs	r3, #0
 8009f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	2200      	movs	r2, #0
 8009f12:	2312      	movs	r3, #18
 8009f14:	e7d0      	b.n	8009eb8 <_dtoa_r+0x238>
 8009f16:	2301      	movs	r3, #1
 8009f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f1a:	e7f5      	b.n	8009f08 <_dtoa_r+0x288>
 8009f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	9307      	str	r3, [sp, #28]
 8009f22:	e7d7      	b.n	8009ed4 <_dtoa_r+0x254>
 8009f24:	3101      	adds	r1, #1
 8009f26:	0052      	lsls	r2, r2, #1
 8009f28:	e7d8      	b.n	8009edc <_dtoa_r+0x25c>
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w
 8009f30:	636f4361 	.word	0x636f4361
 8009f34:	3fd287a7 	.word	0x3fd287a7
 8009f38:	8b60c8b3 	.word	0x8b60c8b3
 8009f3c:	3fc68a28 	.word	0x3fc68a28
 8009f40:	509f79fb 	.word	0x509f79fb
 8009f44:	3fd34413 	.word	0x3fd34413
 8009f48:	0800c429 	.word	0x0800c429
 8009f4c:	0800c440 	.word	0x0800c440
 8009f50:	7ff00000 	.word	0x7ff00000
 8009f54:	0800c3f9 	.word	0x0800c3f9
 8009f58:	3ff80000 	.word	0x3ff80000
 8009f5c:	0800c538 	.word	0x0800c538
 8009f60:	0800c498 	.word	0x0800c498
 8009f64:	0800c425 	.word	0x0800c425
 8009f68:	0800c3f8 	.word	0x0800c3f8
 8009f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f70:	6018      	str	r0, [r3, #0]
 8009f72:	9b07      	ldr	r3, [sp, #28]
 8009f74:	2b0e      	cmp	r3, #14
 8009f76:	f200 80a4 	bhi.w	800a0c2 <_dtoa_r+0x442>
 8009f7a:	2c00      	cmp	r4, #0
 8009f7c:	f000 80a1 	beq.w	800a0c2 <_dtoa_r+0x442>
 8009f80:	2f00      	cmp	r7, #0
 8009f82:	dd33      	ble.n	8009fec <_dtoa_r+0x36c>
 8009f84:	4bad      	ldr	r3, [pc, #692]	@ (800a23c <_dtoa_r+0x5bc>)
 8009f86:	f007 020f 	and.w	r2, r7, #15
 8009f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f8e:	ed93 7b00 	vldr	d7, [r3]
 8009f92:	05f8      	lsls	r0, r7, #23
 8009f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f9c:	d516      	bpl.n	8009fcc <_dtoa_r+0x34c>
 8009f9e:	4ba8      	ldr	r3, [pc, #672]	@ (800a240 <_dtoa_r+0x5c0>)
 8009fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fa8:	f7f6 fc70 	bl	800088c <__aeabi_ddiv>
 8009fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb0:	f004 040f 	and.w	r4, r4, #15
 8009fb4:	2603      	movs	r6, #3
 8009fb6:	4da2      	ldr	r5, [pc, #648]	@ (800a240 <_dtoa_r+0x5c0>)
 8009fb8:	b954      	cbnz	r4, 8009fd0 <_dtoa_r+0x350>
 8009fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fc2:	f7f6 fc63 	bl	800088c <__aeabi_ddiv>
 8009fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fca:	e028      	b.n	800a01e <_dtoa_r+0x39e>
 8009fcc:	2602      	movs	r6, #2
 8009fce:	e7f2      	b.n	8009fb6 <_dtoa_r+0x336>
 8009fd0:	07e1      	lsls	r1, r4, #31
 8009fd2:	d508      	bpl.n	8009fe6 <_dtoa_r+0x366>
 8009fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fdc:	f7f6 fb2c 	bl	8000638 <__aeabi_dmul>
 8009fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fe4:	3601      	adds	r6, #1
 8009fe6:	1064      	asrs	r4, r4, #1
 8009fe8:	3508      	adds	r5, #8
 8009fea:	e7e5      	b.n	8009fb8 <_dtoa_r+0x338>
 8009fec:	f000 80d2 	beq.w	800a194 <_dtoa_r+0x514>
 8009ff0:	427c      	negs	r4, r7
 8009ff2:	4b92      	ldr	r3, [pc, #584]	@ (800a23c <_dtoa_r+0x5bc>)
 8009ff4:	4d92      	ldr	r5, [pc, #584]	@ (800a240 <_dtoa_r+0x5c0>)
 8009ff6:	f004 020f 	and.w	r2, r4, #15
 8009ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a006:	f7f6 fb17 	bl	8000638 <__aeabi_dmul>
 800a00a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00e:	1124      	asrs	r4, r4, #4
 800a010:	2300      	movs	r3, #0
 800a012:	2602      	movs	r6, #2
 800a014:	2c00      	cmp	r4, #0
 800a016:	f040 80b2 	bne.w	800a17e <_dtoa_r+0x4fe>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1d3      	bne.n	8009fc6 <_dtoa_r+0x346>
 800a01e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 80b7 	beq.w	800a198 <_dtoa_r+0x518>
 800a02a:	4b86      	ldr	r3, [pc, #536]	@ (800a244 <_dtoa_r+0x5c4>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	4620      	mov	r0, r4
 800a030:	4629      	mov	r1, r5
 800a032:	f7f6 fd73 	bl	8000b1c <__aeabi_dcmplt>
 800a036:	2800      	cmp	r0, #0
 800a038:	f000 80ae 	beq.w	800a198 <_dtoa_r+0x518>
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 80aa 	beq.w	800a198 <_dtoa_r+0x518>
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd37      	ble.n	800a0ba <_dtoa_r+0x43a>
 800a04a:	1e7b      	subs	r3, r7, #1
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	4620      	mov	r0, r4
 800a050:	4b7d      	ldr	r3, [pc, #500]	@ (800a248 <_dtoa_r+0x5c8>)
 800a052:	2200      	movs	r2, #0
 800a054:	4629      	mov	r1, r5
 800a056:	f7f6 faef 	bl	8000638 <__aeabi_dmul>
 800a05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a05e:	9c00      	ldr	r4, [sp, #0]
 800a060:	3601      	adds	r6, #1
 800a062:	4630      	mov	r0, r6
 800a064:	f7f6 fa7e 	bl	8000564 <__aeabi_i2d>
 800a068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a06c:	f7f6 fae4 	bl	8000638 <__aeabi_dmul>
 800a070:	4b76      	ldr	r3, [pc, #472]	@ (800a24c <_dtoa_r+0x5cc>)
 800a072:	2200      	movs	r2, #0
 800a074:	f7f6 f92a 	bl	80002cc <__adddf3>
 800a078:	4605      	mov	r5, r0
 800a07a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a07e:	2c00      	cmp	r4, #0
 800a080:	f040 808d 	bne.w	800a19e <_dtoa_r+0x51e>
 800a084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a088:	4b71      	ldr	r3, [pc, #452]	@ (800a250 <_dtoa_r+0x5d0>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	f7f6 f91c 	bl	80002c8 <__aeabi_dsub>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a098:	462a      	mov	r2, r5
 800a09a:	4633      	mov	r3, r6
 800a09c:	f7f6 fd5c 	bl	8000b58 <__aeabi_dcmpgt>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f040 828b 	bne.w	800a5bc <_dtoa_r+0x93c>
 800a0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0aa:	462a      	mov	r2, r5
 800a0ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a0b0:	f7f6 fd34 	bl	8000b1c <__aeabi_dcmplt>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f040 8128 	bne.w	800a30a <_dtoa_r+0x68a>
 800a0ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a0be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a0c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f2c0 815a 	blt.w	800a37e <_dtoa_r+0x6fe>
 800a0ca:	2f0e      	cmp	r7, #14
 800a0cc:	f300 8157 	bgt.w	800a37e <_dtoa_r+0x6fe>
 800a0d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a23c <_dtoa_r+0x5bc>)
 800a0d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0d6:	ed93 7b00 	vldr	d7, [r3]
 800a0da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	ed8d 7b00 	vstr	d7, [sp]
 800a0e2:	da03      	bge.n	800a0ec <_dtoa_r+0x46c>
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f340 8101 	ble.w	800a2ee <_dtoa_r+0x66e>
 800a0ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0f0:	4656      	mov	r6, sl
 800a0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f7f6 fbc7 	bl	800088c <__aeabi_ddiv>
 800a0fe:	f7f6 fd4b 	bl	8000b98 <__aeabi_d2iz>
 800a102:	4680      	mov	r8, r0
 800a104:	f7f6 fa2e 	bl	8000564 <__aeabi_i2d>
 800a108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a10c:	f7f6 fa94 	bl	8000638 <__aeabi_dmul>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a11c:	f7f6 f8d4 	bl	80002c8 <__aeabi_dsub>
 800a120:	f806 4b01 	strb.w	r4, [r6], #1
 800a124:	9d07      	ldr	r5, [sp, #28]
 800a126:	eba6 040a 	sub.w	r4, r6, sl
 800a12a:	42a5      	cmp	r5, r4
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	f040 8117 	bne.w	800a362 <_dtoa_r+0x6e2>
 800a134:	f7f6 f8ca 	bl	80002cc <__adddf3>
 800a138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	f7f6 fd0a 	bl	8000b58 <__aeabi_dcmpgt>
 800a144:	2800      	cmp	r0, #0
 800a146:	f040 80f9 	bne.w	800a33c <_dtoa_r+0x6bc>
 800a14a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 fcd9 	bl	8000b08 <__aeabi_dcmpeq>
 800a156:	b118      	cbz	r0, 800a160 <_dtoa_r+0x4e0>
 800a158:	f018 0f01 	tst.w	r8, #1
 800a15c:	f040 80ee 	bne.w	800a33c <_dtoa_r+0x6bc>
 800a160:	4649      	mov	r1, r9
 800a162:	4658      	mov	r0, fp
 800a164:	f000 fc90 	bl	800aa88 <_Bfree>
 800a168:	2300      	movs	r3, #0
 800a16a:	7033      	strb	r3, [r6, #0]
 800a16c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a16e:	3701      	adds	r7, #1
 800a170:	601f      	str	r7, [r3, #0]
 800a172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 831d 	beq.w	800a7b4 <_dtoa_r+0xb34>
 800a17a:	601e      	str	r6, [r3, #0]
 800a17c:	e31a      	b.n	800a7b4 <_dtoa_r+0xb34>
 800a17e:	07e2      	lsls	r2, r4, #31
 800a180:	d505      	bpl.n	800a18e <_dtoa_r+0x50e>
 800a182:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a186:	f7f6 fa57 	bl	8000638 <__aeabi_dmul>
 800a18a:	3601      	adds	r6, #1
 800a18c:	2301      	movs	r3, #1
 800a18e:	1064      	asrs	r4, r4, #1
 800a190:	3508      	adds	r5, #8
 800a192:	e73f      	b.n	800a014 <_dtoa_r+0x394>
 800a194:	2602      	movs	r6, #2
 800a196:	e742      	b.n	800a01e <_dtoa_r+0x39e>
 800a198:	9c07      	ldr	r4, [sp, #28]
 800a19a:	9704      	str	r7, [sp, #16]
 800a19c:	e761      	b.n	800a062 <_dtoa_r+0x3e2>
 800a19e:	4b27      	ldr	r3, [pc, #156]	@ (800a23c <_dtoa_r+0x5bc>)
 800a1a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1aa:	4454      	add	r4, sl
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d053      	beq.n	800a258 <_dtoa_r+0x5d8>
 800a1b0:	4928      	ldr	r1, [pc, #160]	@ (800a254 <_dtoa_r+0x5d4>)
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	f7f6 fb6a 	bl	800088c <__aeabi_ddiv>
 800a1b8:	4633      	mov	r3, r6
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	f7f6 f884 	bl	80002c8 <__aeabi_dsub>
 800a1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1c4:	4656      	mov	r6, sl
 800a1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ca:	f7f6 fce5 	bl	8000b98 <__aeabi_d2iz>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	f7f6 f9c8 	bl	8000564 <__aeabi_i2d>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1dc:	f7f6 f874 	bl	80002c8 <__aeabi_dsub>
 800a1e0:	3530      	adds	r5, #48	@ 0x30
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1ea:	f806 5b01 	strb.w	r5, [r6], #1
 800a1ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1f2:	f7f6 fc93 	bl	8000b1c <__aeabi_dcmplt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d171      	bne.n	800a2de <_dtoa_r+0x65e>
 800a1fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1fe:	4911      	ldr	r1, [pc, #68]	@ (800a244 <_dtoa_r+0x5c4>)
 800a200:	2000      	movs	r0, #0
 800a202:	f7f6 f861 	bl	80002c8 <__aeabi_dsub>
 800a206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a20a:	f7f6 fc87 	bl	8000b1c <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f040 8095 	bne.w	800a33e <_dtoa_r+0x6be>
 800a214:	42a6      	cmp	r6, r4
 800a216:	f43f af50 	beq.w	800a0ba <_dtoa_r+0x43a>
 800a21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a21e:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <_dtoa_r+0x5c8>)
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 fa09 	bl	8000638 <__aeabi_dmul>
 800a226:	4b08      	ldr	r3, [pc, #32]	@ (800a248 <_dtoa_r+0x5c8>)
 800a228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a22c:	2200      	movs	r2, #0
 800a22e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a232:	f7f6 fa01 	bl	8000638 <__aeabi_dmul>
 800a236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a23a:	e7c4      	b.n	800a1c6 <_dtoa_r+0x546>
 800a23c:	0800c538 	.word	0x0800c538
 800a240:	0800c510 	.word	0x0800c510
 800a244:	3ff00000 	.word	0x3ff00000
 800a248:	40240000 	.word	0x40240000
 800a24c:	401c0000 	.word	0x401c0000
 800a250:	40140000 	.word	0x40140000
 800a254:	3fe00000 	.word	0x3fe00000
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	f7f6 f9ec 	bl	8000638 <__aeabi_dmul>
 800a260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a264:	9415      	str	r4, [sp, #84]	@ 0x54
 800a266:	4656      	mov	r6, sl
 800a268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a26c:	f7f6 fc94 	bl	8000b98 <__aeabi_d2iz>
 800a270:	4605      	mov	r5, r0
 800a272:	f7f6 f977 	bl	8000564 <__aeabi_i2d>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a27e:	f7f6 f823 	bl	80002c8 <__aeabi_dsub>
 800a282:	3530      	adds	r5, #48	@ 0x30
 800a284:	f806 5b01 	strb.w	r5, [r6], #1
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	42a6      	cmp	r6, r4
 800a28e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a292:	f04f 0200 	mov.w	r2, #0
 800a296:	d124      	bne.n	800a2e2 <_dtoa_r+0x662>
 800a298:	4bac      	ldr	r3, [pc, #688]	@ (800a54c <_dtoa_r+0x8cc>)
 800a29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a29e:	f7f6 f815 	bl	80002cc <__adddf3>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2aa:	f7f6 fc55 	bl	8000b58 <__aeabi_dcmpgt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d145      	bne.n	800a33e <_dtoa_r+0x6be>
 800a2b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2b6:	49a5      	ldr	r1, [pc, #660]	@ (800a54c <_dtoa_r+0x8cc>)
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f7f6 f805 	bl	80002c8 <__aeabi_dsub>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c6:	f7f6 fc29 	bl	8000b1c <__aeabi_dcmplt>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f43f aef5 	beq.w	800a0ba <_dtoa_r+0x43a>
 800a2d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a2d2:	1e73      	subs	r3, r6, #1
 800a2d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a2d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2da:	2b30      	cmp	r3, #48	@ 0x30
 800a2dc:	d0f8      	beq.n	800a2d0 <_dtoa_r+0x650>
 800a2de:	9f04      	ldr	r7, [sp, #16]
 800a2e0:	e73e      	b.n	800a160 <_dtoa_r+0x4e0>
 800a2e2:	4b9b      	ldr	r3, [pc, #620]	@ (800a550 <_dtoa_r+0x8d0>)
 800a2e4:	f7f6 f9a8 	bl	8000638 <__aeabi_dmul>
 800a2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ec:	e7bc      	b.n	800a268 <_dtoa_r+0x5e8>
 800a2ee:	d10c      	bne.n	800a30a <_dtoa_r+0x68a>
 800a2f0:	4b98      	ldr	r3, [pc, #608]	@ (800a554 <_dtoa_r+0x8d4>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f8:	f7f6 f99e 	bl	8000638 <__aeabi_dmul>
 800a2fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a300:	f7f6 fc20 	bl	8000b44 <__aeabi_dcmpge>
 800a304:	2800      	cmp	r0, #0
 800a306:	f000 8157 	beq.w	800a5b8 <_dtoa_r+0x938>
 800a30a:	2400      	movs	r4, #0
 800a30c:	4625      	mov	r5, r4
 800a30e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a310:	43db      	mvns	r3, r3
 800a312:	9304      	str	r3, [sp, #16]
 800a314:	4656      	mov	r6, sl
 800a316:	2700      	movs	r7, #0
 800a318:	4621      	mov	r1, r4
 800a31a:	4658      	mov	r0, fp
 800a31c:	f000 fbb4 	bl	800aa88 <_Bfree>
 800a320:	2d00      	cmp	r5, #0
 800a322:	d0dc      	beq.n	800a2de <_dtoa_r+0x65e>
 800a324:	b12f      	cbz	r7, 800a332 <_dtoa_r+0x6b2>
 800a326:	42af      	cmp	r7, r5
 800a328:	d003      	beq.n	800a332 <_dtoa_r+0x6b2>
 800a32a:	4639      	mov	r1, r7
 800a32c:	4658      	mov	r0, fp
 800a32e:	f000 fbab 	bl	800aa88 <_Bfree>
 800a332:	4629      	mov	r1, r5
 800a334:	4658      	mov	r0, fp
 800a336:	f000 fba7 	bl	800aa88 <_Bfree>
 800a33a:	e7d0      	b.n	800a2de <_dtoa_r+0x65e>
 800a33c:	9704      	str	r7, [sp, #16]
 800a33e:	4633      	mov	r3, r6
 800a340:	461e      	mov	r6, r3
 800a342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a346:	2a39      	cmp	r2, #57	@ 0x39
 800a348:	d107      	bne.n	800a35a <_dtoa_r+0x6da>
 800a34a:	459a      	cmp	sl, r3
 800a34c:	d1f8      	bne.n	800a340 <_dtoa_r+0x6c0>
 800a34e:	9a04      	ldr	r2, [sp, #16]
 800a350:	3201      	adds	r2, #1
 800a352:	9204      	str	r2, [sp, #16]
 800a354:	2230      	movs	r2, #48	@ 0x30
 800a356:	f88a 2000 	strb.w	r2, [sl]
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	3201      	adds	r2, #1
 800a35e:	701a      	strb	r2, [r3, #0]
 800a360:	e7bd      	b.n	800a2de <_dtoa_r+0x65e>
 800a362:	4b7b      	ldr	r3, [pc, #492]	@ (800a550 <_dtoa_r+0x8d0>)
 800a364:	2200      	movs	r2, #0
 800a366:	f7f6 f967 	bl	8000638 <__aeabi_dmul>
 800a36a:	2200      	movs	r2, #0
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
 800a372:	f7f6 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 800a376:	2800      	cmp	r0, #0
 800a378:	f43f aebb 	beq.w	800a0f2 <_dtoa_r+0x472>
 800a37c:	e6f0      	b.n	800a160 <_dtoa_r+0x4e0>
 800a37e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a380:	2a00      	cmp	r2, #0
 800a382:	f000 80db 	beq.w	800a53c <_dtoa_r+0x8bc>
 800a386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a388:	2a01      	cmp	r2, #1
 800a38a:	f300 80bf 	bgt.w	800a50c <_dtoa_r+0x88c>
 800a38e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a390:	2a00      	cmp	r2, #0
 800a392:	f000 80b7 	beq.w	800a504 <_dtoa_r+0x884>
 800a396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a39a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a39c:	4646      	mov	r6, r8
 800a39e:	9a08      	ldr	r2, [sp, #32]
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	441a      	add	r2, r3
 800a3a4:	4658      	mov	r0, fp
 800a3a6:	4498      	add	r8, r3
 800a3a8:	9208      	str	r2, [sp, #32]
 800a3aa:	f000 fc21 	bl	800abf0 <__i2b>
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	b15e      	cbz	r6, 800a3ca <_dtoa_r+0x74a>
 800a3b2:	9b08      	ldr	r3, [sp, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dd08      	ble.n	800a3ca <_dtoa_r+0x74a>
 800a3b8:	42b3      	cmp	r3, r6
 800a3ba:	9a08      	ldr	r2, [sp, #32]
 800a3bc:	bfa8      	it	ge
 800a3be:	4633      	movge	r3, r6
 800a3c0:	eba8 0803 	sub.w	r8, r8, r3
 800a3c4:	1af6      	subs	r6, r6, r3
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	9308      	str	r3, [sp, #32]
 800a3ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3cc:	b1f3      	cbz	r3, 800a40c <_dtoa_r+0x78c>
 800a3ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80b7 	beq.w	800a544 <_dtoa_r+0x8c4>
 800a3d6:	b18c      	cbz	r4, 800a3fc <_dtoa_r+0x77c>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4622      	mov	r2, r4
 800a3dc:	4658      	mov	r0, fp
 800a3de:	f000 fcc7 	bl	800ad70 <__pow5mult>
 800a3e2:	464a      	mov	r2, r9
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	4605      	mov	r5, r0
 800a3e8:	4658      	mov	r0, fp
 800a3ea:	f000 fc17 	bl	800ac1c <__multiply>
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	9004      	str	r0, [sp, #16]
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 fb48 	bl	800aa88 <_Bfree>
 800a3f8:	9b04      	ldr	r3, [sp, #16]
 800a3fa:	4699      	mov	r9, r3
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3fe:	1b1a      	subs	r2, r3, r4
 800a400:	d004      	beq.n	800a40c <_dtoa_r+0x78c>
 800a402:	4649      	mov	r1, r9
 800a404:	4658      	mov	r0, fp
 800a406:	f000 fcb3 	bl	800ad70 <__pow5mult>
 800a40a:	4681      	mov	r9, r0
 800a40c:	2101      	movs	r1, #1
 800a40e:	4658      	mov	r0, fp
 800a410:	f000 fbee 	bl	800abf0 <__i2b>
 800a414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a416:	4604      	mov	r4, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 81cf 	beq.w	800a7bc <_dtoa_r+0xb3c>
 800a41e:	461a      	mov	r2, r3
 800a420:	4601      	mov	r1, r0
 800a422:	4658      	mov	r0, fp
 800a424:	f000 fca4 	bl	800ad70 <__pow5mult>
 800a428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	4604      	mov	r4, r0
 800a42e:	f300 8095 	bgt.w	800a55c <_dtoa_r+0x8dc>
 800a432:	9b02      	ldr	r3, [sp, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f040 8087 	bne.w	800a548 <_dtoa_r+0x8c8>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a440:	2b00      	cmp	r3, #0
 800a442:	f040 8089 	bne.w	800a558 <_dtoa_r+0x8d8>
 800a446:	9b03      	ldr	r3, [sp, #12]
 800a448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a44c:	0d1b      	lsrs	r3, r3, #20
 800a44e:	051b      	lsls	r3, r3, #20
 800a450:	b12b      	cbz	r3, 800a45e <_dtoa_r+0x7de>
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	3301      	adds	r3, #1
 800a456:	9308      	str	r3, [sp, #32]
 800a458:	f108 0801 	add.w	r8, r8, #1
 800a45c:	2301      	movs	r3, #1
 800a45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 81b0 	beq.w	800a7c8 <_dtoa_r+0xb48>
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a46e:	6918      	ldr	r0, [r3, #16]
 800a470:	f000 fb72 	bl	800ab58 <__hi0bits>
 800a474:	f1c0 0020 	rsb	r0, r0, #32
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	4418      	add	r0, r3
 800a47c:	f010 001f 	ands.w	r0, r0, #31
 800a480:	d077      	beq.n	800a572 <_dtoa_r+0x8f2>
 800a482:	f1c0 0320 	rsb	r3, r0, #32
 800a486:	2b04      	cmp	r3, #4
 800a488:	dd6b      	ble.n	800a562 <_dtoa_r+0x8e2>
 800a48a:	9b08      	ldr	r3, [sp, #32]
 800a48c:	f1c0 001c 	rsb	r0, r0, #28
 800a490:	4403      	add	r3, r0
 800a492:	4480      	add	r8, r0
 800a494:	4406      	add	r6, r0
 800a496:	9308      	str	r3, [sp, #32]
 800a498:	f1b8 0f00 	cmp.w	r8, #0
 800a49c:	dd05      	ble.n	800a4aa <_dtoa_r+0x82a>
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	4658      	mov	r0, fp
 800a4a4:	f000 fcbe 	bl	800ae24 <__lshift>
 800a4a8:	4681      	mov	r9, r0
 800a4aa:	9b08      	ldr	r3, [sp, #32]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dd05      	ble.n	800a4bc <_dtoa_r+0x83c>
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4658      	mov	r0, fp
 800a4b6:	f000 fcb5 	bl	800ae24 <__lshift>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d059      	beq.n	800a576 <_dtoa_r+0x8f6>
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f000 fd19 	bl	800aefc <__mcmp>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	da53      	bge.n	800a576 <_dtoa_r+0x8f6>
 800a4ce:	1e7b      	subs	r3, r7, #1
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	4658      	mov	r0, fp
 800a4da:	f000 faf7 	bl	800aacc <__multadd>
 800a4de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e0:	4681      	mov	r9, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 8172 	beq.w	800a7cc <_dtoa_r+0xb4c>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	f000 faec 	bl	800aacc <__multadd>
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	dc67      	bgt.n	800a5cc <_dtoa_r+0x94c>
 800a4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	dc41      	bgt.n	800a586 <_dtoa_r+0x906>
 800a502:	e063      	b.n	800a5cc <_dtoa_r+0x94c>
 800a504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a50a:	e746      	b.n	800a39a <_dtoa_r+0x71a>
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	1e5c      	subs	r4, r3, #1
 800a510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a512:	42a3      	cmp	r3, r4
 800a514:	bfbf      	itttt	lt
 800a516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a51a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a51c:	1ae3      	sublt	r3, r4, r3
 800a51e:	bfb4      	ite	lt
 800a520:	18d2      	addlt	r2, r2, r3
 800a522:	1b1c      	subge	r4, r3, r4
 800a524:	9b07      	ldr	r3, [sp, #28]
 800a526:	bfbc      	itt	lt
 800a528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a52a:	2400      	movlt	r4, #0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfb5      	itete	lt
 800a530:	eba8 0603 	sublt.w	r6, r8, r3
 800a534:	9b07      	ldrge	r3, [sp, #28]
 800a536:	2300      	movlt	r3, #0
 800a538:	4646      	movge	r6, r8
 800a53a:	e730      	b.n	800a39e <_dtoa_r+0x71e>
 800a53c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a53e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a540:	4646      	mov	r6, r8
 800a542:	e735      	b.n	800a3b0 <_dtoa_r+0x730>
 800a544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a546:	e75c      	b.n	800a402 <_dtoa_r+0x782>
 800a548:	2300      	movs	r3, #0
 800a54a:	e788      	b.n	800a45e <_dtoa_r+0x7de>
 800a54c:	3fe00000 	.word	0x3fe00000
 800a550:	40240000 	.word	0x40240000
 800a554:	40140000 	.word	0x40140000
 800a558:	9b02      	ldr	r3, [sp, #8]
 800a55a:	e780      	b.n	800a45e <_dtoa_r+0x7de>
 800a55c:	2300      	movs	r3, #0
 800a55e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a560:	e782      	b.n	800a468 <_dtoa_r+0x7e8>
 800a562:	d099      	beq.n	800a498 <_dtoa_r+0x818>
 800a564:	9a08      	ldr	r2, [sp, #32]
 800a566:	331c      	adds	r3, #28
 800a568:	441a      	add	r2, r3
 800a56a:	4498      	add	r8, r3
 800a56c:	441e      	add	r6, r3
 800a56e:	9208      	str	r2, [sp, #32]
 800a570:	e792      	b.n	800a498 <_dtoa_r+0x818>
 800a572:	4603      	mov	r3, r0
 800a574:	e7f6      	b.n	800a564 <_dtoa_r+0x8e4>
 800a576:	9b07      	ldr	r3, [sp, #28]
 800a578:	9704      	str	r7, [sp, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dc20      	bgt.n	800a5c0 <_dtoa_r+0x940>
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a582:	2b02      	cmp	r3, #2
 800a584:	dd1e      	ble.n	800a5c4 <_dtoa_r+0x944>
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f47f aec0 	bne.w	800a30e <_dtoa_r+0x68e>
 800a58e:	4621      	mov	r1, r4
 800a590:	2205      	movs	r2, #5
 800a592:	4658      	mov	r0, fp
 800a594:	f000 fa9a 	bl	800aacc <__multadd>
 800a598:	4601      	mov	r1, r0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4648      	mov	r0, r9
 800a59e:	f000 fcad 	bl	800aefc <__mcmp>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	f77f aeb3 	ble.w	800a30e <_dtoa_r+0x68e>
 800a5a8:	4656      	mov	r6, sl
 800a5aa:	2331      	movs	r3, #49	@ 0x31
 800a5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	9304      	str	r3, [sp, #16]
 800a5b6:	e6ae      	b.n	800a316 <_dtoa_r+0x696>
 800a5b8:	9c07      	ldr	r4, [sp, #28]
 800a5ba:	9704      	str	r7, [sp, #16]
 800a5bc:	4625      	mov	r5, r4
 800a5be:	e7f3      	b.n	800a5a8 <_dtoa_r+0x928>
 800a5c0:	9b07      	ldr	r3, [sp, #28]
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 8104 	beq.w	800a7d4 <_dtoa_r+0xb54>
 800a5cc:	2e00      	cmp	r6, #0
 800a5ce:	dd05      	ble.n	800a5dc <_dtoa_r+0x95c>
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	f000 fc25 	bl	800ae24 <__lshift>
 800a5da:	4605      	mov	r5, r0
 800a5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d05a      	beq.n	800a698 <_dtoa_r+0xa18>
 800a5e2:	6869      	ldr	r1, [r5, #4]
 800a5e4:	4658      	mov	r0, fp
 800a5e6:	f000 fa0f 	bl	800aa08 <_Balloc>
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	b928      	cbnz	r0, 800a5fa <_dtoa_r+0x97a>
 800a5ee:	4b84      	ldr	r3, [pc, #528]	@ (800a800 <_dtoa_r+0xb80>)
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5f6:	f7ff bb5a 	b.w	8009cae <_dtoa_r+0x2e>
 800a5fa:	692a      	ldr	r2, [r5, #16]
 800a5fc:	3202      	adds	r2, #2
 800a5fe:	0092      	lsls	r2, r2, #2
 800a600:	f105 010c 	add.w	r1, r5, #12
 800a604:	300c      	adds	r0, #12
 800a606:	f7ff faa4 	bl	8009b52 <memcpy>
 800a60a:	2201      	movs	r2, #1
 800a60c:	4631      	mov	r1, r6
 800a60e:	4658      	mov	r0, fp
 800a610:	f000 fc08 	bl	800ae24 <__lshift>
 800a614:	f10a 0301 	add.w	r3, sl, #1
 800a618:	9307      	str	r3, [sp, #28]
 800a61a:	9b00      	ldr	r3, [sp, #0]
 800a61c:	4453      	add	r3, sl
 800a61e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a620:	9b02      	ldr	r3, [sp, #8]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	462f      	mov	r7, r5
 800a628:	930a      	str	r3, [sp, #40]	@ 0x28
 800a62a:	4605      	mov	r5, r0
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	4621      	mov	r1, r4
 800a630:	3b01      	subs	r3, #1
 800a632:	4648      	mov	r0, r9
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	f7ff fa9a 	bl	8009b6e <quorem>
 800a63a:	4639      	mov	r1, r7
 800a63c:	9002      	str	r0, [sp, #8]
 800a63e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a642:	4648      	mov	r0, r9
 800a644:	f000 fc5a 	bl	800aefc <__mcmp>
 800a648:	462a      	mov	r2, r5
 800a64a:	9008      	str	r0, [sp, #32]
 800a64c:	4621      	mov	r1, r4
 800a64e:	4658      	mov	r0, fp
 800a650:	f000 fc70 	bl	800af34 <__mdiff>
 800a654:	68c2      	ldr	r2, [r0, #12]
 800a656:	4606      	mov	r6, r0
 800a658:	bb02      	cbnz	r2, 800a69c <_dtoa_r+0xa1c>
 800a65a:	4601      	mov	r1, r0
 800a65c:	4648      	mov	r0, r9
 800a65e:	f000 fc4d 	bl	800aefc <__mcmp>
 800a662:	4602      	mov	r2, r0
 800a664:	4631      	mov	r1, r6
 800a666:	4658      	mov	r0, fp
 800a668:	920e      	str	r2, [sp, #56]	@ 0x38
 800a66a:	f000 fa0d 	bl	800aa88 <_Bfree>
 800a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a672:	9e07      	ldr	r6, [sp, #28]
 800a674:	ea43 0102 	orr.w	r1, r3, r2
 800a678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a67a:	4319      	orrs	r1, r3
 800a67c:	d110      	bne.n	800a6a0 <_dtoa_r+0xa20>
 800a67e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a682:	d029      	beq.n	800a6d8 <_dtoa_r+0xa58>
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd02      	ble.n	800a690 <_dtoa_r+0xa10>
 800a68a:	9b02      	ldr	r3, [sp, #8]
 800a68c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	f883 8000 	strb.w	r8, [r3]
 800a696:	e63f      	b.n	800a318 <_dtoa_r+0x698>
 800a698:	4628      	mov	r0, r5
 800a69a:	e7bb      	b.n	800a614 <_dtoa_r+0x994>
 800a69c:	2201      	movs	r2, #1
 800a69e:	e7e1      	b.n	800a664 <_dtoa_r+0x9e4>
 800a6a0:	9b08      	ldr	r3, [sp, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	db04      	blt.n	800a6b0 <_dtoa_r+0xa30>
 800a6a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	d120      	bne.n	800a6f2 <_dtoa_r+0xa72>
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	dded      	ble.n	800a690 <_dtoa_r+0xa10>
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	4658      	mov	r0, fp
 800a6ba:	f000 fbb3 	bl	800ae24 <__lshift>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4681      	mov	r9, r0
 800a6c2:	f000 fc1b 	bl	800aefc <__mcmp>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	dc03      	bgt.n	800a6d2 <_dtoa_r+0xa52>
 800a6ca:	d1e1      	bne.n	800a690 <_dtoa_r+0xa10>
 800a6cc:	f018 0f01 	tst.w	r8, #1
 800a6d0:	d0de      	beq.n	800a690 <_dtoa_r+0xa10>
 800a6d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6d6:	d1d8      	bne.n	800a68a <_dtoa_r+0xa0a>
 800a6d8:	9a00      	ldr	r2, [sp, #0]
 800a6da:	2339      	movs	r3, #57	@ 0x39
 800a6dc:	7013      	strb	r3, [r2, #0]
 800a6de:	4633      	mov	r3, r6
 800a6e0:	461e      	mov	r6, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6e8:	2a39      	cmp	r2, #57	@ 0x39
 800a6ea:	d052      	beq.n	800a792 <_dtoa_r+0xb12>
 800a6ec:	3201      	adds	r2, #1
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	e612      	b.n	800a318 <_dtoa_r+0x698>
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	dd07      	ble.n	800a706 <_dtoa_r+0xa86>
 800a6f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6fa:	d0ed      	beq.n	800a6d8 <_dtoa_r+0xa58>
 800a6fc:	9a00      	ldr	r2, [sp, #0]
 800a6fe:	f108 0301 	add.w	r3, r8, #1
 800a702:	7013      	strb	r3, [r2, #0]
 800a704:	e608      	b.n	800a318 <_dtoa_r+0x698>
 800a706:	9b07      	ldr	r3, [sp, #28]
 800a708:	9a07      	ldr	r2, [sp, #28]
 800a70a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a710:	4293      	cmp	r3, r2
 800a712:	d028      	beq.n	800a766 <_dtoa_r+0xae6>
 800a714:	4649      	mov	r1, r9
 800a716:	2300      	movs	r3, #0
 800a718:	220a      	movs	r2, #10
 800a71a:	4658      	mov	r0, fp
 800a71c:	f000 f9d6 	bl	800aacc <__multadd>
 800a720:	42af      	cmp	r7, r5
 800a722:	4681      	mov	r9, r0
 800a724:	f04f 0300 	mov.w	r3, #0
 800a728:	f04f 020a 	mov.w	r2, #10
 800a72c:	4639      	mov	r1, r7
 800a72e:	4658      	mov	r0, fp
 800a730:	d107      	bne.n	800a742 <_dtoa_r+0xac2>
 800a732:	f000 f9cb 	bl	800aacc <__multadd>
 800a736:	4607      	mov	r7, r0
 800a738:	4605      	mov	r5, r0
 800a73a:	9b07      	ldr	r3, [sp, #28]
 800a73c:	3301      	adds	r3, #1
 800a73e:	9307      	str	r3, [sp, #28]
 800a740:	e774      	b.n	800a62c <_dtoa_r+0x9ac>
 800a742:	f000 f9c3 	bl	800aacc <__multadd>
 800a746:	4629      	mov	r1, r5
 800a748:	4607      	mov	r7, r0
 800a74a:	2300      	movs	r3, #0
 800a74c:	220a      	movs	r2, #10
 800a74e:	4658      	mov	r0, fp
 800a750:	f000 f9bc 	bl	800aacc <__multadd>
 800a754:	4605      	mov	r5, r0
 800a756:	e7f0      	b.n	800a73a <_dtoa_r+0xaba>
 800a758:	9b00      	ldr	r3, [sp, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfcc      	ite	gt
 800a75e:	461e      	movgt	r6, r3
 800a760:	2601      	movle	r6, #1
 800a762:	4456      	add	r6, sl
 800a764:	2700      	movs	r7, #0
 800a766:	4649      	mov	r1, r9
 800a768:	2201      	movs	r2, #1
 800a76a:	4658      	mov	r0, fp
 800a76c:	f000 fb5a 	bl	800ae24 <__lshift>
 800a770:	4621      	mov	r1, r4
 800a772:	4681      	mov	r9, r0
 800a774:	f000 fbc2 	bl	800aefc <__mcmp>
 800a778:	2800      	cmp	r0, #0
 800a77a:	dcb0      	bgt.n	800a6de <_dtoa_r+0xa5e>
 800a77c:	d102      	bne.n	800a784 <_dtoa_r+0xb04>
 800a77e:	f018 0f01 	tst.w	r8, #1
 800a782:	d1ac      	bne.n	800a6de <_dtoa_r+0xa5e>
 800a784:	4633      	mov	r3, r6
 800a786:	461e      	mov	r6, r3
 800a788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a78c:	2a30      	cmp	r2, #48	@ 0x30
 800a78e:	d0fa      	beq.n	800a786 <_dtoa_r+0xb06>
 800a790:	e5c2      	b.n	800a318 <_dtoa_r+0x698>
 800a792:	459a      	cmp	sl, r3
 800a794:	d1a4      	bne.n	800a6e0 <_dtoa_r+0xa60>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	3301      	adds	r3, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	2331      	movs	r3, #49	@ 0x31
 800a79e:	f88a 3000 	strb.w	r3, [sl]
 800a7a2:	e5b9      	b.n	800a318 <_dtoa_r+0x698>
 800a7a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a804 <_dtoa_r+0xb84>
 800a7aa:	b11b      	cbz	r3, 800a7b4 <_dtoa_r+0xb34>
 800a7ac:	f10a 0308 	add.w	r3, sl, #8
 800a7b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	b019      	add	sp, #100	@ 0x64
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	f77f ae37 	ble.w	800a432 <_dtoa_r+0x7b2>
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e655      	b.n	800a478 <_dtoa_r+0x7f8>
 800a7cc:	9b00      	ldr	r3, [sp, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f77f aed6 	ble.w	800a580 <_dtoa_r+0x900>
 800a7d4:	4656      	mov	r6, sl
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4648      	mov	r0, r9
 800a7da:	f7ff f9c8 	bl	8009b6e <quorem>
 800a7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7e2:	f806 8b01 	strb.w	r8, [r6], #1
 800a7e6:	9b00      	ldr	r3, [sp, #0]
 800a7e8:	eba6 020a 	sub.w	r2, r6, sl
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	ddb3      	ble.n	800a758 <_dtoa_r+0xad8>
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	f000 f968 	bl	800aacc <__multadd>
 800a7fc:	4681      	mov	r9, r0
 800a7fe:	e7ea      	b.n	800a7d6 <_dtoa_r+0xb56>
 800a800:	0800c498 	.word	0x0800c498
 800a804:	0800c41c 	.word	0x0800c41c

0800a808 <_free_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	2900      	cmp	r1, #0
 800a80e:	d041      	beq.n	800a894 <_free_r+0x8c>
 800a810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a814:	1f0c      	subs	r4, r1, #4
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfb8      	it	lt
 800a81a:	18e4      	addlt	r4, r4, r3
 800a81c:	f000 f8e8 	bl	800a9f0 <__malloc_lock>
 800a820:	4a1d      	ldr	r2, [pc, #116]	@ (800a898 <_free_r+0x90>)
 800a822:	6813      	ldr	r3, [r2, #0]
 800a824:	b933      	cbnz	r3, 800a834 <_free_r+0x2c>
 800a826:	6063      	str	r3, [r4, #4]
 800a828:	6014      	str	r4, [r2, #0]
 800a82a:	4628      	mov	r0, r5
 800a82c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a830:	f000 b8e4 	b.w	800a9fc <__malloc_unlock>
 800a834:	42a3      	cmp	r3, r4
 800a836:	d908      	bls.n	800a84a <_free_r+0x42>
 800a838:	6820      	ldr	r0, [r4, #0]
 800a83a:	1821      	adds	r1, r4, r0
 800a83c:	428b      	cmp	r3, r1
 800a83e:	bf01      	itttt	eq
 800a840:	6819      	ldreq	r1, [r3, #0]
 800a842:	685b      	ldreq	r3, [r3, #4]
 800a844:	1809      	addeq	r1, r1, r0
 800a846:	6021      	streq	r1, [r4, #0]
 800a848:	e7ed      	b.n	800a826 <_free_r+0x1e>
 800a84a:	461a      	mov	r2, r3
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	b10b      	cbz	r3, 800a854 <_free_r+0x4c>
 800a850:	42a3      	cmp	r3, r4
 800a852:	d9fa      	bls.n	800a84a <_free_r+0x42>
 800a854:	6811      	ldr	r1, [r2, #0]
 800a856:	1850      	adds	r0, r2, r1
 800a858:	42a0      	cmp	r0, r4
 800a85a:	d10b      	bne.n	800a874 <_free_r+0x6c>
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	4401      	add	r1, r0
 800a860:	1850      	adds	r0, r2, r1
 800a862:	4283      	cmp	r3, r0
 800a864:	6011      	str	r1, [r2, #0]
 800a866:	d1e0      	bne.n	800a82a <_free_r+0x22>
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	6053      	str	r3, [r2, #4]
 800a86e:	4408      	add	r0, r1
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e7da      	b.n	800a82a <_free_r+0x22>
 800a874:	d902      	bls.n	800a87c <_free_r+0x74>
 800a876:	230c      	movs	r3, #12
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	e7d6      	b.n	800a82a <_free_r+0x22>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	1821      	adds	r1, r4, r0
 800a880:	428b      	cmp	r3, r1
 800a882:	bf04      	itt	eq
 800a884:	6819      	ldreq	r1, [r3, #0]
 800a886:	685b      	ldreq	r3, [r3, #4]
 800a888:	6063      	str	r3, [r4, #4]
 800a88a:	bf04      	itt	eq
 800a88c:	1809      	addeq	r1, r1, r0
 800a88e:	6021      	streq	r1, [r4, #0]
 800a890:	6054      	str	r4, [r2, #4]
 800a892:	e7ca      	b.n	800a82a <_free_r+0x22>
 800a894:	bd38      	pop	{r3, r4, r5, pc}
 800a896:	bf00      	nop
 800a898:	20012908 	.word	0x20012908

0800a89c <malloc>:
 800a89c:	4b02      	ldr	r3, [pc, #8]	@ (800a8a8 <malloc+0xc>)
 800a89e:	4601      	mov	r1, r0
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	f000 b825 	b.w	800a8f0 <_malloc_r>
 800a8a6:	bf00      	nop
 800a8a8:	2000002c 	.word	0x2000002c

0800a8ac <sbrk_aligned>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a8ec <sbrk_aligned+0x40>)
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	6831      	ldr	r1, [r6, #0]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	b911      	cbnz	r1, 800a8be <sbrk_aligned+0x12>
 800a8b8:	f000 fe46 	bl	800b548 <_sbrk_r>
 800a8bc:	6030      	str	r0, [r6, #0]
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 fe41 	bl	800b548 <_sbrk_r>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	d103      	bne.n	800a8d2 <sbrk_aligned+0x26>
 800a8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	bd70      	pop	{r4, r5, r6, pc}
 800a8d2:	1cc4      	adds	r4, r0, #3
 800a8d4:	f024 0403 	bic.w	r4, r4, #3
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d0f8      	beq.n	800a8ce <sbrk_aligned+0x22>
 800a8dc:	1a21      	subs	r1, r4, r0
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 fe32 	bl	800b548 <_sbrk_r>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d1f2      	bne.n	800a8ce <sbrk_aligned+0x22>
 800a8e8:	e7ef      	b.n	800a8ca <sbrk_aligned+0x1e>
 800a8ea:	bf00      	nop
 800a8ec:	20012904 	.word	0x20012904

0800a8f0 <_malloc_r>:
 800a8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f4:	1ccd      	adds	r5, r1, #3
 800a8f6:	f025 0503 	bic.w	r5, r5, #3
 800a8fa:	3508      	adds	r5, #8
 800a8fc:	2d0c      	cmp	r5, #12
 800a8fe:	bf38      	it	cc
 800a900:	250c      	movcc	r5, #12
 800a902:	2d00      	cmp	r5, #0
 800a904:	4606      	mov	r6, r0
 800a906:	db01      	blt.n	800a90c <_malloc_r+0x1c>
 800a908:	42a9      	cmp	r1, r5
 800a90a:	d904      	bls.n	800a916 <_malloc_r+0x26>
 800a90c:	230c      	movs	r3, #12
 800a90e:	6033      	str	r3, [r6, #0]
 800a910:	2000      	movs	r0, #0
 800a912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9ec <_malloc_r+0xfc>
 800a91a:	f000 f869 	bl	800a9f0 <__malloc_lock>
 800a91e:	f8d8 3000 	ldr.w	r3, [r8]
 800a922:	461c      	mov	r4, r3
 800a924:	bb44      	cbnz	r4, 800a978 <_malloc_r+0x88>
 800a926:	4629      	mov	r1, r5
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff ffbf 	bl	800a8ac <sbrk_aligned>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	4604      	mov	r4, r0
 800a932:	d158      	bne.n	800a9e6 <_malloc_r+0xf6>
 800a934:	f8d8 4000 	ldr.w	r4, [r8]
 800a938:	4627      	mov	r7, r4
 800a93a:	2f00      	cmp	r7, #0
 800a93c:	d143      	bne.n	800a9c6 <_malloc_r+0xd6>
 800a93e:	2c00      	cmp	r4, #0
 800a940:	d04b      	beq.n	800a9da <_malloc_r+0xea>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	4639      	mov	r1, r7
 800a946:	4630      	mov	r0, r6
 800a948:	eb04 0903 	add.w	r9, r4, r3
 800a94c:	f000 fdfc 	bl	800b548 <_sbrk_r>
 800a950:	4581      	cmp	r9, r0
 800a952:	d142      	bne.n	800a9da <_malloc_r+0xea>
 800a954:	6821      	ldr	r1, [r4, #0]
 800a956:	1a6d      	subs	r5, r5, r1
 800a958:	4629      	mov	r1, r5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f7ff ffa6 	bl	800a8ac <sbrk_aligned>
 800a960:	3001      	adds	r0, #1
 800a962:	d03a      	beq.n	800a9da <_malloc_r+0xea>
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	442b      	add	r3, r5
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	f8d8 3000 	ldr.w	r3, [r8]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	bb62      	cbnz	r2, 800a9cc <_malloc_r+0xdc>
 800a972:	f8c8 7000 	str.w	r7, [r8]
 800a976:	e00f      	b.n	800a998 <_malloc_r+0xa8>
 800a978:	6822      	ldr	r2, [r4, #0]
 800a97a:	1b52      	subs	r2, r2, r5
 800a97c:	d420      	bmi.n	800a9c0 <_malloc_r+0xd0>
 800a97e:	2a0b      	cmp	r2, #11
 800a980:	d917      	bls.n	800a9b2 <_malloc_r+0xc2>
 800a982:	1961      	adds	r1, r4, r5
 800a984:	42a3      	cmp	r3, r4
 800a986:	6025      	str	r5, [r4, #0]
 800a988:	bf18      	it	ne
 800a98a:	6059      	strne	r1, [r3, #4]
 800a98c:	6863      	ldr	r3, [r4, #4]
 800a98e:	bf08      	it	eq
 800a990:	f8c8 1000 	streq.w	r1, [r8]
 800a994:	5162      	str	r2, [r4, r5]
 800a996:	604b      	str	r3, [r1, #4]
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 f82f 	bl	800a9fc <__malloc_unlock>
 800a99e:	f104 000b 	add.w	r0, r4, #11
 800a9a2:	1d23      	adds	r3, r4, #4
 800a9a4:	f020 0007 	bic.w	r0, r0, #7
 800a9a8:	1ac2      	subs	r2, r0, r3
 800a9aa:	bf1c      	itt	ne
 800a9ac:	1a1b      	subne	r3, r3, r0
 800a9ae:	50a3      	strne	r3, [r4, r2]
 800a9b0:	e7af      	b.n	800a912 <_malloc_r+0x22>
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	bf0c      	ite	eq
 800a9b8:	f8c8 2000 	streq.w	r2, [r8]
 800a9bc:	605a      	strne	r2, [r3, #4]
 800a9be:	e7eb      	b.n	800a998 <_malloc_r+0xa8>
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	6864      	ldr	r4, [r4, #4]
 800a9c4:	e7ae      	b.n	800a924 <_malloc_r+0x34>
 800a9c6:	463c      	mov	r4, r7
 800a9c8:	687f      	ldr	r7, [r7, #4]
 800a9ca:	e7b6      	b.n	800a93a <_malloc_r+0x4a>
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d1fb      	bne.n	800a9cc <_malloc_r+0xdc>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	6053      	str	r3, [r2, #4]
 800a9d8:	e7de      	b.n	800a998 <_malloc_r+0xa8>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	6033      	str	r3, [r6, #0]
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f000 f80c 	bl	800a9fc <__malloc_unlock>
 800a9e4:	e794      	b.n	800a910 <_malloc_r+0x20>
 800a9e6:	6005      	str	r5, [r0, #0]
 800a9e8:	e7d6      	b.n	800a998 <_malloc_r+0xa8>
 800a9ea:	bf00      	nop
 800a9ec:	20012908 	.word	0x20012908

0800a9f0 <__malloc_lock>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	@ (800a9f8 <__malloc_lock+0x8>)
 800a9f2:	f7ff b8ac 	b.w	8009b4e <__retarget_lock_acquire_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	20012900 	.word	0x20012900

0800a9fc <__malloc_unlock>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	@ (800aa04 <__malloc_unlock+0x8>)
 800a9fe:	f7ff b8a7 	b.w	8009b50 <__retarget_lock_release_recursive>
 800aa02:	bf00      	nop
 800aa04:	20012900 	.word	0x20012900

0800aa08 <_Balloc>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	69c6      	ldr	r6, [r0, #28]
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	460d      	mov	r5, r1
 800aa10:	b976      	cbnz	r6, 800aa30 <_Balloc+0x28>
 800aa12:	2010      	movs	r0, #16
 800aa14:	f7ff ff42 	bl	800a89c <malloc>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	61e0      	str	r0, [r4, #28]
 800aa1c:	b920      	cbnz	r0, 800aa28 <_Balloc+0x20>
 800aa1e:	4b18      	ldr	r3, [pc, #96]	@ (800aa80 <_Balloc+0x78>)
 800aa20:	4818      	ldr	r0, [pc, #96]	@ (800aa84 <_Balloc+0x7c>)
 800aa22:	216b      	movs	r1, #107	@ 0x6b
 800aa24:	f000 fda0 	bl	800b568 <__assert_func>
 800aa28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa2c:	6006      	str	r6, [r0, #0]
 800aa2e:	60c6      	str	r6, [r0, #12]
 800aa30:	69e6      	ldr	r6, [r4, #28]
 800aa32:	68f3      	ldr	r3, [r6, #12]
 800aa34:	b183      	cbz	r3, 800aa58 <_Balloc+0x50>
 800aa36:	69e3      	ldr	r3, [r4, #28]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa3e:	b9b8      	cbnz	r0, 800aa70 <_Balloc+0x68>
 800aa40:	2101      	movs	r1, #1
 800aa42:	fa01 f605 	lsl.w	r6, r1, r5
 800aa46:	1d72      	adds	r2, r6, #5
 800aa48:	0092      	lsls	r2, r2, #2
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fdaa 	bl	800b5a4 <_calloc_r>
 800aa50:	b160      	cbz	r0, 800aa6c <_Balloc+0x64>
 800aa52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa56:	e00e      	b.n	800aa76 <_Balloc+0x6e>
 800aa58:	2221      	movs	r2, #33	@ 0x21
 800aa5a:	2104      	movs	r1, #4
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fda1 	bl	800b5a4 <_calloc_r>
 800aa62:	69e3      	ldr	r3, [r4, #28]
 800aa64:	60f0      	str	r0, [r6, #12]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1e4      	bne.n	800aa36 <_Balloc+0x2e>
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
 800aa70:	6802      	ldr	r2, [r0, #0]
 800aa72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa76:	2300      	movs	r3, #0
 800aa78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa7c:	e7f7      	b.n	800aa6e <_Balloc+0x66>
 800aa7e:	bf00      	nop
 800aa80:	0800c429 	.word	0x0800c429
 800aa84:	0800c4a9 	.word	0x0800c4a9

0800aa88 <_Bfree>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	69c6      	ldr	r6, [r0, #28]
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	b976      	cbnz	r6, 800aab0 <_Bfree+0x28>
 800aa92:	2010      	movs	r0, #16
 800aa94:	f7ff ff02 	bl	800a89c <malloc>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	61e8      	str	r0, [r5, #28]
 800aa9c:	b920      	cbnz	r0, 800aaa8 <_Bfree+0x20>
 800aa9e:	4b09      	ldr	r3, [pc, #36]	@ (800aac4 <_Bfree+0x3c>)
 800aaa0:	4809      	ldr	r0, [pc, #36]	@ (800aac8 <_Bfree+0x40>)
 800aaa2:	218f      	movs	r1, #143	@ 0x8f
 800aaa4:	f000 fd60 	bl	800b568 <__assert_func>
 800aaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaac:	6006      	str	r6, [r0, #0]
 800aaae:	60c6      	str	r6, [r0, #12]
 800aab0:	b13c      	cbz	r4, 800aac2 <_Bfree+0x3a>
 800aab2:	69eb      	ldr	r3, [r5, #28]
 800aab4:	6862      	ldr	r2, [r4, #4]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aabc:	6021      	str	r1, [r4, #0]
 800aabe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	0800c429 	.word	0x0800c429
 800aac8:	0800c4a9 	.word	0x0800c4a9

0800aacc <__multadd>:
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	690d      	ldr	r5, [r1, #16]
 800aad2:	4607      	mov	r7, r0
 800aad4:	460c      	mov	r4, r1
 800aad6:	461e      	mov	r6, r3
 800aad8:	f101 0c14 	add.w	ip, r1, #20
 800aadc:	2000      	movs	r0, #0
 800aade:	f8dc 3000 	ldr.w	r3, [ip]
 800aae2:	b299      	uxth	r1, r3
 800aae4:	fb02 6101 	mla	r1, r2, r1, r6
 800aae8:	0c1e      	lsrs	r6, r3, #16
 800aaea:	0c0b      	lsrs	r3, r1, #16
 800aaec:	fb02 3306 	mla	r3, r2, r6, r3
 800aaf0:	b289      	uxth	r1, r1
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aaf8:	4285      	cmp	r5, r0
 800aafa:	f84c 1b04 	str.w	r1, [ip], #4
 800aafe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab02:	dcec      	bgt.n	800aade <__multadd+0x12>
 800ab04:	b30e      	cbz	r6, 800ab4a <__multadd+0x7e>
 800ab06:	68a3      	ldr	r3, [r4, #8]
 800ab08:	42ab      	cmp	r3, r5
 800ab0a:	dc19      	bgt.n	800ab40 <__multadd+0x74>
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	4638      	mov	r0, r7
 800ab10:	3101      	adds	r1, #1
 800ab12:	f7ff ff79 	bl	800aa08 <_Balloc>
 800ab16:	4680      	mov	r8, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <__multadd+0x5a>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab50 <__multadd+0x84>)
 800ab1e:	480d      	ldr	r0, [pc, #52]	@ (800ab54 <__multadd+0x88>)
 800ab20:	21ba      	movs	r1, #186	@ 0xba
 800ab22:	f000 fd21 	bl	800b568 <__assert_func>
 800ab26:	6922      	ldr	r2, [r4, #16]
 800ab28:	3202      	adds	r2, #2
 800ab2a:	f104 010c 	add.w	r1, r4, #12
 800ab2e:	0092      	lsls	r2, r2, #2
 800ab30:	300c      	adds	r0, #12
 800ab32:	f7ff f80e 	bl	8009b52 <memcpy>
 800ab36:	4621      	mov	r1, r4
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f7ff ffa5 	bl	800aa88 <_Bfree>
 800ab3e:	4644      	mov	r4, r8
 800ab40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab44:	3501      	adds	r5, #1
 800ab46:	615e      	str	r6, [r3, #20]
 800ab48:	6125      	str	r5, [r4, #16]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab50:	0800c498 	.word	0x0800c498
 800ab54:	0800c4a9 	.word	0x0800c4a9

0800ab58 <__hi0bits>:
 800ab58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	bf36      	itet	cc
 800ab60:	0403      	lslcc	r3, r0, #16
 800ab62:	2000      	movcs	r0, #0
 800ab64:	2010      	movcc	r0, #16
 800ab66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab6a:	bf3c      	itt	cc
 800ab6c:	021b      	lslcc	r3, r3, #8
 800ab6e:	3008      	addcc	r0, #8
 800ab70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab74:	bf3c      	itt	cc
 800ab76:	011b      	lslcc	r3, r3, #4
 800ab78:	3004      	addcc	r0, #4
 800ab7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab7e:	bf3c      	itt	cc
 800ab80:	009b      	lslcc	r3, r3, #2
 800ab82:	3002      	addcc	r0, #2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	db05      	blt.n	800ab94 <__hi0bits+0x3c>
 800ab88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab8c:	f100 0001 	add.w	r0, r0, #1
 800ab90:	bf08      	it	eq
 800ab92:	2020      	moveq	r0, #32
 800ab94:	4770      	bx	lr

0800ab96 <__lo0bits>:
 800ab96:	6803      	ldr	r3, [r0, #0]
 800ab98:	4602      	mov	r2, r0
 800ab9a:	f013 0007 	ands.w	r0, r3, #7
 800ab9e:	d00b      	beq.n	800abb8 <__lo0bits+0x22>
 800aba0:	07d9      	lsls	r1, r3, #31
 800aba2:	d421      	bmi.n	800abe8 <__lo0bits+0x52>
 800aba4:	0798      	lsls	r0, r3, #30
 800aba6:	bf49      	itett	mi
 800aba8:	085b      	lsrmi	r3, r3, #1
 800abaa:	089b      	lsrpl	r3, r3, #2
 800abac:	2001      	movmi	r0, #1
 800abae:	6013      	strmi	r3, [r2, #0]
 800abb0:	bf5c      	itt	pl
 800abb2:	6013      	strpl	r3, [r2, #0]
 800abb4:	2002      	movpl	r0, #2
 800abb6:	4770      	bx	lr
 800abb8:	b299      	uxth	r1, r3
 800abba:	b909      	cbnz	r1, 800abc0 <__lo0bits+0x2a>
 800abbc:	0c1b      	lsrs	r3, r3, #16
 800abbe:	2010      	movs	r0, #16
 800abc0:	b2d9      	uxtb	r1, r3
 800abc2:	b909      	cbnz	r1, 800abc8 <__lo0bits+0x32>
 800abc4:	3008      	adds	r0, #8
 800abc6:	0a1b      	lsrs	r3, r3, #8
 800abc8:	0719      	lsls	r1, r3, #28
 800abca:	bf04      	itt	eq
 800abcc:	091b      	lsreq	r3, r3, #4
 800abce:	3004      	addeq	r0, #4
 800abd0:	0799      	lsls	r1, r3, #30
 800abd2:	bf04      	itt	eq
 800abd4:	089b      	lsreq	r3, r3, #2
 800abd6:	3002      	addeq	r0, #2
 800abd8:	07d9      	lsls	r1, r3, #31
 800abda:	d403      	bmi.n	800abe4 <__lo0bits+0x4e>
 800abdc:	085b      	lsrs	r3, r3, #1
 800abde:	f100 0001 	add.w	r0, r0, #1
 800abe2:	d003      	beq.n	800abec <__lo0bits+0x56>
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	4770      	bx	lr
 800abe8:	2000      	movs	r0, #0
 800abea:	4770      	bx	lr
 800abec:	2020      	movs	r0, #32
 800abee:	4770      	bx	lr

0800abf0 <__i2b>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	2101      	movs	r1, #1
 800abf6:	f7ff ff07 	bl	800aa08 <_Balloc>
 800abfa:	4602      	mov	r2, r0
 800abfc:	b928      	cbnz	r0, 800ac0a <__i2b+0x1a>
 800abfe:	4b05      	ldr	r3, [pc, #20]	@ (800ac14 <__i2b+0x24>)
 800ac00:	4805      	ldr	r0, [pc, #20]	@ (800ac18 <__i2b+0x28>)
 800ac02:	f240 1145 	movw	r1, #325	@ 0x145
 800ac06:	f000 fcaf 	bl	800b568 <__assert_func>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	6144      	str	r4, [r0, #20]
 800ac0e:	6103      	str	r3, [r0, #16]
 800ac10:	bd10      	pop	{r4, pc}
 800ac12:	bf00      	nop
 800ac14:	0800c498 	.word	0x0800c498
 800ac18:	0800c4a9 	.word	0x0800c4a9

0800ac1c <__multiply>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	4614      	mov	r4, r2
 800ac22:	690a      	ldr	r2, [r1, #16]
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	bfa8      	it	ge
 800ac2a:	4623      	movge	r3, r4
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	bfa4      	itt	ge
 800ac30:	460c      	movge	r4, r1
 800ac32:	461f      	movge	r7, r3
 800ac34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	6861      	ldr	r1, [r4, #4]
 800ac40:	eb0a 0609 	add.w	r6, sl, r9
 800ac44:	42b3      	cmp	r3, r6
 800ac46:	b085      	sub	sp, #20
 800ac48:	bfb8      	it	lt
 800ac4a:	3101      	addlt	r1, #1
 800ac4c:	f7ff fedc 	bl	800aa08 <_Balloc>
 800ac50:	b930      	cbnz	r0, 800ac60 <__multiply+0x44>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4b44      	ldr	r3, [pc, #272]	@ (800ad68 <__multiply+0x14c>)
 800ac56:	4845      	ldr	r0, [pc, #276]	@ (800ad6c <__multiply+0x150>)
 800ac58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac5c:	f000 fc84 	bl	800b568 <__assert_func>
 800ac60:	f100 0514 	add.w	r5, r0, #20
 800ac64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac68:	462b      	mov	r3, r5
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	4543      	cmp	r3, r8
 800ac6e:	d321      	bcc.n	800acb4 <__multiply+0x98>
 800ac70:	f107 0114 	add.w	r1, r7, #20
 800ac74:	f104 0214 	add.w	r2, r4, #20
 800ac78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac80:	9302      	str	r3, [sp, #8]
 800ac82:	1b13      	subs	r3, r2, r4
 800ac84:	3b15      	subs	r3, #21
 800ac86:	f023 0303 	bic.w	r3, r3, #3
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	f104 0715 	add.w	r7, r4, #21
 800ac90:	42ba      	cmp	r2, r7
 800ac92:	bf38      	it	cc
 800ac94:	2304      	movcc	r3, #4
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	9b02      	ldr	r3, [sp, #8]
 800ac9a:	9103      	str	r1, [sp, #12]
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	d80c      	bhi.n	800acba <__multiply+0x9e>
 800aca0:	2e00      	cmp	r6, #0
 800aca2:	dd03      	ble.n	800acac <__multiply+0x90>
 800aca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d05b      	beq.n	800ad64 <__multiply+0x148>
 800acac:	6106      	str	r6, [r0, #16]
 800acae:	b005      	add	sp, #20
 800acb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb4:	f843 2b04 	str.w	r2, [r3], #4
 800acb8:	e7d8      	b.n	800ac6c <__multiply+0x50>
 800acba:	f8b1 a000 	ldrh.w	sl, [r1]
 800acbe:	f1ba 0f00 	cmp.w	sl, #0
 800acc2:	d024      	beq.n	800ad0e <__multiply+0xf2>
 800acc4:	f104 0e14 	add.w	lr, r4, #20
 800acc8:	46a9      	mov	r9, r5
 800acca:	f04f 0c00 	mov.w	ip, #0
 800acce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acd2:	f8d9 3000 	ldr.w	r3, [r9]
 800acd6:	fa1f fb87 	uxth.w	fp, r7
 800acda:	b29b      	uxth	r3, r3
 800acdc:	fb0a 330b 	mla	r3, sl, fp, r3
 800ace0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ace4:	f8d9 7000 	ldr.w	r7, [r9]
 800ace8:	4463      	add	r3, ip
 800acea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800acee:	fb0a c70b 	mla	r7, sl, fp, ip
 800acf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acfc:	4572      	cmp	r2, lr
 800acfe:	f849 3b04 	str.w	r3, [r9], #4
 800ad02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad06:	d8e2      	bhi.n	800acce <__multiply+0xb2>
 800ad08:	9b01      	ldr	r3, [sp, #4]
 800ad0a:	f845 c003 	str.w	ip, [r5, r3]
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad14:	3104      	adds	r1, #4
 800ad16:	f1b9 0f00 	cmp.w	r9, #0
 800ad1a:	d021      	beq.n	800ad60 <__multiply+0x144>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	f104 0c14 	add.w	ip, r4, #20
 800ad22:	46ae      	mov	lr, r5
 800ad24:	f04f 0a00 	mov.w	sl, #0
 800ad28:	f8bc b000 	ldrh.w	fp, [ip]
 800ad2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad30:	fb09 770b 	mla	r7, r9, fp, r7
 800ad34:	4457      	add	r7, sl
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad3c:	f84e 3b04 	str.w	r3, [lr], #4
 800ad40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad48:	f8be 3000 	ldrh.w	r3, [lr]
 800ad4c:	fb09 330a 	mla	r3, r9, sl, r3
 800ad50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ad54:	4562      	cmp	r2, ip
 800ad56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad5a:	d8e5      	bhi.n	800ad28 <__multiply+0x10c>
 800ad5c:	9f01      	ldr	r7, [sp, #4]
 800ad5e:	51eb      	str	r3, [r5, r7]
 800ad60:	3504      	adds	r5, #4
 800ad62:	e799      	b.n	800ac98 <__multiply+0x7c>
 800ad64:	3e01      	subs	r6, #1
 800ad66:	e79b      	b.n	800aca0 <__multiply+0x84>
 800ad68:	0800c498 	.word	0x0800c498
 800ad6c:	0800c4a9 	.word	0x0800c4a9

0800ad70 <__pow5mult>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	4615      	mov	r5, r2
 800ad76:	f012 0203 	ands.w	r2, r2, #3
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	460e      	mov	r6, r1
 800ad7e:	d007      	beq.n	800ad90 <__pow5mult+0x20>
 800ad80:	4c25      	ldr	r4, [pc, #148]	@ (800ae18 <__pow5mult+0xa8>)
 800ad82:	3a01      	subs	r2, #1
 800ad84:	2300      	movs	r3, #0
 800ad86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad8a:	f7ff fe9f 	bl	800aacc <__multadd>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	10ad      	asrs	r5, r5, #2
 800ad92:	d03d      	beq.n	800ae10 <__pow5mult+0xa0>
 800ad94:	69fc      	ldr	r4, [r7, #28]
 800ad96:	b97c      	cbnz	r4, 800adb8 <__pow5mult+0x48>
 800ad98:	2010      	movs	r0, #16
 800ad9a:	f7ff fd7f 	bl	800a89c <malloc>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	61f8      	str	r0, [r7, #28]
 800ada2:	b928      	cbnz	r0, 800adb0 <__pow5mult+0x40>
 800ada4:	4b1d      	ldr	r3, [pc, #116]	@ (800ae1c <__pow5mult+0xac>)
 800ada6:	481e      	ldr	r0, [pc, #120]	@ (800ae20 <__pow5mult+0xb0>)
 800ada8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adac:	f000 fbdc 	bl	800b568 <__assert_func>
 800adb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb4:	6004      	str	r4, [r0, #0]
 800adb6:	60c4      	str	r4, [r0, #12]
 800adb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800adbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adc0:	b94c      	cbnz	r4, 800add6 <__pow5mult+0x66>
 800adc2:	f240 2171 	movw	r1, #625	@ 0x271
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7ff ff12 	bl	800abf0 <__i2b>
 800adcc:	2300      	movs	r3, #0
 800adce:	f8c8 0008 	str.w	r0, [r8, #8]
 800add2:	4604      	mov	r4, r0
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	f04f 0900 	mov.w	r9, #0
 800adda:	07eb      	lsls	r3, r5, #31
 800addc:	d50a      	bpl.n	800adf4 <__pow5mult+0x84>
 800adde:	4631      	mov	r1, r6
 800ade0:	4622      	mov	r2, r4
 800ade2:	4638      	mov	r0, r7
 800ade4:	f7ff ff1a 	bl	800ac1c <__multiply>
 800ade8:	4631      	mov	r1, r6
 800adea:	4680      	mov	r8, r0
 800adec:	4638      	mov	r0, r7
 800adee:	f7ff fe4b 	bl	800aa88 <_Bfree>
 800adf2:	4646      	mov	r6, r8
 800adf4:	106d      	asrs	r5, r5, #1
 800adf6:	d00b      	beq.n	800ae10 <__pow5mult+0xa0>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	b938      	cbnz	r0, 800ae0c <__pow5mult+0x9c>
 800adfc:	4622      	mov	r2, r4
 800adfe:	4621      	mov	r1, r4
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff ff0b 	bl	800ac1c <__multiply>
 800ae06:	6020      	str	r0, [r4, #0]
 800ae08:	f8c0 9000 	str.w	r9, [r0]
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	e7e4      	b.n	800adda <__pow5mult+0x6a>
 800ae10:	4630      	mov	r0, r6
 800ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae16:	bf00      	nop
 800ae18:	0800c504 	.word	0x0800c504
 800ae1c:	0800c429 	.word	0x0800c429
 800ae20:	0800c4a9 	.word	0x0800c4a9

0800ae24 <__lshift>:
 800ae24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae28:	460c      	mov	r4, r1
 800ae2a:	6849      	ldr	r1, [r1, #4]
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae32:	68a3      	ldr	r3, [r4, #8]
 800ae34:	4607      	mov	r7, r0
 800ae36:	4691      	mov	r9, r2
 800ae38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae3c:	f108 0601 	add.w	r6, r8, #1
 800ae40:	42b3      	cmp	r3, r6
 800ae42:	db0b      	blt.n	800ae5c <__lshift+0x38>
 800ae44:	4638      	mov	r0, r7
 800ae46:	f7ff fddf 	bl	800aa08 <_Balloc>
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	b948      	cbnz	r0, 800ae62 <__lshift+0x3e>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4b28      	ldr	r3, [pc, #160]	@ (800aef4 <__lshift+0xd0>)
 800ae52:	4829      	ldr	r0, [pc, #164]	@ (800aef8 <__lshift+0xd4>)
 800ae54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae58:	f000 fb86 	bl	800b568 <__assert_func>
 800ae5c:	3101      	adds	r1, #1
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	e7ee      	b.n	800ae40 <__lshift+0x1c>
 800ae62:	2300      	movs	r3, #0
 800ae64:	f100 0114 	add.w	r1, r0, #20
 800ae68:	f100 0210 	add.w	r2, r0, #16
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	4553      	cmp	r3, sl
 800ae70:	db33      	blt.n	800aeda <__lshift+0xb6>
 800ae72:	6920      	ldr	r0, [r4, #16]
 800ae74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae78:	f104 0314 	add.w	r3, r4, #20
 800ae7c:	f019 091f 	ands.w	r9, r9, #31
 800ae80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae88:	d02b      	beq.n	800aee2 <__lshift+0xbe>
 800ae8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae8e:	468a      	mov	sl, r1
 800ae90:	2200      	movs	r2, #0
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	fa00 f009 	lsl.w	r0, r0, r9
 800ae98:	4310      	orrs	r0, r2
 800ae9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ae9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aea2:	459c      	cmp	ip, r3
 800aea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aea8:	d8f3      	bhi.n	800ae92 <__lshift+0x6e>
 800aeaa:	ebac 0304 	sub.w	r3, ip, r4
 800aeae:	3b15      	subs	r3, #21
 800aeb0:	f023 0303 	bic.w	r3, r3, #3
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	f104 0015 	add.w	r0, r4, #21
 800aeba:	4584      	cmp	ip, r0
 800aebc:	bf38      	it	cc
 800aebe:	2304      	movcc	r3, #4
 800aec0:	50ca      	str	r2, [r1, r3]
 800aec2:	b10a      	cbz	r2, 800aec8 <__lshift+0xa4>
 800aec4:	f108 0602 	add.w	r6, r8, #2
 800aec8:	3e01      	subs	r6, #1
 800aeca:	4638      	mov	r0, r7
 800aecc:	612e      	str	r6, [r5, #16]
 800aece:	4621      	mov	r1, r4
 800aed0:	f7ff fdda 	bl	800aa88 <_Bfree>
 800aed4:	4628      	mov	r0, r5
 800aed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeda:	f842 0f04 	str.w	r0, [r2, #4]!
 800aede:	3301      	adds	r3, #1
 800aee0:	e7c5      	b.n	800ae6e <__lshift+0x4a>
 800aee2:	3904      	subs	r1, #4
 800aee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeec:	459c      	cmp	ip, r3
 800aeee:	d8f9      	bhi.n	800aee4 <__lshift+0xc0>
 800aef0:	e7ea      	b.n	800aec8 <__lshift+0xa4>
 800aef2:	bf00      	nop
 800aef4:	0800c498 	.word	0x0800c498
 800aef8:	0800c4a9 	.word	0x0800c4a9

0800aefc <__mcmp>:
 800aefc:	690a      	ldr	r2, [r1, #16]
 800aefe:	4603      	mov	r3, r0
 800af00:	6900      	ldr	r0, [r0, #16]
 800af02:	1a80      	subs	r0, r0, r2
 800af04:	b530      	push	{r4, r5, lr}
 800af06:	d10e      	bne.n	800af26 <__mcmp+0x2a>
 800af08:	3314      	adds	r3, #20
 800af0a:	3114      	adds	r1, #20
 800af0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af1c:	4295      	cmp	r5, r2
 800af1e:	d003      	beq.n	800af28 <__mcmp+0x2c>
 800af20:	d205      	bcs.n	800af2e <__mcmp+0x32>
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	bd30      	pop	{r4, r5, pc}
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d3f3      	bcc.n	800af14 <__mcmp+0x18>
 800af2c:	e7fb      	b.n	800af26 <__mcmp+0x2a>
 800af2e:	2001      	movs	r0, #1
 800af30:	e7f9      	b.n	800af26 <__mcmp+0x2a>
	...

0800af34 <__mdiff>:
 800af34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	4689      	mov	r9, r1
 800af3a:	4606      	mov	r6, r0
 800af3c:	4611      	mov	r1, r2
 800af3e:	4648      	mov	r0, r9
 800af40:	4614      	mov	r4, r2
 800af42:	f7ff ffdb 	bl	800aefc <__mcmp>
 800af46:	1e05      	subs	r5, r0, #0
 800af48:	d112      	bne.n	800af70 <__mdiff+0x3c>
 800af4a:	4629      	mov	r1, r5
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fd5b 	bl	800aa08 <_Balloc>
 800af52:	4602      	mov	r2, r0
 800af54:	b928      	cbnz	r0, 800af62 <__mdiff+0x2e>
 800af56:	4b3f      	ldr	r3, [pc, #252]	@ (800b054 <__mdiff+0x120>)
 800af58:	f240 2137 	movw	r1, #567	@ 0x237
 800af5c:	483e      	ldr	r0, [pc, #248]	@ (800b058 <__mdiff+0x124>)
 800af5e:	f000 fb03 	bl	800b568 <__assert_func>
 800af62:	2301      	movs	r3, #1
 800af64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af68:	4610      	mov	r0, r2
 800af6a:	b003      	add	sp, #12
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	bfbc      	itt	lt
 800af72:	464b      	movlt	r3, r9
 800af74:	46a1      	movlt	r9, r4
 800af76:	4630      	mov	r0, r6
 800af78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af7c:	bfba      	itte	lt
 800af7e:	461c      	movlt	r4, r3
 800af80:	2501      	movlt	r5, #1
 800af82:	2500      	movge	r5, #0
 800af84:	f7ff fd40 	bl	800aa08 <_Balloc>
 800af88:	4602      	mov	r2, r0
 800af8a:	b918      	cbnz	r0, 800af94 <__mdiff+0x60>
 800af8c:	4b31      	ldr	r3, [pc, #196]	@ (800b054 <__mdiff+0x120>)
 800af8e:	f240 2145 	movw	r1, #581	@ 0x245
 800af92:	e7e3      	b.n	800af5c <__mdiff+0x28>
 800af94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af98:	6926      	ldr	r6, [r4, #16]
 800af9a:	60c5      	str	r5, [r0, #12]
 800af9c:	f109 0310 	add.w	r3, r9, #16
 800afa0:	f109 0514 	add.w	r5, r9, #20
 800afa4:	f104 0e14 	add.w	lr, r4, #20
 800afa8:	f100 0b14 	add.w	fp, r0, #20
 800afac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800afb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	46d9      	mov	r9, fp
 800afb8:	f04f 0c00 	mov.w	ip, #0
 800afbc:	9b01      	ldr	r3, [sp, #4]
 800afbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800afc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	fa1f f38a 	uxth.w	r3, sl
 800afcc:	4619      	mov	r1, r3
 800afce:	b283      	uxth	r3, r0
 800afd0:	1acb      	subs	r3, r1, r3
 800afd2:	0c00      	lsrs	r0, r0, #16
 800afd4:	4463      	add	r3, ip
 800afd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800afda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800afde:	b29b      	uxth	r3, r3
 800afe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afe4:	4576      	cmp	r6, lr
 800afe6:	f849 3b04 	str.w	r3, [r9], #4
 800afea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afee:	d8e5      	bhi.n	800afbc <__mdiff+0x88>
 800aff0:	1b33      	subs	r3, r6, r4
 800aff2:	3b15      	subs	r3, #21
 800aff4:	f023 0303 	bic.w	r3, r3, #3
 800aff8:	3415      	adds	r4, #21
 800affa:	3304      	adds	r3, #4
 800affc:	42a6      	cmp	r6, r4
 800affe:	bf38      	it	cc
 800b000:	2304      	movcc	r3, #4
 800b002:	441d      	add	r5, r3
 800b004:	445b      	add	r3, fp
 800b006:	461e      	mov	r6, r3
 800b008:	462c      	mov	r4, r5
 800b00a:	4544      	cmp	r4, r8
 800b00c:	d30e      	bcc.n	800b02c <__mdiff+0xf8>
 800b00e:	f108 0103 	add.w	r1, r8, #3
 800b012:	1b49      	subs	r1, r1, r5
 800b014:	f021 0103 	bic.w	r1, r1, #3
 800b018:	3d03      	subs	r5, #3
 800b01a:	45a8      	cmp	r8, r5
 800b01c:	bf38      	it	cc
 800b01e:	2100      	movcc	r1, #0
 800b020:	440b      	add	r3, r1
 800b022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b026:	b191      	cbz	r1, 800b04e <__mdiff+0x11a>
 800b028:	6117      	str	r7, [r2, #16]
 800b02a:	e79d      	b.n	800af68 <__mdiff+0x34>
 800b02c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b030:	46e6      	mov	lr, ip
 800b032:	0c08      	lsrs	r0, r1, #16
 800b034:	fa1c fc81 	uxtah	ip, ip, r1
 800b038:	4471      	add	r1, lr
 800b03a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b03e:	b289      	uxth	r1, r1
 800b040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b044:	f846 1b04 	str.w	r1, [r6], #4
 800b048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b04c:	e7dd      	b.n	800b00a <__mdiff+0xd6>
 800b04e:	3f01      	subs	r7, #1
 800b050:	e7e7      	b.n	800b022 <__mdiff+0xee>
 800b052:	bf00      	nop
 800b054:	0800c498 	.word	0x0800c498
 800b058:	0800c4a9 	.word	0x0800c4a9

0800b05c <__d2b>:
 800b05c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b060:	460f      	mov	r7, r1
 800b062:	2101      	movs	r1, #1
 800b064:	ec59 8b10 	vmov	r8, r9, d0
 800b068:	4616      	mov	r6, r2
 800b06a:	f7ff fccd 	bl	800aa08 <_Balloc>
 800b06e:	4604      	mov	r4, r0
 800b070:	b930      	cbnz	r0, 800b080 <__d2b+0x24>
 800b072:	4602      	mov	r2, r0
 800b074:	4b23      	ldr	r3, [pc, #140]	@ (800b104 <__d2b+0xa8>)
 800b076:	4824      	ldr	r0, [pc, #144]	@ (800b108 <__d2b+0xac>)
 800b078:	f240 310f 	movw	r1, #783	@ 0x30f
 800b07c:	f000 fa74 	bl	800b568 <__assert_func>
 800b080:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b084:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b088:	b10d      	cbz	r5, 800b08e <__d2b+0x32>
 800b08a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	f1b8 0300 	subs.w	r3, r8, #0
 800b094:	d023      	beq.n	800b0de <__d2b+0x82>
 800b096:	4668      	mov	r0, sp
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	f7ff fd7c 	bl	800ab96 <__lo0bits>
 800b09e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0a2:	b1d0      	cbz	r0, 800b0da <__d2b+0x7e>
 800b0a4:	f1c0 0320 	rsb	r3, r0, #32
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	430b      	orrs	r3, r1
 800b0ae:	40c2      	lsrs	r2, r0
 800b0b0:	6163      	str	r3, [r4, #20]
 800b0b2:	9201      	str	r2, [sp, #4]
 800b0b4:	9b01      	ldr	r3, [sp, #4]
 800b0b6:	61a3      	str	r3, [r4, #24]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bf0c      	ite	eq
 800b0bc:	2201      	moveq	r2, #1
 800b0be:	2202      	movne	r2, #2
 800b0c0:	6122      	str	r2, [r4, #16]
 800b0c2:	b1a5      	cbz	r5, 800b0ee <__d2b+0x92>
 800b0c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b0c8:	4405      	add	r5, r0
 800b0ca:	603d      	str	r5, [r7, #0]
 800b0cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b0d0:	6030      	str	r0, [r6, #0]
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	b003      	add	sp, #12
 800b0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0da:	6161      	str	r1, [r4, #20]
 800b0dc:	e7ea      	b.n	800b0b4 <__d2b+0x58>
 800b0de:	a801      	add	r0, sp, #4
 800b0e0:	f7ff fd59 	bl	800ab96 <__lo0bits>
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	6163      	str	r3, [r4, #20]
 800b0e8:	3020      	adds	r0, #32
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	e7e8      	b.n	800b0c0 <__d2b+0x64>
 800b0ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b0f6:	6038      	str	r0, [r7, #0]
 800b0f8:	6918      	ldr	r0, [r3, #16]
 800b0fa:	f7ff fd2d 	bl	800ab58 <__hi0bits>
 800b0fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b102:	e7e5      	b.n	800b0d0 <__d2b+0x74>
 800b104:	0800c498 	.word	0x0800c498
 800b108:	0800c4a9 	.word	0x0800c4a9

0800b10c <__ssputs_r>:
 800b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b110:	688e      	ldr	r6, [r1, #8]
 800b112:	461f      	mov	r7, r3
 800b114:	42be      	cmp	r6, r7
 800b116:	680b      	ldr	r3, [r1, #0]
 800b118:	4682      	mov	sl, r0
 800b11a:	460c      	mov	r4, r1
 800b11c:	4690      	mov	r8, r2
 800b11e:	d82d      	bhi.n	800b17c <__ssputs_r+0x70>
 800b120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b128:	d026      	beq.n	800b178 <__ssputs_r+0x6c>
 800b12a:	6965      	ldr	r5, [r4, #20]
 800b12c:	6909      	ldr	r1, [r1, #16]
 800b12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b132:	eba3 0901 	sub.w	r9, r3, r1
 800b136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b13a:	1c7b      	adds	r3, r7, #1
 800b13c:	444b      	add	r3, r9
 800b13e:	106d      	asrs	r5, r5, #1
 800b140:	429d      	cmp	r5, r3
 800b142:	bf38      	it	cc
 800b144:	461d      	movcc	r5, r3
 800b146:	0553      	lsls	r3, r2, #21
 800b148:	d527      	bpl.n	800b19a <__ssputs_r+0x8e>
 800b14a:	4629      	mov	r1, r5
 800b14c:	f7ff fbd0 	bl	800a8f0 <_malloc_r>
 800b150:	4606      	mov	r6, r0
 800b152:	b360      	cbz	r0, 800b1ae <__ssputs_r+0xa2>
 800b154:	6921      	ldr	r1, [r4, #16]
 800b156:	464a      	mov	r2, r9
 800b158:	f7fe fcfb 	bl	8009b52 <memcpy>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	6126      	str	r6, [r4, #16]
 800b16a:	6165      	str	r5, [r4, #20]
 800b16c:	444e      	add	r6, r9
 800b16e:	eba5 0509 	sub.w	r5, r5, r9
 800b172:	6026      	str	r6, [r4, #0]
 800b174:	60a5      	str	r5, [r4, #8]
 800b176:	463e      	mov	r6, r7
 800b178:	42be      	cmp	r6, r7
 800b17a:	d900      	bls.n	800b17e <__ssputs_r+0x72>
 800b17c:	463e      	mov	r6, r7
 800b17e:	6820      	ldr	r0, [r4, #0]
 800b180:	4632      	mov	r2, r6
 800b182:	4641      	mov	r1, r8
 800b184:	f000 f9c6 	bl	800b514 <memmove>
 800b188:	68a3      	ldr	r3, [r4, #8]
 800b18a:	1b9b      	subs	r3, r3, r6
 800b18c:	60a3      	str	r3, [r4, #8]
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	4433      	add	r3, r6
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	2000      	movs	r0, #0
 800b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19a:	462a      	mov	r2, r5
 800b19c:	f000 fa28 	bl	800b5f0 <_realloc_r>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d1e0      	bne.n	800b168 <__ssputs_r+0x5c>
 800b1a6:	6921      	ldr	r1, [r4, #16]
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f7ff fb2d 	bl	800a808 <_free_r>
 800b1ae:	230c      	movs	r3, #12
 800b1b0:	f8ca 3000 	str.w	r3, [sl]
 800b1b4:	89a3      	ldrh	r3, [r4, #12]
 800b1b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	e7e9      	b.n	800b196 <__ssputs_r+0x8a>
	...

0800b1c4 <_svfiprintf_r>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	4698      	mov	r8, r3
 800b1ca:	898b      	ldrh	r3, [r1, #12]
 800b1cc:	061b      	lsls	r3, r3, #24
 800b1ce:	b09d      	sub	sp, #116	@ 0x74
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	4614      	mov	r4, r2
 800b1d6:	d510      	bpl.n	800b1fa <_svfiprintf_r+0x36>
 800b1d8:	690b      	ldr	r3, [r1, #16]
 800b1da:	b973      	cbnz	r3, 800b1fa <_svfiprintf_r+0x36>
 800b1dc:	2140      	movs	r1, #64	@ 0x40
 800b1de:	f7ff fb87 	bl	800a8f0 <_malloc_r>
 800b1e2:	6028      	str	r0, [r5, #0]
 800b1e4:	6128      	str	r0, [r5, #16]
 800b1e6:	b930      	cbnz	r0, 800b1f6 <_svfiprintf_r+0x32>
 800b1e8:	230c      	movs	r3, #12
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f0:	b01d      	add	sp, #116	@ 0x74
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	2340      	movs	r3, #64	@ 0x40
 800b1f8:	616b      	str	r3, [r5, #20]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1fe:	2320      	movs	r3, #32
 800b200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b204:	f8cd 800c 	str.w	r8, [sp, #12]
 800b208:	2330      	movs	r3, #48	@ 0x30
 800b20a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3a8 <_svfiprintf_r+0x1e4>
 800b20e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b212:	f04f 0901 	mov.w	r9, #1
 800b216:	4623      	mov	r3, r4
 800b218:	469a      	mov	sl, r3
 800b21a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21e:	b10a      	cbz	r2, 800b224 <_svfiprintf_r+0x60>
 800b220:	2a25      	cmp	r2, #37	@ 0x25
 800b222:	d1f9      	bne.n	800b218 <_svfiprintf_r+0x54>
 800b224:	ebba 0b04 	subs.w	fp, sl, r4
 800b228:	d00b      	beq.n	800b242 <_svfiprintf_r+0x7e>
 800b22a:	465b      	mov	r3, fp
 800b22c:	4622      	mov	r2, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff ff6b 	bl	800b10c <__ssputs_r>
 800b236:	3001      	adds	r0, #1
 800b238:	f000 80a7 	beq.w	800b38a <_svfiprintf_r+0x1c6>
 800b23c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b23e:	445a      	add	r2, fp
 800b240:	9209      	str	r2, [sp, #36]	@ 0x24
 800b242:	f89a 3000 	ldrb.w	r3, [sl]
 800b246:	2b00      	cmp	r3, #0
 800b248:	f000 809f 	beq.w	800b38a <_svfiprintf_r+0x1c6>
 800b24c:	2300      	movs	r3, #0
 800b24e:	f04f 32ff 	mov.w	r2, #4294967295
 800b252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b256:	f10a 0a01 	add.w	sl, sl, #1
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	9307      	str	r3, [sp, #28]
 800b25e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b262:	931a      	str	r3, [sp, #104]	@ 0x68
 800b264:	4654      	mov	r4, sl
 800b266:	2205      	movs	r2, #5
 800b268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26c:	484e      	ldr	r0, [pc, #312]	@ (800b3a8 <_svfiprintf_r+0x1e4>)
 800b26e:	f7f4 ffcf 	bl	8000210 <memchr>
 800b272:	9a04      	ldr	r2, [sp, #16]
 800b274:	b9d8      	cbnz	r0, 800b2ae <_svfiprintf_r+0xea>
 800b276:	06d0      	lsls	r0, r2, #27
 800b278:	bf44      	itt	mi
 800b27a:	2320      	movmi	r3, #32
 800b27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b280:	0711      	lsls	r1, r2, #28
 800b282:	bf44      	itt	mi
 800b284:	232b      	movmi	r3, #43	@ 0x2b
 800b286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b28a:	f89a 3000 	ldrb.w	r3, [sl]
 800b28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b290:	d015      	beq.n	800b2be <_svfiprintf_r+0xfa>
 800b292:	9a07      	ldr	r2, [sp, #28]
 800b294:	4654      	mov	r4, sl
 800b296:	2000      	movs	r0, #0
 800b298:	f04f 0c0a 	mov.w	ip, #10
 800b29c:	4621      	mov	r1, r4
 800b29e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a2:	3b30      	subs	r3, #48	@ 0x30
 800b2a4:	2b09      	cmp	r3, #9
 800b2a6:	d94b      	bls.n	800b340 <_svfiprintf_r+0x17c>
 800b2a8:	b1b0      	cbz	r0, 800b2d8 <_svfiprintf_r+0x114>
 800b2aa:	9207      	str	r2, [sp, #28]
 800b2ac:	e014      	b.n	800b2d8 <_svfiprintf_r+0x114>
 800b2ae:	eba0 0308 	sub.w	r3, r0, r8
 800b2b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	46a2      	mov	sl, r4
 800b2bc:	e7d2      	b.n	800b264 <_svfiprintf_r+0xa0>
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	1d19      	adds	r1, r3, #4
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	9103      	str	r1, [sp, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfbb      	ittet	lt
 800b2ca:	425b      	neglt	r3, r3
 800b2cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b2d0:	9307      	strge	r3, [sp, #28]
 800b2d2:	9307      	strlt	r3, [sp, #28]
 800b2d4:	bfb8      	it	lt
 800b2d6:	9204      	strlt	r2, [sp, #16]
 800b2d8:	7823      	ldrb	r3, [r4, #0]
 800b2da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2dc:	d10a      	bne.n	800b2f4 <_svfiprintf_r+0x130>
 800b2de:	7863      	ldrb	r3, [r4, #1]
 800b2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e2:	d132      	bne.n	800b34a <_svfiprintf_r+0x186>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	1d1a      	adds	r2, r3, #4
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	9203      	str	r2, [sp, #12]
 800b2ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2f0:	3402      	adds	r4, #2
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3b8 <_svfiprintf_r+0x1f4>
 800b2f8:	7821      	ldrb	r1, [r4, #0]
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	4650      	mov	r0, sl
 800b2fe:	f7f4 ff87 	bl	8000210 <memchr>
 800b302:	b138      	cbz	r0, 800b314 <_svfiprintf_r+0x150>
 800b304:	9b04      	ldr	r3, [sp, #16]
 800b306:	eba0 000a 	sub.w	r0, r0, sl
 800b30a:	2240      	movs	r2, #64	@ 0x40
 800b30c:	4082      	lsls	r2, r0
 800b30e:	4313      	orrs	r3, r2
 800b310:	3401      	adds	r4, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	4824      	ldr	r0, [pc, #144]	@ (800b3ac <_svfiprintf_r+0x1e8>)
 800b31a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b31e:	2206      	movs	r2, #6
 800b320:	f7f4 ff76 	bl	8000210 <memchr>
 800b324:	2800      	cmp	r0, #0
 800b326:	d036      	beq.n	800b396 <_svfiprintf_r+0x1d2>
 800b328:	4b21      	ldr	r3, [pc, #132]	@ (800b3b0 <_svfiprintf_r+0x1ec>)
 800b32a:	bb1b      	cbnz	r3, 800b374 <_svfiprintf_r+0x1b0>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	3307      	adds	r3, #7
 800b330:	f023 0307 	bic.w	r3, r3, #7
 800b334:	3308      	adds	r3, #8
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33a:	4433      	add	r3, r6
 800b33c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33e:	e76a      	b.n	800b216 <_svfiprintf_r+0x52>
 800b340:	fb0c 3202 	mla	r2, ip, r2, r3
 800b344:	460c      	mov	r4, r1
 800b346:	2001      	movs	r0, #1
 800b348:	e7a8      	b.n	800b29c <_svfiprintf_r+0xd8>
 800b34a:	2300      	movs	r3, #0
 800b34c:	3401      	adds	r4, #1
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	4619      	mov	r1, r3
 800b352:	f04f 0c0a 	mov.w	ip, #10
 800b356:	4620      	mov	r0, r4
 800b358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35c:	3a30      	subs	r2, #48	@ 0x30
 800b35e:	2a09      	cmp	r2, #9
 800b360:	d903      	bls.n	800b36a <_svfiprintf_r+0x1a6>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0c6      	beq.n	800b2f4 <_svfiprintf_r+0x130>
 800b366:	9105      	str	r1, [sp, #20]
 800b368:	e7c4      	b.n	800b2f4 <_svfiprintf_r+0x130>
 800b36a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36e:	4604      	mov	r4, r0
 800b370:	2301      	movs	r3, #1
 800b372:	e7f0      	b.n	800b356 <_svfiprintf_r+0x192>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	462a      	mov	r2, r5
 800b37a:	4b0e      	ldr	r3, [pc, #56]	@ (800b3b4 <_svfiprintf_r+0x1f0>)
 800b37c:	a904      	add	r1, sp, #16
 800b37e:	4638      	mov	r0, r7
 800b380:	f7fd fe34 	bl	8008fec <_printf_float>
 800b384:	1c42      	adds	r2, r0, #1
 800b386:	4606      	mov	r6, r0
 800b388:	d1d6      	bne.n	800b338 <_svfiprintf_r+0x174>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	065b      	lsls	r3, r3, #25
 800b38e:	f53f af2d 	bmi.w	800b1ec <_svfiprintf_r+0x28>
 800b392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b394:	e72c      	b.n	800b1f0 <_svfiprintf_r+0x2c>
 800b396:	ab03      	add	r3, sp, #12
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	462a      	mov	r2, r5
 800b39c:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <_svfiprintf_r+0x1f0>)
 800b39e:	a904      	add	r1, sp, #16
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	f7fe f8bb 	bl	800951c <_printf_i>
 800b3a6:	e7ed      	b.n	800b384 <_svfiprintf_r+0x1c0>
 800b3a8:	0800c600 	.word	0x0800c600
 800b3ac:	0800c60a 	.word	0x0800c60a
 800b3b0:	08008fed 	.word	0x08008fed
 800b3b4:	0800b10d 	.word	0x0800b10d
 800b3b8:	0800c606 	.word	0x0800c606

0800b3bc <__sflush_r>:
 800b3bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c4:	0716      	lsls	r6, r2, #28
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	d454      	bmi.n	800b476 <__sflush_r+0xba>
 800b3cc:	684b      	ldr	r3, [r1, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	dc02      	bgt.n	800b3d8 <__sflush_r+0x1c>
 800b3d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dd48      	ble.n	800b46a <__sflush_r+0xae>
 800b3d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	d045      	beq.n	800b46a <__sflush_r+0xae>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3e4:	682f      	ldr	r7, [r5, #0]
 800b3e6:	6a21      	ldr	r1, [r4, #32]
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	d030      	beq.n	800b44e <__sflush_r+0x92>
 800b3ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	0759      	lsls	r1, r3, #29
 800b3f2:	d505      	bpl.n	800b400 <__sflush_r+0x44>
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	1ad2      	subs	r2, r2, r3
 800b3f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3fa:	b10b      	cbz	r3, 800b400 <__sflush_r+0x44>
 800b3fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	2300      	movs	r3, #0
 800b402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b404:	6a21      	ldr	r1, [r4, #32]
 800b406:	4628      	mov	r0, r5
 800b408:	47b0      	blx	r6
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	89a3      	ldrh	r3, [r4, #12]
 800b40e:	d106      	bne.n	800b41e <__sflush_r+0x62>
 800b410:	6829      	ldr	r1, [r5, #0]
 800b412:	291d      	cmp	r1, #29
 800b414:	d82b      	bhi.n	800b46e <__sflush_r+0xb2>
 800b416:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c0 <__sflush_r+0x104>)
 800b418:	410a      	asrs	r2, r1
 800b41a:	07d6      	lsls	r6, r2, #31
 800b41c:	d427      	bmi.n	800b46e <__sflush_r+0xb2>
 800b41e:	2200      	movs	r2, #0
 800b420:	6062      	str	r2, [r4, #4]
 800b422:	04d9      	lsls	r1, r3, #19
 800b424:	6922      	ldr	r2, [r4, #16]
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	d504      	bpl.n	800b434 <__sflush_r+0x78>
 800b42a:	1c42      	adds	r2, r0, #1
 800b42c:	d101      	bne.n	800b432 <__sflush_r+0x76>
 800b42e:	682b      	ldr	r3, [r5, #0]
 800b430:	b903      	cbnz	r3, 800b434 <__sflush_r+0x78>
 800b432:	6560      	str	r0, [r4, #84]	@ 0x54
 800b434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b436:	602f      	str	r7, [r5, #0]
 800b438:	b1b9      	cbz	r1, 800b46a <__sflush_r+0xae>
 800b43a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b43e:	4299      	cmp	r1, r3
 800b440:	d002      	beq.n	800b448 <__sflush_r+0x8c>
 800b442:	4628      	mov	r0, r5
 800b444:	f7ff f9e0 	bl	800a808 <_free_r>
 800b448:	2300      	movs	r3, #0
 800b44a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b44c:	e00d      	b.n	800b46a <__sflush_r+0xae>
 800b44e:	2301      	movs	r3, #1
 800b450:	4628      	mov	r0, r5
 800b452:	47b0      	blx	r6
 800b454:	4602      	mov	r2, r0
 800b456:	1c50      	adds	r0, r2, #1
 800b458:	d1c9      	bne.n	800b3ee <__sflush_r+0x32>
 800b45a:	682b      	ldr	r3, [r5, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0c6      	beq.n	800b3ee <__sflush_r+0x32>
 800b460:	2b1d      	cmp	r3, #29
 800b462:	d001      	beq.n	800b468 <__sflush_r+0xac>
 800b464:	2b16      	cmp	r3, #22
 800b466:	d11e      	bne.n	800b4a6 <__sflush_r+0xea>
 800b468:	602f      	str	r7, [r5, #0]
 800b46a:	2000      	movs	r0, #0
 800b46c:	e022      	b.n	800b4b4 <__sflush_r+0xf8>
 800b46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b472:	b21b      	sxth	r3, r3
 800b474:	e01b      	b.n	800b4ae <__sflush_r+0xf2>
 800b476:	690f      	ldr	r7, [r1, #16]
 800b478:	2f00      	cmp	r7, #0
 800b47a:	d0f6      	beq.n	800b46a <__sflush_r+0xae>
 800b47c:	0793      	lsls	r3, r2, #30
 800b47e:	680e      	ldr	r6, [r1, #0]
 800b480:	bf08      	it	eq
 800b482:	694b      	ldreq	r3, [r1, #20]
 800b484:	600f      	str	r7, [r1, #0]
 800b486:	bf18      	it	ne
 800b488:	2300      	movne	r3, #0
 800b48a:	eba6 0807 	sub.w	r8, r6, r7
 800b48e:	608b      	str	r3, [r1, #8]
 800b490:	f1b8 0f00 	cmp.w	r8, #0
 800b494:	dde9      	ble.n	800b46a <__sflush_r+0xae>
 800b496:	6a21      	ldr	r1, [r4, #32]
 800b498:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b49a:	4643      	mov	r3, r8
 800b49c:	463a      	mov	r2, r7
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b0      	blx	r6
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	dc08      	bgt.n	800b4b8 <__sflush_r+0xfc>
 800b4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4ae:	81a3      	strh	r3, [r4, #12]
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b8:	4407      	add	r7, r0
 800b4ba:	eba8 0800 	sub.w	r8, r8, r0
 800b4be:	e7e7      	b.n	800b490 <__sflush_r+0xd4>
 800b4c0:	dfbffffe 	.word	0xdfbffffe

0800b4c4 <_fflush_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	690b      	ldr	r3, [r1, #16]
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	b913      	cbnz	r3, 800b4d4 <_fflush_r+0x10>
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	b118      	cbz	r0, 800b4de <_fflush_r+0x1a>
 800b4d6:	6a03      	ldr	r3, [r0, #32]
 800b4d8:	b90b      	cbnz	r3, 800b4de <_fflush_r+0x1a>
 800b4da:	f7fe f9cb 	bl	8009874 <__sinit>
 800b4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f3      	beq.n	800b4ce <_fflush_r+0xa>
 800b4e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4e8:	07d0      	lsls	r0, r2, #31
 800b4ea:	d404      	bmi.n	800b4f6 <_fflush_r+0x32>
 800b4ec:	0599      	lsls	r1, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_fflush_r+0x32>
 800b4f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4f2:	f7fe fb2c 	bl	8009b4e <__retarget_lock_acquire_recursive>
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	f7ff ff5f 	bl	800b3bc <__sflush_r>
 800b4fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b500:	07da      	lsls	r2, r3, #31
 800b502:	4605      	mov	r5, r0
 800b504:	d4e4      	bmi.n	800b4d0 <_fflush_r+0xc>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	059b      	lsls	r3, r3, #22
 800b50a:	d4e1      	bmi.n	800b4d0 <_fflush_r+0xc>
 800b50c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b50e:	f7fe fb1f 	bl	8009b50 <__retarget_lock_release_recursive>
 800b512:	e7dd      	b.n	800b4d0 <_fflush_r+0xc>

0800b514 <memmove>:
 800b514:	4288      	cmp	r0, r1
 800b516:	b510      	push	{r4, lr}
 800b518:	eb01 0402 	add.w	r4, r1, r2
 800b51c:	d902      	bls.n	800b524 <memmove+0x10>
 800b51e:	4284      	cmp	r4, r0
 800b520:	4623      	mov	r3, r4
 800b522:	d807      	bhi.n	800b534 <memmove+0x20>
 800b524:	1e43      	subs	r3, r0, #1
 800b526:	42a1      	cmp	r1, r4
 800b528:	d008      	beq.n	800b53c <memmove+0x28>
 800b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b532:	e7f8      	b.n	800b526 <memmove+0x12>
 800b534:	4402      	add	r2, r0
 800b536:	4601      	mov	r1, r0
 800b538:	428a      	cmp	r2, r1
 800b53a:	d100      	bne.n	800b53e <memmove+0x2a>
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b546:	e7f7      	b.n	800b538 <memmove+0x24>

0800b548 <_sbrk_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d06      	ldr	r5, [pc, #24]	@ (800b564 <_sbrk_r+0x1c>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7f6 ff16 	bl	8002384 <_sbrk>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_sbrk_r+0x1a>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_sbrk_r+0x1a>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	200128fc 	.word	0x200128fc

0800b568 <__assert_func>:
 800b568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56a:	4614      	mov	r4, r2
 800b56c:	461a      	mov	r2, r3
 800b56e:	4b09      	ldr	r3, [pc, #36]	@ (800b594 <__assert_func+0x2c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4605      	mov	r5, r0
 800b574:	68d8      	ldr	r0, [r3, #12]
 800b576:	b954      	cbnz	r4, 800b58e <__assert_func+0x26>
 800b578:	4b07      	ldr	r3, [pc, #28]	@ (800b598 <__assert_func+0x30>)
 800b57a:	461c      	mov	r4, r3
 800b57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b580:	9100      	str	r1, [sp, #0]
 800b582:	462b      	mov	r3, r5
 800b584:	4905      	ldr	r1, [pc, #20]	@ (800b59c <__assert_func+0x34>)
 800b586:	f000 f86f 	bl	800b668 <fiprintf>
 800b58a:	f000 f87f 	bl	800b68c <abort>
 800b58e:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <__assert_func+0x38>)
 800b590:	e7f4      	b.n	800b57c <__assert_func+0x14>
 800b592:	bf00      	nop
 800b594:	2000002c 	.word	0x2000002c
 800b598:	0800c656 	.word	0x0800c656
 800b59c:	0800c628 	.word	0x0800c628
 800b5a0:	0800c61b 	.word	0x0800c61b

0800b5a4 <_calloc_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	fba1 5402 	umull	r5, r4, r1, r2
 800b5aa:	b93c      	cbnz	r4, 800b5bc <_calloc_r+0x18>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7ff f99f 	bl	800a8f0 <_malloc_r>
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	b928      	cbnz	r0, 800b5c2 <_calloc_r+0x1e>
 800b5b6:	2600      	movs	r6, #0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	220c      	movs	r2, #12
 800b5be:	6002      	str	r2, [r0, #0]
 800b5c0:	e7f9      	b.n	800b5b6 <_calloc_r+0x12>
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7fe f9ee 	bl	80099a6 <memset>
 800b5ca:	e7f5      	b.n	800b5b8 <_calloc_r+0x14>

0800b5cc <__ascii_mbtowc>:
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	b901      	cbnz	r1, 800b5d2 <__ascii_mbtowc+0x6>
 800b5d0:	a901      	add	r1, sp, #4
 800b5d2:	b142      	cbz	r2, 800b5e6 <__ascii_mbtowc+0x1a>
 800b5d4:	b14b      	cbz	r3, 800b5ea <__ascii_mbtowc+0x1e>
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	600b      	str	r3, [r1, #0]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	1e10      	subs	r0, r2, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2001      	movne	r0, #1
 800b5e2:	b002      	add	sp, #8
 800b5e4:	4770      	bx	lr
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	e7fb      	b.n	800b5e2 <__ascii_mbtowc+0x16>
 800b5ea:	f06f 0001 	mvn.w	r0, #1
 800b5ee:	e7f8      	b.n	800b5e2 <__ascii_mbtowc+0x16>

0800b5f0 <_realloc_r>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4615      	mov	r5, r2
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	b921      	cbnz	r1, 800b606 <_realloc_r+0x16>
 800b5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b600:	4611      	mov	r1, r2
 800b602:	f7ff b975 	b.w	800a8f0 <_malloc_r>
 800b606:	b92a      	cbnz	r2, 800b614 <_realloc_r+0x24>
 800b608:	f7ff f8fe 	bl	800a808 <_free_r>
 800b60c:	2400      	movs	r4, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	f000 f841 	bl	800b69a <_malloc_usable_size_r>
 800b618:	4285      	cmp	r5, r0
 800b61a:	4606      	mov	r6, r0
 800b61c:	d802      	bhi.n	800b624 <_realloc_r+0x34>
 800b61e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b622:	d8f4      	bhi.n	800b60e <_realloc_r+0x1e>
 800b624:	4629      	mov	r1, r5
 800b626:	4640      	mov	r0, r8
 800b628:	f7ff f962 	bl	800a8f0 <_malloc_r>
 800b62c:	4607      	mov	r7, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	d0ec      	beq.n	800b60c <_realloc_r+0x1c>
 800b632:	42b5      	cmp	r5, r6
 800b634:	462a      	mov	r2, r5
 800b636:	4621      	mov	r1, r4
 800b638:	bf28      	it	cs
 800b63a:	4632      	movcs	r2, r6
 800b63c:	f7fe fa89 	bl	8009b52 <memcpy>
 800b640:	4621      	mov	r1, r4
 800b642:	4640      	mov	r0, r8
 800b644:	f7ff f8e0 	bl	800a808 <_free_r>
 800b648:	463c      	mov	r4, r7
 800b64a:	e7e0      	b.n	800b60e <_realloc_r+0x1e>

0800b64c <__ascii_wctomb>:
 800b64c:	4603      	mov	r3, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	b141      	cbz	r1, 800b664 <__ascii_wctomb+0x18>
 800b652:	2aff      	cmp	r2, #255	@ 0xff
 800b654:	d904      	bls.n	800b660 <__ascii_wctomb+0x14>
 800b656:	228a      	movs	r2, #138	@ 0x8a
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	4770      	bx	lr
 800b660:	700a      	strb	r2, [r1, #0]
 800b662:	2001      	movs	r0, #1
 800b664:	4770      	bx	lr
	...

0800b668 <fiprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	b503      	push	{r0, r1, lr}
 800b66c:	4601      	mov	r1, r0
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	4805      	ldr	r0, [pc, #20]	@ (800b688 <fiprintf+0x20>)
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6800      	ldr	r0, [r0, #0]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f000 f83f 	bl	800b6fc <_vfiprintf_r>
 800b67e:	b002      	add	sp, #8
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	2000002c 	.word	0x2000002c

0800b68c <abort>:
 800b68c:	b508      	push	{r3, lr}
 800b68e:	2006      	movs	r0, #6
 800b690:	f000 fa08 	bl	800baa4 <raise>
 800b694:	2001      	movs	r0, #1
 800b696:	f7f6 fdfd 	bl	8002294 <_exit>

0800b69a <_malloc_usable_size_r>:
 800b69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69e:	1f18      	subs	r0, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bfbc      	itt	lt
 800b6a4:	580b      	ldrlt	r3, [r1, r0]
 800b6a6:	18c0      	addlt	r0, r0, r3
 800b6a8:	4770      	bx	lr

0800b6aa <__sfputc_r>:
 800b6aa:	6893      	ldr	r3, [r2, #8]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	b410      	push	{r4}
 800b6b2:	6093      	str	r3, [r2, #8]
 800b6b4:	da08      	bge.n	800b6c8 <__sfputc_r+0x1e>
 800b6b6:	6994      	ldr	r4, [r2, #24]
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	db01      	blt.n	800b6c0 <__sfputc_r+0x16>
 800b6bc:	290a      	cmp	r1, #10
 800b6be:	d103      	bne.n	800b6c8 <__sfputc_r+0x1e>
 800b6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c4:	f000 b932 	b.w	800b92c <__swbuf_r>
 800b6c8:	6813      	ldr	r3, [r2, #0]
 800b6ca:	1c58      	adds	r0, r3, #1
 800b6cc:	6010      	str	r0, [r2, #0]
 800b6ce:	7019      	strb	r1, [r3, #0]
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <__sfputs_r>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	4614      	mov	r4, r2
 800b6e0:	18d5      	adds	r5, r2, r3
 800b6e2:	42ac      	cmp	r4, r5
 800b6e4:	d101      	bne.n	800b6ea <__sfputs_r+0x12>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	e007      	b.n	800b6fa <__sfputs_r+0x22>
 800b6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ee:	463a      	mov	r2, r7
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff ffda 	bl	800b6aa <__sfputc_r>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	d1f3      	bne.n	800b6e2 <__sfputs_r+0xa>
 800b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6fc <_vfiprintf_r>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	460d      	mov	r5, r1
 800b702:	b09d      	sub	sp, #116	@ 0x74
 800b704:	4614      	mov	r4, r2
 800b706:	4698      	mov	r8, r3
 800b708:	4606      	mov	r6, r0
 800b70a:	b118      	cbz	r0, 800b714 <_vfiprintf_r+0x18>
 800b70c:	6a03      	ldr	r3, [r0, #32]
 800b70e:	b90b      	cbnz	r3, 800b714 <_vfiprintf_r+0x18>
 800b710:	f7fe f8b0 	bl	8009874 <__sinit>
 800b714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b716:	07d9      	lsls	r1, r3, #31
 800b718:	d405      	bmi.n	800b726 <_vfiprintf_r+0x2a>
 800b71a:	89ab      	ldrh	r3, [r5, #12]
 800b71c:	059a      	lsls	r2, r3, #22
 800b71e:	d402      	bmi.n	800b726 <_vfiprintf_r+0x2a>
 800b720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b722:	f7fe fa14 	bl	8009b4e <__retarget_lock_acquire_recursive>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	071b      	lsls	r3, r3, #28
 800b72a:	d501      	bpl.n	800b730 <_vfiprintf_r+0x34>
 800b72c:	692b      	ldr	r3, [r5, #16]
 800b72e:	b99b      	cbnz	r3, 800b758 <_vfiprintf_r+0x5c>
 800b730:	4629      	mov	r1, r5
 800b732:	4630      	mov	r0, r6
 800b734:	f000 f938 	bl	800b9a8 <__swsetup_r>
 800b738:	b170      	cbz	r0, 800b758 <_vfiprintf_r+0x5c>
 800b73a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b73c:	07dc      	lsls	r4, r3, #31
 800b73e:	d504      	bpl.n	800b74a <_vfiprintf_r+0x4e>
 800b740:	f04f 30ff 	mov.w	r0, #4294967295
 800b744:	b01d      	add	sp, #116	@ 0x74
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	89ab      	ldrh	r3, [r5, #12]
 800b74c:	0598      	lsls	r0, r3, #22
 800b74e:	d4f7      	bmi.n	800b740 <_vfiprintf_r+0x44>
 800b750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b752:	f7fe f9fd 	bl	8009b50 <__retarget_lock_release_recursive>
 800b756:	e7f3      	b.n	800b740 <_vfiprintf_r+0x44>
 800b758:	2300      	movs	r3, #0
 800b75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75c:	2320      	movs	r3, #32
 800b75e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b762:	f8cd 800c 	str.w	r8, [sp, #12]
 800b766:	2330      	movs	r3, #48	@ 0x30
 800b768:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b918 <_vfiprintf_r+0x21c>
 800b76c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b770:	f04f 0901 	mov.w	r9, #1
 800b774:	4623      	mov	r3, r4
 800b776:	469a      	mov	sl, r3
 800b778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77c:	b10a      	cbz	r2, 800b782 <_vfiprintf_r+0x86>
 800b77e:	2a25      	cmp	r2, #37	@ 0x25
 800b780:	d1f9      	bne.n	800b776 <_vfiprintf_r+0x7a>
 800b782:	ebba 0b04 	subs.w	fp, sl, r4
 800b786:	d00b      	beq.n	800b7a0 <_vfiprintf_r+0xa4>
 800b788:	465b      	mov	r3, fp
 800b78a:	4622      	mov	r2, r4
 800b78c:	4629      	mov	r1, r5
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ffa2 	bl	800b6d8 <__sfputs_r>
 800b794:	3001      	adds	r0, #1
 800b796:	f000 80a7 	beq.w	800b8e8 <_vfiprintf_r+0x1ec>
 800b79a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b79c:	445a      	add	r2, fp
 800b79e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 809f 	beq.w	800b8e8 <_vfiprintf_r+0x1ec>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b4:	f10a 0a01 	add.w	sl, sl, #1
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7c2:	4654      	mov	r4, sl
 800b7c4:	2205      	movs	r2, #5
 800b7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ca:	4853      	ldr	r0, [pc, #332]	@ (800b918 <_vfiprintf_r+0x21c>)
 800b7cc:	f7f4 fd20 	bl	8000210 <memchr>
 800b7d0:	9a04      	ldr	r2, [sp, #16]
 800b7d2:	b9d8      	cbnz	r0, 800b80c <_vfiprintf_r+0x110>
 800b7d4:	06d1      	lsls	r1, r2, #27
 800b7d6:	bf44      	itt	mi
 800b7d8:	2320      	movmi	r3, #32
 800b7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7de:	0713      	lsls	r3, r2, #28
 800b7e0:	bf44      	itt	mi
 800b7e2:	232b      	movmi	r3, #43	@ 0x2b
 800b7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7ee:	d015      	beq.n	800b81c <_vfiprintf_r+0x120>
 800b7f0:	9a07      	ldr	r2, [sp, #28]
 800b7f2:	4654      	mov	r4, sl
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f04f 0c0a 	mov.w	ip, #10
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b800:	3b30      	subs	r3, #48	@ 0x30
 800b802:	2b09      	cmp	r3, #9
 800b804:	d94b      	bls.n	800b89e <_vfiprintf_r+0x1a2>
 800b806:	b1b0      	cbz	r0, 800b836 <_vfiprintf_r+0x13a>
 800b808:	9207      	str	r2, [sp, #28]
 800b80a:	e014      	b.n	800b836 <_vfiprintf_r+0x13a>
 800b80c:	eba0 0308 	sub.w	r3, r0, r8
 800b810:	fa09 f303 	lsl.w	r3, r9, r3
 800b814:	4313      	orrs	r3, r2
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	46a2      	mov	sl, r4
 800b81a:	e7d2      	b.n	800b7c2 <_vfiprintf_r+0xc6>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	1d19      	adds	r1, r3, #4
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	9103      	str	r1, [sp, #12]
 800b824:	2b00      	cmp	r3, #0
 800b826:	bfbb      	ittet	lt
 800b828:	425b      	neglt	r3, r3
 800b82a:	f042 0202 	orrlt.w	r2, r2, #2
 800b82e:	9307      	strge	r3, [sp, #28]
 800b830:	9307      	strlt	r3, [sp, #28]
 800b832:	bfb8      	it	lt
 800b834:	9204      	strlt	r2, [sp, #16]
 800b836:	7823      	ldrb	r3, [r4, #0]
 800b838:	2b2e      	cmp	r3, #46	@ 0x2e
 800b83a:	d10a      	bne.n	800b852 <_vfiprintf_r+0x156>
 800b83c:	7863      	ldrb	r3, [r4, #1]
 800b83e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b840:	d132      	bne.n	800b8a8 <_vfiprintf_r+0x1ac>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	1d1a      	adds	r2, r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	9203      	str	r2, [sp, #12]
 800b84a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b84e:	3402      	adds	r4, #2
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b928 <_vfiprintf_r+0x22c>
 800b856:	7821      	ldrb	r1, [r4, #0]
 800b858:	2203      	movs	r2, #3
 800b85a:	4650      	mov	r0, sl
 800b85c:	f7f4 fcd8 	bl	8000210 <memchr>
 800b860:	b138      	cbz	r0, 800b872 <_vfiprintf_r+0x176>
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	eba0 000a 	sub.w	r0, r0, sl
 800b868:	2240      	movs	r2, #64	@ 0x40
 800b86a:	4082      	lsls	r2, r0
 800b86c:	4313      	orrs	r3, r2
 800b86e:	3401      	adds	r4, #1
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4829      	ldr	r0, [pc, #164]	@ (800b91c <_vfiprintf_r+0x220>)
 800b878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b87c:	2206      	movs	r2, #6
 800b87e:	f7f4 fcc7 	bl	8000210 <memchr>
 800b882:	2800      	cmp	r0, #0
 800b884:	d03f      	beq.n	800b906 <_vfiprintf_r+0x20a>
 800b886:	4b26      	ldr	r3, [pc, #152]	@ (800b920 <_vfiprintf_r+0x224>)
 800b888:	bb1b      	cbnz	r3, 800b8d2 <_vfiprintf_r+0x1d6>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	3307      	adds	r3, #7
 800b88e:	f023 0307 	bic.w	r3, r3, #7
 800b892:	3308      	adds	r3, #8
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b898:	443b      	add	r3, r7
 800b89a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89c:	e76a      	b.n	800b774 <_vfiprintf_r+0x78>
 800b89e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	e7a8      	b.n	800b7fa <_vfiprintf_r+0xfe>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	9305      	str	r3, [sp, #20]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f04f 0c0a 	mov.w	ip, #10
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ba:	3a30      	subs	r2, #48	@ 0x30
 800b8bc:	2a09      	cmp	r2, #9
 800b8be:	d903      	bls.n	800b8c8 <_vfiprintf_r+0x1cc>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0c6      	beq.n	800b852 <_vfiprintf_r+0x156>
 800b8c4:	9105      	str	r1, [sp, #20]
 800b8c6:	e7c4      	b.n	800b852 <_vfiprintf_r+0x156>
 800b8c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e7f0      	b.n	800b8b4 <_vfiprintf_r+0x1b8>
 800b8d2:	ab03      	add	r3, sp, #12
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4b12      	ldr	r3, [pc, #72]	@ (800b924 <_vfiprintf_r+0x228>)
 800b8da:	a904      	add	r1, sp, #16
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f7fd fb85 	bl	8008fec <_printf_float>
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	1c78      	adds	r0, r7, #1
 800b8e6:	d1d6      	bne.n	800b896 <_vfiprintf_r+0x19a>
 800b8e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ea:	07d9      	lsls	r1, r3, #31
 800b8ec:	d405      	bmi.n	800b8fa <_vfiprintf_r+0x1fe>
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	059a      	lsls	r2, r3, #22
 800b8f2:	d402      	bmi.n	800b8fa <_vfiprintf_r+0x1fe>
 800b8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8f6:	f7fe f92b 	bl	8009b50 <__retarget_lock_release_recursive>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	065b      	lsls	r3, r3, #25
 800b8fe:	f53f af1f 	bmi.w	800b740 <_vfiprintf_r+0x44>
 800b902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b904:	e71e      	b.n	800b744 <_vfiprintf_r+0x48>
 800b906:	ab03      	add	r3, sp, #12
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	462a      	mov	r2, r5
 800b90c:	4b05      	ldr	r3, [pc, #20]	@ (800b924 <_vfiprintf_r+0x228>)
 800b90e:	a904      	add	r1, sp, #16
 800b910:	4630      	mov	r0, r6
 800b912:	f7fd fe03 	bl	800951c <_printf_i>
 800b916:	e7e4      	b.n	800b8e2 <_vfiprintf_r+0x1e6>
 800b918:	0800c600 	.word	0x0800c600
 800b91c:	0800c60a 	.word	0x0800c60a
 800b920:	08008fed 	.word	0x08008fed
 800b924:	0800b6d9 	.word	0x0800b6d9
 800b928:	0800c606 	.word	0x0800c606

0800b92c <__swbuf_r>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	460e      	mov	r6, r1
 800b930:	4614      	mov	r4, r2
 800b932:	4605      	mov	r5, r0
 800b934:	b118      	cbz	r0, 800b93e <__swbuf_r+0x12>
 800b936:	6a03      	ldr	r3, [r0, #32]
 800b938:	b90b      	cbnz	r3, 800b93e <__swbuf_r+0x12>
 800b93a:	f7fd ff9b 	bl	8009874 <__sinit>
 800b93e:	69a3      	ldr	r3, [r4, #24]
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	071a      	lsls	r2, r3, #28
 800b946:	d501      	bpl.n	800b94c <__swbuf_r+0x20>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	b943      	cbnz	r3, 800b95e <__swbuf_r+0x32>
 800b94c:	4621      	mov	r1, r4
 800b94e:	4628      	mov	r0, r5
 800b950:	f000 f82a 	bl	800b9a8 <__swsetup_r>
 800b954:	b118      	cbz	r0, 800b95e <__swbuf_r+0x32>
 800b956:	f04f 37ff 	mov.w	r7, #4294967295
 800b95a:	4638      	mov	r0, r7
 800b95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	6922      	ldr	r2, [r4, #16]
 800b962:	1a98      	subs	r0, r3, r2
 800b964:	6963      	ldr	r3, [r4, #20]
 800b966:	b2f6      	uxtb	r6, r6
 800b968:	4283      	cmp	r3, r0
 800b96a:	4637      	mov	r7, r6
 800b96c:	dc05      	bgt.n	800b97a <__swbuf_r+0x4e>
 800b96e:	4621      	mov	r1, r4
 800b970:	4628      	mov	r0, r5
 800b972:	f7ff fda7 	bl	800b4c4 <_fflush_r>
 800b976:	2800      	cmp	r0, #0
 800b978:	d1ed      	bne.n	800b956 <__swbuf_r+0x2a>
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	60a3      	str	r3, [r4, #8]
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	6022      	str	r2, [r4, #0]
 800b986:	701e      	strb	r6, [r3, #0]
 800b988:	6962      	ldr	r2, [r4, #20]
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d004      	beq.n	800b99a <__swbuf_r+0x6e>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	07db      	lsls	r3, r3, #31
 800b994:	d5e1      	bpl.n	800b95a <__swbuf_r+0x2e>
 800b996:	2e0a      	cmp	r6, #10
 800b998:	d1df      	bne.n	800b95a <__swbuf_r+0x2e>
 800b99a:	4621      	mov	r1, r4
 800b99c:	4628      	mov	r0, r5
 800b99e:	f7ff fd91 	bl	800b4c4 <_fflush_r>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d0d9      	beq.n	800b95a <__swbuf_r+0x2e>
 800b9a6:	e7d6      	b.n	800b956 <__swbuf_r+0x2a>

0800b9a8 <__swsetup_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4b29      	ldr	r3, [pc, #164]	@ (800ba50 <__swsetup_r+0xa8>)
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	b118      	cbz	r0, 800b9bc <__swsetup_r+0x14>
 800b9b4:	6a03      	ldr	r3, [r0, #32]
 800b9b6:	b90b      	cbnz	r3, 800b9bc <__swsetup_r+0x14>
 800b9b8:	f7fd ff5c 	bl	8009874 <__sinit>
 800b9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c0:	0719      	lsls	r1, r3, #28
 800b9c2:	d422      	bmi.n	800ba0a <__swsetup_r+0x62>
 800b9c4:	06da      	lsls	r2, r3, #27
 800b9c6:	d407      	bmi.n	800b9d8 <__swsetup_r+0x30>
 800b9c8:	2209      	movs	r2, #9
 800b9ca:	602a      	str	r2, [r5, #0]
 800b9cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d6:	e033      	b.n	800ba40 <__swsetup_r+0x98>
 800b9d8:	0758      	lsls	r0, r3, #29
 800b9da:	d512      	bpl.n	800ba02 <__swsetup_r+0x5a>
 800b9dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9de:	b141      	cbz	r1, 800b9f2 <__swsetup_r+0x4a>
 800b9e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9e4:	4299      	cmp	r1, r3
 800b9e6:	d002      	beq.n	800b9ee <__swsetup_r+0x46>
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f7fe ff0d 	bl	800a808 <_free_r>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b9f8:	81a3      	strh	r3, [r4, #12]
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	6063      	str	r3, [r4, #4]
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	f043 0308 	orr.w	r3, r3, #8
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	b94b      	cbnz	r3, 800ba22 <__swsetup_r+0x7a>
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba18:	d003      	beq.n	800ba22 <__swsetup_r+0x7a>
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 f883 	bl	800bb28 <__smakebuf_r>
 800ba22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba26:	f013 0201 	ands.w	r2, r3, #1
 800ba2a:	d00a      	beq.n	800ba42 <__swsetup_r+0x9a>
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	60a2      	str	r2, [r4, #8]
 800ba30:	6962      	ldr	r2, [r4, #20]
 800ba32:	4252      	negs	r2, r2
 800ba34:	61a2      	str	r2, [r4, #24]
 800ba36:	6922      	ldr	r2, [r4, #16]
 800ba38:	b942      	cbnz	r2, 800ba4c <__swsetup_r+0xa4>
 800ba3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba3e:	d1c5      	bne.n	800b9cc <__swsetup_r+0x24>
 800ba40:	bd38      	pop	{r3, r4, r5, pc}
 800ba42:	0799      	lsls	r1, r3, #30
 800ba44:	bf58      	it	pl
 800ba46:	6962      	ldrpl	r2, [r4, #20]
 800ba48:	60a2      	str	r2, [r4, #8]
 800ba4a:	e7f4      	b.n	800ba36 <__swsetup_r+0x8e>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e7f7      	b.n	800ba40 <__swsetup_r+0x98>
 800ba50:	2000002c 	.word	0x2000002c

0800ba54 <_raise_r>:
 800ba54:	291f      	cmp	r1, #31
 800ba56:	b538      	push	{r3, r4, r5, lr}
 800ba58:	4605      	mov	r5, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	d904      	bls.n	800ba68 <_raise_r+0x14>
 800ba5e:	2316      	movs	r3, #22
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	f04f 30ff 	mov.w	r0, #4294967295
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba6a:	b112      	cbz	r2, 800ba72 <_raise_r+0x1e>
 800ba6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba70:	b94b      	cbnz	r3, 800ba86 <_raise_r+0x32>
 800ba72:	4628      	mov	r0, r5
 800ba74:	f000 f830 	bl	800bad8 <_getpid_r>
 800ba78:	4622      	mov	r2, r4
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba82:	f000 b817 	b.w	800bab4 <_kill_r>
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d00a      	beq.n	800baa0 <_raise_r+0x4c>
 800ba8a:	1c59      	adds	r1, r3, #1
 800ba8c:	d103      	bne.n	800ba96 <_raise_r+0x42>
 800ba8e:	2316      	movs	r3, #22
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	2001      	movs	r0, #1
 800ba94:	e7e7      	b.n	800ba66 <_raise_r+0x12>
 800ba96:	2100      	movs	r1, #0
 800ba98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4798      	blx	r3
 800baa0:	2000      	movs	r0, #0
 800baa2:	e7e0      	b.n	800ba66 <_raise_r+0x12>

0800baa4 <raise>:
 800baa4:	4b02      	ldr	r3, [pc, #8]	@ (800bab0 <raise+0xc>)
 800baa6:	4601      	mov	r1, r0
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	f7ff bfd3 	b.w	800ba54 <_raise_r>
 800baae:	bf00      	nop
 800bab0:	2000002c 	.word	0x2000002c

0800bab4 <_kill_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	@ (800bad4 <_kill_r+0x20>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	4611      	mov	r1, r2
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f7f6 fbd7 	bl	8002274 <_kill>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	d102      	bne.n	800bad0 <_kill_r+0x1c>
 800baca:	682b      	ldr	r3, [r5, #0]
 800bacc:	b103      	cbz	r3, 800bad0 <_kill_r+0x1c>
 800bace:	6023      	str	r3, [r4, #0]
 800bad0:	bd38      	pop	{r3, r4, r5, pc}
 800bad2:	bf00      	nop
 800bad4:	200128fc 	.word	0x200128fc

0800bad8 <_getpid_r>:
 800bad8:	f7f6 bbc4 	b.w	8002264 <_getpid>

0800badc <__swhatbuf_r>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	460c      	mov	r4, r1
 800bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae4:	2900      	cmp	r1, #0
 800bae6:	b096      	sub	sp, #88	@ 0x58
 800bae8:	4615      	mov	r5, r2
 800baea:	461e      	mov	r6, r3
 800baec:	da0d      	bge.n	800bb0a <__swhatbuf_r+0x2e>
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800baf4:	f04f 0100 	mov.w	r1, #0
 800baf8:	bf14      	ite	ne
 800bafa:	2340      	movne	r3, #64	@ 0x40
 800bafc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb00:	2000      	movs	r0, #0
 800bb02:	6031      	str	r1, [r6, #0]
 800bb04:	602b      	str	r3, [r5, #0]
 800bb06:	b016      	add	sp, #88	@ 0x58
 800bb08:	bd70      	pop	{r4, r5, r6, pc}
 800bb0a:	466a      	mov	r2, sp
 800bb0c:	f000 f848 	bl	800bba0 <_fstat_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	dbec      	blt.n	800baee <__swhatbuf_r+0x12>
 800bb14:	9901      	ldr	r1, [sp, #4]
 800bb16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb1e:	4259      	negs	r1, r3
 800bb20:	4159      	adcs	r1, r3
 800bb22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb26:	e7eb      	b.n	800bb00 <__swhatbuf_r+0x24>

0800bb28 <__smakebuf_r>:
 800bb28:	898b      	ldrh	r3, [r1, #12]
 800bb2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb2c:	079d      	lsls	r5, r3, #30
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460c      	mov	r4, r1
 800bb32:	d507      	bpl.n	800bb44 <__smakebuf_r+0x1c>
 800bb34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	6123      	str	r3, [r4, #16]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	6163      	str	r3, [r4, #20]
 800bb40:	b003      	add	sp, #12
 800bb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb44:	ab01      	add	r3, sp, #4
 800bb46:	466a      	mov	r2, sp
 800bb48:	f7ff ffc8 	bl	800badc <__swhatbuf_r>
 800bb4c:	9f00      	ldr	r7, [sp, #0]
 800bb4e:	4605      	mov	r5, r0
 800bb50:	4639      	mov	r1, r7
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7fe fecc 	bl	800a8f0 <_malloc_r>
 800bb58:	b948      	cbnz	r0, 800bb6e <__smakebuf_r+0x46>
 800bb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5e:	059a      	lsls	r2, r3, #22
 800bb60:	d4ee      	bmi.n	800bb40 <__smakebuf_r+0x18>
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	f043 0302 	orr.w	r3, r3, #2
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	e7e2      	b.n	800bb34 <__smakebuf_r+0xc>
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	6020      	str	r0, [r4, #0]
 800bb72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb7e:	b15b      	cbz	r3, 800bb98 <__smakebuf_r+0x70>
 800bb80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb84:	4630      	mov	r0, r6
 800bb86:	f000 f81d 	bl	800bbc4 <_isatty_r>
 800bb8a:	b128      	cbz	r0, 800bb98 <__smakebuf_r+0x70>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	f043 0301 	orr.w	r3, r3, #1
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	431d      	orrs	r5, r3
 800bb9c:	81a5      	strh	r5, [r4, #12]
 800bb9e:	e7cf      	b.n	800bb40 <__smakebuf_r+0x18>

0800bba0 <_fstat_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4d07      	ldr	r5, [pc, #28]	@ (800bbc0 <_fstat_r+0x20>)
 800bba4:	2300      	movs	r3, #0
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	602b      	str	r3, [r5, #0]
 800bbae:	f7f6 fbc1 	bl	8002334 <_fstat>
 800bbb2:	1c43      	adds	r3, r0, #1
 800bbb4:	d102      	bne.n	800bbbc <_fstat_r+0x1c>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	b103      	cbz	r3, 800bbbc <_fstat_r+0x1c>
 800bbba:	6023      	str	r3, [r4, #0]
 800bbbc:	bd38      	pop	{r3, r4, r5, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200128fc 	.word	0x200128fc

0800bbc4 <_isatty_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d06      	ldr	r5, [pc, #24]	@ (800bbe0 <_isatty_r+0x1c>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	f7f6 fbc0 	bl	8002354 <_isatty>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_isatty_r+0x1a>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_isatty_r+0x1a>
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	200128fc 	.word	0x200128fc

0800bbe4 <atan2f>:
 800bbe4:	f000 b800 	b.w	800bbe8 <__ieee754_atan2f>

0800bbe8 <__ieee754_atan2f>:
 800bbe8:	ee10 2a90 	vmov	r2, s1
 800bbec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bbf0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	eef0 7a40 	vmov.f32	s15, s0
 800bbfa:	d806      	bhi.n	800bc0a <__ieee754_atan2f+0x22>
 800bbfc:	ee10 0a10 	vmov	r0, s0
 800bc00:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bc04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc08:	d904      	bls.n	800bc14 <__ieee754_atan2f+0x2c>
 800bc0a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bc0e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc12:	bd10      	pop	{r4, pc}
 800bc14:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bc18:	d103      	bne.n	800bc22 <__ieee754_atan2f+0x3a>
 800bc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc1e:	f000 b883 	b.w	800bd28 <atanf>
 800bc22:	1794      	asrs	r4, r2, #30
 800bc24:	f004 0402 	and.w	r4, r4, #2
 800bc28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bc2c:	b943      	cbnz	r3, 800bc40 <__ieee754_atan2f+0x58>
 800bc2e:	2c02      	cmp	r4, #2
 800bc30:	d05e      	beq.n	800bcf0 <__ieee754_atan2f+0x108>
 800bc32:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bd04 <__ieee754_atan2f+0x11c>
 800bc36:	2c03      	cmp	r4, #3
 800bc38:	bf08      	it	eq
 800bc3a:	eef0 7a47 	vmoveq.f32	s15, s14
 800bc3e:	e7e6      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bc40:	b941      	cbnz	r1, 800bc54 <__ieee754_atan2f+0x6c>
 800bc42:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bd08 <__ieee754_atan2f+0x120>
 800bc46:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bd0c <__ieee754_atan2f+0x124>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	bfb8      	it	lt
 800bc4e:	eef0 7a47 	vmovlt.f32	s15, s14
 800bc52:	e7dc      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bc54:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc58:	d110      	bne.n	800bc7c <__ieee754_atan2f+0x94>
 800bc5a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc62:	d107      	bne.n	800bc74 <__ieee754_atan2f+0x8c>
 800bc64:	2c02      	cmp	r4, #2
 800bc66:	d846      	bhi.n	800bcf6 <__ieee754_atan2f+0x10e>
 800bc68:	4b29      	ldr	r3, [pc, #164]	@ (800bd10 <__ieee754_atan2f+0x128>)
 800bc6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc6e:	edd3 7a00 	vldr	s15, [r3]
 800bc72:	e7cc      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bc74:	2c02      	cmp	r4, #2
 800bc76:	d841      	bhi.n	800bcfc <__ieee754_atan2f+0x114>
 800bc78:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <__ieee754_atan2f+0x12c>)
 800bc7a:	e7f6      	b.n	800bc6a <__ieee754_atan2f+0x82>
 800bc7c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc80:	d0df      	beq.n	800bc42 <__ieee754_atan2f+0x5a>
 800bc82:	1a5b      	subs	r3, r3, r1
 800bc84:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800bc88:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bc8c:	da1a      	bge.n	800bcc4 <__ieee754_atan2f+0xdc>
 800bc8e:	2a00      	cmp	r2, #0
 800bc90:	da01      	bge.n	800bc96 <__ieee754_atan2f+0xae>
 800bc92:	313c      	adds	r1, #60	@ 0x3c
 800bc94:	db19      	blt.n	800bcca <__ieee754_atan2f+0xe2>
 800bc96:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bc9a:	f000 f919 	bl	800bed0 <fabsf>
 800bc9e:	f000 f843 	bl	800bd28 <atanf>
 800bca2:	eef0 7a40 	vmov.f32	s15, s0
 800bca6:	2c01      	cmp	r4, #1
 800bca8:	d012      	beq.n	800bcd0 <__ieee754_atan2f+0xe8>
 800bcaa:	2c02      	cmp	r4, #2
 800bcac:	d017      	beq.n	800bcde <__ieee754_atan2f+0xf6>
 800bcae:	2c00      	cmp	r4, #0
 800bcb0:	d0ad      	beq.n	800bc0e <__ieee754_atan2f+0x26>
 800bcb2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bd18 <__ieee754_atan2f+0x130>
 800bcb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bd1c <__ieee754_atan2f+0x134>
 800bcbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcc2:	e7a4      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bcc4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800bd08 <__ieee754_atan2f+0x120>
 800bcc8:	e7ed      	b.n	800bca6 <__ieee754_atan2f+0xbe>
 800bcca:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bd20 <__ieee754_atan2f+0x138>
 800bcce:	e7ea      	b.n	800bca6 <__ieee754_atan2f+0xbe>
 800bcd0:	ee17 3a90 	vmov	r3, s15
 800bcd4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bcd8:	ee07 3a90 	vmov	s15, r3
 800bcdc:	e797      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bcde:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bd18 <__ieee754_atan2f+0x130>
 800bce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bce6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bd1c <__ieee754_atan2f+0x134>
 800bcea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcee:	e78e      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bcf0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bd1c <__ieee754_atan2f+0x134>
 800bcf4:	e78b      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bcf6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bd24 <__ieee754_atan2f+0x13c>
 800bcfa:	e788      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bcfc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bd20 <__ieee754_atan2f+0x138>
 800bd00:	e785      	b.n	800bc0e <__ieee754_atan2f+0x26>
 800bd02:	bf00      	nop
 800bd04:	c0490fdb 	.word	0xc0490fdb
 800bd08:	3fc90fdb 	.word	0x3fc90fdb
 800bd0c:	bfc90fdb 	.word	0xbfc90fdb
 800bd10:	0800c764 	.word	0x0800c764
 800bd14:	0800c758 	.word	0x0800c758
 800bd18:	33bbbd2e 	.word	0x33bbbd2e
 800bd1c:	40490fdb 	.word	0x40490fdb
 800bd20:	00000000 	.word	0x00000000
 800bd24:	3f490fdb 	.word	0x3f490fdb

0800bd28 <atanf>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	ee10 5a10 	vmov	r5, s0
 800bd2e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bd32:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800bd36:	eef0 7a40 	vmov.f32	s15, s0
 800bd3a:	d310      	bcc.n	800bd5e <atanf+0x36>
 800bd3c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bd40:	d904      	bls.n	800bd4c <atanf+0x24>
 800bd42:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bd46:	eeb0 0a67 	vmov.f32	s0, s15
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800be84 <atanf+0x15c>
 800bd50:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800be88 <atanf+0x160>
 800bd54:	2d00      	cmp	r5, #0
 800bd56:	bfc8      	it	gt
 800bd58:	eef0 7a47 	vmovgt.f32	s15, s14
 800bd5c:	e7f3      	b.n	800bd46 <atanf+0x1e>
 800bd5e:	4b4b      	ldr	r3, [pc, #300]	@ (800be8c <atanf+0x164>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d810      	bhi.n	800bd86 <atanf+0x5e>
 800bd64:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bd68:	d20a      	bcs.n	800bd80 <atanf+0x58>
 800bd6a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800be90 <atanf+0x168>
 800bd6e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bd72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7e:	dce2      	bgt.n	800bd46 <atanf+0x1e>
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295
 800bd84:	e013      	b.n	800bdae <atanf+0x86>
 800bd86:	f000 f8a3 	bl	800bed0 <fabsf>
 800bd8a:	4b42      	ldr	r3, [pc, #264]	@ (800be94 <atanf+0x16c>)
 800bd8c:	429c      	cmp	r4, r3
 800bd8e:	d84f      	bhi.n	800be30 <atanf+0x108>
 800bd90:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bd94:	429c      	cmp	r4, r3
 800bd96:	d841      	bhi.n	800be1c <atanf+0xf4>
 800bd98:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bd9c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bda0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bda4:	2300      	movs	r3, #0
 800bda6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bdaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bdb4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800be98 <atanf+0x170>
 800bdb8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800be9c <atanf+0x174>
 800bdbc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bea0 <atanf+0x178>
 800bdc0:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bdc4:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bdc8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bea4 <atanf+0x17c>
 800bdcc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bdd0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bea8 <atanf+0x180>
 800bdd4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bdd8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800beac <atanf+0x184>
 800bddc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bde0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800beb0 <atanf+0x188>
 800bde4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bde8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800beb4 <atanf+0x18c>
 800bdec:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bdf0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800beb8 <atanf+0x190>
 800bdf4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bdf8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bebc <atanf+0x194>
 800bdfc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800be00:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bec0 <atanf+0x198>
 800be04:	eea5 7a26 	vfma.f32	s14, s10, s13
 800be08:	ee27 7a26 	vmul.f32	s14, s14, s13
 800be0c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800be10:	ee27 7a87 	vmul.f32	s14, s15, s14
 800be14:	d121      	bne.n	800be5a <atanf+0x132>
 800be16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be1a:	e794      	b.n	800bd46 <atanf+0x1e>
 800be1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800be20:	ee30 7a67 	vsub.f32	s14, s0, s15
 800be24:	ee30 0a27 	vadd.f32	s0, s0, s15
 800be28:	2301      	movs	r3, #1
 800be2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800be2e:	e7be      	b.n	800bdae <atanf+0x86>
 800be30:	4b24      	ldr	r3, [pc, #144]	@ (800bec4 <atanf+0x19c>)
 800be32:	429c      	cmp	r4, r3
 800be34:	d80b      	bhi.n	800be4e <atanf+0x126>
 800be36:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800be3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be3e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800be42:	2302      	movs	r3, #2
 800be44:	ee70 6a67 	vsub.f32	s13, s0, s15
 800be48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be4c:	e7af      	b.n	800bdae <atanf+0x86>
 800be4e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800be52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800be56:	2303      	movs	r3, #3
 800be58:	e7a9      	b.n	800bdae <atanf+0x86>
 800be5a:	4a1b      	ldr	r2, [pc, #108]	@ (800bec8 <atanf+0x1a0>)
 800be5c:	491b      	ldr	r1, [pc, #108]	@ (800becc <atanf+0x1a4>)
 800be5e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800be62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800be66:	edd3 6a00 	vldr	s13, [r3]
 800be6a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800be6e:	2d00      	cmp	r5, #0
 800be70:	ee37 7a67 	vsub.f32	s14, s14, s15
 800be74:	edd2 7a00 	vldr	s15, [r2]
 800be78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be7c:	bfb8      	it	lt
 800be7e:	eef1 7a67 	vneglt.f32	s15, s15
 800be82:	e760      	b.n	800bd46 <atanf+0x1e>
 800be84:	bfc90fdb 	.word	0xbfc90fdb
 800be88:	3fc90fdb 	.word	0x3fc90fdb
 800be8c:	3edfffff 	.word	0x3edfffff
 800be90:	7149f2ca 	.word	0x7149f2ca
 800be94:	3f97ffff 	.word	0x3f97ffff
 800be98:	3c8569d7 	.word	0x3c8569d7
 800be9c:	3d4bda59 	.word	0x3d4bda59
 800bea0:	bd6ef16b 	.word	0xbd6ef16b
 800bea4:	3d886b35 	.word	0x3d886b35
 800bea8:	3dba2e6e 	.word	0x3dba2e6e
 800beac:	3e124925 	.word	0x3e124925
 800beb0:	3eaaaaab 	.word	0x3eaaaaab
 800beb4:	bd15a221 	.word	0xbd15a221
 800beb8:	bd9d8795 	.word	0xbd9d8795
 800bebc:	bde38e38 	.word	0xbde38e38
 800bec0:	be4ccccd 	.word	0xbe4ccccd
 800bec4:	401bffff 	.word	0x401bffff
 800bec8:	0800c780 	.word	0x0800c780
 800becc:	0800c770 	.word	0x0800c770

0800bed0 <fabsf>:
 800bed0:	ee10 3a10 	vmov	r3, s0
 800bed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bed8:	ee00 3a10 	vmov	s0, r3
 800bedc:	4770      	bx	lr
	...

0800bee0 <_init>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	bf00      	nop
 800bee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee6:	bc08      	pop	{r3}
 800bee8:	469e      	mov	lr, r3
 800beea:	4770      	bx	lr

0800beec <_fini>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr
